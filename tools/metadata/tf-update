#!/bin/bash

set -e

if [ "$#" == 0 ]; then
    __sync=true
    __build=true
    __update=true
else
    while test $# -gt 0
    do
        case "$1" in
            sync) __sync=true;;
            build) __build=true;;
            update) __update=true;;
        esac
        shift
    done
fi

root=$(cd $(dirname ${0})/../..; pwd)
build=${root}/build
node_modules=${root}/node_modules
src=${root}/src
tools=${root}/tools
third_party=${root}/third_party

python=${python:-python}
pip=${pip:-pip}

identifier=tensorflow

if [ ${__sync} ]; then
    repository=https://github.com/tensorflow/${identifier}.git
    mkdir -p ${third_party}
    if [ -d "${third_party}/${identifier}" ]; then
        git -C "${third_party}/${identifier}" fetch -p
        git -C "${third_party}/${identifier}" reset --hard origin/master
    else
        echo "Clone ${repository}..."
        git -C "${third_party}" clone --recursive ${repository}
    fi
fi

if [ ${__update} ]; then
    echo "Generate 'tf.js'"
    ${node_modules}/protobufjs/bin/pbjs -t static-module -w closure --no-encode --no-delimited --no-comments --keep-case --decode-text -r tf -o ${src}/tf-proto.js \
        ${third_party}/${identifier}/tensorflow/core/protobuf/saved_model.proto \
        ${third_party}/${identifier}/tensorflow/core/protobuf/meta_graph.proto \
        ${third_party}/${identifier}/tensorflow/core/protobuf/saver.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/graph.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/op_def.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/tensor_shape.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/types.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/node_def.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/versions.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/function.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/attr_value.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/tensor.proto \
        ${third_party}/${identifier}/tensorflow/core/framework/resource_handle.proto
fi

echo "Install protobuf"
virtualenv=${build}/virtualenv/${identifier}
if [ ${__build} ]; then
    virtualenv -p ${python} ${virtualenv}
fi
if [ -f ${virtualenv}/bin/activate ]; then
    source ${virtualenv}/bin/activate
fi
if [ ${__build} ]; then
    ${pip} install --quiet protobuf
fi

if [ ${__update} ]; then
    echo "Generate 'tf-metadata.json'"
    protoc --proto_path ${third_party}/${identifier} tensorflow/core/framework/attr_value.proto --python_out=${tools}/metadata
    protoc --proto_path ${third_party}/${identifier} tensorflow/core/framework/tensor.proto --python_out=${tools}/metadata
    protoc --proto_path ${third_party}/${identifier} tensorflow/core/framework/types.proto --python_out=${tools}/metadata
    protoc --proto_path ${third_party}/${identifier} tensorflow/core/framework/tensor_shape.proto --python_out=${tools}/metadata
    protoc --proto_path ${third_party}/${identifier} tensorflow/core/framework/resource_handle.proto --python_out=${tools}/metadata
    protoc --proto_path ${third_party}/${identifier} tensorflow/core/framework/api_def.proto --python_out=${tools}/metadata
    protoc --proto_path ${third_party}/${identifier} tensorflow/core/framework/op_def.proto --python_out=${tools}/metadata
    touch ${tools}/metadata/tensorflow/__init__.py
    touch ${tools}/metadata/tensorflow/core/__init__.py
    touch ${tools}/metadata/tensorflow/core/framework/__init__.py
    pushd ${tools}/metadata > /dev/null
    ${python} tf-metadata.py
    popd > /dev/null
    rm -rf ${tools}/metadata/tensorflow
fi

if [ -f ${virtualenv}/bin/activate ]; then
    deactivate
fi
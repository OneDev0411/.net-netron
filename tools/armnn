#!/bin/bash

set -e
pushd $(cd $(dirname ${0})/..; pwd) > /dev/null

bold() {
    echo "$(tty -s && tput bold)$1$(tty -s && tput sgr0)" 
}

clean() {
    bold "armnn clean"
    rm -rf ./third_party/armnn
}

sync() {
    bold "armnn sync"
    mkdir -p "./third_party"
    if [ -d "./third_party/armnn" ]; then
        git -C "./third_party/armnn" pull --quiet --prune
    else
        git -C "./third_party" clone --quiet --branch master --recursive https://github.com/ARM-software/armnn.git
    fi
}

schema() {
    bold "armnn schema"
    case "${OSTYPE}" in
        linux*)
            flatc_version=$(curl -s https://api.github.com/repos/google/flatbuffers/releases/latest | grep tag_name | cut -f 2 -d : | cut -f 2 -d '"')
            flatc_dir=$(dirname $(mktemp -u))/flatbuffers/${flatc_version}
            if [ ! -f "${flatc_dir}/flatc" ]; then
                mkdir -p "${flatc_dir}"
                pushd "${flatc_dir}" > /dev/null
                curl -sL https://github.com/google/flatbuffers/archive/${flatc_version}.tar.gz | tar zx --strip-components 1
                cmake -G "Unix Makefiles" . &> /dev/null
                make > /dev/null
                popd > /dev/null
            fi
            flatc=${flatc_dir}/flatc
            ;;
        darwin*)
            brew list flatbuffers > /dev/null 2>&1 || brew install flatbuffers > /dev/null
            flatc=flatc
            ;;
        msys*)
            flatc_version=$(curl -s https://api.github.com/repos/google/flatbuffers/releases/latest | grep tag_name | cut -f 2 -d : | cut -f 2 -d '"')
            flatc_dir=$(dirname $(mktemp -u))/flatbuffers/${flatc_version}
            if [ ! -f "${flatc_dir}/flatc.exe" ]; then
                mkdir -p "${flatc_dir}"
                pushd "${flatc_dir}" > /dev/null
                curl -sL -O https://github.com/google/flatbuffers/releases/download/${flatc_version}/flatc_windows_exe.zip
                unzip flatc_windows_exe.zip > /dev/null
                popd > /dev/null
            fi
            flatc=${flatc_dir}/flatc.exe
            ;;
    esac
    [[ $(grep -U $'\x0D' ./src/armnn-schema.js) ]] && crlf=1
    ${flatc} --no-js-exports -o ./tools/. --js ./third_party/armnn/src/armnnSerializer/ArmnnSchema.fbs
    mv ./tools/ArmnnSchema_generated.js ./src/armnn-schema.js
    cat <<EOT >> ./src/armnn-schema.js
if (typeof module !== 'undefined' && typeof module.exports === 'object') {
  module.exports = armnnSerializer;
}
EOT
    if [[ -n ${crlf} ]]; then
        unix2dos --quiet --newfile ./src/armnn-schema.js ./src/armnn-schema.js
    fi
}

while [ "$#" != 0 ]; do
    command="$1" && shift
    case "${command}" in
        "clean") clean;;
        "sync") sync;;
        "schema") schema;;
    esac
done

#!/bin/bash


root=$(cd $(dirname ${0})/..; pwd)
build=${root}/build
src=${root}/src
tools=${root}/tools
third_party=${root}/third_party

identifier=tflite
virtualenv=${build}/virtualenv/${identifier}

python="python"
pip="pip"

bold() {
    echo "$(tty -s && tput bold)$1$(tty -s && tput sgr0)" 
}

git_sync () {
    mkdir -p "${third_party}"
    if [ -d "${third_party}/${1}" ]; then
        git -C "${third_party}/${1}" fetch --quiet -q
        git -C "${third_party}/${1}" reset --quiet --hard origin/master
    else
        git -C "${third_party}" clone --quiet --recursive ${2}
    fi
}

clean() {
    bold "tflite clean"
    rm -rf ${virtualenv}
    rm -rf ${third_party}/tensorflow
}

sync() {
    bold "tflite sync"
    git_sync flatbuffers https://github.com/google/flatbuffers.git
    git_sync tensorflow https://github.com/tensorflow/tensorflow.git
}

install() {
    bold "flatbuffers install"
    case "$(uname)" in
        "Linux")
            if [ -z "$(which cmake)" ]; then
                sudo apt install cmake
            fi
            ;;
        "Darwin")
            if [ -z "$(which cmake)" ]; then
                brew install cmake
            fi
            ;;
    esac
    echo "Build flatbuffers..."
    pushd "${third_party}/flatbuffers" > /dev/null
    cmake -G "Unix Makefiles"
    make
    popd > /dev/null
    if [ ! -d "${virtualenv}" ]; then
        virtualenv --quiet -p ${python} ${virtualenv}
    fi
}

schema() {
    bold "tflite schema"
    cp ${third_party}/tensorflow/tensorflow/lite/schema/schema.fbs ${tools}/tflite.schema.fbs
    sed -i 's/namespace tflite\;/namespace tflite_schema\;/' ${tools}/tflite.schema.fbs
    ${third_party}/flatbuffers/flatc --no-js-exports --js ${tools}/tflite.schema.fbs
    mv ./tflite.schema_generated.js ${src}/tflite-schema.js
    rm ${tools}/tflite.schema.fbs
cat <<EOT >> ${src}/tflite-schema.js
if (typeof module !== 'undefined' && typeof module.exports === 'object') {
    module.exports = tflite_schema;
}
EOT
}

visualize() {
    bold "tflite visualize"
    source ${virtualenv}/bin/activate
    ${pip} install --quiet tensorflow
    ${python} ${third_party}/tensorflow/tensorflow/lite/tools/visualize.py $@
    deactivate
}

while [ "$#" != 0 ]; do
    command="$1" && shift
    case "${command}" in
        "clean") clean;;
        "sync") sync;;
        "install") install;;
        "schema") schema;;
        "visualize") visualize ${1} ${2} && shift && shift;;
    esac
done

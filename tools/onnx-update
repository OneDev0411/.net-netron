#!/bin/bash

set -e

root=$(cd $(dirname ${0})/..; pwd)
build=${root}/build
node_modules=${root}/node_modules
src=${root}/src
third_party=${root}/third_party
tools=${root}/tools

python=${python:-python}
pip=${pip:-pip}

identifier=onnx
repository=https://github.com/onnx/${identifier}.git

mkdir -p ${third_party}

if [ -d "${third_party}/${identifier}" ]; then
    git -C "${third_party}/${identifier}" fetch -p
    git -C "${third_party}/${identifier}" reset --hard origin/master
else
    echo "Clone ${repository}..."
    git -C "${third_party}" clone --recursive ${repository}
fi


echo "Install ONNX"
export PYTHONUSERBASE=${build}/third_party/pypi/${identifier}
export PATH=$PATH:${PYTHONUSERBASE}/bin
rm -rf ${PYTHONUSERBASE}
export ONNX_ML=1
export ONNX_NAMESPACE=onnx
${pip} install --user ${third_party}/${identifier}

echo "Generate '../src/onnx-metadata.json'"
pushd ${tools} > /dev/null
${python} onnx-metadata.py
popd > /dev/null

echo "Generate '../src/onnx.js'"
${node_modules}/protobufjs/bin/pbjs -t static-module -w closure -r onnx -o ${src}/onnx.js ${third_party}/${identifier}/onnx/onnx-ml.proto ${third_party}/${identifier}/onnx/onnx-operators-ml.proto
node ${tools}/update_pbjs.js array ${src}/onnx.js floatData float 1
node ${tools}/update_pbjs.js array ${src}/onnx.js doubleData double 1

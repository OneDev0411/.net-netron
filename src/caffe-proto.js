/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function($protobuf) {
    "use strict";

    var $Reader = $protobuf.Reader, $TextReader = $protobuf.TextReader, $util = $protobuf.util;
    
    var $root = $protobuf.roots.caffe || ($protobuf.roots.caffe = {});
    
    $root.caffe = (function() {
    
        var caffe = {};
    
        caffe.BlobShape = (function() {
    
            function BlobShape(properties) {
                this.dim = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BlobShape.prototype.dim = $util.emptyArray;
    
            BlobShape.create = function create(properties) {
                return new BlobShape(properties);
            };
    
            BlobShape.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BlobShape();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.dim && message.dim.length))
                            message.dim = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.dim.push(reader.int64());
                        } else
                            message.dim.push(reader.int64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BlobShape.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BlobShape();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "dim":
                        if (!(message.dim && message.dim.length))
                            message.dim = [];
                        message.dim.push(reader.int64());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BlobShape.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.dim != null && message.hasOwnProperty("dim")) {
                    if (!Array.isArray(message.dim))
                        return "dim: array expected";
                    for (var i = 0; i < message.dim.length; ++i)
                        if (!$util.isInteger(message.dim[i]) && !(message.dim[i] && $util.isInteger(message.dim[i].low) && $util.isInteger(message.dim[i].high)))
                            return "dim: integer|Long[] expected";
                }
                return null;
            };
    
            BlobShape.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BlobShape)
                    return object;
                var message = new $root.caffe.BlobShape();
                if (object.dim) {
                    if (!Array.isArray(object.dim))
                        throw TypeError(".caffe.BlobShape.dim: array expected");
                    message.dim = [];
                    for (var i = 0; i < object.dim.length; ++i)
                        if ($util.Long)
                            (message.dim[i] = $util.Long.fromValue(object.dim[i])).unsigned = false;
                        else if (typeof object.dim[i] === "string")
                            message.dim[i] = parseInt(object.dim[i], 10);
                        else if (typeof object.dim[i] === "number")
                            message.dim[i] = object.dim[i];
                        else if (typeof object.dim[i] === "object")
                            message.dim[i] = new $util.LongBits(object.dim[i].low >>> 0, object.dim[i].high >>> 0).toNumber();
                }
                return message;
            };
    
            BlobShape.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.dim = [];
                if (message.dim && message.dim.length) {
                    object.dim = [];
                    for (var j = 0; j < message.dim.length; ++j)
                        if (typeof message.dim[j] === "number")
                            object.dim[j] = options.longs === String ? String(message.dim[j]) : message.dim[j];
                        else
                            object.dim[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dim[j]) : options.longs === Number ? new $util.LongBits(message.dim[j].low >>> 0, message.dim[j].high >>> 0).toNumber() : message.dim[j];
                }
                return object;
            };
    
            BlobShape.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BlobShape;
        })();
    
        caffe.BlobProto = (function() {
    
            function BlobProto(properties) {
                this.data = [];
                this.diff = [];
                this.double_data = [];
                this.double_diff = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BlobProto.prototype.shape = null;
            BlobProto.prototype.data = $util.emptyArray;
            BlobProto.prototype.diff = $util.emptyArray;
            BlobProto.prototype.double_data = $util.emptyArray;
            BlobProto.prototype.double_diff = $util.emptyArray;
            BlobProto.prototype.num = 0;
            BlobProto.prototype.channels = 0;
            BlobProto.prototype.height = 0;
            BlobProto.prototype.width = 0;
    
            BlobProto.create = function create(properties) {
                return new BlobProto(properties);
            };
    
            BlobProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BlobProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 7:
                        message.shape = $root.caffe.BlobShape.decode(reader, reader.uint32());
                        break;
                    case 5:
                        if (!(message.data && message.data.length))
                            message.data = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            if (message.data.length == 0 && (end2 - reader.pos) > 1048576) {
                                var dataLength = end2 - reader.pos;
                                var dataView = new DataView(reader.buf.buffer, reader.buf.byteOffset + reader.pos, dataLength);
                                dataLength = dataLength >>> 2;
                                var data = new Float32Array(dataLength);
                                for (var i = 0; i < dataLength; i++) {
                                    data[i] = dataView.getFloat32(i << 2, true);
                                }
                                message.data = data;
                                reader.pos = end2;
                            }
                            else {
                                while (reader.pos < end2)
                                    message.data.push(reader.float());
                            }
                        } else
                            message.data.push(reader.float());
                        break;
                    case 6:
                        if (!(message.diff && message.diff.length))
                            message.diff = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.diff.push(reader.float());
                        } else
                            message.diff.push(reader.float());
                        break;
                    case 8:
                        if (!(message.double_data && message.double_data.length))
                            message.double_data = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.double_data.push(reader.double());
                        } else
                            message.double_data.push(reader.double());
                        break;
                    case 9:
                        if (!(message.double_diff && message.double_diff.length))
                            message.double_diff = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.double_diff.push(reader.double());
                        } else
                            message.double_diff.push(reader.double());
                        break;
                    case 1:
                        message.num = reader.int32();
                        break;
                    case 2:
                        message.channels = reader.int32();
                        break;
                    case 3:
                        message.height = reader.int32();
                        break;
                    case 4:
                        message.width = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BlobProto.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BlobProto();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "shape":
                        message.shape = $root.caffe.BlobShape.decodeText(reader, true);
                        break;
                    case "data":
                        if (!(message.data && message.data.length))
                            message.data = [];
                        message.data.push(reader.float());
                        break;
                    case "diff":
                        if (!(message.diff && message.diff.length))
                            message.diff = [];
                        message.diff.push(reader.float());
                        break;
                    case "double_data":
                        if (!(message.double_data && message.double_data.length))
                            message.double_data = [];
                        message.double_data.push(reader.double());
                        break;
                    case "double_diff":
                        if (!(message.double_diff && message.double_diff.length))
                            message.double_diff = [];
                        message.double_diff.push(reader.double());
                        break;
                    case "num":
                        message.num = reader.int32();
                        break;
                    case "channels":
                        message.channels = reader.int32();
                        break;
                    case "height":
                        message.height = reader.int32();
                        break;
                    case "width":
                        message.width = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BlobProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.shape != null && message.hasOwnProperty("shape")) {
                    var error = $root.caffe.BlobShape.verify(message.shape);
                    if (error)
                        return "shape." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (var i = 0; i < message.data.length; ++i)
                        if (typeof message.data[i] !== "number")
                            return "data: number[] expected";
                }
                if (message.diff != null && message.hasOwnProperty("diff")) {
                    if (!Array.isArray(message.diff))
                        return "diff: array expected";
                    for (var i = 0; i < message.diff.length; ++i)
                        if (typeof message.diff[i] !== "number")
                            return "diff: number[] expected";
                }
                if (message.double_data != null && message.hasOwnProperty("double_data")) {
                    if (!Array.isArray(message.double_data))
                        return "double_data: array expected";
                    for (var i = 0; i < message.double_data.length; ++i)
                        if (typeof message.double_data[i] !== "number")
                            return "double_data: number[] expected";
                }
                if (message.double_diff != null && message.hasOwnProperty("double_diff")) {
                    if (!Array.isArray(message.double_diff))
                        return "double_diff: array expected";
                    for (var i = 0; i < message.double_diff.length; ++i)
                        if (typeof message.double_diff[i] !== "number")
                            return "double_diff: number[] expected";
                }
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.channels != null && message.hasOwnProperty("channels"))
                    if (!$util.isInteger(message.channels))
                        return "channels: integer expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                return null;
            };
    
            BlobProto.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BlobProto)
                    return object;
                var message = new $root.caffe.BlobProto();
                if (object.shape != null) {
                    if (typeof object.shape !== "object")
                        throw TypeError(".caffe.BlobProto.shape: object expected");
                    message.shape = $root.caffe.BlobShape.fromObject(object.shape);
                }
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".caffe.BlobProto.data: array expected");
                    message.data = [];
                    for (var i = 0; i < object.data.length; ++i)
                        message.data[i] = Number(object.data[i]);
                }
                if (object.diff) {
                    if (!Array.isArray(object.diff))
                        throw TypeError(".caffe.BlobProto.diff: array expected");
                    message.diff = [];
                    for (var i = 0; i < object.diff.length; ++i)
                        message.diff[i] = Number(object.diff[i]);
                }
                if (object.double_data) {
                    if (!Array.isArray(object.double_data))
                        throw TypeError(".caffe.BlobProto.double_data: array expected");
                    message.double_data = [];
                    for (var i = 0; i < object.double_data.length; ++i)
                        message.double_data[i] = Number(object.double_data[i]);
                }
                if (object.double_diff) {
                    if (!Array.isArray(object.double_diff))
                        throw TypeError(".caffe.BlobProto.double_diff: array expected");
                    message.double_diff = [];
                    for (var i = 0; i < object.double_diff.length; ++i)
                        message.double_diff[i] = Number(object.double_diff[i]);
                }
                if (object.num != null)
                    message.num = object.num | 0;
                if (object.channels != null)
                    message.channels = object.channels | 0;
                if (object.height != null)
                    message.height = object.height | 0;
                if (object.width != null)
                    message.width = object.width | 0;
                return message;
            };
    
            BlobProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.data = [];
                    object.diff = [];
                    object.double_data = [];
                    object.double_diff = [];
                }
                if (options.defaults) {
                    object.num = 0;
                    object.channels = 0;
                    object.height = 0;
                    object.width = 0;
                    object.shape = null;
                }
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.channels != null && message.hasOwnProperty("channels"))
                    object.channels = message.channels;
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                if (message.data && message.data.length) {
                    object.data = [];
                    for (var j = 0; j < message.data.length; ++j)
                        object.data[j] = options.json && !isFinite(message.data[j]) ? String(message.data[j]) : message.data[j];
                }
                if (message.diff && message.diff.length) {
                    object.diff = [];
                    for (var j = 0; j < message.diff.length; ++j)
                        object.diff[j] = options.json && !isFinite(message.diff[j]) ? String(message.diff[j]) : message.diff[j];
                }
                if (message.shape != null && message.hasOwnProperty("shape"))
                    object.shape = $root.caffe.BlobShape.toObject(message.shape, options);
                if (message.double_data && message.double_data.length) {
                    object.double_data = [];
                    for (var j = 0; j < message.double_data.length; ++j)
                        object.double_data[j] = options.json && !isFinite(message.double_data[j]) ? String(message.double_data[j]) : message.double_data[j];
                }
                if (message.double_diff && message.double_diff.length) {
                    object.double_diff = [];
                    for (var j = 0; j < message.double_diff.length; ++j)
                        object.double_diff[j] = options.json && !isFinite(message.double_diff[j]) ? String(message.double_diff[j]) : message.double_diff[j];
                }
                return object;
            };
    
            BlobProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BlobProto;
        })();
    
        caffe.BlobProtoVector = (function() {
    
            function BlobProtoVector(properties) {
                this.blobs = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BlobProtoVector.prototype.blobs = $util.emptyArray;
    
            BlobProtoVector.create = function create(properties) {
                return new BlobProtoVector(properties);
            };
    
            BlobProtoVector.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BlobProtoVector();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.blobs && message.blobs.length))
                            message.blobs = [];
                        message.blobs.push($root.caffe.BlobProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BlobProtoVector.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BlobProtoVector();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "blobs":
                        if (!(message.blobs && message.blobs.length))
                            message.blobs = [];
                        message.blobs.push($root.caffe.BlobProto.decodeText(reader, true));
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BlobProtoVector.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.blobs != null && message.hasOwnProperty("blobs")) {
                    if (!Array.isArray(message.blobs))
                        return "blobs: array expected";
                    for (var i = 0; i < message.blobs.length; ++i) {
                        var error = $root.caffe.BlobProto.verify(message.blobs[i]);
                        if (error)
                            return "blobs." + error;
                    }
                }
                return null;
            };
    
            BlobProtoVector.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BlobProtoVector)
                    return object;
                var message = new $root.caffe.BlobProtoVector();
                if (object.blobs) {
                    if (!Array.isArray(object.blobs))
                        throw TypeError(".caffe.BlobProtoVector.blobs: array expected");
                    message.blobs = [];
                    for (var i = 0; i < object.blobs.length; ++i) {
                        if (typeof object.blobs[i] !== "object")
                            throw TypeError(".caffe.BlobProtoVector.blobs: object expected");
                        message.blobs[i] = $root.caffe.BlobProto.fromObject(object.blobs[i]);
                    }
                }
                return message;
            };
    
            BlobProtoVector.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.blobs = [];
                if (message.blobs && message.blobs.length) {
                    object.blobs = [];
                    for (var j = 0; j < message.blobs.length; ++j)
                        object.blobs[j] = $root.caffe.BlobProto.toObject(message.blobs[j], options);
                }
                return object;
            };
    
            BlobProtoVector.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BlobProtoVector;
        })();
    
        caffe.Datum = (function() {
    
            function Datum(properties) {
                this.float_data = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            Datum.prototype.channels = 0;
            Datum.prototype.height = 0;
            Datum.prototype.width = 0;
            Datum.prototype.data = $util.newBuffer([]);
            Datum.prototype.label = 0;
            Datum.prototype.float_data = $util.emptyArray;
            Datum.prototype.encoded = false;
    
            Datum.create = function create(properties) {
                return new Datum(properties);
            };
    
            Datum.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.Datum();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.channels = reader.int32();
                        break;
                    case 2:
                        message.height = reader.int32();
                        break;
                    case 3:
                        message.width = reader.int32();
                        break;
                    case 4:
                        message.data = reader.bytes();
                        break;
                    case 5:
                        message.label = reader.int32();
                        break;
                    case 6:
                        if (!(message.float_data && message.float_data.length))
                            message.float_data = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.float_data.push(reader.float());
                        } else
                            message.float_data.push(reader.float());
                        break;
                    case 7:
                        message.encoded = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            Datum.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.Datum();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "channels":
                        message.channels = reader.int32();
                        break;
                    case "height":
                        message.height = reader.int32();
                        break;
                    case "width":
                        message.width = reader.int32();
                        break;
                    case "data":
                        message.data = reader.bytes();
                        break;
                    case "label":
                        message.label = reader.int32();
                        break;
                    case "float_data":
                        if (!(message.float_data && message.float_data.length))
                            message.float_data = [];
                        message.float_data.push(reader.float());
                        break;
                    case "encoded":
                        message.encoded = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            Datum.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.channels != null && message.hasOwnProperty("channels"))
                    if (!$util.isInteger(message.channels))
                        return "channels: integer expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    if (!$util.isInteger(message.label))
                        return "label: integer expected";
                if (message.float_data != null && message.hasOwnProperty("float_data")) {
                    if (!Array.isArray(message.float_data))
                        return "float_data: array expected";
                    for (var i = 0; i < message.float_data.length; ++i)
                        if (typeof message.float_data[i] !== "number")
                            return "float_data: number[] expected";
                }
                if (message.encoded != null && message.hasOwnProperty("encoded"))
                    if (typeof message.encoded !== "boolean")
                        return "encoded: boolean expected";
                return null;
            };
    
            Datum.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.Datum)
                    return object;
                var message = new $root.caffe.Datum();
                if (object.channels != null)
                    message.channels = object.channels | 0;
                if (object.height != null)
                    message.height = object.height | 0;
                if (object.width != null)
                    message.width = object.width | 0;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.label != null)
                    message.label = object.label | 0;
                if (object.float_data) {
                    if (!Array.isArray(object.float_data))
                        throw TypeError(".caffe.Datum.float_data: array expected");
                    message.float_data = [];
                    for (var i = 0; i < object.float_data.length; ++i)
                        message.float_data[i] = Number(object.float_data[i]);
                }
                if (object.encoded != null)
                    message.encoded = Boolean(object.encoded);
                return message;
            };
    
            Datum.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.float_data = [];
                if (options.defaults) {
                    object.channels = 0;
                    object.height = 0;
                    object.width = 0;
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.label = 0;
                    object.encoded = false;
                }
                if (message.channels != null && message.hasOwnProperty("channels"))
                    object.channels = message.channels;
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = message.label;
                if (message.float_data && message.float_data.length) {
                    object.float_data = [];
                    for (var j = 0; j < message.float_data.length; ++j)
                        object.float_data[j] = options.json && !isFinite(message.float_data[j]) ? String(message.float_data[j]) : message.float_data[j];
                }
                if (message.encoded != null && message.hasOwnProperty("encoded"))
                    object.encoded = message.encoded;
                return object;
            };
    
            Datum.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Datum;
        })();
    
        caffe.FillerParameter = (function() {
    
            function FillerParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            FillerParameter.prototype.type = "constant";
            FillerParameter.prototype.value = 0;
            FillerParameter.prototype.min = 0;
            FillerParameter.prototype.max = 1;
            FillerParameter.prototype.mean = 0;
            FillerParameter.prototype.std = 1;
            FillerParameter.prototype.sparse = -1;
            FillerParameter.prototype.variance_norm = 0;
    
            FillerParameter.create = function create(properties) {
                return new FillerParameter(properties);
            };
    
            FillerParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.FillerParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        message.value = reader.float();
                        break;
                    case 3:
                        message.min = reader.float();
                        break;
                    case 4:
                        message.max = reader.float();
                        break;
                    case 5:
                        message.mean = reader.float();
                        break;
                    case 6:
                        message.std = reader.float();
                        break;
                    case 7:
                        message.sparse = reader.int32();
                        break;
                    case 8:
                        message.variance_norm = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            FillerParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.FillerParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "type":
                        message.type = reader.string();
                        break;
                    case "value":
                        message.value = reader.float();
                        break;
                    case "min":
                        message.min = reader.float();
                        break;
                    case "max":
                        message.max = reader.float();
                        break;
                    case "mean":
                        message.mean = reader.float();
                        break;
                    case "std":
                        message.std = reader.float();
                        break;
                    case "sparse":
                        message.sparse = reader.int32();
                        break;
                    case "variance_norm":
                        message.variance_norm = reader.enum($root.caffe.FillerParameter.VarianceNorm);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            FillerParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value !== "number")
                        return "value: number expected";
                if (message.min != null && message.hasOwnProperty("min"))
                    if (typeof message.min !== "number")
                        return "min: number expected";
                if (message.max != null && message.hasOwnProperty("max"))
                    if (typeof message.max !== "number")
                        return "max: number expected";
                if (message.mean != null && message.hasOwnProperty("mean"))
                    if (typeof message.mean !== "number")
                        return "mean: number expected";
                if (message.std != null && message.hasOwnProperty("std"))
                    if (typeof message.std !== "number")
                        return "std: number expected";
                if (message.sparse != null && message.hasOwnProperty("sparse"))
                    if (!$util.isInteger(message.sparse))
                        return "sparse: integer expected";
                if (message.variance_norm != null && message.hasOwnProperty("variance_norm"))
                    switch (message.variance_norm) {
                    default:
                        return "variance_norm: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };
    
            FillerParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.FillerParameter)
                    return object;
                var message = new $root.caffe.FillerParameter();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.value != null)
                    message.value = Number(object.value);
                if (object.min != null)
                    message.min = Number(object.min);
                if (object.max != null)
                    message.max = Number(object.max);
                if (object.mean != null)
                    message.mean = Number(object.mean);
                if (object.std != null)
                    message.std = Number(object.std);
                if (object.sparse != null)
                    message.sparse = object.sparse | 0;
                switch (object.variance_norm) {
                case "FAN_IN":
                case 0:
                    message.variance_norm = 0;
                    break;
                case "FAN_OUT":
                case 1:
                    message.variance_norm = 1;
                    break;
                case "AVERAGE":
                case 2:
                    message.variance_norm = 2;
                    break;
                }
                return message;
            };
    
            FillerParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = "constant";
                    object.value = 0;
                    object.min = 0;
                    object.max = 1;
                    object.mean = 0;
                    object.std = 1;
                    object.sparse = -1;
                    object.variance_norm = options.enums === String ? "FAN_IN" : 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                if (message.min != null && message.hasOwnProperty("min"))
                    object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;
                if (message.max != null && message.hasOwnProperty("max"))
                    object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;
                if (message.mean != null && message.hasOwnProperty("mean"))
                    object.mean = options.json && !isFinite(message.mean) ? String(message.mean) : message.mean;
                if (message.std != null && message.hasOwnProperty("std"))
                    object.std = options.json && !isFinite(message.std) ? String(message.std) : message.std;
                if (message.sparse != null && message.hasOwnProperty("sparse"))
                    object.sparse = message.sparse;
                if (message.variance_norm != null && message.hasOwnProperty("variance_norm"))
                    object.variance_norm = options.enums === String ? $root.caffe.FillerParameter.VarianceNorm[message.variance_norm] : message.variance_norm;
                return object;
            };
    
            FillerParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            FillerParameter.VarianceNorm = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FAN_IN"] = 0;
                values[valuesById[1] = "FAN_OUT"] = 1;
                values[valuesById[2] = "AVERAGE"] = 2;
                return values;
            })();
    
            return FillerParameter;
        })();
    
        caffe.NetParameter = (function() {
    
            function NetParameter(properties) {
                this.input = [];
                this.input_shape = [];
                this.input_dim = [];
                this.layer = [];
                this.layers = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            NetParameter.prototype.name = "";
            NetParameter.prototype.input = $util.emptyArray;
            NetParameter.prototype.input_shape = $util.emptyArray;
            NetParameter.prototype.input_dim = $util.emptyArray;
            NetParameter.prototype.force_backward = false;
            NetParameter.prototype.state = null;
            NetParameter.prototype.debug_info = false;
            NetParameter.prototype.layer = $util.emptyArray;
            NetParameter.prototype.layers = $util.emptyArray;
    
            NetParameter.create = function create(properties) {
                return new NetParameter(properties);
            };
    
            NetParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.NetParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        if (!(message.input && message.input.length))
                            message.input = [];
                        message.input.push(reader.string());
                        break;
                    case 8:
                        if (!(message.input_shape && message.input_shape.length))
                            message.input_shape = [];
                        message.input_shape.push($root.caffe.BlobShape.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.input_dim && message.input_dim.length))
                            message.input_dim = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.input_dim.push(reader.int32());
                        } else
                            message.input_dim.push(reader.int32());
                        break;
                    case 5:
                        message.force_backward = reader.bool();
                        break;
                    case 6:
                        message.state = $root.caffe.NetState.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.debug_info = reader.bool();
                        break;
                    case 100:
                        if (!(message.layer && message.layer.length))
                            message.layer = [];
                        message.layer.push($root.caffe.LayerParameter.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        if (!(message.layers && message.layers.length))
                            message.layers = [];
                        message.layers.push($root.caffe.V1LayerParameter.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            NetParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.NetParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "name":
                        message.name = reader.string();
                        break;
                    case "input":
                        if (!(message.input && message.input.length))
                            message.input = [];
                        message.input.push(reader.string());
                        break;
                    case "input_shape":
                        if (!(message.input_shape && message.input_shape.length))
                            message.input_shape = [];
                        message.input_shape.push($root.caffe.BlobShape.decodeText(reader, true));
                        break;
                    case "input_dim":
                        if (!(message.input_dim && message.input_dim.length))
                            message.input_dim = [];
                        message.input_dim.push(reader.int32());
                        break;
                    case "force_backward":
                        message.force_backward = reader.bool();
                        break;
                    case "state":
                        message.state = $root.caffe.NetState.decodeText(reader, true);
                        break;
                    case "debug_info":
                        message.debug_info = reader.bool();
                        break;
                    case "layer":
                        if (!(message.layer && message.layer.length))
                            message.layer = [];
                        message.layer.push($root.caffe.LayerParameter.decodeText(reader, true));
                        break;
                    case "layers":
                        if (!(message.layers && message.layers.length))
                            message.layers = [];
                        message.layers.push($root.caffe.V1LayerParameter.decodeText(reader, true));
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            NetParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.input != null && message.hasOwnProperty("input")) {
                    if (!Array.isArray(message.input))
                        return "input: array expected";
                    for (var i = 0; i < message.input.length; ++i)
                        if (!$util.isString(message.input[i]))
                            return "input: string[] expected";
                }
                if (message.input_shape != null && message.hasOwnProperty("input_shape")) {
                    if (!Array.isArray(message.input_shape))
                        return "input_shape: array expected";
                    for (var i = 0; i < message.input_shape.length; ++i) {
                        var error = $root.caffe.BlobShape.verify(message.input_shape[i]);
                        if (error)
                            return "input_shape." + error;
                    }
                }
                if (message.input_dim != null && message.hasOwnProperty("input_dim")) {
                    if (!Array.isArray(message.input_dim))
                        return "input_dim: array expected";
                    for (var i = 0; i < message.input_dim.length; ++i)
                        if (!$util.isInteger(message.input_dim[i]))
                            return "input_dim: integer[] expected";
                }
                if (message.force_backward != null && message.hasOwnProperty("force_backward"))
                    if (typeof message.force_backward !== "boolean")
                        return "force_backward: boolean expected";
                if (message.state != null && message.hasOwnProperty("state")) {
                    var error = $root.caffe.NetState.verify(message.state);
                    if (error)
                        return "state." + error;
                }
                if (message.debug_info != null && message.hasOwnProperty("debug_info"))
                    if (typeof message.debug_info !== "boolean")
                        return "debug_info: boolean expected";
                if (message.layer != null && message.hasOwnProperty("layer")) {
                    if (!Array.isArray(message.layer))
                        return "layer: array expected";
                    for (var i = 0; i < message.layer.length; ++i) {
                        var error = $root.caffe.LayerParameter.verify(message.layer[i]);
                        if (error)
                            return "layer." + error;
                    }
                }
                if (message.layers != null && message.hasOwnProperty("layers")) {
                    if (!Array.isArray(message.layers))
                        return "layers: array expected";
                    for (var i = 0; i < message.layers.length; ++i) {
                        var error = $root.caffe.V1LayerParameter.verify(message.layers[i]);
                        if (error)
                            return "layers." + error;
                    }
                }
                return null;
            };
    
            NetParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.NetParameter)
                    return object;
                var message = new $root.caffe.NetParameter();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.input) {
                    if (!Array.isArray(object.input))
                        throw TypeError(".caffe.NetParameter.input: array expected");
                    message.input = [];
                    for (var i = 0; i < object.input.length; ++i)
                        message.input[i] = String(object.input[i]);
                }
                if (object.input_shape) {
                    if (!Array.isArray(object.input_shape))
                        throw TypeError(".caffe.NetParameter.input_shape: array expected");
                    message.input_shape = [];
                    for (var i = 0; i < object.input_shape.length; ++i) {
                        if (typeof object.input_shape[i] !== "object")
                            throw TypeError(".caffe.NetParameter.input_shape: object expected");
                        message.input_shape[i] = $root.caffe.BlobShape.fromObject(object.input_shape[i]);
                    }
                }
                if (object.input_dim) {
                    if (!Array.isArray(object.input_dim))
                        throw TypeError(".caffe.NetParameter.input_dim: array expected");
                    message.input_dim = [];
                    for (var i = 0; i < object.input_dim.length; ++i)
                        message.input_dim[i] = object.input_dim[i] | 0;
                }
                if (object.force_backward != null)
                    message.force_backward = Boolean(object.force_backward);
                if (object.state != null) {
                    if (typeof object.state !== "object")
                        throw TypeError(".caffe.NetParameter.state: object expected");
                    message.state = $root.caffe.NetState.fromObject(object.state);
                }
                if (object.debug_info != null)
                    message.debug_info = Boolean(object.debug_info);
                if (object.layer) {
                    if (!Array.isArray(object.layer))
                        throw TypeError(".caffe.NetParameter.layer: array expected");
                    message.layer = [];
                    for (var i = 0; i < object.layer.length; ++i) {
                        if (typeof object.layer[i] !== "object")
                            throw TypeError(".caffe.NetParameter.layer: object expected");
                        message.layer[i] = $root.caffe.LayerParameter.fromObject(object.layer[i]);
                    }
                }
                if (object.layers) {
                    if (!Array.isArray(object.layers))
                        throw TypeError(".caffe.NetParameter.layers: array expected");
                    message.layers = [];
                    for (var i = 0; i < object.layers.length; ++i) {
                        if (typeof object.layers[i] !== "object")
                            throw TypeError(".caffe.NetParameter.layers: object expected");
                        message.layers[i] = $root.caffe.V1LayerParameter.fromObject(object.layers[i]);
                    }
                }
                return message;
            };
    
            NetParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.layers = [];
                    object.input = [];
                    object.input_dim = [];
                    object.input_shape = [];
                    object.layer = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.force_backward = false;
                    object.state = null;
                    object.debug_info = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.layers && message.layers.length) {
                    object.layers = [];
                    for (var j = 0; j < message.layers.length; ++j)
                        object.layers[j] = $root.caffe.V1LayerParameter.toObject(message.layers[j], options);
                }
                if (message.input && message.input.length) {
                    object.input = [];
                    for (var j = 0; j < message.input.length; ++j)
                        object.input[j] = message.input[j];
                }
                if (message.input_dim && message.input_dim.length) {
                    object.input_dim = [];
                    for (var j = 0; j < message.input_dim.length; ++j)
                        object.input_dim[j] = message.input_dim[j];
                }
                if (message.force_backward != null && message.hasOwnProperty("force_backward"))
                    object.force_backward = message.force_backward;
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = $root.caffe.NetState.toObject(message.state, options);
                if (message.debug_info != null && message.hasOwnProperty("debug_info"))
                    object.debug_info = message.debug_info;
                if (message.input_shape && message.input_shape.length) {
                    object.input_shape = [];
                    for (var j = 0; j < message.input_shape.length; ++j)
                        object.input_shape[j] = $root.caffe.BlobShape.toObject(message.input_shape[j], options);
                }
                if (message.layer && message.layer.length) {
                    object.layer = [];
                    for (var j = 0; j < message.layer.length; ++j)
                        object.layer[j] = $root.caffe.LayerParameter.toObject(message.layer[j], options);
                }
                return object;
            };
    
            NetParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NetParameter;
        })();
    
        caffe.SolverParameter = (function() {
    
            function SolverParameter(properties) {
                this.test_net = [];
                this.test_net_param = [];
                this.test_state = [];
                this.test_iter = [];
                this.stepvalue = [];
                this.weights = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SolverParameter.prototype.net = "";
            SolverParameter.prototype.net_param = null;
            SolverParameter.prototype.train_net = "";
            SolverParameter.prototype.test_net = $util.emptyArray;
            SolverParameter.prototype.train_net_param = null;
            SolverParameter.prototype.test_net_param = $util.emptyArray;
            SolverParameter.prototype.train_state = null;
            SolverParameter.prototype.test_state = $util.emptyArray;
            SolverParameter.prototype.test_iter = $util.emptyArray;
            SolverParameter.prototype.test_interval = 0;
            SolverParameter.prototype.test_compute_loss = false;
            SolverParameter.prototype.test_initialization = true;
            SolverParameter.prototype.base_lr = 0;
            SolverParameter.prototype.display = 0;
            SolverParameter.prototype.average_loss = 1;
            SolverParameter.prototype.max_iter = 0;
            SolverParameter.prototype.iter_size = 1;
            SolverParameter.prototype.lr_policy = "";
            SolverParameter.prototype.gamma = 0;
            SolverParameter.prototype.power = 0;
            SolverParameter.prototype.momentum = 0;
            SolverParameter.prototype.weight_decay = 0;
            SolverParameter.prototype.regularization_type = "L2";
            SolverParameter.prototype.stepsize = 0;
            SolverParameter.prototype.stepvalue = $util.emptyArray;
            SolverParameter.prototype.clip_gradients = -1;
            SolverParameter.prototype.snapshot = 0;
            SolverParameter.prototype.snapshot_prefix = "";
            SolverParameter.prototype.snapshot_diff = false;
            SolverParameter.prototype.snapshot_format = 1;
            SolverParameter.prototype.solver_mode = 1;
            SolverParameter.prototype.device_id = 0;
            SolverParameter.prototype.random_seed = $util.Long ? $util.Long.fromBits(-1,-1,false) : -1;
            SolverParameter.prototype.type = "SGD";
            SolverParameter.prototype.delta = 1e-8;
            SolverParameter.prototype.momentum2 = 0.999;
            SolverParameter.prototype.rms_decay = 0.99;
            SolverParameter.prototype.debug_info = false;
            SolverParameter.prototype.snapshot_after_train = true;
            SolverParameter.prototype.solver_type = 0;
            SolverParameter.prototype.layer_wise_reduce = true;
            SolverParameter.prototype.weights = $util.emptyArray;
    
            SolverParameter.create = function create(properties) {
                return new SolverParameter(properties);
            };
    
            SolverParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SolverParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 24:
                        message.net = reader.string();
                        break;
                    case 25:
                        message.net_param = $root.caffe.NetParameter.decode(reader, reader.uint32());
                        break;
                    case 1:
                        message.train_net = reader.string();
                        break;
                    case 2:
                        if (!(message.test_net && message.test_net.length))
                            message.test_net = [];
                        message.test_net.push(reader.string());
                        break;
                    case 21:
                        message.train_net_param = $root.caffe.NetParameter.decode(reader, reader.uint32());
                        break;
                    case 22:
                        if (!(message.test_net_param && message.test_net_param.length))
                            message.test_net_param = [];
                        message.test_net_param.push($root.caffe.NetParameter.decode(reader, reader.uint32()));
                        break;
                    case 26:
                        message.train_state = $root.caffe.NetState.decode(reader, reader.uint32());
                        break;
                    case 27:
                        if (!(message.test_state && message.test_state.length))
                            message.test_state = [];
                        message.test_state.push($root.caffe.NetState.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.test_iter && message.test_iter.length))
                            message.test_iter = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.test_iter.push(reader.int32());
                        } else
                            message.test_iter.push(reader.int32());
                        break;
                    case 4:
                        message.test_interval = reader.int32();
                        break;
                    case 19:
                        message.test_compute_loss = reader.bool();
                        break;
                    case 32:
                        message.test_initialization = reader.bool();
                        break;
                    case 5:
                        message.base_lr = reader.float();
                        break;
                    case 6:
                        message.display = reader.int32();
                        break;
                    case 33:
                        message.average_loss = reader.int32();
                        break;
                    case 7:
                        message.max_iter = reader.int32();
                        break;
                    case 36:
                        message.iter_size = reader.int32();
                        break;
                    case 8:
                        message.lr_policy = reader.string();
                        break;
                    case 9:
                        message.gamma = reader.float();
                        break;
                    case 10:
                        message.power = reader.float();
                        break;
                    case 11:
                        message.momentum = reader.float();
                        break;
                    case 12:
                        message.weight_decay = reader.float();
                        break;
                    case 29:
                        message.regularization_type = reader.string();
                        break;
                    case 13:
                        message.stepsize = reader.int32();
                        break;
                    case 34:
                        if (!(message.stepvalue && message.stepvalue.length))
                            message.stepvalue = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.stepvalue.push(reader.int32());
                        } else
                            message.stepvalue.push(reader.int32());
                        break;
                    case 35:
                        message.clip_gradients = reader.float();
                        break;
                    case 14:
                        message.snapshot = reader.int32();
                        break;
                    case 15:
                        message.snapshot_prefix = reader.string();
                        break;
                    case 16:
                        message.snapshot_diff = reader.bool();
                        break;
                    case 37:
                        message.snapshot_format = reader.int32();
                        break;
                    case 17:
                        message.solver_mode = reader.int32();
                        break;
                    case 18:
                        message.device_id = reader.int32();
                        break;
                    case 20:
                        message.random_seed = reader.int64();
                        break;
                    case 40:
                        message.type = reader.string();
                        break;
                    case 31:
                        message.delta = reader.float();
                        break;
                    case 39:
                        message.momentum2 = reader.float();
                        break;
                    case 38:
                        message.rms_decay = reader.float();
                        break;
                    case 23:
                        message.debug_info = reader.bool();
                        break;
                    case 28:
                        message.snapshot_after_train = reader.bool();
                        break;
                    case 30:
                        message.solver_type = reader.int32();
                        break;
                    case 41:
                        message.layer_wise_reduce = reader.bool();
                        break;
                    case 42:
                        if (!(message.weights && message.weights.length))
                            message.weights = [];
                        message.weights.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SolverParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SolverParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "net":
                        message.net = reader.string();
                        break;
                    case "net_param":
                        message.net_param = $root.caffe.NetParameter.decodeText(reader, true);
                        break;
                    case "train_net":
                        message.train_net = reader.string();
                        break;
                    case "test_net":
                        if (!(message.test_net && message.test_net.length))
                            message.test_net = [];
                        message.test_net.push(reader.string());
                        break;
                    case "train_net_param":
                        message.train_net_param = $root.caffe.NetParameter.decodeText(reader, true);
                        break;
                    case "test_net_param":
                        if (!(message.test_net_param && message.test_net_param.length))
                            message.test_net_param = [];
                        message.test_net_param.push($root.caffe.NetParameter.decodeText(reader, true));
                        break;
                    case "train_state":
                        message.train_state = $root.caffe.NetState.decodeText(reader, true);
                        break;
                    case "test_state":
                        if (!(message.test_state && message.test_state.length))
                            message.test_state = [];
                        message.test_state.push($root.caffe.NetState.decodeText(reader, true));
                        break;
                    case "test_iter":
                        if (!(message.test_iter && message.test_iter.length))
                            message.test_iter = [];
                        message.test_iter.push(reader.int32());
                        break;
                    case "test_interval":
                        message.test_interval = reader.int32();
                        break;
                    case "test_compute_loss":
                        message.test_compute_loss = reader.bool();
                        break;
                    case "test_initialization":
                        message.test_initialization = reader.bool();
                        break;
                    case "base_lr":
                        message.base_lr = reader.float();
                        break;
                    case "display":
                        message.display = reader.int32();
                        break;
                    case "average_loss":
                        message.average_loss = reader.int32();
                        break;
                    case "max_iter":
                        message.max_iter = reader.int32();
                        break;
                    case "iter_size":
                        message.iter_size = reader.int32();
                        break;
                    case "lr_policy":
                        message.lr_policy = reader.string();
                        break;
                    case "gamma":
                        message.gamma = reader.float();
                        break;
                    case "power":
                        message.power = reader.float();
                        break;
                    case "momentum":
                        message.momentum = reader.float();
                        break;
                    case "weight_decay":
                        message.weight_decay = reader.float();
                        break;
                    case "regularization_type":
                        message.regularization_type = reader.string();
                        break;
                    case "stepsize":
                        message.stepsize = reader.int32();
                        break;
                    case "stepvalue":
                        if (!(message.stepvalue && message.stepvalue.length))
                            message.stepvalue = [];
                        message.stepvalue.push(reader.int32());
                        break;
                    case "clip_gradients":
                        message.clip_gradients = reader.float();
                        break;
                    case "snapshot":
                        message.snapshot = reader.int32();
                        break;
                    case "snapshot_prefix":
                        message.snapshot_prefix = reader.string();
                        break;
                    case "snapshot_diff":
                        message.snapshot_diff = reader.bool();
                        break;
                    case "snapshot_format":
                        message.snapshot_format = reader.enum($root.caffe.SolverParameter.SnapshotFormat);
                        break;
                    case "solver_mode":
                        message.solver_mode = reader.enum($root.caffe.SolverParameter.SolverMode);
                        break;
                    case "device_id":
                        message.device_id = reader.int32();
                        break;
                    case "random_seed":
                        message.random_seed = reader.int64();
                        break;
                    case "type":
                        message.type = reader.string();
                        break;
                    case "delta":
                        message.delta = reader.float();
                        break;
                    case "momentum2":
                        message.momentum2 = reader.float();
                        break;
                    case "rms_decay":
                        message.rms_decay = reader.float();
                        break;
                    case "debug_info":
                        message.debug_info = reader.bool();
                        break;
                    case "snapshot_after_train":
                        message.snapshot_after_train = reader.bool();
                        break;
                    case "solver_type":
                        message.solver_type = reader.enum($root.caffe.SolverParameter.SolverType);
                        break;
                    case "layer_wise_reduce":
                        message.layer_wise_reduce = reader.bool();
                        break;
                    case "weights":
                        if (!(message.weights && message.weights.length))
                            message.weights = [];
                        message.weights.push(reader.string());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SolverParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.net != null && message.hasOwnProperty("net"))
                    if (!$util.isString(message.net))
                        return "net: string expected";
                if (message.net_param != null && message.hasOwnProperty("net_param")) {
                    var error = $root.caffe.NetParameter.verify(message.net_param);
                    if (error)
                        return "net_param." + error;
                }
                if (message.train_net != null && message.hasOwnProperty("train_net"))
                    if (!$util.isString(message.train_net))
                        return "train_net: string expected";
                if (message.test_net != null && message.hasOwnProperty("test_net")) {
                    if (!Array.isArray(message.test_net))
                        return "test_net: array expected";
                    for (var i = 0; i < message.test_net.length; ++i)
                        if (!$util.isString(message.test_net[i]))
                            return "test_net: string[] expected";
                }
                if (message.train_net_param != null && message.hasOwnProperty("train_net_param")) {
                    var error = $root.caffe.NetParameter.verify(message.train_net_param);
                    if (error)
                        return "train_net_param." + error;
                }
                if (message.test_net_param != null && message.hasOwnProperty("test_net_param")) {
                    if (!Array.isArray(message.test_net_param))
                        return "test_net_param: array expected";
                    for (var i = 0; i < message.test_net_param.length; ++i) {
                        var error = $root.caffe.NetParameter.verify(message.test_net_param[i]);
                        if (error)
                            return "test_net_param." + error;
                    }
                }
                if (message.train_state != null && message.hasOwnProperty("train_state")) {
                    var error = $root.caffe.NetState.verify(message.train_state);
                    if (error)
                        return "train_state." + error;
                }
                if (message.test_state != null && message.hasOwnProperty("test_state")) {
                    if (!Array.isArray(message.test_state))
                        return "test_state: array expected";
                    for (var i = 0; i < message.test_state.length; ++i) {
                        var error = $root.caffe.NetState.verify(message.test_state[i]);
                        if (error)
                            return "test_state." + error;
                    }
                }
                if (message.test_iter != null && message.hasOwnProperty("test_iter")) {
                    if (!Array.isArray(message.test_iter))
                        return "test_iter: array expected";
                    for (var i = 0; i < message.test_iter.length; ++i)
                        if (!$util.isInteger(message.test_iter[i]))
                            return "test_iter: integer[] expected";
                }
                if (message.test_interval != null && message.hasOwnProperty("test_interval"))
                    if (!$util.isInteger(message.test_interval))
                        return "test_interval: integer expected";
                if (message.test_compute_loss != null && message.hasOwnProperty("test_compute_loss"))
                    if (typeof message.test_compute_loss !== "boolean")
                        return "test_compute_loss: boolean expected";
                if (message.test_initialization != null && message.hasOwnProperty("test_initialization"))
                    if (typeof message.test_initialization !== "boolean")
                        return "test_initialization: boolean expected";
                if (message.base_lr != null && message.hasOwnProperty("base_lr"))
                    if (typeof message.base_lr !== "number")
                        return "base_lr: number expected";
                if (message.display != null && message.hasOwnProperty("display"))
                    if (!$util.isInteger(message.display))
                        return "display: integer expected";
                if (message.average_loss != null && message.hasOwnProperty("average_loss"))
                    if (!$util.isInteger(message.average_loss))
                        return "average_loss: integer expected";
                if (message.max_iter != null && message.hasOwnProperty("max_iter"))
                    if (!$util.isInteger(message.max_iter))
                        return "max_iter: integer expected";
                if (message.iter_size != null && message.hasOwnProperty("iter_size"))
                    if (!$util.isInteger(message.iter_size))
                        return "iter_size: integer expected";
                if (message.lr_policy != null && message.hasOwnProperty("lr_policy"))
                    if (!$util.isString(message.lr_policy))
                        return "lr_policy: string expected";
                if (message.gamma != null && message.hasOwnProperty("gamma"))
                    if (typeof message.gamma !== "number")
                        return "gamma: number expected";
                if (message.power != null && message.hasOwnProperty("power"))
                    if (typeof message.power !== "number")
                        return "power: number expected";
                if (message.momentum != null && message.hasOwnProperty("momentum"))
                    if (typeof message.momentum !== "number")
                        return "momentum: number expected";
                if (message.weight_decay != null && message.hasOwnProperty("weight_decay"))
                    if (typeof message.weight_decay !== "number")
                        return "weight_decay: number expected";
                if (message.regularization_type != null && message.hasOwnProperty("regularization_type"))
                    if (!$util.isString(message.regularization_type))
                        return "regularization_type: string expected";
                if (message.stepsize != null && message.hasOwnProperty("stepsize"))
                    if (!$util.isInteger(message.stepsize))
                        return "stepsize: integer expected";
                if (message.stepvalue != null && message.hasOwnProperty("stepvalue")) {
                    if (!Array.isArray(message.stepvalue))
                        return "stepvalue: array expected";
                    for (var i = 0; i < message.stepvalue.length; ++i)
                        if (!$util.isInteger(message.stepvalue[i]))
                            return "stepvalue: integer[] expected";
                }
                if (message.clip_gradients != null && message.hasOwnProperty("clip_gradients"))
                    if (typeof message.clip_gradients !== "number")
                        return "clip_gradients: number expected";
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    if (!$util.isInteger(message.snapshot))
                        return "snapshot: integer expected";
                if (message.snapshot_prefix != null && message.hasOwnProperty("snapshot_prefix"))
                    if (!$util.isString(message.snapshot_prefix))
                        return "snapshot_prefix: string expected";
                if (message.snapshot_diff != null && message.hasOwnProperty("snapshot_diff"))
                    if (typeof message.snapshot_diff !== "boolean")
                        return "snapshot_diff: boolean expected";
                if (message.snapshot_format != null && message.hasOwnProperty("snapshot_format"))
                    switch (message.snapshot_format) {
                    default:
                        return "snapshot_format: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.solver_mode != null && message.hasOwnProperty("solver_mode"))
                    switch (message.solver_mode) {
                    default:
                        return "solver_mode: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.device_id != null && message.hasOwnProperty("device_id"))
                    if (!$util.isInteger(message.device_id))
                        return "device_id: integer expected";
                if (message.random_seed != null && message.hasOwnProperty("random_seed"))
                    if (!$util.isInteger(message.random_seed) && !(message.random_seed && $util.isInteger(message.random_seed.low) && $util.isInteger(message.random_seed.high)))
                        return "random_seed: integer|Long expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.delta != null && message.hasOwnProperty("delta"))
                    if (typeof message.delta !== "number")
                        return "delta: number expected";
                if (message.momentum2 != null && message.hasOwnProperty("momentum2"))
                    if (typeof message.momentum2 !== "number")
                        return "momentum2: number expected";
                if (message.rms_decay != null && message.hasOwnProperty("rms_decay"))
                    if (typeof message.rms_decay !== "number")
                        return "rms_decay: number expected";
                if (message.debug_info != null && message.hasOwnProperty("debug_info"))
                    if (typeof message.debug_info !== "boolean")
                        return "debug_info: boolean expected";
                if (message.snapshot_after_train != null && message.hasOwnProperty("snapshot_after_train"))
                    if (typeof message.snapshot_after_train !== "boolean")
                        return "snapshot_after_train: boolean expected";
                if (message.solver_type != null && message.hasOwnProperty("solver_type"))
                    switch (message.solver_type) {
                    default:
                        return "solver_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.layer_wise_reduce != null && message.hasOwnProperty("layer_wise_reduce"))
                    if (typeof message.layer_wise_reduce !== "boolean")
                        return "layer_wise_reduce: boolean expected";
                if (message.weights != null && message.hasOwnProperty("weights")) {
                    if (!Array.isArray(message.weights))
                        return "weights: array expected";
                    for (var i = 0; i < message.weights.length; ++i)
                        if (!$util.isString(message.weights[i]))
                            return "weights: string[] expected";
                }
                return null;
            };
    
            SolverParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SolverParameter)
                    return object;
                var message = new $root.caffe.SolverParameter();
                if (object.net != null)
                    message.net = String(object.net);
                if (object.net_param != null) {
                    if (typeof object.net_param !== "object")
                        throw TypeError(".caffe.SolverParameter.net_param: object expected");
                    message.net_param = $root.caffe.NetParameter.fromObject(object.net_param);
                }
                if (object.train_net != null)
                    message.train_net = String(object.train_net);
                if (object.test_net) {
                    if (!Array.isArray(object.test_net))
                        throw TypeError(".caffe.SolverParameter.test_net: array expected");
                    message.test_net = [];
                    for (var i = 0; i < object.test_net.length; ++i)
                        message.test_net[i] = String(object.test_net[i]);
                }
                if (object.train_net_param != null) {
                    if (typeof object.train_net_param !== "object")
                        throw TypeError(".caffe.SolverParameter.train_net_param: object expected");
                    message.train_net_param = $root.caffe.NetParameter.fromObject(object.train_net_param);
                }
                if (object.test_net_param) {
                    if (!Array.isArray(object.test_net_param))
                        throw TypeError(".caffe.SolverParameter.test_net_param: array expected");
                    message.test_net_param = [];
                    for (var i = 0; i < object.test_net_param.length; ++i) {
                        if (typeof object.test_net_param[i] !== "object")
                            throw TypeError(".caffe.SolverParameter.test_net_param: object expected");
                        message.test_net_param[i] = $root.caffe.NetParameter.fromObject(object.test_net_param[i]);
                    }
                }
                if (object.train_state != null) {
                    if (typeof object.train_state !== "object")
                        throw TypeError(".caffe.SolverParameter.train_state: object expected");
                    message.train_state = $root.caffe.NetState.fromObject(object.train_state);
                }
                if (object.test_state) {
                    if (!Array.isArray(object.test_state))
                        throw TypeError(".caffe.SolverParameter.test_state: array expected");
                    message.test_state = [];
                    for (var i = 0; i < object.test_state.length; ++i) {
                        if (typeof object.test_state[i] !== "object")
                            throw TypeError(".caffe.SolverParameter.test_state: object expected");
                        message.test_state[i] = $root.caffe.NetState.fromObject(object.test_state[i]);
                    }
                }
                if (object.test_iter) {
                    if (!Array.isArray(object.test_iter))
                        throw TypeError(".caffe.SolverParameter.test_iter: array expected");
                    message.test_iter = [];
                    for (var i = 0; i < object.test_iter.length; ++i)
                        message.test_iter[i] = object.test_iter[i] | 0;
                }
                if (object.test_interval != null)
                    message.test_interval = object.test_interval | 0;
                if (object.test_compute_loss != null)
                    message.test_compute_loss = Boolean(object.test_compute_loss);
                if (object.test_initialization != null)
                    message.test_initialization = Boolean(object.test_initialization);
                if (object.base_lr != null)
                    message.base_lr = Number(object.base_lr);
                if (object.display != null)
                    message.display = object.display | 0;
                if (object.average_loss != null)
                    message.average_loss = object.average_loss | 0;
                if (object.max_iter != null)
                    message.max_iter = object.max_iter | 0;
                if (object.iter_size != null)
                    message.iter_size = object.iter_size | 0;
                if (object.lr_policy != null)
                    message.lr_policy = String(object.lr_policy);
                if (object.gamma != null)
                    message.gamma = Number(object.gamma);
                if (object.power != null)
                    message.power = Number(object.power);
                if (object.momentum != null)
                    message.momentum = Number(object.momentum);
                if (object.weight_decay != null)
                    message.weight_decay = Number(object.weight_decay);
                if (object.regularization_type != null)
                    message.regularization_type = String(object.regularization_type);
                if (object.stepsize != null)
                    message.stepsize = object.stepsize | 0;
                if (object.stepvalue) {
                    if (!Array.isArray(object.stepvalue))
                        throw TypeError(".caffe.SolverParameter.stepvalue: array expected");
                    message.stepvalue = [];
                    for (var i = 0; i < object.stepvalue.length; ++i)
                        message.stepvalue[i] = object.stepvalue[i] | 0;
                }
                if (object.clip_gradients != null)
                    message.clip_gradients = Number(object.clip_gradients);
                if (object.snapshot != null)
                    message.snapshot = object.snapshot | 0;
                if (object.snapshot_prefix != null)
                    message.snapshot_prefix = String(object.snapshot_prefix);
                if (object.snapshot_diff != null)
                    message.snapshot_diff = Boolean(object.snapshot_diff);
                switch (object.snapshot_format) {
                case "HDF5":
                case 0:
                    message.snapshot_format = 0;
                    break;
                case "BINARYPROTO":
                case 1:
                    message.snapshot_format = 1;
                    break;
                }
                switch (object.solver_mode) {
                case "CPU":
                case 0:
                    message.solver_mode = 0;
                    break;
                case "GPU":
                case 1:
                    message.solver_mode = 1;
                    break;
                }
                if (object.device_id != null)
                    message.device_id = object.device_id | 0;
                if (object.random_seed != null)
                    if ($util.Long)
                        (message.random_seed = $util.Long.fromValue(object.random_seed)).unsigned = false;
                    else if (typeof object.random_seed === "string")
                        message.random_seed = parseInt(object.random_seed, 10);
                    else if (typeof object.random_seed === "number")
                        message.random_seed = object.random_seed;
                    else if (typeof object.random_seed === "object")
                        message.random_seed = new $util.LongBits(object.random_seed.low >>> 0, object.random_seed.high >>> 0).toNumber();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.delta != null)
                    message.delta = Number(object.delta);
                if (object.momentum2 != null)
                    message.momentum2 = Number(object.momentum2);
                if (object.rms_decay != null)
                    message.rms_decay = Number(object.rms_decay);
                if (object.debug_info != null)
                    message.debug_info = Boolean(object.debug_info);
                if (object.snapshot_after_train != null)
                    message.snapshot_after_train = Boolean(object.snapshot_after_train);
                switch (object.solver_type) {
                case "SGD":
                case 0:
                    message.solver_type = 0;
                    break;
                case "NESTEROV":
                case 1:
                    message.solver_type = 1;
                    break;
                case "ADAGRAD":
                case 2:
                    message.solver_type = 2;
                    break;
                case "RMSPROP":
                case 3:
                    message.solver_type = 3;
                    break;
                case "ADADELTA":
                case 4:
                    message.solver_type = 4;
                    break;
                case "ADAM":
                case 5:
                    message.solver_type = 5;
                    break;
                }
                if (object.layer_wise_reduce != null)
                    message.layer_wise_reduce = Boolean(object.layer_wise_reduce);
                if (object.weights) {
                    if (!Array.isArray(object.weights))
                        throw TypeError(".caffe.SolverParameter.weights: array expected");
                    message.weights = [];
                    for (var i = 0; i < object.weights.length; ++i)
                        message.weights[i] = String(object.weights[i]);
                }
                return message;
            };
    
            SolverParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.test_net = [];
                    object.test_iter = [];
                    object.test_net_param = [];
                    object.test_state = [];
                    object.stepvalue = [];
                    object.weights = [];
                }
                if (options.defaults) {
                    object.train_net = "";
                    object.test_interval = 0;
                    object.base_lr = 0;
                    object.display = 0;
                    object.max_iter = 0;
                    object.lr_policy = "";
                    object.gamma = 0;
                    object.power = 0;
                    object.momentum = 0;
                    object.weight_decay = 0;
                    object.stepsize = 0;
                    object.snapshot = 0;
                    object.snapshot_prefix = "";
                    object.snapshot_diff = false;
                    object.solver_mode = options.enums === String ? "GPU" : 1;
                    object.device_id = 0;
                    object.test_compute_loss = false;
                    if ($util.Long) {
                        var long = new $util.Long(-1, -1, false);
                        object.random_seed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.random_seed = options.longs === String ? "-1" : -1;
                    object.train_net_param = null;
                    object.debug_info = false;
                    object.net = "";
                    object.net_param = null;
                    object.train_state = null;
                    object.snapshot_after_train = true;
                    object.regularization_type = "L2";
                    object.solver_type = options.enums === String ? "SGD" : 0;
                    object.delta = 1e-8;
                    object.test_initialization = true;
                    object.average_loss = 1;
                    object.clip_gradients = -1;
                    object.iter_size = 1;
                    object.snapshot_format = options.enums === String ? "BINARYPROTO" : 1;
                    object.rms_decay = 0.99;
                    object.momentum2 = 0.999;
                    object.type = "SGD";
                    object.layer_wise_reduce = true;
                }
                if (message.train_net != null && message.hasOwnProperty("train_net"))
                    object.train_net = message.train_net;
                if (message.test_net && message.test_net.length) {
                    object.test_net = [];
                    for (var j = 0; j < message.test_net.length; ++j)
                        object.test_net[j] = message.test_net[j];
                }
                if (message.test_iter && message.test_iter.length) {
                    object.test_iter = [];
                    for (var j = 0; j < message.test_iter.length; ++j)
                        object.test_iter[j] = message.test_iter[j];
                }
                if (message.test_interval != null && message.hasOwnProperty("test_interval"))
                    object.test_interval = message.test_interval;
                if (message.base_lr != null && message.hasOwnProperty("base_lr"))
                    object.base_lr = options.json && !isFinite(message.base_lr) ? String(message.base_lr) : message.base_lr;
                if (message.display != null && message.hasOwnProperty("display"))
                    object.display = message.display;
                if (message.max_iter != null && message.hasOwnProperty("max_iter"))
                    object.max_iter = message.max_iter;
                if (message.lr_policy != null && message.hasOwnProperty("lr_policy"))
                    object.lr_policy = message.lr_policy;
                if (message.gamma != null && message.hasOwnProperty("gamma"))
                    object.gamma = options.json && !isFinite(message.gamma) ? String(message.gamma) : message.gamma;
                if (message.power != null && message.hasOwnProperty("power"))
                    object.power = options.json && !isFinite(message.power) ? String(message.power) : message.power;
                if (message.momentum != null && message.hasOwnProperty("momentum"))
                    object.momentum = options.json && !isFinite(message.momentum) ? String(message.momentum) : message.momentum;
                if (message.weight_decay != null && message.hasOwnProperty("weight_decay"))
                    object.weight_decay = options.json && !isFinite(message.weight_decay) ? String(message.weight_decay) : message.weight_decay;
                if (message.stepsize != null && message.hasOwnProperty("stepsize"))
                    object.stepsize = message.stepsize;
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    object.snapshot = message.snapshot;
                if (message.snapshot_prefix != null && message.hasOwnProperty("snapshot_prefix"))
                    object.snapshot_prefix = message.snapshot_prefix;
                if (message.snapshot_diff != null && message.hasOwnProperty("snapshot_diff"))
                    object.snapshot_diff = message.snapshot_diff;
                if (message.solver_mode != null && message.hasOwnProperty("solver_mode"))
                    object.solver_mode = options.enums === String ? $root.caffe.SolverParameter.SolverMode[message.solver_mode] : message.solver_mode;
                if (message.device_id != null && message.hasOwnProperty("device_id"))
                    object.device_id = message.device_id;
                if (message.test_compute_loss != null && message.hasOwnProperty("test_compute_loss"))
                    object.test_compute_loss = message.test_compute_loss;
                if (message.random_seed != null && message.hasOwnProperty("random_seed"))
                    if (typeof message.random_seed === "number")
                        object.random_seed = options.longs === String ? String(message.random_seed) : message.random_seed;
                    else
                        object.random_seed = options.longs === String ? $util.Long.prototype.toString.call(message.random_seed) : options.longs === Number ? new $util.LongBits(message.random_seed.low >>> 0, message.random_seed.high >>> 0).toNumber() : message.random_seed;
                if (message.train_net_param != null && message.hasOwnProperty("train_net_param"))
                    object.train_net_param = $root.caffe.NetParameter.toObject(message.train_net_param, options);
                if (message.test_net_param && message.test_net_param.length) {
                    object.test_net_param = [];
                    for (var j = 0; j < message.test_net_param.length; ++j)
                        object.test_net_param[j] = $root.caffe.NetParameter.toObject(message.test_net_param[j], options);
                }
                if (message.debug_info != null && message.hasOwnProperty("debug_info"))
                    object.debug_info = message.debug_info;
                if (message.net != null && message.hasOwnProperty("net"))
                    object.net = message.net;
                if (message.net_param != null && message.hasOwnProperty("net_param"))
                    object.net_param = $root.caffe.NetParameter.toObject(message.net_param, options);
                if (message.train_state != null && message.hasOwnProperty("train_state"))
                    object.train_state = $root.caffe.NetState.toObject(message.train_state, options);
                if (message.test_state && message.test_state.length) {
                    object.test_state = [];
                    for (var j = 0; j < message.test_state.length; ++j)
                        object.test_state[j] = $root.caffe.NetState.toObject(message.test_state[j], options);
                }
                if (message.snapshot_after_train != null && message.hasOwnProperty("snapshot_after_train"))
                    object.snapshot_after_train = message.snapshot_after_train;
                if (message.regularization_type != null && message.hasOwnProperty("regularization_type"))
                    object.regularization_type = message.regularization_type;
                if (message.solver_type != null && message.hasOwnProperty("solver_type"))
                    object.solver_type = options.enums === String ? $root.caffe.SolverParameter.SolverType[message.solver_type] : message.solver_type;
                if (message.delta != null && message.hasOwnProperty("delta"))
                    object.delta = options.json && !isFinite(message.delta) ? String(message.delta) : message.delta;
                if (message.test_initialization != null && message.hasOwnProperty("test_initialization"))
                    object.test_initialization = message.test_initialization;
                if (message.average_loss != null && message.hasOwnProperty("average_loss"))
                    object.average_loss = message.average_loss;
                if (message.stepvalue && message.stepvalue.length) {
                    object.stepvalue = [];
                    for (var j = 0; j < message.stepvalue.length; ++j)
                        object.stepvalue[j] = message.stepvalue[j];
                }
                if (message.clip_gradients != null && message.hasOwnProperty("clip_gradients"))
                    object.clip_gradients = options.json && !isFinite(message.clip_gradients) ? String(message.clip_gradients) : message.clip_gradients;
                if (message.iter_size != null && message.hasOwnProperty("iter_size"))
                    object.iter_size = message.iter_size;
                if (message.snapshot_format != null && message.hasOwnProperty("snapshot_format"))
                    object.snapshot_format = options.enums === String ? $root.caffe.SolverParameter.SnapshotFormat[message.snapshot_format] : message.snapshot_format;
                if (message.rms_decay != null && message.hasOwnProperty("rms_decay"))
                    object.rms_decay = options.json && !isFinite(message.rms_decay) ? String(message.rms_decay) : message.rms_decay;
                if (message.momentum2 != null && message.hasOwnProperty("momentum2"))
                    object.momentum2 = options.json && !isFinite(message.momentum2) ? String(message.momentum2) : message.momentum2;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.layer_wise_reduce != null && message.hasOwnProperty("layer_wise_reduce"))
                    object.layer_wise_reduce = message.layer_wise_reduce;
                if (message.weights && message.weights.length) {
                    object.weights = [];
                    for (var j = 0; j < message.weights.length; ++j)
                        object.weights[j] = message.weights[j];
                }
                return object;
            };
    
            SolverParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            SolverParameter.SnapshotFormat = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "HDF5"] = 0;
                values[valuesById[1] = "BINARYPROTO"] = 1;
                return values;
            })();
    
            SolverParameter.SolverMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CPU"] = 0;
                values[valuesById[1] = "GPU"] = 1;
                return values;
            })();
    
            SolverParameter.SolverType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "SGD"] = 0;
                values[valuesById[1] = "NESTEROV"] = 1;
                values[valuesById[2] = "ADAGRAD"] = 2;
                values[valuesById[3] = "RMSPROP"] = 3;
                values[valuesById[4] = "ADADELTA"] = 4;
                values[valuesById[5] = "ADAM"] = 5;
                return values;
            })();
    
            return SolverParameter;
        })();
    
        caffe.SolverState = (function() {
    
            function SolverState(properties) {
                this.history = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SolverState.prototype.iter = 0;
            SolverState.prototype.learned_net = "";
            SolverState.prototype.history = $util.emptyArray;
            SolverState.prototype.current_step = 0;
    
            SolverState.create = function create(properties) {
                return new SolverState(properties);
            };
    
            SolverState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SolverState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.iter = reader.int32();
                        break;
                    case 2:
                        message.learned_net = reader.string();
                        break;
                    case 3:
                        if (!(message.history && message.history.length))
                            message.history = [];
                        message.history.push($root.caffe.BlobProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.current_step = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SolverState.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SolverState();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "iter":
                        message.iter = reader.int32();
                        break;
                    case "learned_net":
                        message.learned_net = reader.string();
                        break;
                    case "history":
                        if (!(message.history && message.history.length))
                            message.history = [];
                        message.history.push($root.caffe.BlobProto.decodeText(reader, true));
                        break;
                    case "current_step":
                        message.current_step = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SolverState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.iter != null && message.hasOwnProperty("iter"))
                    if (!$util.isInteger(message.iter))
                        return "iter: integer expected";
                if (message.learned_net != null && message.hasOwnProperty("learned_net"))
                    if (!$util.isString(message.learned_net))
                        return "learned_net: string expected";
                if (message.history != null && message.hasOwnProperty("history")) {
                    if (!Array.isArray(message.history))
                        return "history: array expected";
                    for (var i = 0; i < message.history.length; ++i) {
                        var error = $root.caffe.BlobProto.verify(message.history[i]);
                        if (error)
                            return "history." + error;
                    }
                }
                if (message.current_step != null && message.hasOwnProperty("current_step"))
                    if (!$util.isInteger(message.current_step))
                        return "current_step: integer expected";
                return null;
            };
    
            SolverState.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SolverState)
                    return object;
                var message = new $root.caffe.SolverState();
                if (object.iter != null)
                    message.iter = object.iter | 0;
                if (object.learned_net != null)
                    message.learned_net = String(object.learned_net);
                if (object.history) {
                    if (!Array.isArray(object.history))
                        throw TypeError(".caffe.SolverState.history: array expected");
                    message.history = [];
                    for (var i = 0; i < object.history.length; ++i) {
                        if (typeof object.history[i] !== "object")
                            throw TypeError(".caffe.SolverState.history: object expected");
                        message.history[i] = $root.caffe.BlobProto.fromObject(object.history[i]);
                    }
                }
                if (object.current_step != null)
                    message.current_step = object.current_step | 0;
                return message;
            };
    
            SolverState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.history = [];
                if (options.defaults) {
                    object.iter = 0;
                    object.learned_net = "";
                    object.current_step = 0;
                }
                if (message.iter != null && message.hasOwnProperty("iter"))
                    object.iter = message.iter;
                if (message.learned_net != null && message.hasOwnProperty("learned_net"))
                    object.learned_net = message.learned_net;
                if (message.history && message.history.length) {
                    object.history = [];
                    for (var j = 0; j < message.history.length; ++j)
                        object.history[j] = $root.caffe.BlobProto.toObject(message.history[j], options);
                }
                if (message.current_step != null && message.hasOwnProperty("current_step"))
                    object.current_step = message.current_step;
                return object;
            };
    
            SolverState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SolverState;
        })();
    
        caffe.Phase = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "TRAIN"] = 0;
            values[valuesById[1] = "TEST"] = 1;
            return values;
        })();
    
        caffe.NetState = (function() {
    
            function NetState(properties) {
                this.stage = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            NetState.prototype.phase = 1;
            NetState.prototype.level = 0;
            NetState.prototype.stage = $util.emptyArray;
    
            NetState.create = function create(properties) {
                return new NetState(properties);
            };
    
            NetState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.NetState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.phase = reader.int32();
                        break;
                    case 2:
                        message.level = reader.int32();
                        break;
                    case 3:
                        if (!(message.stage && message.stage.length))
                            message.stage = [];
                        message.stage.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            NetState.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.NetState();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "phase":
                        message.phase = reader.enum($root.caffe.Phase);
                        break;
                    case "level":
                        message.level = reader.int32();
                        break;
                    case "stage":
                        if (!(message.stage && message.stage.length))
                            message.stage = [];
                        message.stage.push(reader.string());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            NetState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.phase != null && message.hasOwnProperty("phase"))
                    switch (message.phase) {
                    default:
                        return "phase: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.level != null && message.hasOwnProperty("level"))
                    if (!$util.isInteger(message.level))
                        return "level: integer expected";
                if (message.stage != null && message.hasOwnProperty("stage")) {
                    if (!Array.isArray(message.stage))
                        return "stage: array expected";
                    for (var i = 0; i < message.stage.length; ++i)
                        if (!$util.isString(message.stage[i]))
                            return "stage: string[] expected";
                }
                return null;
            };
    
            NetState.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.NetState)
                    return object;
                var message = new $root.caffe.NetState();
                switch (object.phase) {
                case "TRAIN":
                case 0:
                    message.phase = 0;
                    break;
                case "TEST":
                case 1:
                    message.phase = 1;
                    break;
                }
                if (object.level != null)
                    message.level = object.level | 0;
                if (object.stage) {
                    if (!Array.isArray(object.stage))
                        throw TypeError(".caffe.NetState.stage: array expected");
                    message.stage = [];
                    for (var i = 0; i < object.stage.length; ++i)
                        message.stage[i] = String(object.stage[i]);
                }
                return message;
            };
    
            NetState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.stage = [];
                if (options.defaults) {
                    object.phase = options.enums === String ? "TEST" : 1;
                    object.level = 0;
                }
                if (message.phase != null && message.hasOwnProperty("phase"))
                    object.phase = options.enums === String ? $root.caffe.Phase[message.phase] : message.phase;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.stage && message.stage.length) {
                    object.stage = [];
                    for (var j = 0; j < message.stage.length; ++j)
                        object.stage[j] = message.stage[j];
                }
                return object;
            };
    
            NetState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NetState;
        })();
    
        caffe.NetStateRule = (function() {
    
            function NetStateRule(properties) {
                this.stage = [];
                this.not_stage = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            NetStateRule.prototype.phase = 0;
            NetStateRule.prototype.min_level = 0;
            NetStateRule.prototype.max_level = 0;
            NetStateRule.prototype.stage = $util.emptyArray;
            NetStateRule.prototype.not_stage = $util.emptyArray;
    
            NetStateRule.create = function create(properties) {
                return new NetStateRule(properties);
            };
    
            NetStateRule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.NetStateRule();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.phase = reader.int32();
                        break;
                    case 2:
                        message.min_level = reader.int32();
                        break;
                    case 3:
                        message.max_level = reader.int32();
                        break;
                    case 4:
                        if (!(message.stage && message.stage.length))
                            message.stage = [];
                        message.stage.push(reader.string());
                        break;
                    case 5:
                        if (!(message.not_stage && message.not_stage.length))
                            message.not_stage = [];
                        message.not_stage.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            NetStateRule.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.NetStateRule();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "phase":
                        message.phase = reader.enum($root.caffe.Phase);
                        break;
                    case "min_level":
                        message.min_level = reader.int32();
                        break;
                    case "max_level":
                        message.max_level = reader.int32();
                        break;
                    case "stage":
                        if (!(message.stage && message.stage.length))
                            message.stage = [];
                        message.stage.push(reader.string());
                        break;
                    case "not_stage":
                        if (!(message.not_stage && message.not_stage.length))
                            message.not_stage = [];
                        message.not_stage.push(reader.string());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            NetStateRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.phase != null && message.hasOwnProperty("phase"))
                    switch (message.phase) {
                    default:
                        return "phase: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.min_level != null && message.hasOwnProperty("min_level"))
                    if (!$util.isInteger(message.min_level))
                        return "min_level: integer expected";
                if (message.max_level != null && message.hasOwnProperty("max_level"))
                    if (!$util.isInteger(message.max_level))
                        return "max_level: integer expected";
                if (message.stage != null && message.hasOwnProperty("stage")) {
                    if (!Array.isArray(message.stage))
                        return "stage: array expected";
                    for (var i = 0; i < message.stage.length; ++i)
                        if (!$util.isString(message.stage[i]))
                            return "stage: string[] expected";
                }
                if (message.not_stage != null && message.hasOwnProperty("not_stage")) {
                    if (!Array.isArray(message.not_stage))
                        return "not_stage: array expected";
                    for (var i = 0; i < message.not_stage.length; ++i)
                        if (!$util.isString(message.not_stage[i]))
                            return "not_stage: string[] expected";
                }
                return null;
            };
    
            NetStateRule.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.NetStateRule)
                    return object;
                var message = new $root.caffe.NetStateRule();
                switch (object.phase) {
                case "TRAIN":
                case 0:
                    message.phase = 0;
                    break;
                case "TEST":
                case 1:
                    message.phase = 1;
                    break;
                }
                if (object.min_level != null)
                    message.min_level = object.min_level | 0;
                if (object.max_level != null)
                    message.max_level = object.max_level | 0;
                if (object.stage) {
                    if (!Array.isArray(object.stage))
                        throw TypeError(".caffe.NetStateRule.stage: array expected");
                    message.stage = [];
                    for (var i = 0; i < object.stage.length; ++i)
                        message.stage[i] = String(object.stage[i]);
                }
                if (object.not_stage) {
                    if (!Array.isArray(object.not_stage))
                        throw TypeError(".caffe.NetStateRule.not_stage: array expected");
                    message.not_stage = [];
                    for (var i = 0; i < object.not_stage.length; ++i)
                        message.not_stage[i] = String(object.not_stage[i]);
                }
                return message;
            };
    
            NetStateRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.stage = [];
                    object.not_stage = [];
                }
                if (options.defaults) {
                    object.phase = options.enums === String ? "TRAIN" : 0;
                    object.min_level = 0;
                    object.max_level = 0;
                }
                if (message.phase != null && message.hasOwnProperty("phase"))
                    object.phase = options.enums === String ? $root.caffe.Phase[message.phase] : message.phase;
                if (message.min_level != null && message.hasOwnProperty("min_level"))
                    object.min_level = message.min_level;
                if (message.max_level != null && message.hasOwnProperty("max_level"))
                    object.max_level = message.max_level;
                if (message.stage && message.stage.length) {
                    object.stage = [];
                    for (var j = 0; j < message.stage.length; ++j)
                        object.stage[j] = message.stage[j];
                }
                if (message.not_stage && message.not_stage.length) {
                    object.not_stage = [];
                    for (var j = 0; j < message.not_stage.length; ++j)
                        object.not_stage[j] = message.not_stage[j];
                }
                return object;
            };
    
            NetStateRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NetStateRule;
        })();
    
        caffe.ParamSpec = (function() {
    
            function ParamSpec(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ParamSpec.prototype.name = "";
            ParamSpec.prototype.share_mode = 0;
            ParamSpec.prototype.lr_mult = 1;
            ParamSpec.prototype.decay_mult = 1;
    
            ParamSpec.create = function create(properties) {
                return new ParamSpec(properties);
            };
    
            ParamSpec.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ParamSpec();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.share_mode = reader.int32();
                        break;
                    case 3:
                        message.lr_mult = reader.float();
                        break;
                    case 4:
                        message.decay_mult = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ParamSpec.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ParamSpec();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "name":
                        message.name = reader.string();
                        break;
                    case "share_mode":
                        message.share_mode = reader.enum($root.caffe.ParamSpec.DimCheckMode);
                        break;
                    case "lr_mult":
                        message.lr_mult = reader.float();
                        break;
                    case "decay_mult":
                        message.decay_mult = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ParamSpec.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.share_mode != null && message.hasOwnProperty("share_mode"))
                    switch (message.share_mode) {
                    default:
                        return "share_mode: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.lr_mult != null && message.hasOwnProperty("lr_mult"))
                    if (typeof message.lr_mult !== "number")
                        return "lr_mult: number expected";
                if (message.decay_mult != null && message.hasOwnProperty("decay_mult"))
                    if (typeof message.decay_mult !== "number")
                        return "decay_mult: number expected";
                return null;
            };
    
            ParamSpec.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ParamSpec)
                    return object;
                var message = new $root.caffe.ParamSpec();
                if (object.name != null)
                    message.name = String(object.name);
                switch (object.share_mode) {
                case "STRICT":
                case 0:
                    message.share_mode = 0;
                    break;
                case "PERMISSIVE":
                case 1:
                    message.share_mode = 1;
                    break;
                }
                if (object.lr_mult != null)
                    message.lr_mult = Number(object.lr_mult);
                if (object.decay_mult != null)
                    message.decay_mult = Number(object.decay_mult);
                return message;
            };
    
            ParamSpec.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.share_mode = options.enums === String ? "STRICT" : 0;
                    object.lr_mult = 1;
                    object.decay_mult = 1;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.share_mode != null && message.hasOwnProperty("share_mode"))
                    object.share_mode = options.enums === String ? $root.caffe.ParamSpec.DimCheckMode[message.share_mode] : message.share_mode;
                if (message.lr_mult != null && message.hasOwnProperty("lr_mult"))
                    object.lr_mult = options.json && !isFinite(message.lr_mult) ? String(message.lr_mult) : message.lr_mult;
                if (message.decay_mult != null && message.hasOwnProperty("decay_mult"))
                    object.decay_mult = options.json && !isFinite(message.decay_mult) ? String(message.decay_mult) : message.decay_mult;
                return object;
            };
    
            ParamSpec.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            ParamSpec.DimCheckMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRICT"] = 0;
                values[valuesById[1] = "PERMISSIVE"] = 1;
                return values;
            })();
    
            return ParamSpec;
        })();
    
        caffe.LayerParameter = (function() {
    
            function LayerParameter(properties) {
                this.bottom = [];
                this.top = [];
                this.loss_weight = [];
                this.param = [];
                this.blobs = [];
                this.propagate_down = [];
                this.include = [];
                this.exclude = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            LayerParameter.prototype.name = "";
            LayerParameter.prototype.type = "";
            LayerParameter.prototype.bottom = $util.emptyArray;
            LayerParameter.prototype.top = $util.emptyArray;
            LayerParameter.prototype.phase = 0;
            LayerParameter.prototype.loss_weight = $util.emptyArray;
            LayerParameter.prototype.param = $util.emptyArray;
            LayerParameter.prototype.blobs = $util.emptyArray;
            LayerParameter.prototype.propagate_down = $util.emptyArray;
            LayerParameter.prototype.include = $util.emptyArray;
            LayerParameter.prototype.exclude = $util.emptyArray;
            LayerParameter.prototype.transform_param = null;
            LayerParameter.prototype.loss_param = null;
            LayerParameter.prototype.accuracy_param = null;
            LayerParameter.prototype.argmax_param = null;
            LayerParameter.prototype.batch_norm_param = null;
            LayerParameter.prototype.bias_param = null;
            LayerParameter.prototype.clip_param = null;
            LayerParameter.prototype.concat_param = null;
            LayerParameter.prototype.contrastive_loss_param = null;
            LayerParameter.prototype.convolution_param = null;
            LayerParameter.prototype.crop_param = null;
            LayerParameter.prototype.data_param = null;
            LayerParameter.prototype.dropout_param = null;
            LayerParameter.prototype.dummy_data_param = null;
            LayerParameter.prototype.eltwise_param = null;
            LayerParameter.prototype.elu_param = null;
            LayerParameter.prototype.embed_param = null;
            LayerParameter.prototype.exp_param = null;
            LayerParameter.prototype.flatten_param = null;
            LayerParameter.prototype.hdf5_data_param = null;
            LayerParameter.prototype.hdf5_output_param = null;
            LayerParameter.prototype.hinge_loss_param = null;
            LayerParameter.prototype.image_data_param = null;
            LayerParameter.prototype.infogain_loss_param = null;
            LayerParameter.prototype.inner_product_param = null;
            LayerParameter.prototype.input_param = null;
            LayerParameter.prototype.log_param = null;
            LayerParameter.prototype.lrn_param = null;
            LayerParameter.prototype.memory_data_param = null;
            LayerParameter.prototype.mvn_param = null;
            LayerParameter.prototype.parameter_param = null;
            LayerParameter.prototype.pooling_param = null;
            LayerParameter.prototype.power_param = null;
            LayerParameter.prototype.prelu_param = null;
            LayerParameter.prototype.python_param = null;
            LayerParameter.prototype.recurrent_param = null;
            LayerParameter.prototype.reduction_param = null;
            LayerParameter.prototype.relu_param = null;
            LayerParameter.prototype.reshape_param = null;
            LayerParameter.prototype.scale_param = null;
            LayerParameter.prototype.sigmoid_param = null;
            LayerParameter.prototype.softmax_param = null;
            LayerParameter.prototype.spp_param = null;
            LayerParameter.prototype.slice_param = null;
            LayerParameter.prototype.swish_param = null;
            LayerParameter.prototype.tanh_param = null;
            LayerParameter.prototype.threshold_param = null;
            LayerParameter.prototype.tile_param = null;
            LayerParameter.prototype.engine = "";
            LayerParameter.prototype.multinode = null;
            LayerParameter.prototype.mn_activation_param = null;
            LayerParameter.prototype.box_annotator_ohem_param = null;
            LayerParameter.prototype.psroi_pooling_param = null;
            LayerParameter.prototype.roi_pooling_param = null;
            LayerParameter.prototype.spatial_dropout_param = null;
            LayerParameter.prototype.mn_grad_compress_param = null;
            LayerParameter.prototype.quantization_param = null;
            LayerParameter.prototype.reorg_param = null;
            LayerParameter.prototype.squeeze_convolution_param = null;
            LayerParameter.prototype.squeeze_inner_product_param = null;
            LayerParameter.prototype.batch_reduction_param = null;
            LayerParameter.prototype.shuffle_channel_param = null;
            LayerParameter.prototype.annotated_data_param = null;
            LayerParameter.prototype.multibox_loss_param = null;
            LayerParameter.prototype.permute_param = null;
            LayerParameter.prototype.prior_box_param = null;
            LayerParameter.prototype.detection_output_param = null;
            LayerParameter.prototype.detection_evaluate_param = null;
            LayerParameter.prototype.norm_param = null;
            LayerParameter.prototype.video_data_param = null;
            LayerParameter.prototype.split_param = null;
            LayerParameter.prototype.region_loss_param = null;
            LayerParameter.prototype.eval_detection_param = null;
            LayerParameter.prototype.yolo_detection_output_param = null;
            LayerParameter.prototype.yolov3_detection_output_param = null;
            LayerParameter.prototype.yolov3_param = null;
            LayerParameter.prototype.roi_pooling_param_2 = null;
            LayerParameter.prototype.normalize_bbox_param = null;
            LayerParameter.prototype.bn_param = null;
            LayerParameter.prototype.interp_param = null;
            LayerParameter.prototype.coeff_schedule_param = null;
            LayerParameter.prototype.augmentation_param = null;
            LayerParameter.prototype.correlation_param = null;
            LayerParameter.prototype.l1_loss_param = null;
            LayerParameter.prototype.writer_param = null;
            LayerParameter.prototype.reader_param = null;
            LayerParameter.prototype.mean_param = null;
            LayerParameter.prototype.resample_param = null;
            LayerParameter.prototype.downsample_param = null;
            LayerParameter.prototype.lpq_loss_param = null;
            LayerParameter.prototype.flow_warp_param = null;
            LayerParameter.prototype.accum_param = null;
            LayerParameter.prototype.black_augmentation_param = null;
            LayerParameter.prototype.reshape_every_iter = true;
            LayerParameter.prototype.yolo_v2_loss_param = null;
            LayerParameter.prototype.yolo_v3_loss_param = null;
            LayerParameter.prototype.box_output_param = null;
            LayerParameter.prototype.ring_pad_param = null;
            LayerParameter.prototype.force_backward = false;
            LayerParameter.prototype.smooth_l1_loss_param = null;
    
            LayerParameter.create = function create(properties) {
                return new LayerParameter(properties);
            };
    
            LayerParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.LayerParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.type = reader.string();
                        break;
                    case 3:
                        if (!(message.bottom && message.bottom.length))
                            message.bottom = [];
                        message.bottom.push(reader.string());
                        break;
                    case 4:
                        if (!(message.top && message.top.length))
                            message.top = [];
                        message.top.push(reader.string());
                        break;
                    case 10:
                        message.phase = reader.int32();
                        break;
                    case 5:
                        if (!(message.loss_weight && message.loss_weight.length))
                            message.loss_weight = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.loss_weight.push(reader.float());
                        } else
                            message.loss_weight.push(reader.float());
                        break;
                    case 6:
                        if (!(message.param && message.param.length))
                            message.param = [];
                        message.param.push($root.caffe.ParamSpec.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.blobs && message.blobs.length))
                            message.blobs = [];
                        message.blobs.push($root.caffe.BlobProto.decode(reader, reader.uint32()));
                        break;
                    case 11:
                        if (!(message.propagate_down && message.propagate_down.length))
                            message.propagate_down = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.propagate_down.push(reader.bool());
                        } else
                            message.propagate_down.push(reader.bool());
                        break;
                    case 8:
                        if (!(message.include && message.include.length))
                            message.include = [];
                        message.include.push($root.caffe.NetStateRule.decode(reader, reader.uint32()));
                        break;
                    case 9:
                        if (!(message.exclude && message.exclude.length))
                            message.exclude = [];
                        message.exclude.push($root.caffe.NetStateRule.decode(reader, reader.uint32()));
                        break;
                    case 100:
                        message.transform_param = $root.caffe.TransformationParameter.decode(reader, reader.uint32());
                        break;
                    case 101:
                        message.loss_param = $root.caffe.LossParameter.decode(reader, reader.uint32());
                        break;
                    case 102:
                        message.accuracy_param = $root.caffe.AccuracyParameter.decode(reader, reader.uint32());
                        break;
                    case 103:
                        message.argmax_param = $root.caffe.ArgMaxParameter.decode(reader, reader.uint32());
                        break;
                    case 139:
                        message.batch_norm_param = $root.caffe.BatchNormParameter.decode(reader, reader.uint32());
                        break;
                    case 141:
                        message.bias_param = $root.caffe.BiasParameter.decode(reader, reader.uint32());
                        break;
                    case 148:
                        message.clip_param = $root.caffe.ClipParameter.decode(reader, reader.uint32());
                        break;
                    case 104:
                        message.concat_param = $root.caffe.ConcatParameter.decode(reader, reader.uint32());
                        break;
                    case 105:
                        message.contrastive_loss_param = $root.caffe.ContrastiveLossParameter.decode(reader, reader.uint32());
                        break;
                    case 106:
                        message.convolution_param = $root.caffe.ConvolutionParameter.decode(reader, reader.uint32());
                        break;
                    case 144:
                        message.crop_param = $root.caffe.CropParameter.decode(reader, reader.uint32());
                        break;
                    case 107:
                        message.data_param = $root.caffe.DataParameter.decode(reader, reader.uint32());
                        break;
                    case 108:
                        message.dropout_param = $root.caffe.DropoutParameter.decode(reader, reader.uint32());
                        break;
                    case 109:
                        message.dummy_data_param = $root.caffe.DummyDataParameter.decode(reader, reader.uint32());
                        break;
                    case 110:
                        message.eltwise_param = $root.caffe.EltwiseParameter.decode(reader, reader.uint32());
                        break;
                    case 140:
                        message.elu_param = $root.caffe.ELUParameter.decode(reader, reader.uint32());
                        break;
                    case 137:
                        message.embed_param = $root.caffe.EmbedParameter.decode(reader, reader.uint32());
                        break;
                    case 111:
                        message.exp_param = $root.caffe.ExpParameter.decode(reader, reader.uint32());
                        break;
                    case 135:
                        message.flatten_param = $root.caffe.FlattenParameter.decode(reader, reader.uint32());
                        break;
                    case 112:
                        message.hdf5_data_param = $root.caffe.HDF5DataParameter.decode(reader, reader.uint32());
                        break;
                    case 113:
                        message.hdf5_output_param = $root.caffe.HDF5OutputParameter.decode(reader, reader.uint32());
                        break;
                    case 114:
                        message.hinge_loss_param = $root.caffe.HingeLossParameter.decode(reader, reader.uint32());
                        break;
                    case 115:
                        message.image_data_param = $root.caffe.ImageDataParameter.decode(reader, reader.uint32());
                        break;
                    case 116:
                        message.infogain_loss_param = $root.caffe.InfogainLossParameter.decode(reader, reader.uint32());
                        break;
                    case 117:
                        message.inner_product_param = $root.caffe.InnerProductParameter.decode(reader, reader.uint32());
                        break;
                    case 143:
                        message.input_param = $root.caffe.InputParameter.decode(reader, reader.uint32());
                        break;
                    case 134:
                        message.log_param = $root.caffe.LogParameter.decode(reader, reader.uint32());
                        break;
                    case 118:
                        message.lrn_param = $root.caffe.LRNParameter.decode(reader, reader.uint32());
                        break;
                    case 119:
                        message.memory_data_param = $root.caffe.MemoryDataParameter.decode(reader, reader.uint32());
                        break;
                    case 120:
                        message.mvn_param = $root.caffe.MVNParameter.decode(reader, reader.uint32());
                        break;
                    case 145:
                        message.parameter_param = $root.caffe.ParameterParameter.decode(reader, reader.uint32());
                        break;
                    case 121:
                        message.pooling_param = $root.caffe.PoolingParameter.decode(reader, reader.uint32());
                        break;
                    case 122:
                        message.power_param = $root.caffe.PowerParameter.decode(reader, reader.uint32());
                        break;
                    case 131:
                        message.prelu_param = $root.caffe.PReLUParameter.decode(reader, reader.uint32());
                        break;
                    case 130:
                        message.python_param = $root.caffe.PythonParameter.decode(reader, reader.uint32());
                        break;
                    case 146:
                        message.recurrent_param = $root.caffe.RecurrentParameter.decode(reader, reader.uint32());
                        break;
                    case 136:
                        message.reduction_param = $root.caffe.ReductionParameter.decode(reader, reader.uint32());
                        break;
                    case 123:
                        message.relu_param = $root.caffe.ReLUParameter.decode(reader, reader.uint32());
                        break;
                    case 133:
                        message.reshape_param = $root.caffe.ReshapeParameter.decode(reader, reader.uint32());
                        break;
                    case 142:
                        message.scale_param = $root.caffe.ScaleParameter.decode(reader, reader.uint32());
                        break;
                    case 124:
                        message.sigmoid_param = $root.caffe.SigmoidParameter.decode(reader, reader.uint32());
                        break;
                    case 125:
                        message.softmax_param = $root.caffe.SoftmaxParameter.decode(reader, reader.uint32());
                        break;
                    case 132:
                        message.spp_param = $root.caffe.SPPParameter.decode(reader, reader.uint32());
                        break;
                    case 126:
                        message.slice_param = $root.caffe.SliceParameter.decode(reader, reader.uint32());
                        break;
                    case 147:
                        message.swish_param = $root.caffe.SwishParameter.decode(reader, reader.uint32());
                        break;
                    case 127:
                        message.tanh_param = $root.caffe.TanHParameter.decode(reader, reader.uint32());
                        break;
                    case 128:
                        message.threshold_param = $root.caffe.ThresholdParameter.decode(reader, reader.uint32());
                        break;
                    case 138:
                        message.tile_param = $root.caffe.TileParameter.decode(reader, reader.uint32());
                        break;
                    case 149:
                        message.engine = reader.string();
                        break;
                    case 150:
                        message.multinode = $root.caffe.MultinodeLayerParameter.decode(reader, reader.uint32());
                        break;
                    case 151:
                        message.mn_activation_param = $root.caffe.MnActivationParameter.decode(reader, reader.uint32());
                        break;
                    case 152:
                        message.box_annotator_ohem_param = $root.caffe.BoxAnnotatorOHEMParameter.decode(reader, reader.uint32());
                        break;
                    case 153:
                        message.psroi_pooling_param = $root.caffe.PSROIPoolingParameter.decode(reader, reader.uint32());
                        break;
                    case 154:
                        message.roi_pooling_param = $root.caffe.ROIPoolingParameter.decode(reader, reader.uint32());
                        break;
                    case 155:
                        message.spatial_dropout_param = $root.caffe.SpatialDropoutParameter.decode(reader, reader.uint32());
                        break;
                    case 156:
                        message.mn_grad_compress_param = $root.caffe.MnParamGradCompressParameter.decode(reader, reader.uint32());
                        break;
                    case 158:
                        message.quantization_param = $root.caffe.QuantizationParameter.decode(reader, reader.uint32());
                        break;
                    case 159:
                        message.reorg_param = $root.caffe.ReorgParameter.decode(reader, reader.uint32());
                        break;
                    case 187:
                        message.squeeze_convolution_param = $root.caffe.SqueezeConvolutionParameter.decode(reader, reader.uint32());
                        break;
                    case 188:
                        message.squeeze_inner_product_param = $root.caffe.SqueezeInnerProductParameter.decode(reader, reader.uint32());
                        break;
                    case 162:
                        message.batch_reduction_param = $root.caffe.BatchReductionParameter.decode(reader, reader.uint32());
                        break;
                    case 164:
                        message.shuffle_channel_param = $root.caffe.ShuffleChannelParameter.decode(reader, reader.uint32());
                        break;
                    case 200:
                        message.annotated_data_param = $root.caffe.AnnotatedDataParameter.decode(reader, reader.uint32());
                        break;
                    case 201:
                        message.multibox_loss_param = $root.caffe.MultiBoxLossParameter.decode(reader, reader.uint32());
                        break;
                    case 202:
                        message.permute_param = $root.caffe.PermuteParameter.decode(reader, reader.uint32());
                        break;
                    case 203:
                        message.prior_box_param = $root.caffe.PriorBoxParameter.decode(reader, reader.uint32());
                        break;
                    case 204:
                        message.detection_output_param = $root.caffe.DetectionOutputParameter.decode(reader, reader.uint32());
                        break;
                    case 205:
                        message.detection_evaluate_param = $root.caffe.DetectionEvaluateParameter.decode(reader, reader.uint32());
                        break;
                    case 206:
                        message.norm_param = $root.caffe.NormalizeParameter.decode(reader, reader.uint32());
                        break;
                    case 207:
                        message.video_data_param = $root.caffe.VideoDataParameter.decode(reader, reader.uint32());
                        break;
                    case 208:
                        message.split_param = $root.caffe.SplitParameter.decode(reader, reader.uint32());
                        break;
                    case 209:
                        message.region_loss_param = $root.caffe.RegionLossParameter.decode(reader, reader.uint32());
                        break;
                    case 301:
                        message.eval_detection_param = $root.caffe.EvalDetectionParameter.decode(reader, reader.uint32());
                        break;
                    case 601:
                        message.yolo_detection_output_param = $root.caffe.YoloDetectionOutputParameter.decode(reader, reader.uint32());
                        break;
                    case 602:
                        message.yolov3_detection_output_param = $root.caffe.Yolov3DetectionOutputParameter.decode(reader, reader.uint32());
                        break;
                    case 603:
                        message.yolov3_param = $root.caffe.Yolov3Parameter.decode(reader, reader.uint32());
                        break;
                    case 8266711:
                        message.roi_pooling_param_2 = $root.caffe.ROIPoolingParameter.decode(reader, reader.uint32());
                        break;
                    case 8266712:
                        message.normalize_bbox_param = $root.caffe.NormalizeBBoxParameter.decode(reader, reader.uint32());
                        break;
                    case 1137:
                        message.bn_param = $root.caffe.BNParameter.decode(reader, reader.uint32());
                        break;
                    case 2143:
                        message.interp_param = $root.caffe.InterpParameter.decode(reader, reader.uint32());
                        break;
                    case 3148:
                        message.coeff_schedule_param = $root.caffe.CoeffScheduleParameter.decode(reader, reader.uint32());
                        break;
                    case 3149:
                        message.augmentation_param = $root.caffe.AugmentationParameter.decode(reader, reader.uint32());
                        break;
                    case 3150:
                        message.correlation_param = $root.caffe.CorrelationParameter.decode(reader, reader.uint32());
                        break;
                    case 3151:
                        message.l1_loss_param = $root.caffe.L1LossParameter.decode(reader, reader.uint32());
                        break;
                    case 3152:
                        message.writer_param = $root.caffe.WriterParameter.decode(reader, reader.uint32());
                        break;
                    case 3153:
                        message.reader_param = $root.caffe.ReaderParameter.decode(reader, reader.uint32());
                        break;
                    case 3154:
                        message.mean_param = $root.caffe.MeanParameter.decode(reader, reader.uint32());
                        break;
                    case 3155:
                        message.resample_param = $root.caffe.ResampleParameter.decode(reader, reader.uint32());
                        break;
                    case 3156:
                        message.downsample_param = $root.caffe.DownsampleParameter.decode(reader, reader.uint32());
                        break;
                    case 3158:
                        message.lpq_loss_param = $root.caffe.LpqLossParameter.decode(reader, reader.uint32());
                        break;
                    case 3159:
                        message.flow_warp_param = $root.caffe.FlowWarpParameter.decode(reader, reader.uint32());
                        break;
                    case 3160:
                        message.accum_param = $root.caffe.AccumParameter.decode(reader, reader.uint32());
                        break;
                    case 3161:
                        message.black_augmentation_param = $root.caffe.BlackAugmentationParameter.decode(reader, reader.uint32());
                        break;
                    case 3157:
                        message.reshape_every_iter = reader.bool();
                        break;
                    case 3198:
                        message.yolo_v2_loss_param = $root.caffe.YoloV2LossParameter.decode(reader, reader.uint32());
                        break;
                    case 3199:
                        message.yolo_v3_loss_param = $root.caffe.YoloV3LossParameter.decode(reader, reader.uint32());
                        break;
                    case 4151:
                        message.box_output_param = $root.caffe.BoxOutputParameter.decode(reader, reader.uint32());
                        break;
                    case 4158:
                        message.ring_pad_param = $root.caffe.RingPadParameter.decode(reader, reader.uint32());
                        break;
                    case 4000:
                        message.force_backward = reader.bool();
                        break;
                    case 5148:
                        message.smooth_l1_loss_param = $root.caffe.SmoothL1LossParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            LayerParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.LayerParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "name":
                        message.name = reader.string();
                        break;
                    case "type":
                        message.type = reader.string();
                        break;
                    case "bottom":
                        if (!(message.bottom && message.bottom.length))
                            message.bottom = [];
                        message.bottom.push(reader.string());
                        break;
                    case "top":
                        if (!(message.top && message.top.length))
                            message.top = [];
                        message.top.push(reader.string());
                        break;
                    case "phase":
                        message.phase = reader.enum($root.caffe.Phase);
                        break;
                    case "loss_weight":
                        if (!(message.loss_weight && message.loss_weight.length))
                            message.loss_weight = [];
                        message.loss_weight.push(reader.float());
                        break;
                    case "param":
                        if (!(message.param && message.param.length))
                            message.param = [];
                        message.param.push($root.caffe.ParamSpec.decodeText(reader, true));
                        break;
                    case "blobs":
                        if (!(message.blobs && message.blobs.length))
                            message.blobs = [];
                        message.blobs.push($root.caffe.BlobProto.decodeText(reader, true));
                        break;
                    case "propagate_down":
                        if (!(message.propagate_down && message.propagate_down.length))
                            message.propagate_down = [];
                        message.propagate_down.push(reader.bool());
                        break;
                    case "include":
                        if (!(message.include && message.include.length))
                            message.include = [];
                        message.include.push($root.caffe.NetStateRule.decodeText(reader, true));
                        break;
                    case "exclude":
                        if (!(message.exclude && message.exclude.length))
                            message.exclude = [];
                        message.exclude.push($root.caffe.NetStateRule.decodeText(reader, true));
                        break;
                    case "transform_param":
                        message.transform_param = $root.caffe.TransformationParameter.decodeText(reader, true);
                        break;
                    case "loss_param":
                        message.loss_param = $root.caffe.LossParameter.decodeText(reader, true);
                        break;
                    case "accuracy_param":
                        message.accuracy_param = $root.caffe.AccuracyParameter.decodeText(reader, true);
                        break;
                    case "argmax_param":
                        message.argmax_param = $root.caffe.ArgMaxParameter.decodeText(reader, true);
                        break;
                    case "batch_norm_param":
                        message.batch_norm_param = $root.caffe.BatchNormParameter.decodeText(reader, true);
                        break;
                    case "bias_param":
                        message.bias_param = $root.caffe.BiasParameter.decodeText(reader, true);
                        break;
                    case "clip_param":
                        message.clip_param = $root.caffe.ClipParameter.decodeText(reader, true);
                        break;
                    case "concat_param":
                        message.concat_param = $root.caffe.ConcatParameter.decodeText(reader, true);
                        break;
                    case "contrastive_loss_param":
                        message.contrastive_loss_param = $root.caffe.ContrastiveLossParameter.decodeText(reader, true);
                        break;
                    case "convolution_param":
                        message.convolution_param = $root.caffe.ConvolutionParameter.decodeText(reader, true);
                        break;
                    case "crop_param":
                        message.crop_param = $root.caffe.CropParameter.decodeText(reader, true);
                        break;
                    case "data_param":
                        message.data_param = $root.caffe.DataParameter.decodeText(reader, true);
                        break;
                    case "dropout_param":
                        message.dropout_param = $root.caffe.DropoutParameter.decodeText(reader, true);
                        break;
                    case "dummy_data_param":
                        message.dummy_data_param = $root.caffe.DummyDataParameter.decodeText(reader, true);
                        break;
                    case "eltwise_param":
                        message.eltwise_param = $root.caffe.EltwiseParameter.decodeText(reader, true);
                        break;
                    case "elu_param":
                        message.elu_param = $root.caffe.ELUParameter.decodeText(reader, true);
                        break;
                    case "embed_param":
                        message.embed_param = $root.caffe.EmbedParameter.decodeText(reader, true);
                        break;
                    case "exp_param":
                        message.exp_param = $root.caffe.ExpParameter.decodeText(reader, true);
                        break;
                    case "flatten_param":
                        message.flatten_param = $root.caffe.FlattenParameter.decodeText(reader, true);
                        break;
                    case "hdf5_data_param":
                        message.hdf5_data_param = $root.caffe.HDF5DataParameter.decodeText(reader, true);
                        break;
                    case "hdf5_output_param":
                        message.hdf5_output_param = $root.caffe.HDF5OutputParameter.decodeText(reader, true);
                        break;
                    case "hinge_loss_param":
                        message.hinge_loss_param = $root.caffe.HingeLossParameter.decodeText(reader, true);
                        break;
                    case "image_data_param":
                        message.image_data_param = $root.caffe.ImageDataParameter.decodeText(reader, true);
                        break;
                    case "infogain_loss_param":
                        message.infogain_loss_param = $root.caffe.InfogainLossParameter.decodeText(reader, true);
                        break;
                    case "inner_product_param":
                        message.inner_product_param = $root.caffe.InnerProductParameter.decodeText(reader, true);
                        break;
                    case "input_param":
                        message.input_param = $root.caffe.InputParameter.decodeText(reader, true);
                        break;
                    case "log_param":
                        message.log_param = $root.caffe.LogParameter.decodeText(reader, true);
                        break;
                    case "lrn_param":
                        message.lrn_param = $root.caffe.LRNParameter.decodeText(reader, true);
                        break;
                    case "memory_data_param":
                        message.memory_data_param = $root.caffe.MemoryDataParameter.decodeText(reader, true);
                        break;
                    case "mvn_param":
                        message.mvn_param = $root.caffe.MVNParameter.decodeText(reader, true);
                        break;
                    case "parameter_param":
                        message.parameter_param = $root.caffe.ParameterParameter.decodeText(reader, true);
                        break;
                    case "pooling_param":
                        message.pooling_param = $root.caffe.PoolingParameter.decodeText(reader, true);
                        break;
                    case "power_param":
                        message.power_param = $root.caffe.PowerParameter.decodeText(reader, true);
                        break;
                    case "prelu_param":
                        message.prelu_param = $root.caffe.PReLUParameter.decodeText(reader, true);
                        break;
                    case "python_param":
                        message.python_param = $root.caffe.PythonParameter.decodeText(reader, true);
                        break;
                    case "recurrent_param":
                        message.recurrent_param = $root.caffe.RecurrentParameter.decodeText(reader, true);
                        break;
                    case "reduction_param":
                        message.reduction_param = $root.caffe.ReductionParameter.decodeText(reader, true);
                        break;
                    case "relu_param":
                        message.relu_param = $root.caffe.ReLUParameter.decodeText(reader, true);
                        break;
                    case "reshape_param":
                        message.reshape_param = $root.caffe.ReshapeParameter.decodeText(reader, true);
                        break;
                    case "scale_param":
                        message.scale_param = $root.caffe.ScaleParameter.decodeText(reader, true);
                        break;
                    case "sigmoid_param":
                        message.sigmoid_param = $root.caffe.SigmoidParameter.decodeText(reader, true);
                        break;
                    case "softmax_param":
                        message.softmax_param = $root.caffe.SoftmaxParameter.decodeText(reader, true);
                        break;
                    case "spp_param":
                        message.spp_param = $root.caffe.SPPParameter.decodeText(reader, true);
                        break;
                    case "slice_param":
                        message.slice_param = $root.caffe.SliceParameter.decodeText(reader, true);
                        break;
                    case "swish_param":
                        message.swish_param = $root.caffe.SwishParameter.decodeText(reader, true);
                        break;
                    case "tanh_param":
                        message.tanh_param = $root.caffe.TanHParameter.decodeText(reader, true);
                        break;
                    case "threshold_param":
                        message.threshold_param = $root.caffe.ThresholdParameter.decodeText(reader, true);
                        break;
                    case "tile_param":
                        message.tile_param = $root.caffe.TileParameter.decodeText(reader, true);
                        break;
                    case "engine":
                        message.engine = reader.string();
                        break;
                    case "multinode":
                        message.multinode = $root.caffe.MultinodeLayerParameter.decodeText(reader, true);
                        break;
                    case "mn_activation_param":
                        message.mn_activation_param = $root.caffe.MnActivationParameter.decodeText(reader, true);
                        break;
                    case "box_annotator_ohem_param":
                        message.box_annotator_ohem_param = $root.caffe.BoxAnnotatorOHEMParameter.decodeText(reader, true);
                        break;
                    case "psroi_pooling_param":
                        message.psroi_pooling_param = $root.caffe.PSROIPoolingParameter.decodeText(reader, true);
                        break;
                    case "roi_pooling_param":
                        message.roi_pooling_param = $root.caffe.ROIPoolingParameter.decodeText(reader, true);
                        break;
                    case "spatial_dropout_param":
                        message.spatial_dropout_param = $root.caffe.SpatialDropoutParameter.decodeText(reader, true);
                        break;
                    case "mn_grad_compress_param":
                        message.mn_grad_compress_param = $root.caffe.MnParamGradCompressParameter.decodeText(reader, true);
                        break;
                    case "quantization_param":
                        message.quantization_param = $root.caffe.QuantizationParameter.decodeText(reader, true);
                        break;
                    case "reorg_param":
                        message.reorg_param = $root.caffe.ReorgParameter.decodeText(reader, true);
                        break;
                    case "squeeze_convolution_param":
                        message.squeeze_convolution_param = $root.caffe.SqueezeConvolutionParameter.decodeText(reader, true);
                        break;
                    case "squeeze_inner_product_param":
                        message.squeeze_inner_product_param = $root.caffe.SqueezeInnerProductParameter.decodeText(reader, true);
                        break;
                    case "batch_reduction_param":
                        message.batch_reduction_param = $root.caffe.BatchReductionParameter.decodeText(reader, true);
                        break;
                    case "shuffle_channel_param":
                        message.shuffle_channel_param = $root.caffe.ShuffleChannelParameter.decodeText(reader, true);
                        break;
                    case "annotated_data_param":
                        message.annotated_data_param = $root.caffe.AnnotatedDataParameter.decodeText(reader, true);
                        break;
                    case "multibox_loss_param":
                        message.multibox_loss_param = $root.caffe.MultiBoxLossParameter.decodeText(reader, true);
                        break;
                    case "permute_param":
                        message.permute_param = $root.caffe.PermuteParameter.decodeText(reader, true);
                        break;
                    case "prior_box_param":
                        message.prior_box_param = $root.caffe.PriorBoxParameter.decodeText(reader, true);
                        break;
                    case "detection_output_param":
                        message.detection_output_param = $root.caffe.DetectionOutputParameter.decodeText(reader, true);
                        break;
                    case "detection_evaluate_param":
                        message.detection_evaluate_param = $root.caffe.DetectionEvaluateParameter.decodeText(reader, true);
                        break;
                    case "norm_param":
                        message.norm_param = $root.caffe.NormalizeParameter.decodeText(reader, true);
                        break;
                    case "video_data_param":
                        message.video_data_param = $root.caffe.VideoDataParameter.decodeText(reader, true);
                        break;
                    case "split_param":
                        message.split_param = $root.caffe.SplitParameter.decodeText(reader, true);
                        break;
                    case "region_loss_param":
                        message.region_loss_param = $root.caffe.RegionLossParameter.decodeText(reader, true);
                        break;
                    case "eval_detection_param":
                        message.eval_detection_param = $root.caffe.EvalDetectionParameter.decodeText(reader, true);
                        break;
                    case "yolo_detection_output_param":
                        message.yolo_detection_output_param = $root.caffe.YoloDetectionOutputParameter.decodeText(reader, true);
                        break;
                    case "yolov3_detection_output_param":
                        message.yolov3_detection_output_param = $root.caffe.Yolov3DetectionOutputParameter.decodeText(reader, true);
                        break;
                    case "yolov3_param":
                        message.yolov3_param = $root.caffe.Yolov3Parameter.decodeText(reader, true);
                        break;
                    case "roi_pooling_param_2":
                        message.roi_pooling_param_2 = $root.caffe.ROIPoolingParameter.decodeText(reader, true);
                        break;
                    case "normalize_bbox_param":
                        message.normalize_bbox_param = $root.caffe.NormalizeBBoxParameter.decodeText(reader, true);
                        break;
                    case "bn_param":
                        message.bn_param = $root.caffe.BNParameter.decodeText(reader, true);
                        break;
                    case "interp_param":
                        message.interp_param = $root.caffe.InterpParameter.decodeText(reader, true);
                        break;
                    case "coeff_schedule_param":
                        message.coeff_schedule_param = $root.caffe.CoeffScheduleParameter.decodeText(reader, true);
                        break;
                    case "augmentation_param":
                        message.augmentation_param = $root.caffe.AugmentationParameter.decodeText(reader, true);
                        break;
                    case "correlation_param":
                        message.correlation_param = $root.caffe.CorrelationParameter.decodeText(reader, true);
                        break;
                    case "l1_loss_param":
                        message.l1_loss_param = $root.caffe.L1LossParameter.decodeText(reader, true);
                        break;
                    case "writer_param":
                        message.writer_param = $root.caffe.WriterParameter.decodeText(reader, true);
                        break;
                    case "reader_param":
                        message.reader_param = $root.caffe.ReaderParameter.decodeText(reader, true);
                        break;
                    case "mean_param":
                        message.mean_param = $root.caffe.MeanParameter.decodeText(reader, true);
                        break;
                    case "resample_param":
                        message.resample_param = $root.caffe.ResampleParameter.decodeText(reader, true);
                        break;
                    case "downsample_param":
                        message.downsample_param = $root.caffe.DownsampleParameter.decodeText(reader, true);
                        break;
                    case "lpq_loss_param":
                        message.lpq_loss_param = $root.caffe.LpqLossParameter.decodeText(reader, true);
                        break;
                    case "flow_warp_param":
                        message.flow_warp_param = $root.caffe.FlowWarpParameter.decodeText(reader, true);
                        break;
                    case "accum_param":
                        message.accum_param = $root.caffe.AccumParameter.decodeText(reader, true);
                        break;
                    case "black_augmentation_param":
                        message.black_augmentation_param = $root.caffe.BlackAugmentationParameter.decodeText(reader, true);
                        break;
                    case "reshape_every_iter":
                        message.reshape_every_iter = reader.bool();
                        break;
                    case "yolo_v2_loss_param":
                        message.yolo_v2_loss_param = $root.caffe.YoloV2LossParameter.decodeText(reader, true);
                        break;
                    case "yolo_v3_loss_param":
                        message.yolo_v3_loss_param = $root.caffe.YoloV3LossParameter.decodeText(reader, true);
                        break;
                    case "box_output_param":
                        message.box_output_param = $root.caffe.BoxOutputParameter.decodeText(reader, true);
                        break;
                    case "ring_pad_param":
                        message.ring_pad_param = $root.caffe.RingPadParameter.decodeText(reader, true);
                        break;
                    case "force_backward":
                        message.force_backward = reader.bool();
                        break;
                    case "smooth_l1_loss_param":
                        message.smooth_l1_loss_param = $root.caffe.SmoothL1LossParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            LayerParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.bottom != null && message.hasOwnProperty("bottom")) {
                    if (!Array.isArray(message.bottom))
                        return "bottom: array expected";
                    for (var i = 0; i < message.bottom.length; ++i)
                        if (!$util.isString(message.bottom[i]))
                            return "bottom: string[] expected";
                }
                if (message.top != null && message.hasOwnProperty("top")) {
                    if (!Array.isArray(message.top))
                        return "top: array expected";
                    for (var i = 0; i < message.top.length; ++i)
                        if (!$util.isString(message.top[i]))
                            return "top: string[] expected";
                }
                if (message.phase != null && message.hasOwnProperty("phase"))
                    switch (message.phase) {
                    default:
                        return "phase: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.loss_weight != null && message.hasOwnProperty("loss_weight")) {
                    if (!Array.isArray(message.loss_weight))
                        return "loss_weight: array expected";
                    for (var i = 0; i < message.loss_weight.length; ++i)
                        if (typeof message.loss_weight[i] !== "number")
                            return "loss_weight: number[] expected";
                }
                if (message.param != null && message.hasOwnProperty("param")) {
                    if (!Array.isArray(message.param))
                        return "param: array expected";
                    for (var i = 0; i < message.param.length; ++i) {
                        var error = $root.caffe.ParamSpec.verify(message.param[i]);
                        if (error)
                            return "param." + error;
                    }
                }
                if (message.blobs != null && message.hasOwnProperty("blobs")) {
                    if (!Array.isArray(message.blobs))
                        return "blobs: array expected";
                    for (var i = 0; i < message.blobs.length; ++i) {
                        var error = $root.caffe.BlobProto.verify(message.blobs[i]);
                        if (error)
                            return "blobs." + error;
                    }
                }
                if (message.propagate_down != null && message.hasOwnProperty("propagate_down")) {
                    if (!Array.isArray(message.propagate_down))
                        return "propagate_down: array expected";
                    for (var i = 0; i < message.propagate_down.length; ++i)
                        if (typeof message.propagate_down[i] !== "boolean")
                            return "propagate_down: boolean[] expected";
                }
                if (message.include != null && message.hasOwnProperty("include")) {
                    if (!Array.isArray(message.include))
                        return "include: array expected";
                    for (var i = 0; i < message.include.length; ++i) {
                        var error = $root.caffe.NetStateRule.verify(message.include[i]);
                        if (error)
                            return "include." + error;
                    }
                }
                if (message.exclude != null && message.hasOwnProperty("exclude")) {
                    if (!Array.isArray(message.exclude))
                        return "exclude: array expected";
                    for (var i = 0; i < message.exclude.length; ++i) {
                        var error = $root.caffe.NetStateRule.verify(message.exclude[i]);
                        if (error)
                            return "exclude." + error;
                    }
                }
                if (message.transform_param != null && message.hasOwnProperty("transform_param")) {
                    var error = $root.caffe.TransformationParameter.verify(message.transform_param);
                    if (error)
                        return "transform_param." + error;
                }
                if (message.loss_param != null && message.hasOwnProperty("loss_param")) {
                    var error = $root.caffe.LossParameter.verify(message.loss_param);
                    if (error)
                        return "loss_param." + error;
                }
                if (message.accuracy_param != null && message.hasOwnProperty("accuracy_param")) {
                    var error = $root.caffe.AccuracyParameter.verify(message.accuracy_param);
                    if (error)
                        return "accuracy_param." + error;
                }
                if (message.argmax_param != null && message.hasOwnProperty("argmax_param")) {
                    var error = $root.caffe.ArgMaxParameter.verify(message.argmax_param);
                    if (error)
                        return "argmax_param." + error;
                }
                if (message.batch_norm_param != null && message.hasOwnProperty("batch_norm_param")) {
                    var error = $root.caffe.BatchNormParameter.verify(message.batch_norm_param);
                    if (error)
                        return "batch_norm_param." + error;
                }
                if (message.bias_param != null && message.hasOwnProperty("bias_param")) {
                    var error = $root.caffe.BiasParameter.verify(message.bias_param);
                    if (error)
                        return "bias_param." + error;
                }
                if (message.clip_param != null && message.hasOwnProperty("clip_param")) {
                    var error = $root.caffe.ClipParameter.verify(message.clip_param);
                    if (error)
                        return "clip_param." + error;
                }
                if (message.concat_param != null && message.hasOwnProperty("concat_param")) {
                    var error = $root.caffe.ConcatParameter.verify(message.concat_param);
                    if (error)
                        return "concat_param." + error;
                }
                if (message.contrastive_loss_param != null && message.hasOwnProperty("contrastive_loss_param")) {
                    var error = $root.caffe.ContrastiveLossParameter.verify(message.contrastive_loss_param);
                    if (error)
                        return "contrastive_loss_param." + error;
                }
                if (message.convolution_param != null && message.hasOwnProperty("convolution_param")) {
                    var error = $root.caffe.ConvolutionParameter.verify(message.convolution_param);
                    if (error)
                        return "convolution_param." + error;
                }
                if (message.crop_param != null && message.hasOwnProperty("crop_param")) {
                    var error = $root.caffe.CropParameter.verify(message.crop_param);
                    if (error)
                        return "crop_param." + error;
                }
                if (message.data_param != null && message.hasOwnProperty("data_param")) {
                    var error = $root.caffe.DataParameter.verify(message.data_param);
                    if (error)
                        return "data_param." + error;
                }
                if (message.dropout_param != null && message.hasOwnProperty("dropout_param")) {
                    var error = $root.caffe.DropoutParameter.verify(message.dropout_param);
                    if (error)
                        return "dropout_param." + error;
                }
                if (message.dummy_data_param != null && message.hasOwnProperty("dummy_data_param")) {
                    var error = $root.caffe.DummyDataParameter.verify(message.dummy_data_param);
                    if (error)
                        return "dummy_data_param." + error;
                }
                if (message.eltwise_param != null && message.hasOwnProperty("eltwise_param")) {
                    var error = $root.caffe.EltwiseParameter.verify(message.eltwise_param);
                    if (error)
                        return "eltwise_param." + error;
                }
                if (message.elu_param != null && message.hasOwnProperty("elu_param")) {
                    var error = $root.caffe.ELUParameter.verify(message.elu_param);
                    if (error)
                        return "elu_param." + error;
                }
                if (message.embed_param != null && message.hasOwnProperty("embed_param")) {
                    var error = $root.caffe.EmbedParameter.verify(message.embed_param);
                    if (error)
                        return "embed_param." + error;
                }
                if (message.exp_param != null && message.hasOwnProperty("exp_param")) {
                    var error = $root.caffe.ExpParameter.verify(message.exp_param);
                    if (error)
                        return "exp_param." + error;
                }
                if (message.flatten_param != null && message.hasOwnProperty("flatten_param")) {
                    var error = $root.caffe.FlattenParameter.verify(message.flatten_param);
                    if (error)
                        return "flatten_param." + error;
                }
                if (message.hdf5_data_param != null && message.hasOwnProperty("hdf5_data_param")) {
                    var error = $root.caffe.HDF5DataParameter.verify(message.hdf5_data_param);
                    if (error)
                        return "hdf5_data_param." + error;
                }
                if (message.hdf5_output_param != null && message.hasOwnProperty("hdf5_output_param")) {
                    var error = $root.caffe.HDF5OutputParameter.verify(message.hdf5_output_param);
                    if (error)
                        return "hdf5_output_param." + error;
                }
                if (message.hinge_loss_param != null && message.hasOwnProperty("hinge_loss_param")) {
                    var error = $root.caffe.HingeLossParameter.verify(message.hinge_loss_param);
                    if (error)
                        return "hinge_loss_param." + error;
                }
                if (message.image_data_param != null && message.hasOwnProperty("image_data_param")) {
                    var error = $root.caffe.ImageDataParameter.verify(message.image_data_param);
                    if (error)
                        return "image_data_param." + error;
                }
                if (message.infogain_loss_param != null && message.hasOwnProperty("infogain_loss_param")) {
                    var error = $root.caffe.InfogainLossParameter.verify(message.infogain_loss_param);
                    if (error)
                        return "infogain_loss_param." + error;
                }
                if (message.inner_product_param != null && message.hasOwnProperty("inner_product_param")) {
                    var error = $root.caffe.InnerProductParameter.verify(message.inner_product_param);
                    if (error)
                        return "inner_product_param." + error;
                }
                if (message.input_param != null && message.hasOwnProperty("input_param")) {
                    var error = $root.caffe.InputParameter.verify(message.input_param);
                    if (error)
                        return "input_param." + error;
                }
                if (message.log_param != null && message.hasOwnProperty("log_param")) {
                    var error = $root.caffe.LogParameter.verify(message.log_param);
                    if (error)
                        return "log_param." + error;
                }
                if (message.lrn_param != null && message.hasOwnProperty("lrn_param")) {
                    var error = $root.caffe.LRNParameter.verify(message.lrn_param);
                    if (error)
                        return "lrn_param." + error;
                }
                if (message.memory_data_param != null && message.hasOwnProperty("memory_data_param")) {
                    var error = $root.caffe.MemoryDataParameter.verify(message.memory_data_param);
                    if (error)
                        return "memory_data_param." + error;
                }
                if (message.mvn_param != null && message.hasOwnProperty("mvn_param")) {
                    var error = $root.caffe.MVNParameter.verify(message.mvn_param);
                    if (error)
                        return "mvn_param." + error;
                }
                if (message.parameter_param != null && message.hasOwnProperty("parameter_param")) {
                    var error = $root.caffe.ParameterParameter.verify(message.parameter_param);
                    if (error)
                        return "parameter_param." + error;
                }
                if (message.pooling_param != null && message.hasOwnProperty("pooling_param")) {
                    var error = $root.caffe.PoolingParameter.verify(message.pooling_param);
                    if (error)
                        return "pooling_param." + error;
                }
                if (message.power_param != null && message.hasOwnProperty("power_param")) {
                    var error = $root.caffe.PowerParameter.verify(message.power_param);
                    if (error)
                        return "power_param." + error;
                }
                if (message.prelu_param != null && message.hasOwnProperty("prelu_param")) {
                    var error = $root.caffe.PReLUParameter.verify(message.prelu_param);
                    if (error)
                        return "prelu_param." + error;
                }
                if (message.python_param != null && message.hasOwnProperty("python_param")) {
                    var error = $root.caffe.PythonParameter.verify(message.python_param);
                    if (error)
                        return "python_param." + error;
                }
                if (message.recurrent_param != null && message.hasOwnProperty("recurrent_param")) {
                    var error = $root.caffe.RecurrentParameter.verify(message.recurrent_param);
                    if (error)
                        return "recurrent_param." + error;
                }
                if (message.reduction_param != null && message.hasOwnProperty("reduction_param")) {
                    var error = $root.caffe.ReductionParameter.verify(message.reduction_param);
                    if (error)
                        return "reduction_param." + error;
                }
                if (message.relu_param != null && message.hasOwnProperty("relu_param")) {
                    var error = $root.caffe.ReLUParameter.verify(message.relu_param);
                    if (error)
                        return "relu_param." + error;
                }
                if (message.reshape_param != null && message.hasOwnProperty("reshape_param")) {
                    var error = $root.caffe.ReshapeParameter.verify(message.reshape_param);
                    if (error)
                        return "reshape_param." + error;
                }
                if (message.scale_param != null && message.hasOwnProperty("scale_param")) {
                    var error = $root.caffe.ScaleParameter.verify(message.scale_param);
                    if (error)
                        return "scale_param." + error;
                }
                if (message.sigmoid_param != null && message.hasOwnProperty("sigmoid_param")) {
                    var error = $root.caffe.SigmoidParameter.verify(message.sigmoid_param);
                    if (error)
                        return "sigmoid_param." + error;
                }
                if (message.softmax_param != null && message.hasOwnProperty("softmax_param")) {
                    var error = $root.caffe.SoftmaxParameter.verify(message.softmax_param);
                    if (error)
                        return "softmax_param." + error;
                }
                if (message.spp_param != null && message.hasOwnProperty("spp_param")) {
                    var error = $root.caffe.SPPParameter.verify(message.spp_param);
                    if (error)
                        return "spp_param." + error;
                }
                if (message.slice_param != null && message.hasOwnProperty("slice_param")) {
                    var error = $root.caffe.SliceParameter.verify(message.slice_param);
                    if (error)
                        return "slice_param." + error;
                }
                if (message.swish_param != null && message.hasOwnProperty("swish_param")) {
                    var error = $root.caffe.SwishParameter.verify(message.swish_param);
                    if (error)
                        return "swish_param." + error;
                }
                if (message.tanh_param != null && message.hasOwnProperty("tanh_param")) {
                    var error = $root.caffe.TanHParameter.verify(message.tanh_param);
                    if (error)
                        return "tanh_param." + error;
                }
                if (message.threshold_param != null && message.hasOwnProperty("threshold_param")) {
                    var error = $root.caffe.ThresholdParameter.verify(message.threshold_param);
                    if (error)
                        return "threshold_param." + error;
                }
                if (message.tile_param != null && message.hasOwnProperty("tile_param")) {
                    var error = $root.caffe.TileParameter.verify(message.tile_param);
                    if (error)
                        return "tile_param." + error;
                }
                if (message.engine != null && message.hasOwnProperty("engine"))
                    if (!$util.isString(message.engine))
                        return "engine: string expected";
                if (message.multinode != null && message.hasOwnProperty("multinode")) {
                    var error = $root.caffe.MultinodeLayerParameter.verify(message.multinode);
                    if (error)
                        return "multinode." + error;
                }
                if (message.mn_activation_param != null && message.hasOwnProperty("mn_activation_param")) {
                    var error = $root.caffe.MnActivationParameter.verify(message.mn_activation_param);
                    if (error)
                        return "mn_activation_param." + error;
                }
                if (message.box_annotator_ohem_param != null && message.hasOwnProperty("box_annotator_ohem_param")) {
                    var error = $root.caffe.BoxAnnotatorOHEMParameter.verify(message.box_annotator_ohem_param);
                    if (error)
                        return "box_annotator_ohem_param." + error;
                }
                if (message.psroi_pooling_param != null && message.hasOwnProperty("psroi_pooling_param")) {
                    var error = $root.caffe.PSROIPoolingParameter.verify(message.psroi_pooling_param);
                    if (error)
                        return "psroi_pooling_param." + error;
                }
                if (message.roi_pooling_param != null && message.hasOwnProperty("roi_pooling_param")) {
                    var error = $root.caffe.ROIPoolingParameter.verify(message.roi_pooling_param);
                    if (error)
                        return "roi_pooling_param." + error;
                }
                if (message.spatial_dropout_param != null && message.hasOwnProperty("spatial_dropout_param")) {
                    var error = $root.caffe.SpatialDropoutParameter.verify(message.spatial_dropout_param);
                    if (error)
                        return "spatial_dropout_param." + error;
                }
                if (message.mn_grad_compress_param != null && message.hasOwnProperty("mn_grad_compress_param")) {
                    var error = $root.caffe.MnParamGradCompressParameter.verify(message.mn_grad_compress_param);
                    if (error)
                        return "mn_grad_compress_param." + error;
                }
                if (message.quantization_param != null && message.hasOwnProperty("quantization_param")) {
                    var error = $root.caffe.QuantizationParameter.verify(message.quantization_param);
                    if (error)
                        return "quantization_param." + error;
                }
                if (message.reorg_param != null && message.hasOwnProperty("reorg_param")) {
                    var error = $root.caffe.ReorgParameter.verify(message.reorg_param);
                    if (error)
                        return "reorg_param." + error;
                }
                if (message.squeeze_convolution_param != null && message.hasOwnProperty("squeeze_convolution_param")) {
                    var error = $root.caffe.SqueezeConvolutionParameter.verify(message.squeeze_convolution_param);
                    if (error)
                        return "squeeze_convolution_param." + error;
                }
                if (message.squeeze_inner_product_param != null && message.hasOwnProperty("squeeze_inner_product_param")) {
                    var error = $root.caffe.SqueezeInnerProductParameter.verify(message.squeeze_inner_product_param);
                    if (error)
                        return "squeeze_inner_product_param." + error;
                }
                if (message.batch_reduction_param != null && message.hasOwnProperty("batch_reduction_param")) {
                    var error = $root.caffe.BatchReductionParameter.verify(message.batch_reduction_param);
                    if (error)
                        return "batch_reduction_param." + error;
                }
                if (message.shuffle_channel_param != null && message.hasOwnProperty("shuffle_channel_param")) {
                    var error = $root.caffe.ShuffleChannelParameter.verify(message.shuffle_channel_param);
                    if (error)
                        return "shuffle_channel_param." + error;
                }
                if (message.annotated_data_param != null && message.hasOwnProperty("annotated_data_param")) {
                    var error = $root.caffe.AnnotatedDataParameter.verify(message.annotated_data_param);
                    if (error)
                        return "annotated_data_param." + error;
                }
                if (message.multibox_loss_param != null && message.hasOwnProperty("multibox_loss_param")) {
                    var error = $root.caffe.MultiBoxLossParameter.verify(message.multibox_loss_param);
                    if (error)
                        return "multibox_loss_param." + error;
                }
                if (message.permute_param != null && message.hasOwnProperty("permute_param")) {
                    var error = $root.caffe.PermuteParameter.verify(message.permute_param);
                    if (error)
                        return "permute_param." + error;
                }
                if (message.prior_box_param != null && message.hasOwnProperty("prior_box_param")) {
                    var error = $root.caffe.PriorBoxParameter.verify(message.prior_box_param);
                    if (error)
                        return "prior_box_param." + error;
                }
                if (message.detection_output_param != null && message.hasOwnProperty("detection_output_param")) {
                    var error = $root.caffe.DetectionOutputParameter.verify(message.detection_output_param);
                    if (error)
                        return "detection_output_param." + error;
                }
                if (message.detection_evaluate_param != null && message.hasOwnProperty("detection_evaluate_param")) {
                    var error = $root.caffe.DetectionEvaluateParameter.verify(message.detection_evaluate_param);
                    if (error)
                        return "detection_evaluate_param." + error;
                }
                if (message.norm_param != null && message.hasOwnProperty("norm_param")) {
                    var error = $root.caffe.NormalizeParameter.verify(message.norm_param);
                    if (error)
                        return "norm_param." + error;
                }
                if (message.video_data_param != null && message.hasOwnProperty("video_data_param")) {
                    var error = $root.caffe.VideoDataParameter.verify(message.video_data_param);
                    if (error)
                        return "video_data_param." + error;
                }
                if (message.split_param != null && message.hasOwnProperty("split_param")) {
                    var error = $root.caffe.SplitParameter.verify(message.split_param);
                    if (error)
                        return "split_param." + error;
                }
                if (message.region_loss_param != null && message.hasOwnProperty("region_loss_param")) {
                    var error = $root.caffe.RegionLossParameter.verify(message.region_loss_param);
                    if (error)
                        return "region_loss_param." + error;
                }
                if (message.eval_detection_param != null && message.hasOwnProperty("eval_detection_param")) {
                    var error = $root.caffe.EvalDetectionParameter.verify(message.eval_detection_param);
                    if (error)
                        return "eval_detection_param." + error;
                }
                if (message.yolo_detection_output_param != null && message.hasOwnProperty("yolo_detection_output_param")) {
                    var error = $root.caffe.YoloDetectionOutputParameter.verify(message.yolo_detection_output_param);
                    if (error)
                        return "yolo_detection_output_param." + error;
                }
                if (message.yolov3_detection_output_param != null && message.hasOwnProperty("yolov3_detection_output_param")) {
                    var error = $root.caffe.Yolov3DetectionOutputParameter.verify(message.yolov3_detection_output_param);
                    if (error)
                        return "yolov3_detection_output_param." + error;
                }
                if (message.yolov3_param != null && message.hasOwnProperty("yolov3_param")) {
                    var error = $root.caffe.Yolov3Parameter.verify(message.yolov3_param);
                    if (error)
                        return "yolov3_param." + error;
                }
                if (message.roi_pooling_param_2 != null && message.hasOwnProperty("roi_pooling_param_2")) {
                    var error = $root.caffe.ROIPoolingParameter.verify(message.roi_pooling_param_2);
                    if (error)
                        return "roi_pooling_param_2." + error;
                }
                if (message.normalize_bbox_param != null && message.hasOwnProperty("normalize_bbox_param")) {
                    var error = $root.caffe.NormalizeBBoxParameter.verify(message.normalize_bbox_param);
                    if (error)
                        return "normalize_bbox_param." + error;
                }
                if (message.bn_param != null && message.hasOwnProperty("bn_param")) {
                    var error = $root.caffe.BNParameter.verify(message.bn_param);
                    if (error)
                        return "bn_param." + error;
                }
                if (message.interp_param != null && message.hasOwnProperty("interp_param")) {
                    var error = $root.caffe.InterpParameter.verify(message.interp_param);
                    if (error)
                        return "interp_param." + error;
                }
                if (message.coeff_schedule_param != null && message.hasOwnProperty("coeff_schedule_param")) {
                    var error = $root.caffe.CoeffScheduleParameter.verify(message.coeff_schedule_param);
                    if (error)
                        return "coeff_schedule_param." + error;
                }
                if (message.augmentation_param != null && message.hasOwnProperty("augmentation_param")) {
                    var error = $root.caffe.AugmentationParameter.verify(message.augmentation_param);
                    if (error)
                        return "augmentation_param." + error;
                }
                if (message.correlation_param != null && message.hasOwnProperty("correlation_param")) {
                    var error = $root.caffe.CorrelationParameter.verify(message.correlation_param);
                    if (error)
                        return "correlation_param." + error;
                }
                if (message.l1_loss_param != null && message.hasOwnProperty("l1_loss_param")) {
                    var error = $root.caffe.L1LossParameter.verify(message.l1_loss_param);
                    if (error)
                        return "l1_loss_param." + error;
                }
                if (message.writer_param != null && message.hasOwnProperty("writer_param")) {
                    var error = $root.caffe.WriterParameter.verify(message.writer_param);
                    if (error)
                        return "writer_param." + error;
                }
                if (message.reader_param != null && message.hasOwnProperty("reader_param")) {
                    var error = $root.caffe.ReaderParameter.verify(message.reader_param);
                    if (error)
                        return "reader_param." + error;
                }
                if (message.mean_param != null && message.hasOwnProperty("mean_param")) {
                    var error = $root.caffe.MeanParameter.verify(message.mean_param);
                    if (error)
                        return "mean_param." + error;
                }
                if (message.resample_param != null && message.hasOwnProperty("resample_param")) {
                    var error = $root.caffe.ResampleParameter.verify(message.resample_param);
                    if (error)
                        return "resample_param." + error;
                }
                if (message.downsample_param != null && message.hasOwnProperty("downsample_param")) {
                    var error = $root.caffe.DownsampleParameter.verify(message.downsample_param);
                    if (error)
                        return "downsample_param." + error;
                }
                if (message.lpq_loss_param != null && message.hasOwnProperty("lpq_loss_param")) {
                    var error = $root.caffe.LpqLossParameter.verify(message.lpq_loss_param);
                    if (error)
                        return "lpq_loss_param." + error;
                }
                if (message.flow_warp_param != null && message.hasOwnProperty("flow_warp_param")) {
                    var error = $root.caffe.FlowWarpParameter.verify(message.flow_warp_param);
                    if (error)
                        return "flow_warp_param." + error;
                }
                if (message.accum_param != null && message.hasOwnProperty("accum_param")) {
                    var error = $root.caffe.AccumParameter.verify(message.accum_param);
                    if (error)
                        return "accum_param." + error;
                }
                if (message.black_augmentation_param != null && message.hasOwnProperty("black_augmentation_param")) {
                    var error = $root.caffe.BlackAugmentationParameter.verify(message.black_augmentation_param);
                    if (error)
                        return "black_augmentation_param." + error;
                }
                if (message.reshape_every_iter != null && message.hasOwnProperty("reshape_every_iter"))
                    if (typeof message.reshape_every_iter !== "boolean")
                        return "reshape_every_iter: boolean expected";
                if (message.yolo_v2_loss_param != null && message.hasOwnProperty("yolo_v2_loss_param")) {
                    var error = $root.caffe.YoloV2LossParameter.verify(message.yolo_v2_loss_param);
                    if (error)
                        return "yolo_v2_loss_param." + error;
                }
                if (message.yolo_v3_loss_param != null && message.hasOwnProperty("yolo_v3_loss_param")) {
                    var error = $root.caffe.YoloV3LossParameter.verify(message.yolo_v3_loss_param);
                    if (error)
                        return "yolo_v3_loss_param." + error;
                }
                if (message.box_output_param != null && message.hasOwnProperty("box_output_param")) {
                    var error = $root.caffe.BoxOutputParameter.verify(message.box_output_param);
                    if (error)
                        return "box_output_param." + error;
                }
                if (message.ring_pad_param != null && message.hasOwnProperty("ring_pad_param")) {
                    var error = $root.caffe.RingPadParameter.verify(message.ring_pad_param);
                    if (error)
                        return "ring_pad_param." + error;
                }
                if (message.force_backward != null && message.hasOwnProperty("force_backward"))
                    if (typeof message.force_backward !== "boolean")
                        return "force_backward: boolean expected";
                if (message.smooth_l1_loss_param != null && message.hasOwnProperty("smooth_l1_loss_param")) {
                    var error = $root.caffe.SmoothL1LossParameter.verify(message.smooth_l1_loss_param);
                    if (error)
                        return "smooth_l1_loss_param." + error;
                }
                return null;
            };
    
            LayerParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.LayerParameter)
                    return object;
                var message = new $root.caffe.LayerParameter();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.type != null)
                    message.type = String(object.type);
                if (object.bottom) {
                    if (!Array.isArray(object.bottom))
                        throw TypeError(".caffe.LayerParameter.bottom: array expected");
                    message.bottom = [];
                    for (var i = 0; i < object.bottom.length; ++i)
                        message.bottom[i] = String(object.bottom[i]);
                }
                if (object.top) {
                    if (!Array.isArray(object.top))
                        throw TypeError(".caffe.LayerParameter.top: array expected");
                    message.top = [];
                    for (var i = 0; i < object.top.length; ++i)
                        message.top[i] = String(object.top[i]);
                }
                switch (object.phase) {
                case "TRAIN":
                case 0:
                    message.phase = 0;
                    break;
                case "TEST":
                case 1:
                    message.phase = 1;
                    break;
                }
                if (object.loss_weight) {
                    if (!Array.isArray(object.loss_weight))
                        throw TypeError(".caffe.LayerParameter.loss_weight: array expected");
                    message.loss_weight = [];
                    for (var i = 0; i < object.loss_weight.length; ++i)
                        message.loss_weight[i] = Number(object.loss_weight[i]);
                }
                if (object.param) {
                    if (!Array.isArray(object.param))
                        throw TypeError(".caffe.LayerParameter.param: array expected");
                    message.param = [];
                    for (var i = 0; i < object.param.length; ++i) {
                        if (typeof object.param[i] !== "object")
                            throw TypeError(".caffe.LayerParameter.param: object expected");
                        message.param[i] = $root.caffe.ParamSpec.fromObject(object.param[i]);
                    }
                }
                if (object.blobs) {
                    if (!Array.isArray(object.blobs))
                        throw TypeError(".caffe.LayerParameter.blobs: array expected");
                    message.blobs = [];
                    for (var i = 0; i < object.blobs.length; ++i) {
                        if (typeof object.blobs[i] !== "object")
                            throw TypeError(".caffe.LayerParameter.blobs: object expected");
                        message.blobs[i] = $root.caffe.BlobProto.fromObject(object.blobs[i]);
                    }
                }
                if (object.propagate_down) {
                    if (!Array.isArray(object.propagate_down))
                        throw TypeError(".caffe.LayerParameter.propagate_down: array expected");
                    message.propagate_down = [];
                    for (var i = 0; i < object.propagate_down.length; ++i)
                        message.propagate_down[i] = Boolean(object.propagate_down[i]);
                }
                if (object.include) {
                    if (!Array.isArray(object.include))
                        throw TypeError(".caffe.LayerParameter.include: array expected");
                    message.include = [];
                    for (var i = 0; i < object.include.length; ++i) {
                        if (typeof object.include[i] !== "object")
                            throw TypeError(".caffe.LayerParameter.include: object expected");
                        message.include[i] = $root.caffe.NetStateRule.fromObject(object.include[i]);
                    }
                }
                if (object.exclude) {
                    if (!Array.isArray(object.exclude))
                        throw TypeError(".caffe.LayerParameter.exclude: array expected");
                    message.exclude = [];
                    for (var i = 0; i < object.exclude.length; ++i) {
                        if (typeof object.exclude[i] !== "object")
                            throw TypeError(".caffe.LayerParameter.exclude: object expected");
                        message.exclude[i] = $root.caffe.NetStateRule.fromObject(object.exclude[i]);
                    }
                }
                if (object.transform_param != null) {
                    if (typeof object.transform_param !== "object")
                        throw TypeError(".caffe.LayerParameter.transform_param: object expected");
                    message.transform_param = $root.caffe.TransformationParameter.fromObject(object.transform_param);
                }
                if (object.loss_param != null) {
                    if (typeof object.loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.loss_param: object expected");
                    message.loss_param = $root.caffe.LossParameter.fromObject(object.loss_param);
                }
                if (object.accuracy_param != null) {
                    if (typeof object.accuracy_param !== "object")
                        throw TypeError(".caffe.LayerParameter.accuracy_param: object expected");
                    message.accuracy_param = $root.caffe.AccuracyParameter.fromObject(object.accuracy_param);
                }
                if (object.argmax_param != null) {
                    if (typeof object.argmax_param !== "object")
                        throw TypeError(".caffe.LayerParameter.argmax_param: object expected");
                    message.argmax_param = $root.caffe.ArgMaxParameter.fromObject(object.argmax_param);
                }
                if (object.batch_norm_param != null) {
                    if (typeof object.batch_norm_param !== "object")
                        throw TypeError(".caffe.LayerParameter.batch_norm_param: object expected");
                    message.batch_norm_param = $root.caffe.BatchNormParameter.fromObject(object.batch_norm_param);
                }
                if (object.bias_param != null) {
                    if (typeof object.bias_param !== "object")
                        throw TypeError(".caffe.LayerParameter.bias_param: object expected");
                    message.bias_param = $root.caffe.BiasParameter.fromObject(object.bias_param);
                }
                if (object.clip_param != null) {
                    if (typeof object.clip_param !== "object")
                        throw TypeError(".caffe.LayerParameter.clip_param: object expected");
                    message.clip_param = $root.caffe.ClipParameter.fromObject(object.clip_param);
                }
                if (object.concat_param != null) {
                    if (typeof object.concat_param !== "object")
                        throw TypeError(".caffe.LayerParameter.concat_param: object expected");
                    message.concat_param = $root.caffe.ConcatParameter.fromObject(object.concat_param);
                }
                if (object.contrastive_loss_param != null) {
                    if (typeof object.contrastive_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.contrastive_loss_param: object expected");
                    message.contrastive_loss_param = $root.caffe.ContrastiveLossParameter.fromObject(object.contrastive_loss_param);
                }
                if (object.convolution_param != null) {
                    if (typeof object.convolution_param !== "object")
                        throw TypeError(".caffe.LayerParameter.convolution_param: object expected");
                    message.convolution_param = $root.caffe.ConvolutionParameter.fromObject(object.convolution_param);
                }
                if (object.crop_param != null) {
                    if (typeof object.crop_param !== "object")
                        throw TypeError(".caffe.LayerParameter.crop_param: object expected");
                    message.crop_param = $root.caffe.CropParameter.fromObject(object.crop_param);
                }
                if (object.data_param != null) {
                    if (typeof object.data_param !== "object")
                        throw TypeError(".caffe.LayerParameter.data_param: object expected");
                    message.data_param = $root.caffe.DataParameter.fromObject(object.data_param);
                }
                if (object.dropout_param != null) {
                    if (typeof object.dropout_param !== "object")
                        throw TypeError(".caffe.LayerParameter.dropout_param: object expected");
                    message.dropout_param = $root.caffe.DropoutParameter.fromObject(object.dropout_param);
                }
                if (object.dummy_data_param != null) {
                    if (typeof object.dummy_data_param !== "object")
                        throw TypeError(".caffe.LayerParameter.dummy_data_param: object expected");
                    message.dummy_data_param = $root.caffe.DummyDataParameter.fromObject(object.dummy_data_param);
                }
                if (object.eltwise_param != null) {
                    if (typeof object.eltwise_param !== "object")
                        throw TypeError(".caffe.LayerParameter.eltwise_param: object expected");
                    message.eltwise_param = $root.caffe.EltwiseParameter.fromObject(object.eltwise_param);
                }
                if (object.elu_param != null) {
                    if (typeof object.elu_param !== "object")
                        throw TypeError(".caffe.LayerParameter.elu_param: object expected");
                    message.elu_param = $root.caffe.ELUParameter.fromObject(object.elu_param);
                }
                if (object.embed_param != null) {
                    if (typeof object.embed_param !== "object")
                        throw TypeError(".caffe.LayerParameter.embed_param: object expected");
                    message.embed_param = $root.caffe.EmbedParameter.fromObject(object.embed_param);
                }
                if (object.exp_param != null) {
                    if (typeof object.exp_param !== "object")
                        throw TypeError(".caffe.LayerParameter.exp_param: object expected");
                    message.exp_param = $root.caffe.ExpParameter.fromObject(object.exp_param);
                }
                if (object.flatten_param != null) {
                    if (typeof object.flatten_param !== "object")
                        throw TypeError(".caffe.LayerParameter.flatten_param: object expected");
                    message.flatten_param = $root.caffe.FlattenParameter.fromObject(object.flatten_param);
                }
                if (object.hdf5_data_param != null) {
                    if (typeof object.hdf5_data_param !== "object")
                        throw TypeError(".caffe.LayerParameter.hdf5_data_param: object expected");
                    message.hdf5_data_param = $root.caffe.HDF5DataParameter.fromObject(object.hdf5_data_param);
                }
                if (object.hdf5_output_param != null) {
                    if (typeof object.hdf5_output_param !== "object")
                        throw TypeError(".caffe.LayerParameter.hdf5_output_param: object expected");
                    message.hdf5_output_param = $root.caffe.HDF5OutputParameter.fromObject(object.hdf5_output_param);
                }
                if (object.hinge_loss_param != null) {
                    if (typeof object.hinge_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.hinge_loss_param: object expected");
                    message.hinge_loss_param = $root.caffe.HingeLossParameter.fromObject(object.hinge_loss_param);
                }
                if (object.image_data_param != null) {
                    if (typeof object.image_data_param !== "object")
                        throw TypeError(".caffe.LayerParameter.image_data_param: object expected");
                    message.image_data_param = $root.caffe.ImageDataParameter.fromObject(object.image_data_param);
                }
                if (object.infogain_loss_param != null) {
                    if (typeof object.infogain_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.infogain_loss_param: object expected");
                    message.infogain_loss_param = $root.caffe.InfogainLossParameter.fromObject(object.infogain_loss_param);
                }
                if (object.inner_product_param != null) {
                    if (typeof object.inner_product_param !== "object")
                        throw TypeError(".caffe.LayerParameter.inner_product_param: object expected");
                    message.inner_product_param = $root.caffe.InnerProductParameter.fromObject(object.inner_product_param);
                }
                if (object.input_param != null) {
                    if (typeof object.input_param !== "object")
                        throw TypeError(".caffe.LayerParameter.input_param: object expected");
                    message.input_param = $root.caffe.InputParameter.fromObject(object.input_param);
                }
                if (object.log_param != null) {
                    if (typeof object.log_param !== "object")
                        throw TypeError(".caffe.LayerParameter.log_param: object expected");
                    message.log_param = $root.caffe.LogParameter.fromObject(object.log_param);
                }
                if (object.lrn_param != null) {
                    if (typeof object.lrn_param !== "object")
                        throw TypeError(".caffe.LayerParameter.lrn_param: object expected");
                    message.lrn_param = $root.caffe.LRNParameter.fromObject(object.lrn_param);
                }
                if (object.memory_data_param != null) {
                    if (typeof object.memory_data_param !== "object")
                        throw TypeError(".caffe.LayerParameter.memory_data_param: object expected");
                    message.memory_data_param = $root.caffe.MemoryDataParameter.fromObject(object.memory_data_param);
                }
                if (object.mvn_param != null) {
                    if (typeof object.mvn_param !== "object")
                        throw TypeError(".caffe.LayerParameter.mvn_param: object expected");
                    message.mvn_param = $root.caffe.MVNParameter.fromObject(object.mvn_param);
                }
                if (object.parameter_param != null) {
                    if (typeof object.parameter_param !== "object")
                        throw TypeError(".caffe.LayerParameter.parameter_param: object expected");
                    message.parameter_param = $root.caffe.ParameterParameter.fromObject(object.parameter_param);
                }
                if (object.pooling_param != null) {
                    if (typeof object.pooling_param !== "object")
                        throw TypeError(".caffe.LayerParameter.pooling_param: object expected");
                    message.pooling_param = $root.caffe.PoolingParameter.fromObject(object.pooling_param);
                }
                if (object.power_param != null) {
                    if (typeof object.power_param !== "object")
                        throw TypeError(".caffe.LayerParameter.power_param: object expected");
                    message.power_param = $root.caffe.PowerParameter.fromObject(object.power_param);
                }
                if (object.prelu_param != null) {
                    if (typeof object.prelu_param !== "object")
                        throw TypeError(".caffe.LayerParameter.prelu_param: object expected");
                    message.prelu_param = $root.caffe.PReLUParameter.fromObject(object.prelu_param);
                }
                if (object.python_param != null) {
                    if (typeof object.python_param !== "object")
                        throw TypeError(".caffe.LayerParameter.python_param: object expected");
                    message.python_param = $root.caffe.PythonParameter.fromObject(object.python_param);
                }
                if (object.recurrent_param != null) {
                    if (typeof object.recurrent_param !== "object")
                        throw TypeError(".caffe.LayerParameter.recurrent_param: object expected");
                    message.recurrent_param = $root.caffe.RecurrentParameter.fromObject(object.recurrent_param);
                }
                if (object.reduction_param != null) {
                    if (typeof object.reduction_param !== "object")
                        throw TypeError(".caffe.LayerParameter.reduction_param: object expected");
                    message.reduction_param = $root.caffe.ReductionParameter.fromObject(object.reduction_param);
                }
                if (object.relu_param != null) {
                    if (typeof object.relu_param !== "object")
                        throw TypeError(".caffe.LayerParameter.relu_param: object expected");
                    message.relu_param = $root.caffe.ReLUParameter.fromObject(object.relu_param);
                }
                if (object.reshape_param != null) {
                    if (typeof object.reshape_param !== "object")
                        throw TypeError(".caffe.LayerParameter.reshape_param: object expected");
                    message.reshape_param = $root.caffe.ReshapeParameter.fromObject(object.reshape_param);
                }
                if (object.scale_param != null) {
                    if (typeof object.scale_param !== "object")
                        throw TypeError(".caffe.LayerParameter.scale_param: object expected");
                    message.scale_param = $root.caffe.ScaleParameter.fromObject(object.scale_param);
                }
                if (object.sigmoid_param != null) {
                    if (typeof object.sigmoid_param !== "object")
                        throw TypeError(".caffe.LayerParameter.sigmoid_param: object expected");
                    message.sigmoid_param = $root.caffe.SigmoidParameter.fromObject(object.sigmoid_param);
                }
                if (object.softmax_param != null) {
                    if (typeof object.softmax_param !== "object")
                        throw TypeError(".caffe.LayerParameter.softmax_param: object expected");
                    message.softmax_param = $root.caffe.SoftmaxParameter.fromObject(object.softmax_param);
                }
                if (object.spp_param != null) {
                    if (typeof object.spp_param !== "object")
                        throw TypeError(".caffe.LayerParameter.spp_param: object expected");
                    message.spp_param = $root.caffe.SPPParameter.fromObject(object.spp_param);
                }
                if (object.slice_param != null) {
                    if (typeof object.slice_param !== "object")
                        throw TypeError(".caffe.LayerParameter.slice_param: object expected");
                    message.slice_param = $root.caffe.SliceParameter.fromObject(object.slice_param);
                }
                if (object.swish_param != null) {
                    if (typeof object.swish_param !== "object")
                        throw TypeError(".caffe.LayerParameter.swish_param: object expected");
                    message.swish_param = $root.caffe.SwishParameter.fromObject(object.swish_param);
                }
                if (object.tanh_param != null) {
                    if (typeof object.tanh_param !== "object")
                        throw TypeError(".caffe.LayerParameter.tanh_param: object expected");
                    message.tanh_param = $root.caffe.TanHParameter.fromObject(object.tanh_param);
                }
                if (object.threshold_param != null) {
                    if (typeof object.threshold_param !== "object")
                        throw TypeError(".caffe.LayerParameter.threshold_param: object expected");
                    message.threshold_param = $root.caffe.ThresholdParameter.fromObject(object.threshold_param);
                }
                if (object.tile_param != null) {
                    if (typeof object.tile_param !== "object")
                        throw TypeError(".caffe.LayerParameter.tile_param: object expected");
                    message.tile_param = $root.caffe.TileParameter.fromObject(object.tile_param);
                }
                if (object.engine != null)
                    message.engine = String(object.engine);
                if (object.multinode != null) {
                    if (typeof object.multinode !== "object")
                        throw TypeError(".caffe.LayerParameter.multinode: object expected");
                    message.multinode = $root.caffe.MultinodeLayerParameter.fromObject(object.multinode);
                }
                if (object.mn_activation_param != null) {
                    if (typeof object.mn_activation_param !== "object")
                        throw TypeError(".caffe.LayerParameter.mn_activation_param: object expected");
                    message.mn_activation_param = $root.caffe.MnActivationParameter.fromObject(object.mn_activation_param);
                }
                if (object.box_annotator_ohem_param != null) {
                    if (typeof object.box_annotator_ohem_param !== "object")
                        throw TypeError(".caffe.LayerParameter.box_annotator_ohem_param: object expected");
                    message.box_annotator_ohem_param = $root.caffe.BoxAnnotatorOHEMParameter.fromObject(object.box_annotator_ohem_param);
                }
                if (object.psroi_pooling_param != null) {
                    if (typeof object.psroi_pooling_param !== "object")
                        throw TypeError(".caffe.LayerParameter.psroi_pooling_param: object expected");
                    message.psroi_pooling_param = $root.caffe.PSROIPoolingParameter.fromObject(object.psroi_pooling_param);
                }
                if (object.roi_pooling_param != null) {
                    if (typeof object.roi_pooling_param !== "object")
                        throw TypeError(".caffe.LayerParameter.roi_pooling_param: object expected");
                    message.roi_pooling_param = $root.caffe.ROIPoolingParameter.fromObject(object.roi_pooling_param);
                }
                if (object.spatial_dropout_param != null) {
                    if (typeof object.spatial_dropout_param !== "object")
                        throw TypeError(".caffe.LayerParameter.spatial_dropout_param: object expected");
                    message.spatial_dropout_param = $root.caffe.SpatialDropoutParameter.fromObject(object.spatial_dropout_param);
                }
                if (object.mn_grad_compress_param != null) {
                    if (typeof object.mn_grad_compress_param !== "object")
                        throw TypeError(".caffe.LayerParameter.mn_grad_compress_param: object expected");
                    message.mn_grad_compress_param = $root.caffe.MnParamGradCompressParameter.fromObject(object.mn_grad_compress_param);
                }
                if (object.quantization_param != null) {
                    if (typeof object.quantization_param !== "object")
                        throw TypeError(".caffe.LayerParameter.quantization_param: object expected");
                    message.quantization_param = $root.caffe.QuantizationParameter.fromObject(object.quantization_param);
                }
                if (object.reorg_param != null) {
                    if (typeof object.reorg_param !== "object")
                        throw TypeError(".caffe.LayerParameter.reorg_param: object expected");
                    message.reorg_param = $root.caffe.ReorgParameter.fromObject(object.reorg_param);
                }
                if (object.squeeze_convolution_param != null) {
                    if (typeof object.squeeze_convolution_param !== "object")
                        throw TypeError(".caffe.LayerParameter.squeeze_convolution_param: object expected");
                    message.squeeze_convolution_param = $root.caffe.SqueezeConvolutionParameter.fromObject(object.squeeze_convolution_param);
                }
                if (object.squeeze_inner_product_param != null) {
                    if (typeof object.squeeze_inner_product_param !== "object")
                        throw TypeError(".caffe.LayerParameter.squeeze_inner_product_param: object expected");
                    message.squeeze_inner_product_param = $root.caffe.SqueezeInnerProductParameter.fromObject(object.squeeze_inner_product_param);
                }
                if (object.batch_reduction_param != null) {
                    if (typeof object.batch_reduction_param !== "object")
                        throw TypeError(".caffe.LayerParameter.batch_reduction_param: object expected");
                    message.batch_reduction_param = $root.caffe.BatchReductionParameter.fromObject(object.batch_reduction_param);
                }
                if (object.shuffle_channel_param != null) {
                    if (typeof object.shuffle_channel_param !== "object")
                        throw TypeError(".caffe.LayerParameter.shuffle_channel_param: object expected");
                    message.shuffle_channel_param = $root.caffe.ShuffleChannelParameter.fromObject(object.shuffle_channel_param);
                }
                if (object.annotated_data_param != null) {
                    if (typeof object.annotated_data_param !== "object")
                        throw TypeError(".caffe.LayerParameter.annotated_data_param: object expected");
                    message.annotated_data_param = $root.caffe.AnnotatedDataParameter.fromObject(object.annotated_data_param);
                }
                if (object.multibox_loss_param != null) {
                    if (typeof object.multibox_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.multibox_loss_param: object expected");
                    message.multibox_loss_param = $root.caffe.MultiBoxLossParameter.fromObject(object.multibox_loss_param);
                }
                if (object.permute_param != null) {
                    if (typeof object.permute_param !== "object")
                        throw TypeError(".caffe.LayerParameter.permute_param: object expected");
                    message.permute_param = $root.caffe.PermuteParameter.fromObject(object.permute_param);
                }
                if (object.prior_box_param != null) {
                    if (typeof object.prior_box_param !== "object")
                        throw TypeError(".caffe.LayerParameter.prior_box_param: object expected");
                    message.prior_box_param = $root.caffe.PriorBoxParameter.fromObject(object.prior_box_param);
                }
                if (object.detection_output_param != null) {
                    if (typeof object.detection_output_param !== "object")
                        throw TypeError(".caffe.LayerParameter.detection_output_param: object expected");
                    message.detection_output_param = $root.caffe.DetectionOutputParameter.fromObject(object.detection_output_param);
                }
                if (object.detection_evaluate_param != null) {
                    if (typeof object.detection_evaluate_param !== "object")
                        throw TypeError(".caffe.LayerParameter.detection_evaluate_param: object expected");
                    message.detection_evaluate_param = $root.caffe.DetectionEvaluateParameter.fromObject(object.detection_evaluate_param);
                }
                if (object.norm_param != null) {
                    if (typeof object.norm_param !== "object")
                        throw TypeError(".caffe.LayerParameter.norm_param: object expected");
                    message.norm_param = $root.caffe.NormalizeParameter.fromObject(object.norm_param);
                }
                if (object.video_data_param != null) {
                    if (typeof object.video_data_param !== "object")
                        throw TypeError(".caffe.LayerParameter.video_data_param: object expected");
                    message.video_data_param = $root.caffe.VideoDataParameter.fromObject(object.video_data_param);
                }
                if (object.split_param != null) {
                    if (typeof object.split_param !== "object")
                        throw TypeError(".caffe.LayerParameter.split_param: object expected");
                    message.split_param = $root.caffe.SplitParameter.fromObject(object.split_param);
                }
                if (object.region_loss_param != null) {
                    if (typeof object.region_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.region_loss_param: object expected");
                    message.region_loss_param = $root.caffe.RegionLossParameter.fromObject(object.region_loss_param);
                }
                if (object.eval_detection_param != null) {
                    if (typeof object.eval_detection_param !== "object")
                        throw TypeError(".caffe.LayerParameter.eval_detection_param: object expected");
                    message.eval_detection_param = $root.caffe.EvalDetectionParameter.fromObject(object.eval_detection_param);
                }
                if (object.yolo_detection_output_param != null) {
                    if (typeof object.yolo_detection_output_param !== "object")
                        throw TypeError(".caffe.LayerParameter.yolo_detection_output_param: object expected");
                    message.yolo_detection_output_param = $root.caffe.YoloDetectionOutputParameter.fromObject(object.yolo_detection_output_param);
                }
                if (object.yolov3_detection_output_param != null) {
                    if (typeof object.yolov3_detection_output_param !== "object")
                        throw TypeError(".caffe.LayerParameter.yolov3_detection_output_param: object expected");
                    message.yolov3_detection_output_param = $root.caffe.Yolov3DetectionOutputParameter.fromObject(object.yolov3_detection_output_param);
                }
                if (object.yolov3_param != null) {
                    if (typeof object.yolov3_param !== "object")
                        throw TypeError(".caffe.LayerParameter.yolov3_param: object expected");
                    message.yolov3_param = $root.caffe.Yolov3Parameter.fromObject(object.yolov3_param);
                }
                if (object.roi_pooling_param_2 != null) {
                    if (typeof object.roi_pooling_param_2 !== "object")
                        throw TypeError(".caffe.LayerParameter.roi_pooling_param_2: object expected");
                    message.roi_pooling_param_2 = $root.caffe.ROIPoolingParameter.fromObject(object.roi_pooling_param_2);
                }
                if (object.normalize_bbox_param != null) {
                    if (typeof object.normalize_bbox_param !== "object")
                        throw TypeError(".caffe.LayerParameter.normalize_bbox_param: object expected");
                    message.normalize_bbox_param = $root.caffe.NormalizeBBoxParameter.fromObject(object.normalize_bbox_param);
                }
                if (object.bn_param != null) {
                    if (typeof object.bn_param !== "object")
                        throw TypeError(".caffe.LayerParameter.bn_param: object expected");
                    message.bn_param = $root.caffe.BNParameter.fromObject(object.bn_param);
                }
                if (object.interp_param != null) {
                    if (typeof object.interp_param !== "object")
                        throw TypeError(".caffe.LayerParameter.interp_param: object expected");
                    message.interp_param = $root.caffe.InterpParameter.fromObject(object.interp_param);
                }
                if (object.coeff_schedule_param != null) {
                    if (typeof object.coeff_schedule_param !== "object")
                        throw TypeError(".caffe.LayerParameter.coeff_schedule_param: object expected");
                    message.coeff_schedule_param = $root.caffe.CoeffScheduleParameter.fromObject(object.coeff_schedule_param);
                }
                if (object.augmentation_param != null) {
                    if (typeof object.augmentation_param !== "object")
                        throw TypeError(".caffe.LayerParameter.augmentation_param: object expected");
                    message.augmentation_param = $root.caffe.AugmentationParameter.fromObject(object.augmentation_param);
                }
                if (object.correlation_param != null) {
                    if (typeof object.correlation_param !== "object")
                        throw TypeError(".caffe.LayerParameter.correlation_param: object expected");
                    message.correlation_param = $root.caffe.CorrelationParameter.fromObject(object.correlation_param);
                }
                if (object.l1_loss_param != null) {
                    if (typeof object.l1_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.l1_loss_param: object expected");
                    message.l1_loss_param = $root.caffe.L1LossParameter.fromObject(object.l1_loss_param);
                }
                if (object.writer_param != null) {
                    if (typeof object.writer_param !== "object")
                        throw TypeError(".caffe.LayerParameter.writer_param: object expected");
                    message.writer_param = $root.caffe.WriterParameter.fromObject(object.writer_param);
                }
                if (object.reader_param != null) {
                    if (typeof object.reader_param !== "object")
                        throw TypeError(".caffe.LayerParameter.reader_param: object expected");
                    message.reader_param = $root.caffe.ReaderParameter.fromObject(object.reader_param);
                }
                if (object.mean_param != null) {
                    if (typeof object.mean_param !== "object")
                        throw TypeError(".caffe.LayerParameter.mean_param: object expected");
                    message.mean_param = $root.caffe.MeanParameter.fromObject(object.mean_param);
                }
                if (object.resample_param != null) {
                    if (typeof object.resample_param !== "object")
                        throw TypeError(".caffe.LayerParameter.resample_param: object expected");
                    message.resample_param = $root.caffe.ResampleParameter.fromObject(object.resample_param);
                }
                if (object.downsample_param != null) {
                    if (typeof object.downsample_param !== "object")
                        throw TypeError(".caffe.LayerParameter.downsample_param: object expected");
                    message.downsample_param = $root.caffe.DownsampleParameter.fromObject(object.downsample_param);
                }
                if (object.lpq_loss_param != null) {
                    if (typeof object.lpq_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.lpq_loss_param: object expected");
                    message.lpq_loss_param = $root.caffe.LpqLossParameter.fromObject(object.lpq_loss_param);
                }
                if (object.flow_warp_param != null) {
                    if (typeof object.flow_warp_param !== "object")
                        throw TypeError(".caffe.LayerParameter.flow_warp_param: object expected");
                    message.flow_warp_param = $root.caffe.FlowWarpParameter.fromObject(object.flow_warp_param);
                }
                if (object.accum_param != null) {
                    if (typeof object.accum_param !== "object")
                        throw TypeError(".caffe.LayerParameter.accum_param: object expected");
                    message.accum_param = $root.caffe.AccumParameter.fromObject(object.accum_param);
                }
                if (object.black_augmentation_param != null) {
                    if (typeof object.black_augmentation_param !== "object")
                        throw TypeError(".caffe.LayerParameter.black_augmentation_param: object expected");
                    message.black_augmentation_param = $root.caffe.BlackAugmentationParameter.fromObject(object.black_augmentation_param);
                }
                if (object.reshape_every_iter != null)
                    message.reshape_every_iter = Boolean(object.reshape_every_iter);
                if (object.yolo_v2_loss_param != null) {
                    if (typeof object.yolo_v2_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.yolo_v2_loss_param: object expected");
                    message.yolo_v2_loss_param = $root.caffe.YoloV2LossParameter.fromObject(object.yolo_v2_loss_param);
                }
                if (object.yolo_v3_loss_param != null) {
                    if (typeof object.yolo_v3_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.yolo_v3_loss_param: object expected");
                    message.yolo_v3_loss_param = $root.caffe.YoloV3LossParameter.fromObject(object.yolo_v3_loss_param);
                }
                if (object.box_output_param != null) {
                    if (typeof object.box_output_param !== "object")
                        throw TypeError(".caffe.LayerParameter.box_output_param: object expected");
                    message.box_output_param = $root.caffe.BoxOutputParameter.fromObject(object.box_output_param);
                }
                if (object.ring_pad_param != null) {
                    if (typeof object.ring_pad_param !== "object")
                        throw TypeError(".caffe.LayerParameter.ring_pad_param: object expected");
                    message.ring_pad_param = $root.caffe.RingPadParameter.fromObject(object.ring_pad_param);
                }
                if (object.force_backward != null)
                    message.force_backward = Boolean(object.force_backward);
                if (object.smooth_l1_loss_param != null) {
                    if (typeof object.smooth_l1_loss_param !== "object")
                        throw TypeError(".caffe.LayerParameter.smooth_l1_loss_param: object expected");
                    message.smooth_l1_loss_param = $root.caffe.SmoothL1LossParameter.fromObject(object.smooth_l1_loss_param);
                }
                return message;
            };
    
            LayerParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.bottom = [];
                    object.top = [];
                    object.loss_weight = [];
                    object.param = [];
                    object.blobs = [];
                    object.include = [];
                    object.exclude = [];
                    object.propagate_down = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.type = "";
                    object.phase = options.enums === String ? "TRAIN" : 0;
                    object.transform_param = null;
                    object.loss_param = null;
                    object.accuracy_param = null;
                    object.argmax_param = null;
                    object.concat_param = null;
                    object.contrastive_loss_param = null;
                    object.convolution_param = null;
                    object.data_param = null;
                    object.dropout_param = null;
                    object.dummy_data_param = null;
                    object.eltwise_param = null;
                    object.exp_param = null;
                    object.hdf5_data_param = null;
                    object.hdf5_output_param = null;
                    object.hinge_loss_param = null;
                    object.image_data_param = null;
                    object.infogain_loss_param = null;
                    object.inner_product_param = null;
                    object.lrn_param = null;
                    object.memory_data_param = null;
                    object.mvn_param = null;
                    object.pooling_param = null;
                    object.power_param = null;
                    object.relu_param = null;
                    object.sigmoid_param = null;
                    object.softmax_param = null;
                    object.slice_param = null;
                    object.tanh_param = null;
                    object.threshold_param = null;
                    object.python_param = null;
                    object.prelu_param = null;
                    object.spp_param = null;
                    object.reshape_param = null;
                    object.log_param = null;
                    object.flatten_param = null;
                    object.reduction_param = null;
                    object.embed_param = null;
                    object.tile_param = null;
                    object.batch_norm_param = null;
                    object.elu_param = null;
                    object.bias_param = null;
                    object.scale_param = null;
                    object.input_param = null;
                    object.crop_param = null;
                    object.parameter_param = null;
                    object.recurrent_param = null;
                    object.swish_param = null;
                    object.clip_param = null;
                    object.engine = "";
                    object.multinode = null;
                    object.mn_activation_param = null;
                    object.box_annotator_ohem_param = null;
                    object.psroi_pooling_param = null;
                    object.roi_pooling_param = null;
                    object.spatial_dropout_param = null;
                    object.mn_grad_compress_param = null;
                    object.quantization_param = null;
                    object.reorg_param = null;
                    object.batch_reduction_param = null;
                    object.shuffle_channel_param = null;
                    object.squeeze_convolution_param = null;
                    object.squeeze_inner_product_param = null;
                    object.annotated_data_param = null;
                    object.multibox_loss_param = null;
                    object.permute_param = null;
                    object.prior_box_param = null;
                    object.detection_output_param = null;
                    object.detection_evaluate_param = null;
                    object.norm_param = null;
                    object.video_data_param = null;
                    object.split_param = null;
                    object.region_loss_param = null;
                    object.eval_detection_param = null;
                    object.yolo_detection_output_param = null;
                    object.yolov3_detection_output_param = null;
                    object.yolov3_param = null;
                    object.bn_param = null;
                    object.interp_param = null;
                    object.coeff_schedule_param = null;
                    object.augmentation_param = null;
                    object.correlation_param = null;
                    object.l1_loss_param = null;
                    object.writer_param = null;
                    object.reader_param = null;
                    object.mean_param = null;
                    object.resample_param = null;
                    object.downsample_param = null;
                    object.reshape_every_iter = true;
                    object.lpq_loss_param = null;
                    object.flow_warp_param = null;
                    object.accum_param = null;
                    object.black_augmentation_param = null;
                    object.yolo_v2_loss_param = null;
                    object.yolo_v3_loss_param = null;
                    object.force_backward = false;
                    object.box_output_param = null;
                    object.ring_pad_param = null;
                    object.smooth_l1_loss_param = null;
                    object.roi_pooling_param_2 = null;
                    object.normalize_bbox_param = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.bottom && message.bottom.length) {
                    object.bottom = [];
                    for (var j = 0; j < message.bottom.length; ++j)
                        object.bottom[j] = message.bottom[j];
                }
                if (message.top && message.top.length) {
                    object.top = [];
                    for (var j = 0; j < message.top.length; ++j)
                        object.top[j] = message.top[j];
                }
                if (message.loss_weight && message.loss_weight.length) {
                    object.loss_weight = [];
                    for (var j = 0; j < message.loss_weight.length; ++j)
                        object.loss_weight[j] = options.json && !isFinite(message.loss_weight[j]) ? String(message.loss_weight[j]) : message.loss_weight[j];
                }
                if (message.param && message.param.length) {
                    object.param = [];
                    for (var j = 0; j < message.param.length; ++j)
                        object.param[j] = $root.caffe.ParamSpec.toObject(message.param[j], options);
                }
                if (message.blobs && message.blobs.length) {
                    object.blobs = [];
                    for (var j = 0; j < message.blobs.length; ++j)
                        object.blobs[j] = $root.caffe.BlobProto.toObject(message.blobs[j], options);
                }
                if (message.include && message.include.length) {
                    object.include = [];
                    for (var j = 0; j < message.include.length; ++j)
                        object.include[j] = $root.caffe.NetStateRule.toObject(message.include[j], options);
                }
                if (message.exclude && message.exclude.length) {
                    object.exclude = [];
                    for (var j = 0; j < message.exclude.length; ++j)
                        object.exclude[j] = $root.caffe.NetStateRule.toObject(message.exclude[j], options);
                }
                if (message.phase != null && message.hasOwnProperty("phase"))
                    object.phase = options.enums === String ? $root.caffe.Phase[message.phase] : message.phase;
                if (message.propagate_down && message.propagate_down.length) {
                    object.propagate_down = [];
                    for (var j = 0; j < message.propagate_down.length; ++j)
                        object.propagate_down[j] = message.propagate_down[j];
                }
                if (message.transform_param != null && message.hasOwnProperty("transform_param"))
                    object.transform_param = $root.caffe.TransformationParameter.toObject(message.transform_param, options);
                if (message.loss_param != null && message.hasOwnProperty("loss_param"))
                    object.loss_param = $root.caffe.LossParameter.toObject(message.loss_param, options);
                if (message.accuracy_param != null && message.hasOwnProperty("accuracy_param"))
                    object.accuracy_param = $root.caffe.AccuracyParameter.toObject(message.accuracy_param, options);
                if (message.argmax_param != null && message.hasOwnProperty("argmax_param"))
                    object.argmax_param = $root.caffe.ArgMaxParameter.toObject(message.argmax_param, options);
                if (message.concat_param != null && message.hasOwnProperty("concat_param"))
                    object.concat_param = $root.caffe.ConcatParameter.toObject(message.concat_param, options);
                if (message.contrastive_loss_param != null && message.hasOwnProperty("contrastive_loss_param"))
                    object.contrastive_loss_param = $root.caffe.ContrastiveLossParameter.toObject(message.contrastive_loss_param, options);
                if (message.convolution_param != null && message.hasOwnProperty("convolution_param"))
                    object.convolution_param = $root.caffe.ConvolutionParameter.toObject(message.convolution_param, options);
                if (message.data_param != null && message.hasOwnProperty("data_param"))
                    object.data_param = $root.caffe.DataParameter.toObject(message.data_param, options);
                if (message.dropout_param != null && message.hasOwnProperty("dropout_param"))
                    object.dropout_param = $root.caffe.DropoutParameter.toObject(message.dropout_param, options);
                if (message.dummy_data_param != null && message.hasOwnProperty("dummy_data_param"))
                    object.dummy_data_param = $root.caffe.DummyDataParameter.toObject(message.dummy_data_param, options);
                if (message.eltwise_param != null && message.hasOwnProperty("eltwise_param"))
                    object.eltwise_param = $root.caffe.EltwiseParameter.toObject(message.eltwise_param, options);
                if (message.exp_param != null && message.hasOwnProperty("exp_param"))
                    object.exp_param = $root.caffe.ExpParameter.toObject(message.exp_param, options);
                if (message.hdf5_data_param != null && message.hasOwnProperty("hdf5_data_param"))
                    object.hdf5_data_param = $root.caffe.HDF5DataParameter.toObject(message.hdf5_data_param, options);
                if (message.hdf5_output_param != null && message.hasOwnProperty("hdf5_output_param"))
                    object.hdf5_output_param = $root.caffe.HDF5OutputParameter.toObject(message.hdf5_output_param, options);
                if (message.hinge_loss_param != null && message.hasOwnProperty("hinge_loss_param"))
                    object.hinge_loss_param = $root.caffe.HingeLossParameter.toObject(message.hinge_loss_param, options);
                if (message.image_data_param != null && message.hasOwnProperty("image_data_param"))
                    object.image_data_param = $root.caffe.ImageDataParameter.toObject(message.image_data_param, options);
                if (message.infogain_loss_param != null && message.hasOwnProperty("infogain_loss_param"))
                    object.infogain_loss_param = $root.caffe.InfogainLossParameter.toObject(message.infogain_loss_param, options);
                if (message.inner_product_param != null && message.hasOwnProperty("inner_product_param"))
                    object.inner_product_param = $root.caffe.InnerProductParameter.toObject(message.inner_product_param, options);
                if (message.lrn_param != null && message.hasOwnProperty("lrn_param"))
                    object.lrn_param = $root.caffe.LRNParameter.toObject(message.lrn_param, options);
                if (message.memory_data_param != null && message.hasOwnProperty("memory_data_param"))
                    object.memory_data_param = $root.caffe.MemoryDataParameter.toObject(message.memory_data_param, options);
                if (message.mvn_param != null && message.hasOwnProperty("mvn_param"))
                    object.mvn_param = $root.caffe.MVNParameter.toObject(message.mvn_param, options);
                if (message.pooling_param != null && message.hasOwnProperty("pooling_param"))
                    object.pooling_param = $root.caffe.PoolingParameter.toObject(message.pooling_param, options);
                if (message.power_param != null && message.hasOwnProperty("power_param"))
                    object.power_param = $root.caffe.PowerParameter.toObject(message.power_param, options);
                if (message.relu_param != null && message.hasOwnProperty("relu_param"))
                    object.relu_param = $root.caffe.ReLUParameter.toObject(message.relu_param, options);
                if (message.sigmoid_param != null && message.hasOwnProperty("sigmoid_param"))
                    object.sigmoid_param = $root.caffe.SigmoidParameter.toObject(message.sigmoid_param, options);
                if (message.softmax_param != null && message.hasOwnProperty("softmax_param"))
                    object.softmax_param = $root.caffe.SoftmaxParameter.toObject(message.softmax_param, options);
                if (message.slice_param != null && message.hasOwnProperty("slice_param"))
                    object.slice_param = $root.caffe.SliceParameter.toObject(message.slice_param, options);
                if (message.tanh_param != null && message.hasOwnProperty("tanh_param"))
                    object.tanh_param = $root.caffe.TanHParameter.toObject(message.tanh_param, options);
                if (message.threshold_param != null && message.hasOwnProperty("threshold_param"))
                    object.threshold_param = $root.caffe.ThresholdParameter.toObject(message.threshold_param, options);
                if (message.python_param != null && message.hasOwnProperty("python_param"))
                    object.python_param = $root.caffe.PythonParameter.toObject(message.python_param, options);
                if (message.prelu_param != null && message.hasOwnProperty("prelu_param"))
                    object.prelu_param = $root.caffe.PReLUParameter.toObject(message.prelu_param, options);
                if (message.spp_param != null && message.hasOwnProperty("spp_param"))
                    object.spp_param = $root.caffe.SPPParameter.toObject(message.spp_param, options);
                if (message.reshape_param != null && message.hasOwnProperty("reshape_param"))
                    object.reshape_param = $root.caffe.ReshapeParameter.toObject(message.reshape_param, options);
                if (message.log_param != null && message.hasOwnProperty("log_param"))
                    object.log_param = $root.caffe.LogParameter.toObject(message.log_param, options);
                if (message.flatten_param != null && message.hasOwnProperty("flatten_param"))
                    object.flatten_param = $root.caffe.FlattenParameter.toObject(message.flatten_param, options);
                if (message.reduction_param != null && message.hasOwnProperty("reduction_param"))
                    object.reduction_param = $root.caffe.ReductionParameter.toObject(message.reduction_param, options);
                if (message.embed_param != null && message.hasOwnProperty("embed_param"))
                    object.embed_param = $root.caffe.EmbedParameter.toObject(message.embed_param, options);
                if (message.tile_param != null && message.hasOwnProperty("tile_param"))
                    object.tile_param = $root.caffe.TileParameter.toObject(message.tile_param, options);
                if (message.batch_norm_param != null && message.hasOwnProperty("batch_norm_param"))
                    object.batch_norm_param = $root.caffe.BatchNormParameter.toObject(message.batch_norm_param, options);
                if (message.elu_param != null && message.hasOwnProperty("elu_param"))
                    object.elu_param = $root.caffe.ELUParameter.toObject(message.elu_param, options);
                if (message.bias_param != null && message.hasOwnProperty("bias_param"))
                    object.bias_param = $root.caffe.BiasParameter.toObject(message.bias_param, options);
                if (message.scale_param != null && message.hasOwnProperty("scale_param"))
                    object.scale_param = $root.caffe.ScaleParameter.toObject(message.scale_param, options);
                if (message.input_param != null && message.hasOwnProperty("input_param"))
                    object.input_param = $root.caffe.InputParameter.toObject(message.input_param, options);
                if (message.crop_param != null && message.hasOwnProperty("crop_param"))
                    object.crop_param = $root.caffe.CropParameter.toObject(message.crop_param, options);
                if (message.parameter_param != null && message.hasOwnProperty("parameter_param"))
                    object.parameter_param = $root.caffe.ParameterParameter.toObject(message.parameter_param, options);
                if (message.recurrent_param != null && message.hasOwnProperty("recurrent_param"))
                    object.recurrent_param = $root.caffe.RecurrentParameter.toObject(message.recurrent_param, options);
                if (message.swish_param != null && message.hasOwnProperty("swish_param"))
                    object.swish_param = $root.caffe.SwishParameter.toObject(message.swish_param, options);
                if (message.clip_param != null && message.hasOwnProperty("clip_param"))
                    object.clip_param = $root.caffe.ClipParameter.toObject(message.clip_param, options);
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = message.engine;
                if (message.multinode != null && message.hasOwnProperty("multinode"))
                    object.multinode = $root.caffe.MultinodeLayerParameter.toObject(message.multinode, options);
                if (message.mn_activation_param != null && message.hasOwnProperty("mn_activation_param"))
                    object.mn_activation_param = $root.caffe.MnActivationParameter.toObject(message.mn_activation_param, options);
                if (message.box_annotator_ohem_param != null && message.hasOwnProperty("box_annotator_ohem_param"))
                    object.box_annotator_ohem_param = $root.caffe.BoxAnnotatorOHEMParameter.toObject(message.box_annotator_ohem_param, options);
                if (message.psroi_pooling_param != null && message.hasOwnProperty("psroi_pooling_param"))
                    object.psroi_pooling_param = $root.caffe.PSROIPoolingParameter.toObject(message.psroi_pooling_param, options);
                if (message.roi_pooling_param != null && message.hasOwnProperty("roi_pooling_param"))
                    object.roi_pooling_param = $root.caffe.ROIPoolingParameter.toObject(message.roi_pooling_param, options);
                if (message.spatial_dropout_param != null && message.hasOwnProperty("spatial_dropout_param"))
                    object.spatial_dropout_param = $root.caffe.SpatialDropoutParameter.toObject(message.spatial_dropout_param, options);
                if (message.mn_grad_compress_param != null && message.hasOwnProperty("mn_grad_compress_param"))
                    object.mn_grad_compress_param = $root.caffe.MnParamGradCompressParameter.toObject(message.mn_grad_compress_param, options);
                if (message.quantization_param != null && message.hasOwnProperty("quantization_param"))
                    object.quantization_param = $root.caffe.QuantizationParameter.toObject(message.quantization_param, options);
                if (message.reorg_param != null && message.hasOwnProperty("reorg_param"))
                    object.reorg_param = $root.caffe.ReorgParameter.toObject(message.reorg_param, options);
                if (message.batch_reduction_param != null && message.hasOwnProperty("batch_reduction_param"))
                    object.batch_reduction_param = $root.caffe.BatchReductionParameter.toObject(message.batch_reduction_param, options);
                if (message.shuffle_channel_param != null && message.hasOwnProperty("shuffle_channel_param"))
                    object.shuffle_channel_param = $root.caffe.ShuffleChannelParameter.toObject(message.shuffle_channel_param, options);
                if (message.squeeze_convolution_param != null && message.hasOwnProperty("squeeze_convolution_param"))
                    object.squeeze_convolution_param = $root.caffe.SqueezeConvolutionParameter.toObject(message.squeeze_convolution_param, options);
                if (message.squeeze_inner_product_param != null && message.hasOwnProperty("squeeze_inner_product_param"))
                    object.squeeze_inner_product_param = $root.caffe.SqueezeInnerProductParameter.toObject(message.squeeze_inner_product_param, options);
                if (message.annotated_data_param != null && message.hasOwnProperty("annotated_data_param"))
                    object.annotated_data_param = $root.caffe.AnnotatedDataParameter.toObject(message.annotated_data_param, options);
                if (message.multibox_loss_param != null && message.hasOwnProperty("multibox_loss_param"))
                    object.multibox_loss_param = $root.caffe.MultiBoxLossParameter.toObject(message.multibox_loss_param, options);
                if (message.permute_param != null && message.hasOwnProperty("permute_param"))
                    object.permute_param = $root.caffe.PermuteParameter.toObject(message.permute_param, options);
                if (message.prior_box_param != null && message.hasOwnProperty("prior_box_param"))
                    object.prior_box_param = $root.caffe.PriorBoxParameter.toObject(message.prior_box_param, options);
                if (message.detection_output_param != null && message.hasOwnProperty("detection_output_param"))
                    object.detection_output_param = $root.caffe.DetectionOutputParameter.toObject(message.detection_output_param, options);
                if (message.detection_evaluate_param != null && message.hasOwnProperty("detection_evaluate_param"))
                    object.detection_evaluate_param = $root.caffe.DetectionEvaluateParameter.toObject(message.detection_evaluate_param, options);
                if (message.norm_param != null && message.hasOwnProperty("norm_param"))
                    object.norm_param = $root.caffe.NormalizeParameter.toObject(message.norm_param, options);
                if (message.video_data_param != null && message.hasOwnProperty("video_data_param"))
                    object.video_data_param = $root.caffe.VideoDataParameter.toObject(message.video_data_param, options);
                if (message.split_param != null && message.hasOwnProperty("split_param"))
                    object.split_param = $root.caffe.SplitParameter.toObject(message.split_param, options);
                if (message.region_loss_param != null && message.hasOwnProperty("region_loss_param"))
                    object.region_loss_param = $root.caffe.RegionLossParameter.toObject(message.region_loss_param, options);
                if (message.eval_detection_param != null && message.hasOwnProperty("eval_detection_param"))
                    object.eval_detection_param = $root.caffe.EvalDetectionParameter.toObject(message.eval_detection_param, options);
                if (message.yolo_detection_output_param != null && message.hasOwnProperty("yolo_detection_output_param"))
                    object.yolo_detection_output_param = $root.caffe.YoloDetectionOutputParameter.toObject(message.yolo_detection_output_param, options);
                if (message.yolov3_detection_output_param != null && message.hasOwnProperty("yolov3_detection_output_param"))
                    object.yolov3_detection_output_param = $root.caffe.Yolov3DetectionOutputParameter.toObject(message.yolov3_detection_output_param, options);
                if (message.yolov3_param != null && message.hasOwnProperty("yolov3_param"))
                    object.yolov3_param = $root.caffe.Yolov3Parameter.toObject(message.yolov3_param, options);
                if (message.bn_param != null && message.hasOwnProperty("bn_param"))
                    object.bn_param = $root.caffe.BNParameter.toObject(message.bn_param, options);
                if (message.interp_param != null && message.hasOwnProperty("interp_param"))
                    object.interp_param = $root.caffe.InterpParameter.toObject(message.interp_param, options);
                if (message.coeff_schedule_param != null && message.hasOwnProperty("coeff_schedule_param"))
                    object.coeff_schedule_param = $root.caffe.CoeffScheduleParameter.toObject(message.coeff_schedule_param, options);
                if (message.augmentation_param != null && message.hasOwnProperty("augmentation_param"))
                    object.augmentation_param = $root.caffe.AugmentationParameter.toObject(message.augmentation_param, options);
                if (message.correlation_param != null && message.hasOwnProperty("correlation_param"))
                    object.correlation_param = $root.caffe.CorrelationParameter.toObject(message.correlation_param, options);
                if (message.l1_loss_param != null && message.hasOwnProperty("l1_loss_param"))
                    object.l1_loss_param = $root.caffe.L1LossParameter.toObject(message.l1_loss_param, options);
                if (message.writer_param != null && message.hasOwnProperty("writer_param"))
                    object.writer_param = $root.caffe.WriterParameter.toObject(message.writer_param, options);
                if (message.reader_param != null && message.hasOwnProperty("reader_param"))
                    object.reader_param = $root.caffe.ReaderParameter.toObject(message.reader_param, options);
                if (message.mean_param != null && message.hasOwnProperty("mean_param"))
                    object.mean_param = $root.caffe.MeanParameter.toObject(message.mean_param, options);
                if (message.resample_param != null && message.hasOwnProperty("resample_param"))
                    object.resample_param = $root.caffe.ResampleParameter.toObject(message.resample_param, options);
                if (message.downsample_param != null && message.hasOwnProperty("downsample_param"))
                    object.downsample_param = $root.caffe.DownsampleParameter.toObject(message.downsample_param, options);
                if (message.reshape_every_iter != null && message.hasOwnProperty("reshape_every_iter"))
                    object.reshape_every_iter = message.reshape_every_iter;
                if (message.lpq_loss_param != null && message.hasOwnProperty("lpq_loss_param"))
                    object.lpq_loss_param = $root.caffe.LpqLossParameter.toObject(message.lpq_loss_param, options);
                if (message.flow_warp_param != null && message.hasOwnProperty("flow_warp_param"))
                    object.flow_warp_param = $root.caffe.FlowWarpParameter.toObject(message.flow_warp_param, options);
                if (message.accum_param != null && message.hasOwnProperty("accum_param"))
                    object.accum_param = $root.caffe.AccumParameter.toObject(message.accum_param, options);
                if (message.black_augmentation_param != null && message.hasOwnProperty("black_augmentation_param"))
                    object.black_augmentation_param = $root.caffe.BlackAugmentationParameter.toObject(message.black_augmentation_param, options);
                if (message.yolo_v2_loss_param != null && message.hasOwnProperty("yolo_v2_loss_param"))
                    object.yolo_v2_loss_param = $root.caffe.YoloV2LossParameter.toObject(message.yolo_v2_loss_param, options);
                if (message.yolo_v3_loss_param != null && message.hasOwnProperty("yolo_v3_loss_param"))
                    object.yolo_v3_loss_param = $root.caffe.YoloV3LossParameter.toObject(message.yolo_v3_loss_param, options);
                if (message.force_backward != null && message.hasOwnProperty("force_backward"))
                    object.force_backward = message.force_backward;
                if (message.box_output_param != null && message.hasOwnProperty("box_output_param"))
                    object.box_output_param = $root.caffe.BoxOutputParameter.toObject(message.box_output_param, options);
                if (message.ring_pad_param != null && message.hasOwnProperty("ring_pad_param"))
                    object.ring_pad_param = $root.caffe.RingPadParameter.toObject(message.ring_pad_param, options);
                if (message.smooth_l1_loss_param != null && message.hasOwnProperty("smooth_l1_loss_param"))
                    object.smooth_l1_loss_param = $root.caffe.SmoothL1LossParameter.toObject(message.smooth_l1_loss_param, options);
                if (message.roi_pooling_param_2 != null && message.hasOwnProperty("roi_pooling_param_2"))
                    object.roi_pooling_param_2 = $root.caffe.ROIPoolingParameter.toObject(message.roi_pooling_param_2, options);
                if (message.normalize_bbox_param != null && message.hasOwnProperty("normalize_bbox_param"))
                    object.normalize_bbox_param = $root.caffe.NormalizeBBoxParameter.toObject(message.normalize_bbox_param, options);
                return object;
            };
    
            LayerParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LayerParameter;
        })();
    
        caffe.TransformationParameter = (function() {
    
            function TransformationParameter(properties) {
                this.mean_value = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            TransformationParameter.prototype.scale = 1;
            TransformationParameter.prototype.mirror = false;
            TransformationParameter.prototype.crop_size = 0;
            TransformationParameter.prototype.crop_h = 0;
            TransformationParameter.prototype.crop_w = 0;
            TransformationParameter.prototype.mean_file = "";
            TransformationParameter.prototype.mean_value = $util.emptyArray;
            TransformationParameter.prototype.force_color = false;
            TransformationParameter.prototype.force_gray = false;
            TransformationParameter.prototype.resize_param = null;
            TransformationParameter.prototype.noise_param = null;
            TransformationParameter.prototype.distort_param = null;
            TransformationParameter.prototype.expand_param = null;
            TransformationParameter.prototype.emit_constraint = null;
            TransformationParameter.prototype.random_resize_param = null;
            TransformationParameter.prototype.random_aspect_ratio_param = null;
            TransformationParameter.prototype.flow = false;
            TransformationParameter.prototype.bgr2rgb = false;
    
            TransformationParameter.create = function create(properties) {
                return new TransformationParameter(properties);
            };
    
            TransformationParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.TransformationParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.scale = reader.float();
                        break;
                    case 2:
                        message.mirror = reader.bool();
                        break;
                    case 3:
                        message.crop_size = reader.uint32();
                        break;
                    case 11:
                        message.crop_h = reader.uint32();
                        break;
                    case 12:
                        message.crop_w = reader.uint32();
                        break;
                    case 4:
                        message.mean_file = reader.string();
                        break;
                    case 5:
                        if (!(message.mean_value && message.mean_value.length))
                            message.mean_value = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.mean_value.push(reader.float());
                        } else
                            message.mean_value.push(reader.float());
                        break;
                    case 6:
                        message.force_color = reader.bool();
                        break;
                    case 7:
                        message.force_gray = reader.bool();
                        break;
                    case 8:
                        message.resize_param = $root.caffe.ResizeParameter.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.noise_param = $root.caffe.NoiseParameter.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.distort_param = $root.caffe.DistortionParameter.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.expand_param = $root.caffe.ExpansionParameter.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.emit_constraint = $root.caffe.EmitConstraint.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.random_resize_param = $root.caffe.RandomResizeParameter.decode(reader, reader.uint32());
                        break;
                    case 16:
                        message.random_aspect_ratio_param = $root.caffe.RandomAspectRatioParameter.decode(reader, reader.uint32());
                        break;
                    case 17:
                        message.flow = reader.bool();
                        break;
                    case 18:
                        message.bgr2rgb = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            TransformationParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.TransformationParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "scale":
                        message.scale = reader.float();
                        break;
                    case "mirror":
                        message.mirror = reader.bool();
                        break;
                    case "crop_size":
                        message.crop_size = reader.uint32();
                        break;
                    case "crop_h":
                        message.crop_h = reader.uint32();
                        break;
                    case "crop_w":
                        message.crop_w = reader.uint32();
                        break;
                    case "mean_file":
                        message.mean_file = reader.string();
                        break;
                    case "mean_value":
                        if (!(message.mean_value && message.mean_value.length))
                            message.mean_value = [];
                        message.mean_value.push(reader.float());
                        break;
                    case "force_color":
                        message.force_color = reader.bool();
                        break;
                    case "force_gray":
                        message.force_gray = reader.bool();
                        break;
                    case "resize_param":
                        message.resize_param = $root.caffe.ResizeParameter.decodeText(reader, true);
                        break;
                    case "noise_param":
                        message.noise_param = $root.caffe.NoiseParameter.decodeText(reader, true);
                        break;
                    case "distort_param":
                        message.distort_param = $root.caffe.DistortionParameter.decodeText(reader, true);
                        break;
                    case "expand_param":
                        message.expand_param = $root.caffe.ExpansionParameter.decodeText(reader, true);
                        break;
                    case "emit_constraint":
                        message.emit_constraint = $root.caffe.EmitConstraint.decodeText(reader, true);
                        break;
                    case "random_resize_param":
                        message.random_resize_param = $root.caffe.RandomResizeParameter.decodeText(reader, true);
                        break;
                    case "random_aspect_ratio_param":
                        message.random_aspect_ratio_param = $root.caffe.RandomAspectRatioParameter.decodeText(reader, true);
                        break;
                    case "flow":
                        message.flow = reader.bool();
                        break;
                    case "bgr2rgb":
                        message.bgr2rgb = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            TransformationParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    if (typeof message.mirror !== "boolean")
                        return "mirror: boolean expected";
                if (message.crop_size != null && message.hasOwnProperty("crop_size"))
                    if (!$util.isInteger(message.crop_size))
                        return "crop_size: integer expected";
                if (message.crop_h != null && message.hasOwnProperty("crop_h"))
                    if (!$util.isInteger(message.crop_h))
                        return "crop_h: integer expected";
                if (message.crop_w != null && message.hasOwnProperty("crop_w"))
                    if (!$util.isInteger(message.crop_w))
                        return "crop_w: integer expected";
                if (message.mean_file != null && message.hasOwnProperty("mean_file"))
                    if (!$util.isString(message.mean_file))
                        return "mean_file: string expected";
                if (message.mean_value != null && message.hasOwnProperty("mean_value")) {
                    if (!Array.isArray(message.mean_value))
                        return "mean_value: array expected";
                    for (var i = 0; i < message.mean_value.length; ++i)
                        if (typeof message.mean_value[i] !== "number")
                            return "mean_value: number[] expected";
                }
                if (message.force_color != null && message.hasOwnProperty("force_color"))
                    if (typeof message.force_color !== "boolean")
                        return "force_color: boolean expected";
                if (message.force_gray != null && message.hasOwnProperty("force_gray"))
                    if (typeof message.force_gray !== "boolean")
                        return "force_gray: boolean expected";
                if (message.resize_param != null && message.hasOwnProperty("resize_param")) {
                    var error = $root.caffe.ResizeParameter.verify(message.resize_param);
                    if (error)
                        return "resize_param." + error;
                }
                if (message.noise_param != null && message.hasOwnProperty("noise_param")) {
                    var error = $root.caffe.NoiseParameter.verify(message.noise_param);
                    if (error)
                        return "noise_param." + error;
                }
                if (message.distort_param != null && message.hasOwnProperty("distort_param")) {
                    var error = $root.caffe.DistortionParameter.verify(message.distort_param);
                    if (error)
                        return "distort_param." + error;
                }
                if (message.expand_param != null && message.hasOwnProperty("expand_param")) {
                    var error = $root.caffe.ExpansionParameter.verify(message.expand_param);
                    if (error)
                        return "expand_param." + error;
                }
                if (message.emit_constraint != null && message.hasOwnProperty("emit_constraint")) {
                    var error = $root.caffe.EmitConstraint.verify(message.emit_constraint);
                    if (error)
                        return "emit_constraint." + error;
                }
                if (message.random_resize_param != null && message.hasOwnProperty("random_resize_param")) {
                    var error = $root.caffe.RandomResizeParameter.verify(message.random_resize_param);
                    if (error)
                        return "random_resize_param." + error;
                }
                if (message.random_aspect_ratio_param != null && message.hasOwnProperty("random_aspect_ratio_param")) {
                    var error = $root.caffe.RandomAspectRatioParameter.verify(message.random_aspect_ratio_param);
                    if (error)
                        return "random_aspect_ratio_param." + error;
                }
                if (message.flow != null && message.hasOwnProperty("flow"))
                    if (typeof message.flow !== "boolean")
                        return "flow: boolean expected";
                if (message.bgr2rgb != null && message.hasOwnProperty("bgr2rgb"))
                    if (typeof message.bgr2rgb !== "boolean")
                        return "bgr2rgb: boolean expected";
                return null;
            };
    
            TransformationParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.TransformationParameter)
                    return object;
                var message = new $root.caffe.TransformationParameter();
                if (object.scale != null)
                    message.scale = Number(object.scale);
                if (object.mirror != null)
                    message.mirror = Boolean(object.mirror);
                if (object.crop_size != null)
                    message.crop_size = object.crop_size >>> 0;
                if (object.crop_h != null)
                    message.crop_h = object.crop_h >>> 0;
                if (object.crop_w != null)
                    message.crop_w = object.crop_w >>> 0;
                if (object.mean_file != null)
                    message.mean_file = String(object.mean_file);
                if (object.mean_value) {
                    if (!Array.isArray(object.mean_value))
                        throw TypeError(".caffe.TransformationParameter.mean_value: array expected");
                    message.mean_value = [];
                    for (var i = 0; i < object.mean_value.length; ++i)
                        message.mean_value[i] = Number(object.mean_value[i]);
                }
                if (object.force_color != null)
                    message.force_color = Boolean(object.force_color);
                if (object.force_gray != null)
                    message.force_gray = Boolean(object.force_gray);
                if (object.resize_param != null) {
                    if (typeof object.resize_param !== "object")
                        throw TypeError(".caffe.TransformationParameter.resize_param: object expected");
                    message.resize_param = $root.caffe.ResizeParameter.fromObject(object.resize_param);
                }
                if (object.noise_param != null) {
                    if (typeof object.noise_param !== "object")
                        throw TypeError(".caffe.TransformationParameter.noise_param: object expected");
                    message.noise_param = $root.caffe.NoiseParameter.fromObject(object.noise_param);
                }
                if (object.distort_param != null) {
                    if (typeof object.distort_param !== "object")
                        throw TypeError(".caffe.TransformationParameter.distort_param: object expected");
                    message.distort_param = $root.caffe.DistortionParameter.fromObject(object.distort_param);
                }
                if (object.expand_param != null) {
                    if (typeof object.expand_param !== "object")
                        throw TypeError(".caffe.TransformationParameter.expand_param: object expected");
                    message.expand_param = $root.caffe.ExpansionParameter.fromObject(object.expand_param);
                }
                if (object.emit_constraint != null) {
                    if (typeof object.emit_constraint !== "object")
                        throw TypeError(".caffe.TransformationParameter.emit_constraint: object expected");
                    message.emit_constraint = $root.caffe.EmitConstraint.fromObject(object.emit_constraint);
                }
                if (object.random_resize_param != null) {
                    if (typeof object.random_resize_param !== "object")
                        throw TypeError(".caffe.TransformationParameter.random_resize_param: object expected");
                    message.random_resize_param = $root.caffe.RandomResizeParameter.fromObject(object.random_resize_param);
                }
                if (object.random_aspect_ratio_param != null) {
                    if (typeof object.random_aspect_ratio_param !== "object")
                        throw TypeError(".caffe.TransformationParameter.random_aspect_ratio_param: object expected");
                    message.random_aspect_ratio_param = $root.caffe.RandomAspectRatioParameter.fromObject(object.random_aspect_ratio_param);
                }
                if (object.flow != null)
                    message.flow = Boolean(object.flow);
                if (object.bgr2rgb != null)
                    message.bgr2rgb = Boolean(object.bgr2rgb);
                return message;
            };
    
            TransformationParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.mean_value = [];
                if (options.defaults) {
                    object.scale = 1;
                    object.mirror = false;
                    object.crop_size = 0;
                    object.mean_file = "";
                    object.force_color = false;
                    object.force_gray = false;
                    object.resize_param = null;
                    object.noise_param = null;
                    object.emit_constraint = null;
                    object.crop_h = 0;
                    object.crop_w = 0;
                    object.distort_param = null;
                    object.expand_param = null;
                    object.random_resize_param = null;
                    object.random_aspect_ratio_param = null;
                    object.flow = false;
                    object.bgr2rgb = false;
                }
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    object.mirror = message.mirror;
                if (message.crop_size != null && message.hasOwnProperty("crop_size"))
                    object.crop_size = message.crop_size;
                if (message.mean_file != null && message.hasOwnProperty("mean_file"))
                    object.mean_file = message.mean_file;
                if (message.mean_value && message.mean_value.length) {
                    object.mean_value = [];
                    for (var j = 0; j < message.mean_value.length; ++j)
                        object.mean_value[j] = options.json && !isFinite(message.mean_value[j]) ? String(message.mean_value[j]) : message.mean_value[j];
                }
                if (message.force_color != null && message.hasOwnProperty("force_color"))
                    object.force_color = message.force_color;
                if (message.force_gray != null && message.hasOwnProperty("force_gray"))
                    object.force_gray = message.force_gray;
                if (message.resize_param != null && message.hasOwnProperty("resize_param"))
                    object.resize_param = $root.caffe.ResizeParameter.toObject(message.resize_param, options);
                if (message.noise_param != null && message.hasOwnProperty("noise_param"))
                    object.noise_param = $root.caffe.NoiseParameter.toObject(message.noise_param, options);
                if (message.emit_constraint != null && message.hasOwnProperty("emit_constraint"))
                    object.emit_constraint = $root.caffe.EmitConstraint.toObject(message.emit_constraint, options);
                if (message.crop_h != null && message.hasOwnProperty("crop_h"))
                    object.crop_h = message.crop_h;
                if (message.crop_w != null && message.hasOwnProperty("crop_w"))
                    object.crop_w = message.crop_w;
                if (message.distort_param != null && message.hasOwnProperty("distort_param"))
                    object.distort_param = $root.caffe.DistortionParameter.toObject(message.distort_param, options);
                if (message.expand_param != null && message.hasOwnProperty("expand_param"))
                    object.expand_param = $root.caffe.ExpansionParameter.toObject(message.expand_param, options);
                if (message.random_resize_param != null && message.hasOwnProperty("random_resize_param"))
                    object.random_resize_param = $root.caffe.RandomResizeParameter.toObject(message.random_resize_param, options);
                if (message.random_aspect_ratio_param != null && message.hasOwnProperty("random_aspect_ratio_param"))
                    object.random_aspect_ratio_param = $root.caffe.RandomAspectRatioParameter.toObject(message.random_aspect_ratio_param, options);
                if (message.flow != null && message.hasOwnProperty("flow"))
                    object.flow = message.flow;
                if (message.bgr2rgb != null && message.hasOwnProperty("bgr2rgb"))
                    object.bgr2rgb = message.bgr2rgb;
                return object;
            };
    
            TransformationParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TransformationParameter;
        })();
    
        caffe.NoiseParameter = (function() {
    
            function NoiseParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            NoiseParameter.prototype.prob = 0;
            NoiseParameter.prototype.hist_eq = false;
            NoiseParameter.prototype.inverse = false;
            NoiseParameter.prototype.decolorize = false;
            NoiseParameter.prototype.gauss_blur = false;
            NoiseParameter.prototype.jpeg = -1;
            NoiseParameter.prototype.posterize = false;
            NoiseParameter.prototype.erode = false;
            NoiseParameter.prototype.saltpepper = false;
            NoiseParameter.prototype.saltpepper_param = null;
            NoiseParameter.prototype.clahe = false;
            NoiseParameter.prototype.convert_to_hsv = false;
            NoiseParameter.prototype.convert_to_lab = false;
    
            NoiseParameter.create = function create(properties) {
                return new NoiseParameter(properties);
            };
    
            NoiseParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.NoiseParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.prob = reader.float();
                        break;
                    case 2:
                        message.hist_eq = reader.bool();
                        break;
                    case 3:
                        message.inverse = reader.bool();
                        break;
                    case 4:
                        message.decolorize = reader.bool();
                        break;
                    case 5:
                        message.gauss_blur = reader.bool();
                        break;
                    case 6:
                        message.jpeg = reader.float();
                        break;
                    case 7:
                        message.posterize = reader.bool();
                        break;
                    case 8:
                        message.erode = reader.bool();
                        break;
                    case 9:
                        message.saltpepper = reader.bool();
                        break;
                    case 10:
                        message.saltpepper_param = $root.caffe.SaltPepperParameter.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.clahe = reader.bool();
                        break;
                    case 12:
                        message.convert_to_hsv = reader.bool();
                        break;
                    case 13:
                        message.convert_to_lab = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            NoiseParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.NoiseParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "prob":
                        message.prob = reader.float();
                        break;
                    case "hist_eq":
                        message.hist_eq = reader.bool();
                        break;
                    case "inverse":
                        message.inverse = reader.bool();
                        break;
                    case "decolorize":
                        message.decolorize = reader.bool();
                        break;
                    case "gauss_blur":
                        message.gauss_blur = reader.bool();
                        break;
                    case "jpeg":
                        message.jpeg = reader.float();
                        break;
                    case "posterize":
                        message.posterize = reader.bool();
                        break;
                    case "erode":
                        message.erode = reader.bool();
                        break;
                    case "saltpepper":
                        message.saltpepper = reader.bool();
                        break;
                    case "saltpepper_param":
                        message.saltpepper_param = $root.caffe.SaltPepperParameter.decodeText(reader, true);
                        break;
                    case "clahe":
                        message.clahe = reader.bool();
                        break;
                    case "convert_to_hsv":
                        message.convert_to_hsv = reader.bool();
                        break;
                    case "convert_to_lab":
                        message.convert_to_lab = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            NoiseParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.prob != null && message.hasOwnProperty("prob"))
                    if (typeof message.prob !== "number")
                        return "prob: number expected";
                if (message.hist_eq != null && message.hasOwnProperty("hist_eq"))
                    if (typeof message.hist_eq !== "boolean")
                        return "hist_eq: boolean expected";
                if (message.inverse != null && message.hasOwnProperty("inverse"))
                    if (typeof message.inverse !== "boolean")
                        return "inverse: boolean expected";
                if (message.decolorize != null && message.hasOwnProperty("decolorize"))
                    if (typeof message.decolorize !== "boolean")
                        return "decolorize: boolean expected";
                if (message.gauss_blur != null && message.hasOwnProperty("gauss_blur"))
                    if (typeof message.gauss_blur !== "boolean")
                        return "gauss_blur: boolean expected";
                if (message.jpeg != null && message.hasOwnProperty("jpeg"))
                    if (typeof message.jpeg !== "number")
                        return "jpeg: number expected";
                if (message.posterize != null && message.hasOwnProperty("posterize"))
                    if (typeof message.posterize !== "boolean")
                        return "posterize: boolean expected";
                if (message.erode != null && message.hasOwnProperty("erode"))
                    if (typeof message.erode !== "boolean")
                        return "erode: boolean expected";
                if (message.saltpepper != null && message.hasOwnProperty("saltpepper"))
                    if (typeof message.saltpepper !== "boolean")
                        return "saltpepper: boolean expected";
                if (message.saltpepper_param != null && message.hasOwnProperty("saltpepper_param")) {
                    var error = $root.caffe.SaltPepperParameter.verify(message.saltpepper_param);
                    if (error)
                        return "saltpepper_param." + error;
                }
                if (message.clahe != null && message.hasOwnProperty("clahe"))
                    if (typeof message.clahe !== "boolean")
                        return "clahe: boolean expected";
                if (message.convert_to_hsv != null && message.hasOwnProperty("convert_to_hsv"))
                    if (typeof message.convert_to_hsv !== "boolean")
                        return "convert_to_hsv: boolean expected";
                if (message.convert_to_lab != null && message.hasOwnProperty("convert_to_lab"))
                    if (typeof message.convert_to_lab !== "boolean")
                        return "convert_to_lab: boolean expected";
                return null;
            };
    
            NoiseParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.NoiseParameter)
                    return object;
                var message = new $root.caffe.NoiseParameter();
                if (object.prob != null)
                    message.prob = Number(object.prob);
                if (object.hist_eq != null)
                    message.hist_eq = Boolean(object.hist_eq);
                if (object.inverse != null)
                    message.inverse = Boolean(object.inverse);
                if (object.decolorize != null)
                    message.decolorize = Boolean(object.decolorize);
                if (object.gauss_blur != null)
                    message.gauss_blur = Boolean(object.gauss_blur);
                if (object.jpeg != null)
                    message.jpeg = Number(object.jpeg);
                if (object.posterize != null)
                    message.posterize = Boolean(object.posterize);
                if (object.erode != null)
                    message.erode = Boolean(object.erode);
                if (object.saltpepper != null)
                    message.saltpepper = Boolean(object.saltpepper);
                if (object.saltpepper_param != null) {
                    if (typeof object.saltpepper_param !== "object")
                        throw TypeError(".caffe.NoiseParameter.saltpepper_param: object expected");
                    message.saltpepper_param = $root.caffe.SaltPepperParameter.fromObject(object.saltpepper_param);
                }
                if (object.clahe != null)
                    message.clahe = Boolean(object.clahe);
                if (object.convert_to_hsv != null)
                    message.convert_to_hsv = Boolean(object.convert_to_hsv);
                if (object.convert_to_lab != null)
                    message.convert_to_lab = Boolean(object.convert_to_lab);
                return message;
            };
    
            NoiseParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.prob = 0;
                    object.hist_eq = false;
                    object.inverse = false;
                    object.decolorize = false;
                    object.gauss_blur = false;
                    object.jpeg = -1;
                    object.posterize = false;
                    object.erode = false;
                    object.saltpepper = false;
                    object.saltpepper_param = null;
                    object.clahe = false;
                    object.convert_to_hsv = false;
                    object.convert_to_lab = false;
                }
                if (message.prob != null && message.hasOwnProperty("prob"))
                    object.prob = options.json && !isFinite(message.prob) ? String(message.prob) : message.prob;
                if (message.hist_eq != null && message.hasOwnProperty("hist_eq"))
                    object.hist_eq = message.hist_eq;
                if (message.inverse != null && message.hasOwnProperty("inverse"))
                    object.inverse = message.inverse;
                if (message.decolorize != null && message.hasOwnProperty("decolorize"))
                    object.decolorize = message.decolorize;
                if (message.gauss_blur != null && message.hasOwnProperty("gauss_blur"))
                    object.gauss_blur = message.gauss_blur;
                if (message.jpeg != null && message.hasOwnProperty("jpeg"))
                    object.jpeg = options.json && !isFinite(message.jpeg) ? String(message.jpeg) : message.jpeg;
                if (message.posterize != null && message.hasOwnProperty("posterize"))
                    object.posterize = message.posterize;
                if (message.erode != null && message.hasOwnProperty("erode"))
                    object.erode = message.erode;
                if (message.saltpepper != null && message.hasOwnProperty("saltpepper"))
                    object.saltpepper = message.saltpepper;
                if (message.saltpepper_param != null && message.hasOwnProperty("saltpepper_param"))
                    object.saltpepper_param = $root.caffe.SaltPepperParameter.toObject(message.saltpepper_param, options);
                if (message.clahe != null && message.hasOwnProperty("clahe"))
                    object.clahe = message.clahe;
                if (message.convert_to_hsv != null && message.hasOwnProperty("convert_to_hsv"))
                    object.convert_to_hsv = message.convert_to_hsv;
                if (message.convert_to_lab != null && message.hasOwnProperty("convert_to_lab"))
                    object.convert_to_lab = message.convert_to_lab;
                return object;
            };
    
            NoiseParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NoiseParameter;
        })();
    
        caffe.DistortionParameter = (function() {
    
            function DistortionParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            DistortionParameter.prototype.brightness_prob = 0;
            DistortionParameter.prototype.brightness_delta = 0;
            DistortionParameter.prototype.contrast_prob = 0;
            DistortionParameter.prototype.contrast_lower = 0;
            DistortionParameter.prototype.contrast_upper = 0;
            DistortionParameter.prototype.hue_prob = 0;
            DistortionParameter.prototype.hue_delta = 0;
            DistortionParameter.prototype.saturation_prob = 0;
            DistortionParameter.prototype.saturation_lower = 0;
            DistortionParameter.prototype.saturation_upper = 0;
            DistortionParameter.prototype.random_order_prob = 0;
    
            DistortionParameter.create = function create(properties) {
                return new DistortionParameter(properties);
            };
    
            DistortionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.DistortionParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.brightness_prob = reader.float();
                        break;
                    case 2:
                        message.brightness_delta = reader.float();
                        break;
                    case 3:
                        message.contrast_prob = reader.float();
                        break;
                    case 4:
                        message.contrast_lower = reader.float();
                        break;
                    case 5:
                        message.contrast_upper = reader.float();
                        break;
                    case 6:
                        message.hue_prob = reader.float();
                        break;
                    case 7:
                        message.hue_delta = reader.float();
                        break;
                    case 8:
                        message.saturation_prob = reader.float();
                        break;
                    case 9:
                        message.saturation_lower = reader.float();
                        break;
                    case 10:
                        message.saturation_upper = reader.float();
                        break;
                    case 11:
                        message.random_order_prob = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            DistortionParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.DistortionParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "brightness_prob":
                        message.brightness_prob = reader.float();
                        break;
                    case "brightness_delta":
                        message.brightness_delta = reader.float();
                        break;
                    case "contrast_prob":
                        message.contrast_prob = reader.float();
                        break;
                    case "contrast_lower":
                        message.contrast_lower = reader.float();
                        break;
                    case "contrast_upper":
                        message.contrast_upper = reader.float();
                        break;
                    case "hue_prob":
                        message.hue_prob = reader.float();
                        break;
                    case "hue_delta":
                        message.hue_delta = reader.float();
                        break;
                    case "saturation_prob":
                        message.saturation_prob = reader.float();
                        break;
                    case "saturation_lower":
                        message.saturation_lower = reader.float();
                        break;
                    case "saturation_upper":
                        message.saturation_upper = reader.float();
                        break;
                    case "random_order_prob":
                        message.random_order_prob = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            DistortionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.brightness_prob != null && message.hasOwnProperty("brightness_prob"))
                    if (typeof message.brightness_prob !== "number")
                        return "brightness_prob: number expected";
                if (message.brightness_delta != null && message.hasOwnProperty("brightness_delta"))
                    if (typeof message.brightness_delta !== "number")
                        return "brightness_delta: number expected";
                if (message.contrast_prob != null && message.hasOwnProperty("contrast_prob"))
                    if (typeof message.contrast_prob !== "number")
                        return "contrast_prob: number expected";
                if (message.contrast_lower != null && message.hasOwnProperty("contrast_lower"))
                    if (typeof message.contrast_lower !== "number")
                        return "contrast_lower: number expected";
                if (message.contrast_upper != null && message.hasOwnProperty("contrast_upper"))
                    if (typeof message.contrast_upper !== "number")
                        return "contrast_upper: number expected";
                if (message.hue_prob != null && message.hasOwnProperty("hue_prob"))
                    if (typeof message.hue_prob !== "number")
                        return "hue_prob: number expected";
                if (message.hue_delta != null && message.hasOwnProperty("hue_delta"))
                    if (typeof message.hue_delta !== "number")
                        return "hue_delta: number expected";
                if (message.saturation_prob != null && message.hasOwnProperty("saturation_prob"))
                    if (typeof message.saturation_prob !== "number")
                        return "saturation_prob: number expected";
                if (message.saturation_lower != null && message.hasOwnProperty("saturation_lower"))
                    if (typeof message.saturation_lower !== "number")
                        return "saturation_lower: number expected";
                if (message.saturation_upper != null && message.hasOwnProperty("saturation_upper"))
                    if (typeof message.saturation_upper !== "number")
                        return "saturation_upper: number expected";
                if (message.random_order_prob != null && message.hasOwnProperty("random_order_prob"))
                    if (typeof message.random_order_prob !== "number")
                        return "random_order_prob: number expected";
                return null;
            };
    
            DistortionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.DistortionParameter)
                    return object;
                var message = new $root.caffe.DistortionParameter();
                if (object.brightness_prob != null)
                    message.brightness_prob = Number(object.brightness_prob);
                if (object.brightness_delta != null)
                    message.brightness_delta = Number(object.brightness_delta);
                if (object.contrast_prob != null)
                    message.contrast_prob = Number(object.contrast_prob);
                if (object.contrast_lower != null)
                    message.contrast_lower = Number(object.contrast_lower);
                if (object.contrast_upper != null)
                    message.contrast_upper = Number(object.contrast_upper);
                if (object.hue_prob != null)
                    message.hue_prob = Number(object.hue_prob);
                if (object.hue_delta != null)
                    message.hue_delta = Number(object.hue_delta);
                if (object.saturation_prob != null)
                    message.saturation_prob = Number(object.saturation_prob);
                if (object.saturation_lower != null)
                    message.saturation_lower = Number(object.saturation_lower);
                if (object.saturation_upper != null)
                    message.saturation_upper = Number(object.saturation_upper);
                if (object.random_order_prob != null)
                    message.random_order_prob = Number(object.random_order_prob);
                return message;
            };
    
            DistortionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.brightness_prob = 0;
                    object.brightness_delta = 0;
                    object.contrast_prob = 0;
                    object.contrast_lower = 0;
                    object.contrast_upper = 0;
                    object.hue_prob = 0;
                    object.hue_delta = 0;
                    object.saturation_prob = 0;
                    object.saturation_lower = 0;
                    object.saturation_upper = 0;
                    object.random_order_prob = 0;
                }
                if (message.brightness_prob != null && message.hasOwnProperty("brightness_prob"))
                    object.brightness_prob = options.json && !isFinite(message.brightness_prob) ? String(message.brightness_prob) : message.brightness_prob;
                if (message.brightness_delta != null && message.hasOwnProperty("brightness_delta"))
                    object.brightness_delta = options.json && !isFinite(message.brightness_delta) ? String(message.brightness_delta) : message.brightness_delta;
                if (message.contrast_prob != null && message.hasOwnProperty("contrast_prob"))
                    object.contrast_prob = options.json && !isFinite(message.contrast_prob) ? String(message.contrast_prob) : message.contrast_prob;
                if (message.contrast_lower != null && message.hasOwnProperty("contrast_lower"))
                    object.contrast_lower = options.json && !isFinite(message.contrast_lower) ? String(message.contrast_lower) : message.contrast_lower;
                if (message.contrast_upper != null && message.hasOwnProperty("contrast_upper"))
                    object.contrast_upper = options.json && !isFinite(message.contrast_upper) ? String(message.contrast_upper) : message.contrast_upper;
                if (message.hue_prob != null && message.hasOwnProperty("hue_prob"))
                    object.hue_prob = options.json && !isFinite(message.hue_prob) ? String(message.hue_prob) : message.hue_prob;
                if (message.hue_delta != null && message.hasOwnProperty("hue_delta"))
                    object.hue_delta = options.json && !isFinite(message.hue_delta) ? String(message.hue_delta) : message.hue_delta;
                if (message.saturation_prob != null && message.hasOwnProperty("saturation_prob"))
                    object.saturation_prob = options.json && !isFinite(message.saturation_prob) ? String(message.saturation_prob) : message.saturation_prob;
                if (message.saturation_lower != null && message.hasOwnProperty("saturation_lower"))
                    object.saturation_lower = options.json && !isFinite(message.saturation_lower) ? String(message.saturation_lower) : message.saturation_lower;
                if (message.saturation_upper != null && message.hasOwnProperty("saturation_upper"))
                    object.saturation_upper = options.json && !isFinite(message.saturation_upper) ? String(message.saturation_upper) : message.saturation_upper;
                if (message.random_order_prob != null && message.hasOwnProperty("random_order_prob"))
                    object.random_order_prob = options.json && !isFinite(message.random_order_prob) ? String(message.random_order_prob) : message.random_order_prob;
                return object;
            };
    
            DistortionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DistortionParameter;
        })();
    
        caffe.ExpansionParameter = (function() {
    
            function ExpansionParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ExpansionParameter.prototype.prob = 1;
            ExpansionParameter.prototype.max_expand_ratio = 1;
    
            ExpansionParameter.create = function create(properties) {
                return new ExpansionParameter(properties);
            };
    
            ExpansionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ExpansionParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.prob = reader.float();
                        break;
                    case 2:
                        message.max_expand_ratio = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ExpansionParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ExpansionParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "prob":
                        message.prob = reader.float();
                        break;
                    case "max_expand_ratio":
                        message.max_expand_ratio = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ExpansionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.prob != null && message.hasOwnProperty("prob"))
                    if (typeof message.prob !== "number")
                        return "prob: number expected";
                if (message.max_expand_ratio != null && message.hasOwnProperty("max_expand_ratio"))
                    if (typeof message.max_expand_ratio !== "number")
                        return "max_expand_ratio: number expected";
                return null;
            };
    
            ExpansionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ExpansionParameter)
                    return object;
                var message = new $root.caffe.ExpansionParameter();
                if (object.prob != null)
                    message.prob = Number(object.prob);
                if (object.max_expand_ratio != null)
                    message.max_expand_ratio = Number(object.max_expand_ratio);
                return message;
            };
    
            ExpansionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.prob = 1;
                    object.max_expand_ratio = 1;
                }
                if (message.prob != null && message.hasOwnProperty("prob"))
                    object.prob = options.json && !isFinite(message.prob) ? String(message.prob) : message.prob;
                if (message.max_expand_ratio != null && message.hasOwnProperty("max_expand_ratio"))
                    object.max_expand_ratio = options.json && !isFinite(message.max_expand_ratio) ? String(message.max_expand_ratio) : message.max_expand_ratio;
                return object;
            };
    
            ExpansionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ExpansionParameter;
        })();
    
        caffe.EmitConstraint = (function() {
    
            function EmitConstraint(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            EmitConstraint.prototype.emit_type = 0;
            EmitConstraint.prototype.emit_overlap = 0;
    
            EmitConstraint.create = function create(properties) {
                return new EmitConstraint(properties);
            };
    
            EmitConstraint.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.EmitConstraint();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.emit_type = reader.int32();
                        break;
                    case 2:
                        message.emit_overlap = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            EmitConstraint.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.EmitConstraint();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "emit_type":
                        message.emit_type = reader.enum($root.caffe.EmitConstraint.EmitType);
                        break;
                    case "emit_overlap":
                        message.emit_overlap = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            EmitConstraint.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.emit_type != null && message.hasOwnProperty("emit_type"))
                    switch (message.emit_type) {
                    default:
                        return "emit_type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.emit_overlap != null && message.hasOwnProperty("emit_overlap"))
                    if (typeof message.emit_overlap !== "number")
                        return "emit_overlap: number expected";
                return null;
            };
    
            EmitConstraint.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.EmitConstraint)
                    return object;
                var message = new $root.caffe.EmitConstraint();
                switch (object.emit_type) {
                case "CENTER":
                case 0:
                    message.emit_type = 0;
                    break;
                case "MIN_OVERLAP":
                case 1:
                    message.emit_type = 1;
                    break;
                }
                if (object.emit_overlap != null)
                    message.emit_overlap = Number(object.emit_overlap);
                return message;
            };
    
            EmitConstraint.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.emit_type = options.enums === String ? "CENTER" : 0;
                    object.emit_overlap = 0;
                }
                if (message.emit_type != null && message.hasOwnProperty("emit_type"))
                    object.emit_type = options.enums === String ? $root.caffe.EmitConstraint.EmitType[message.emit_type] : message.emit_type;
                if (message.emit_overlap != null && message.hasOwnProperty("emit_overlap"))
                    object.emit_overlap = options.json && !isFinite(message.emit_overlap) ? String(message.emit_overlap) : message.emit_overlap;
                return object;
            };
    
            EmitConstraint.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            EmitConstraint.EmitType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CENTER"] = 0;
                values[valuesById[1] = "MIN_OVERLAP"] = 1;
                return values;
            })();
    
            return EmitConstraint;
        })();
    
        caffe.RandomResizeParameter = (function() {
    
            function RandomResizeParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            RandomResizeParameter.prototype.min_size = 0;
            RandomResizeParameter.prototype.max_size = 0;
            RandomResizeParameter.prototype.resize_param = null;
    
            RandomResizeParameter.create = function create(properties) {
                return new RandomResizeParameter(properties);
            };
    
            RandomResizeParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.RandomResizeParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.min_size = reader.uint32();
                        break;
                    case 2:
                        message.max_size = reader.uint32();
                        break;
                    case 3:
                        message.resize_param = $root.caffe.ResizeParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            RandomResizeParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.RandomResizeParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "min_size":
                        message.min_size = reader.uint32();
                        break;
                    case "max_size":
                        message.max_size = reader.uint32();
                        break;
                    case "resize_param":
                        message.resize_param = $root.caffe.ResizeParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            RandomResizeParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.min_size != null && message.hasOwnProperty("min_size"))
                    if (!$util.isInteger(message.min_size))
                        return "min_size: integer expected";
                if (message.max_size != null && message.hasOwnProperty("max_size"))
                    if (!$util.isInteger(message.max_size))
                        return "max_size: integer expected";
                if (message.resize_param != null && message.hasOwnProperty("resize_param")) {
                    var error = $root.caffe.ResizeParameter.verify(message.resize_param);
                    if (error)
                        return "resize_param." + error;
                }
                return null;
            };
    
            RandomResizeParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.RandomResizeParameter)
                    return object;
                var message = new $root.caffe.RandomResizeParameter();
                if (object.min_size != null)
                    message.min_size = object.min_size >>> 0;
                if (object.max_size != null)
                    message.max_size = object.max_size >>> 0;
                if (object.resize_param != null) {
                    if (typeof object.resize_param !== "object")
                        throw TypeError(".caffe.RandomResizeParameter.resize_param: object expected");
                    message.resize_param = $root.caffe.ResizeParameter.fromObject(object.resize_param);
                }
                return message;
            };
    
            RandomResizeParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.min_size = 0;
                    object.max_size = 0;
                    object.resize_param = null;
                }
                if (message.min_size != null && message.hasOwnProperty("min_size"))
                    object.min_size = message.min_size;
                if (message.max_size != null && message.hasOwnProperty("max_size"))
                    object.max_size = message.max_size;
                if (message.resize_param != null && message.hasOwnProperty("resize_param"))
                    object.resize_param = $root.caffe.ResizeParameter.toObject(message.resize_param, options);
                return object;
            };
    
            RandomResizeParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RandomResizeParameter;
        })();
    
        caffe.RandomAspectRatioParameter = (function() {
    
            function RandomAspectRatioParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            RandomAspectRatioParameter.prototype.min_area_ratio = 0.5;
            RandomAspectRatioParameter.prototype.max_area_ratio = 1;
            RandomAspectRatioParameter.prototype.aspect_ratio_change = 1;
            RandomAspectRatioParameter.prototype.max_attempt = 10;
            RandomAspectRatioParameter.prototype.resize_param = null;
    
            RandomAspectRatioParameter.create = function create(properties) {
                return new RandomAspectRatioParameter(properties);
            };
    
            RandomAspectRatioParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.RandomAspectRatioParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.min_area_ratio = reader.float();
                        break;
                    case 2:
                        message.max_area_ratio = reader.float();
                        break;
                    case 3:
                        message.aspect_ratio_change = reader.float();
                        break;
                    case 4:
                        message.max_attempt = reader.uint32();
                        break;
                    case 5:
                        message.resize_param = $root.caffe.ResizeParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            RandomAspectRatioParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.RandomAspectRatioParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "min_area_ratio":
                        message.min_area_ratio = reader.float();
                        break;
                    case "max_area_ratio":
                        message.max_area_ratio = reader.float();
                        break;
                    case "aspect_ratio_change":
                        message.aspect_ratio_change = reader.float();
                        break;
                    case "max_attempt":
                        message.max_attempt = reader.uint32();
                        break;
                    case "resize_param":
                        message.resize_param = $root.caffe.ResizeParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            RandomAspectRatioParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.min_area_ratio != null && message.hasOwnProperty("min_area_ratio"))
                    if (typeof message.min_area_ratio !== "number")
                        return "min_area_ratio: number expected";
                if (message.max_area_ratio != null && message.hasOwnProperty("max_area_ratio"))
                    if (typeof message.max_area_ratio !== "number")
                        return "max_area_ratio: number expected";
                if (message.aspect_ratio_change != null && message.hasOwnProperty("aspect_ratio_change"))
                    if (typeof message.aspect_ratio_change !== "number")
                        return "aspect_ratio_change: number expected";
                if (message.max_attempt != null && message.hasOwnProperty("max_attempt"))
                    if (!$util.isInteger(message.max_attempt))
                        return "max_attempt: integer expected";
                if (message.resize_param != null && message.hasOwnProperty("resize_param")) {
                    var error = $root.caffe.ResizeParameter.verify(message.resize_param);
                    if (error)
                        return "resize_param." + error;
                }
                return null;
            };
    
            RandomAspectRatioParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.RandomAspectRatioParameter)
                    return object;
                var message = new $root.caffe.RandomAspectRatioParameter();
                if (object.min_area_ratio != null)
                    message.min_area_ratio = Number(object.min_area_ratio);
                if (object.max_area_ratio != null)
                    message.max_area_ratio = Number(object.max_area_ratio);
                if (object.aspect_ratio_change != null)
                    message.aspect_ratio_change = Number(object.aspect_ratio_change);
                if (object.max_attempt != null)
                    message.max_attempt = object.max_attempt >>> 0;
                if (object.resize_param != null) {
                    if (typeof object.resize_param !== "object")
                        throw TypeError(".caffe.RandomAspectRatioParameter.resize_param: object expected");
                    message.resize_param = $root.caffe.ResizeParameter.fromObject(object.resize_param);
                }
                return message;
            };
    
            RandomAspectRatioParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.min_area_ratio = 0.5;
                    object.max_area_ratio = 1;
                    object.aspect_ratio_change = 1;
                    object.max_attempt = 10;
                    object.resize_param = null;
                }
                if (message.min_area_ratio != null && message.hasOwnProperty("min_area_ratio"))
                    object.min_area_ratio = options.json && !isFinite(message.min_area_ratio) ? String(message.min_area_ratio) : message.min_area_ratio;
                if (message.max_area_ratio != null && message.hasOwnProperty("max_area_ratio"))
                    object.max_area_ratio = options.json && !isFinite(message.max_area_ratio) ? String(message.max_area_ratio) : message.max_area_ratio;
                if (message.aspect_ratio_change != null && message.hasOwnProperty("aspect_ratio_change"))
                    object.aspect_ratio_change = options.json && !isFinite(message.aspect_ratio_change) ? String(message.aspect_ratio_change) : message.aspect_ratio_change;
                if (message.max_attempt != null && message.hasOwnProperty("max_attempt"))
                    object.max_attempt = message.max_attempt;
                if (message.resize_param != null && message.hasOwnProperty("resize_param"))
                    object.resize_param = $root.caffe.ResizeParameter.toObject(message.resize_param, options);
                return object;
            };
    
            RandomAspectRatioParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RandomAspectRatioParameter;
        })();
    
        caffe.SaltPepperParameter = (function() {
    
            function SaltPepperParameter(properties) {
                this.value = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SaltPepperParameter.prototype.fraction = 0;
            SaltPepperParameter.prototype.value = $util.emptyArray;
    
            SaltPepperParameter.create = function create(properties) {
                return new SaltPepperParameter(properties);
            };
    
            SaltPepperParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SaltPepperParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.fraction = reader.float();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.value.push(reader.float());
                        } else
                            message.value.push(reader.float());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SaltPepperParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SaltPepperParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "fraction":
                        message.fraction = reader.float();
                        break;
                    case "value":
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push(reader.float());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SaltPepperParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.fraction != null && message.hasOwnProperty("fraction"))
                    if (typeof message.fraction !== "number")
                        return "fraction: number expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (var i = 0; i < message.value.length; ++i)
                        if (typeof message.value[i] !== "number")
                            return "value: number[] expected";
                }
                return null;
            };
    
            SaltPepperParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SaltPepperParameter)
                    return object;
                var message = new $root.caffe.SaltPepperParameter();
                if (object.fraction != null)
                    message.fraction = Number(object.fraction);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".caffe.SaltPepperParameter.value: array expected");
                    message.value = [];
                    for (var i = 0; i < object.value.length; ++i)
                        message.value[i] = Number(object.value[i]);
                }
                return message;
            };
    
            SaltPepperParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.value = [];
                if (options.defaults)
                    object.fraction = 0;
                if (message.fraction != null && message.hasOwnProperty("fraction"))
                    object.fraction = options.json && !isFinite(message.fraction) ? String(message.fraction) : message.fraction;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (var j = 0; j < message.value.length; ++j)
                        object.value[j] = options.json && !isFinite(message.value[j]) ? String(message.value[j]) : message.value[j];
                }
                return object;
            };
    
            SaltPepperParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SaltPepperParameter;
        })();
    
        caffe.BNParameter = (function() {
    
            function BNParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BNParameter.prototype.slope_filler = null;
            BNParameter.prototype.bias_filler = null;
            BNParameter.prototype.momentum = 0.9;
            BNParameter.prototype.eps = 0.00001;
            BNParameter.prototype.frozen = false;
            BNParameter.prototype.engine = 0;
    
            BNParameter.create = function create(properties) {
                return new BNParameter(properties);
            };
    
            BNParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BNParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.slope_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.bias_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.momentum = reader.float();
                        break;
                    case 4:
                        message.eps = reader.float();
                        break;
                    case 5:
                        message.frozen = reader.bool();
                        break;
                    case 6:
                        message.engine = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BNParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BNParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "slope_filler":
                        message.slope_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_filler":
                        message.bias_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "momentum":
                        message.momentum = reader.float();
                        break;
                    case "eps":
                        message.eps = reader.float();
                        break;
                    case "frozen":
                        message.frozen = reader.bool();
                        break;
                    case "engine":
                        message.engine = reader.enum($root.caffe.BNParameter.Engine);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BNParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.slope_filler != null && message.hasOwnProperty("slope_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.slope_filler);
                    if (error)
                        return "slope_filler." + error;
                }
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_filler);
                    if (error)
                        return "bias_filler." + error;
                }
                if (message.momentum != null && message.hasOwnProperty("momentum"))
                    if (typeof message.momentum !== "number")
                        return "momentum: number expected";
                if (message.eps != null && message.hasOwnProperty("eps"))
                    if (typeof message.eps !== "number")
                        return "eps: number expected";
                if (message.frozen != null && message.hasOwnProperty("frozen"))
                    if (typeof message.frozen !== "boolean")
                        return "frozen: boolean expected";
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };
    
            BNParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BNParameter)
                    return object;
                var message = new $root.caffe.BNParameter();
                if (object.slope_filler != null) {
                    if (typeof object.slope_filler !== "object")
                        throw TypeError(".caffe.BNParameter.slope_filler: object expected");
                    message.slope_filler = $root.caffe.FillerParameter.fromObject(object.slope_filler);
                }
                if (object.bias_filler != null) {
                    if (typeof object.bias_filler !== "object")
                        throw TypeError(".caffe.BNParameter.bias_filler: object expected");
                    message.bias_filler = $root.caffe.FillerParameter.fromObject(object.bias_filler);
                }
                if (object.momentum != null)
                    message.momentum = Number(object.momentum);
                if (object.eps != null)
                    message.eps = Number(object.eps);
                if (object.frozen != null)
                    message.frozen = Boolean(object.frozen);
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                return message;
            };
    
            BNParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.slope_filler = null;
                    object.bias_filler = null;
                    object.momentum = 0.9;
                    object.eps = 0.00001;
                    object.frozen = false;
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                }
                if (message.slope_filler != null && message.hasOwnProperty("slope_filler"))
                    object.slope_filler = $root.caffe.FillerParameter.toObject(message.slope_filler, options);
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler"))
                    object.bias_filler = $root.caffe.FillerParameter.toObject(message.bias_filler, options);
                if (message.momentum != null && message.hasOwnProperty("momentum"))
                    object.momentum = options.json && !isFinite(message.momentum) ? String(message.momentum) : message.momentum;
                if (message.eps != null && message.hasOwnProperty("eps"))
                    object.eps = options.json && !isFinite(message.eps) ? String(message.eps) : message.eps;
                if (message.frozen != null && message.hasOwnProperty("frozen"))
                    object.frozen = message.frozen;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.BNParameter.Engine[message.engine] : message.engine;
                return object;
            };
    
            BNParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            BNParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            return BNParameter;
        })();
    
        caffe.BatchReductionParameter = (function() {
    
            function BatchReductionParameter(properties) {
                this.level = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BatchReductionParameter.prototype.level = $util.emptyArray;
            BatchReductionParameter.prototype.reduction_param = null;
            BatchReductionParameter.prototype.pos = false;
    
            BatchReductionParameter.create = function create(properties) {
                return new BatchReductionParameter(properties);
            };
    
            BatchReductionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BatchReductionParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.level && message.level.length))
                            message.level = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.level.push(reader.int32());
                        } else
                            message.level.push(reader.int32());
                        break;
                    case 2:
                        message.reduction_param = $root.caffe.ReductionParameter.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.pos = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BatchReductionParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BatchReductionParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "level":
                        if (!(message.level && message.level.length))
                            message.level = [];
                        message.level.push(reader.int32());
                        break;
                    case "reduction_param":
                        message.reduction_param = $root.caffe.ReductionParameter.decodeText(reader, true);
                        break;
                    case "pos":
                        message.pos = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BatchReductionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.level != null && message.hasOwnProperty("level")) {
                    if (!Array.isArray(message.level))
                        return "level: array expected";
                    for (var i = 0; i < message.level.length; ++i)
                        if (!$util.isInteger(message.level[i]))
                            return "level: integer[] expected";
                }
                if (message.reduction_param != null && message.hasOwnProperty("reduction_param")) {
                    var error = $root.caffe.ReductionParameter.verify(message.reduction_param);
                    if (error)
                        return "reduction_param." + error;
                }
                if (message.pos != null && message.hasOwnProperty("pos"))
                    if (typeof message.pos !== "boolean")
                        return "pos: boolean expected";
                return null;
            };
    
            BatchReductionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BatchReductionParameter)
                    return object;
                var message = new $root.caffe.BatchReductionParameter();
                if (object.level) {
                    if (!Array.isArray(object.level))
                        throw TypeError(".caffe.BatchReductionParameter.level: array expected");
                    message.level = [];
                    for (var i = 0; i < object.level.length; ++i)
                        message.level[i] = object.level[i] | 0;
                }
                if (object.reduction_param != null) {
                    if (typeof object.reduction_param !== "object")
                        throw TypeError(".caffe.BatchReductionParameter.reduction_param: object expected");
                    message.reduction_param = $root.caffe.ReductionParameter.fromObject(object.reduction_param);
                }
                if (object.pos != null)
                    message.pos = Boolean(object.pos);
                return message;
            };
    
            BatchReductionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.level = [];
                if (options.defaults) {
                    object.reduction_param = null;
                    object.pos = false;
                }
                if (message.level && message.level.length) {
                    object.level = [];
                    for (var j = 0; j < message.level.length; ++j)
                        object.level[j] = message.level[j];
                }
                if (message.reduction_param != null && message.hasOwnProperty("reduction_param"))
                    object.reduction_param = $root.caffe.ReductionParameter.toObject(message.reduction_param, options);
                if (message.pos != null && message.hasOwnProperty("pos"))
                    object.pos = message.pos;
                return object;
            };
    
            BatchReductionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BatchReductionParameter;
        })();
    
        caffe.InterpParameter = (function() {
    
            function InterpParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            InterpParameter.prototype.height = 0;
            InterpParameter.prototype.width = 0;
            InterpParameter.prototype.zoom_factor = 1;
            InterpParameter.prototype.shrink_factor = 1;
            InterpParameter.prototype.pad_beg = 0;
            InterpParameter.prototype.pad_end = 0;
    
            InterpParameter.create = function create(properties) {
                return new InterpParameter(properties);
            };
    
            InterpParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.InterpParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int32();
                        break;
                    case 2:
                        message.width = reader.int32();
                        break;
                    case 3:
                        message.zoom_factor = reader.int32();
                        break;
                    case 4:
                        message.shrink_factor = reader.int32();
                        break;
                    case 5:
                        message.pad_beg = reader.int32();
                        break;
                    case 6:
                        message.pad_end = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            InterpParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.InterpParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "height":
                        message.height = reader.int32();
                        break;
                    case "width":
                        message.width = reader.int32();
                        break;
                    case "zoom_factor":
                        message.zoom_factor = reader.int32();
                        break;
                    case "shrink_factor":
                        message.shrink_factor = reader.int32();
                        break;
                    case "pad_beg":
                        message.pad_beg = reader.int32();
                        break;
                    case "pad_end":
                        message.pad_end = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            InterpParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                if (message.zoom_factor != null && message.hasOwnProperty("zoom_factor"))
                    if (!$util.isInteger(message.zoom_factor))
                        return "zoom_factor: integer expected";
                if (message.shrink_factor != null && message.hasOwnProperty("shrink_factor"))
                    if (!$util.isInteger(message.shrink_factor))
                        return "shrink_factor: integer expected";
                if (message.pad_beg != null && message.hasOwnProperty("pad_beg"))
                    if (!$util.isInteger(message.pad_beg))
                        return "pad_beg: integer expected";
                if (message.pad_end != null && message.hasOwnProperty("pad_end"))
                    if (!$util.isInteger(message.pad_end))
                        return "pad_end: integer expected";
                return null;
            };
    
            InterpParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.InterpParameter)
                    return object;
                var message = new $root.caffe.InterpParameter();
                if (object.height != null)
                    message.height = object.height | 0;
                if (object.width != null)
                    message.width = object.width | 0;
                if (object.zoom_factor != null)
                    message.zoom_factor = object.zoom_factor | 0;
                if (object.shrink_factor != null)
                    message.shrink_factor = object.shrink_factor | 0;
                if (object.pad_beg != null)
                    message.pad_beg = object.pad_beg | 0;
                if (object.pad_end != null)
                    message.pad_end = object.pad_end | 0;
                return message;
            };
    
            InterpParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.height = 0;
                    object.width = 0;
                    object.zoom_factor = 1;
                    object.shrink_factor = 1;
                    object.pad_beg = 0;
                    object.pad_end = 0;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                if (message.zoom_factor != null && message.hasOwnProperty("zoom_factor"))
                    object.zoom_factor = message.zoom_factor;
                if (message.shrink_factor != null && message.hasOwnProperty("shrink_factor"))
                    object.shrink_factor = message.shrink_factor;
                if (message.pad_beg != null && message.hasOwnProperty("pad_beg"))
                    object.pad_beg = message.pad_beg;
                if (message.pad_end != null && message.hasOwnProperty("pad_end"))
                    object.pad_end = message.pad_end;
                return object;
            };
    
            InterpParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return InterpParameter;
        })();
    
        caffe.LossParameter = (function() {
    
            function LossParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            LossParameter.prototype.ignore_label = 0;
            LossParameter.prototype.normalization = 1;
            LossParameter.prototype.normalize = false;
    
            LossParameter.create = function create(properties) {
                return new LossParameter(properties);
            };
    
            LossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.LossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ignore_label = reader.int32();
                        break;
                    case 3:
                        message.normalization = reader.int32();
                        break;
                    case 2:
                        message.normalize = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            LossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.LossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "ignore_label":
                        message.ignore_label = reader.int32();
                        break;
                    case "normalization":
                        message.normalization = reader.enum($root.caffe.LossParameter.NormalizationMode);
                        break;
                    case "normalize":
                        message.normalize = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            LossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ignore_label != null && message.hasOwnProperty("ignore_label"))
                    if (!$util.isInteger(message.ignore_label))
                        return "ignore_label: integer expected";
                if (message.normalization != null && message.hasOwnProperty("normalization"))
                    switch (message.normalization) {
                    default:
                        return "normalization: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.normalize != null && message.hasOwnProperty("normalize"))
                    if (typeof message.normalize !== "boolean")
                        return "normalize: boolean expected";
                return null;
            };
    
            LossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.LossParameter)
                    return object;
                var message = new $root.caffe.LossParameter();
                if (object.ignore_label != null)
                    message.ignore_label = object.ignore_label | 0;
                switch (object.normalization) {
                case "FULL":
                case 0:
                    message.normalization = 0;
                    break;
                case "VALID":
                case 1:
                    message.normalization = 1;
                    break;
                case "BATCH_SIZE":
                case 2:
                    message.normalization = 2;
                    break;
                case "NONE":
                case 3:
                    message.normalization = 3;
                    break;
                }
                if (object.normalize != null)
                    message.normalize = Boolean(object.normalize);
                return message;
            };
    
            LossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ignore_label = 0;
                    object.normalize = false;
                    object.normalization = options.enums === String ? "VALID" : 1;
                }
                if (message.ignore_label != null && message.hasOwnProperty("ignore_label"))
                    object.ignore_label = message.ignore_label;
                if (message.normalize != null && message.hasOwnProperty("normalize"))
                    object.normalize = message.normalize;
                if (message.normalization != null && message.hasOwnProperty("normalization"))
                    object.normalization = options.enums === String ? $root.caffe.LossParameter.NormalizationMode[message.normalization] : message.normalization;
                return object;
            };
    
            LossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            LossParameter.NormalizationMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FULL"] = 0;
                values[valuesById[1] = "VALID"] = 1;
                values[valuesById[2] = "BATCH_SIZE"] = 2;
                values[valuesById[3] = "NONE"] = 3;
                return values;
            })();
    
            return LossParameter;
        })();
    
        caffe.AccuracyParameter = (function() {
    
            function AccuracyParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            AccuracyParameter.prototype.top_k = 1;
            AccuracyParameter.prototype.axis = 1;
            AccuracyParameter.prototype.ignore_label = 0;
    
            AccuracyParameter.create = function create(properties) {
                return new AccuracyParameter(properties);
            };
    
            AccuracyParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.AccuracyParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.top_k = reader.uint32();
                        break;
                    case 2:
                        message.axis = reader.int32();
                        break;
                    case 3:
                        message.ignore_label = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            AccuracyParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.AccuracyParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "top_k":
                        message.top_k = reader.uint32();
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "ignore_label":
                        message.ignore_label = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            AccuracyParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.top_k != null && message.hasOwnProperty("top_k"))
                    if (!$util.isInteger(message.top_k))
                        return "top_k: integer expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.ignore_label != null && message.hasOwnProperty("ignore_label"))
                    if (!$util.isInteger(message.ignore_label))
                        return "ignore_label: integer expected";
                return null;
            };
    
            AccuracyParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.AccuracyParameter)
                    return object;
                var message = new $root.caffe.AccuracyParameter();
                if (object.top_k != null)
                    message.top_k = object.top_k >>> 0;
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.ignore_label != null)
                    message.ignore_label = object.ignore_label | 0;
                return message;
            };
    
            AccuracyParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.top_k = 1;
                    object.axis = 1;
                    object.ignore_label = 0;
                }
                if (message.top_k != null && message.hasOwnProperty("top_k"))
                    object.top_k = message.top_k;
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.ignore_label != null && message.hasOwnProperty("ignore_label"))
                    object.ignore_label = message.ignore_label;
                return object;
            };
    
            AccuracyParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AccuracyParameter;
        })();
    
        caffe.ArgMaxParameter = (function() {
    
            function ArgMaxParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ArgMaxParameter.prototype.out_max_val = false;
            ArgMaxParameter.prototype.top_k = 1;
            ArgMaxParameter.prototype.axis = 0;
    
            ArgMaxParameter.create = function create(properties) {
                return new ArgMaxParameter(properties);
            };
    
            ArgMaxParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ArgMaxParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.out_max_val = reader.bool();
                        break;
                    case 2:
                        message.top_k = reader.uint32();
                        break;
                    case 3:
                        message.axis = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ArgMaxParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ArgMaxParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "out_max_val":
                        message.out_max_val = reader.bool();
                        break;
                    case "top_k":
                        message.top_k = reader.uint32();
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ArgMaxParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.out_max_val != null && message.hasOwnProperty("out_max_val"))
                    if (typeof message.out_max_val !== "boolean")
                        return "out_max_val: boolean expected";
                if (message.top_k != null && message.hasOwnProperty("top_k"))
                    if (!$util.isInteger(message.top_k))
                        return "top_k: integer expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                return null;
            };
    
            ArgMaxParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ArgMaxParameter)
                    return object;
                var message = new $root.caffe.ArgMaxParameter();
                if (object.out_max_val != null)
                    message.out_max_val = Boolean(object.out_max_val);
                if (object.top_k != null)
                    message.top_k = object.top_k >>> 0;
                if (object.axis != null)
                    message.axis = object.axis | 0;
                return message;
            };
    
            ArgMaxParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.out_max_val = false;
                    object.top_k = 1;
                    object.axis = 0;
                }
                if (message.out_max_val != null && message.hasOwnProperty("out_max_val"))
                    object.out_max_val = message.out_max_val;
                if (message.top_k != null && message.hasOwnProperty("top_k"))
                    object.top_k = message.top_k;
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                return object;
            };
    
            ArgMaxParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ArgMaxParameter;
        })();
    
        caffe.ClipParameter = (function() {
    
            function ClipParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ClipParameter.prototype.min = 0;
            ClipParameter.prototype.max = 0;
    
            ClipParameter.create = function create(properties) {
                return new ClipParameter(properties);
            };
    
            ClipParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ClipParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.min = reader.float();
                        break;
                    case 2:
                        message.max = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("min"))
                    throw $util.ProtocolError("missing required 'min'", { instance: message });
                if (!message.hasOwnProperty("max"))
                    throw $util.ProtocolError("missing required 'max'", { instance: message });
                return message;
            };
    
            ClipParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ClipParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "min":
                        message.min = reader.float();
                        break;
                    case "max":
                        message.max = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                if (!message.hasOwnProperty("min"))
                    throw $util.ProtocolError("missing required 'min'", { instance: message });
                if (!message.hasOwnProperty("max"))
                    throw $util.ProtocolError("missing required 'max'", { instance: message });
                return message;
            };
    
            ClipParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (typeof message.min !== "number")
                    return "min: number expected";
                if (typeof message.max !== "number")
                    return "max: number expected";
                return null;
            };
    
            ClipParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ClipParameter)
                    return object;
                var message = new $root.caffe.ClipParameter();
                if (object.min != null)
                    message.min = Number(object.min);
                if (object.max != null)
                    message.max = Number(object.max);
                return message;
            };
    
            ClipParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.min = 0;
                    object.max = 0;
                }
                if (message.min != null && message.hasOwnProperty("min"))
                    object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;
                if (message.max != null && message.hasOwnProperty("max"))
                    object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;
                return object;
            };
    
            ClipParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ClipParameter;
        })();
    
        caffe.ConcatParameter = (function() {
    
            function ConcatParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ConcatParameter.prototype.axis = 1;
            ConcatParameter.prototype.concat_dim = 1;
    
            ConcatParameter.create = function create(properties) {
                return new ConcatParameter(properties);
            };
    
            ConcatParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ConcatParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.axis = reader.int32();
                        break;
                    case 1:
                        message.concat_dim = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ConcatParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ConcatParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "concat_dim":
                        message.concat_dim = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ConcatParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.concat_dim != null && message.hasOwnProperty("concat_dim"))
                    if (!$util.isInteger(message.concat_dim))
                        return "concat_dim: integer expected";
                return null;
            };
    
            ConcatParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ConcatParameter)
                    return object;
                var message = new $root.caffe.ConcatParameter();
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.concat_dim != null)
                    message.concat_dim = object.concat_dim >>> 0;
                return message;
            };
    
            ConcatParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.concat_dim = 1;
                    object.axis = 1;
                }
                if (message.concat_dim != null && message.hasOwnProperty("concat_dim"))
                    object.concat_dim = message.concat_dim;
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                return object;
            };
    
            ConcatParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ConcatParameter;
        })();
    
        caffe.BatchNormParameter = (function() {
    
            function BatchNormParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BatchNormParameter.prototype.use_global_stats = false;
            BatchNormParameter.prototype.moving_average_fraction = 0.999;
            BatchNormParameter.prototype.eps = 0.00001;
    
            BatchNormParameter.create = function create(properties) {
                return new BatchNormParameter(properties);
            };
    
            BatchNormParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BatchNormParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.use_global_stats = reader.bool();
                        break;
                    case 2:
                        message.moving_average_fraction = reader.float();
                        break;
                    case 3:
                        message.eps = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BatchNormParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BatchNormParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "use_global_stats":
                        message.use_global_stats = reader.bool();
                        break;
                    case "moving_average_fraction":
                        message.moving_average_fraction = reader.float();
                        break;
                    case "eps":
                        message.eps = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BatchNormParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.use_global_stats != null && message.hasOwnProperty("use_global_stats"))
                    if (typeof message.use_global_stats !== "boolean")
                        return "use_global_stats: boolean expected";
                if (message.moving_average_fraction != null && message.hasOwnProperty("moving_average_fraction"))
                    if (typeof message.moving_average_fraction !== "number")
                        return "moving_average_fraction: number expected";
                if (message.eps != null && message.hasOwnProperty("eps"))
                    if (typeof message.eps !== "number")
                        return "eps: number expected";
                return null;
            };
    
            BatchNormParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BatchNormParameter)
                    return object;
                var message = new $root.caffe.BatchNormParameter();
                if (object.use_global_stats != null)
                    message.use_global_stats = Boolean(object.use_global_stats);
                if (object.moving_average_fraction != null)
                    message.moving_average_fraction = Number(object.moving_average_fraction);
                if (object.eps != null)
                    message.eps = Number(object.eps);
                return message;
            };
    
            BatchNormParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.use_global_stats = false;
                    object.moving_average_fraction = 0.999;
                    object.eps = 0.00001;
                }
                if (message.use_global_stats != null && message.hasOwnProperty("use_global_stats"))
                    object.use_global_stats = message.use_global_stats;
                if (message.moving_average_fraction != null && message.hasOwnProperty("moving_average_fraction"))
                    object.moving_average_fraction = options.json && !isFinite(message.moving_average_fraction) ? String(message.moving_average_fraction) : message.moving_average_fraction;
                if (message.eps != null && message.hasOwnProperty("eps"))
                    object.eps = options.json && !isFinite(message.eps) ? String(message.eps) : message.eps;
                return object;
            };
    
            BatchNormParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BatchNormParameter;
        })();
    
        caffe.BiasParameter = (function() {
    
            function BiasParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BiasParameter.prototype.axis = 1;
            BiasParameter.prototype.num_axes = 1;
            BiasParameter.prototype.filler = null;
    
            BiasParameter.create = function create(properties) {
                return new BiasParameter(properties);
            };
    
            BiasParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BiasParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.axis = reader.int32();
                        break;
                    case 2:
                        message.num_axes = reader.int32();
                        break;
                    case 3:
                        message.filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BiasParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BiasParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "num_axes":
                        message.num_axes = reader.int32();
                        break;
                    case "filler":
                        message.filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BiasParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.num_axes != null && message.hasOwnProperty("num_axes"))
                    if (!$util.isInteger(message.num_axes))
                        return "num_axes: integer expected";
                if (message.filler != null && message.hasOwnProperty("filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.filler);
                    if (error)
                        return "filler." + error;
                }
                return null;
            };
    
            BiasParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BiasParameter)
                    return object;
                var message = new $root.caffe.BiasParameter();
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.num_axes != null)
                    message.num_axes = object.num_axes | 0;
                if (object.filler != null) {
                    if (typeof object.filler !== "object")
                        throw TypeError(".caffe.BiasParameter.filler: object expected");
                    message.filler = $root.caffe.FillerParameter.fromObject(object.filler);
                }
                return message;
            };
    
            BiasParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.axis = 1;
                    object.num_axes = 1;
                    object.filler = null;
                }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.num_axes != null && message.hasOwnProperty("num_axes"))
                    object.num_axes = message.num_axes;
                if (message.filler != null && message.hasOwnProperty("filler"))
                    object.filler = $root.caffe.FillerParameter.toObject(message.filler, options);
                return object;
            };
    
            BiasParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BiasParameter;
        })();
    
        caffe.ContrastiveLossParameter = (function() {
    
            function ContrastiveLossParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ContrastiveLossParameter.prototype.margin = 1;
            ContrastiveLossParameter.prototype.legacy_version = false;
    
            ContrastiveLossParameter.create = function create(properties) {
                return new ContrastiveLossParameter(properties);
            };
    
            ContrastiveLossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ContrastiveLossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.margin = reader.float();
                        break;
                    case 2:
                        message.legacy_version = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ContrastiveLossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ContrastiveLossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "margin":
                        message.margin = reader.float();
                        break;
                    case "legacy_version":
                        message.legacy_version = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ContrastiveLossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.margin != null && message.hasOwnProperty("margin"))
                    if (typeof message.margin !== "number")
                        return "margin: number expected";
                if (message.legacy_version != null && message.hasOwnProperty("legacy_version"))
                    if (typeof message.legacy_version !== "boolean")
                        return "legacy_version: boolean expected";
                return null;
            };
    
            ContrastiveLossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ContrastiveLossParameter)
                    return object;
                var message = new $root.caffe.ContrastiveLossParameter();
                if (object.margin != null)
                    message.margin = Number(object.margin);
                if (object.legacy_version != null)
                    message.legacy_version = Boolean(object.legacy_version);
                return message;
            };
    
            ContrastiveLossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.margin = 1;
                    object.legacy_version = false;
                }
                if (message.margin != null && message.hasOwnProperty("margin"))
                    object.margin = options.json && !isFinite(message.margin) ? String(message.margin) : message.margin;
                if (message.legacy_version != null && message.hasOwnProperty("legacy_version"))
                    object.legacy_version = message.legacy_version;
                return object;
            };
    
            ContrastiveLossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ContrastiveLossParameter;
        })();
    
        caffe.ConvolutionParameter = (function() {
    
            function ConvolutionParameter(properties) {
                this.pad = [];
                this.kernel_size = [];
                this.stride = [];
                this.dilation = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ConvolutionParameter.prototype.num_output = 0;
            ConvolutionParameter.prototype.bias_term = true;
            ConvolutionParameter.prototype.pad = $util.emptyArray;
            ConvolutionParameter.prototype.kernel_size = $util.emptyArray;
            ConvolutionParameter.prototype.stride = $util.emptyArray;
            ConvolutionParameter.prototype.dilation = $util.emptyArray;
            ConvolutionParameter.prototype.pad_h = 0;
            ConvolutionParameter.prototype.pad_w = 0;
            ConvolutionParameter.prototype.kernel_h = 0;
            ConvolutionParameter.prototype.kernel_w = 0;
            ConvolutionParameter.prototype.stride_h = 0;
            ConvolutionParameter.prototype.stride_w = 0;
            ConvolutionParameter.prototype.group = 1;
            ConvolutionParameter.prototype.weight_filler = null;
            ConvolutionParameter.prototype.bias_filler = null;
            ConvolutionParameter.prototype.engine = 0;
            ConvolutionParameter.prototype.axis = 1;
            ConvolutionParameter.prototype.force_nd_im2col = false;
            ConvolutionParameter.prototype.hole = 1;
            ConvolutionParameter.prototype.hole_h = 1;
            ConvolutionParameter.prototype.hole_w = 1;
    
            ConvolutionParameter.create = function create(properties) {
                return new ConvolutionParameter(properties);
            };
    
            ConvolutionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ConvolutionParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_output = reader.uint32();
                        break;
                    case 2:
                        message.bias_term = reader.bool();
                        break;
                    case 3:
                        if (!(message.pad && message.pad.length))
                            message.pad = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.pad.push(reader.uint32());
                        } else
                            message.pad.push(reader.uint32());
                        break;
                    case 4:
                        if (!(message.kernel_size && message.kernel_size.length))
                            message.kernel_size = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.kernel_size.push(reader.uint32());
                        } else
                            message.kernel_size.push(reader.uint32());
                        break;
                    case 6:
                        if (!(message.stride && message.stride.length))
                            message.stride = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.stride.push(reader.uint32());
                        } else
                            message.stride.push(reader.uint32());
                        break;
                    case 18:
                        if (!(message.dilation && message.dilation.length))
                            message.dilation = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.dilation.push(reader.uint32());
                        } else
                            message.dilation.push(reader.uint32());
                        break;
                    case 9:
                        message.pad_h = reader.uint32();
                        break;
                    case 10:
                        message.pad_w = reader.uint32();
                        break;
                    case 11:
                        message.kernel_h = reader.uint32();
                        break;
                    case 12:
                        message.kernel_w = reader.uint32();
                        break;
                    case 13:
                        message.stride_h = reader.uint32();
                        break;
                    case 14:
                        message.stride_w = reader.uint32();
                        break;
                    case 5:
                        message.group = reader.uint32();
                        break;
                    case 7:
                        message.weight_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.bias_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.engine = reader.int32();
                        break;
                    case 16:
                        message.axis = reader.int32();
                        break;
                    case 17:
                        message.force_nd_im2col = reader.bool();
                        break;
                    case 117:
                        message.hole = reader.uint32();
                        break;
                    case 118:
                        message.hole_h = reader.uint32();
                        break;
                    case 119:
                        message.hole_w = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ConvolutionParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ConvolutionParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_output":
                        message.num_output = reader.uint32();
                        break;
                    case "bias_term":
                        message.bias_term = reader.bool();
                        break;
                    case "pad":
                        if (!(message.pad && message.pad.length))
                            message.pad = [];
                        message.pad.push(reader.uint32());
                        break;
                    case "kernel_size":
                        if (!(message.kernel_size && message.kernel_size.length))
                            message.kernel_size = [];
                        message.kernel_size.push(reader.uint32());
                        break;
                    case "stride":
                        if (!(message.stride && message.stride.length))
                            message.stride = [];
                        message.stride.push(reader.uint32());
                        break;
                    case "dilation":
                        if (!(message.dilation && message.dilation.length))
                            message.dilation = [];
                        message.dilation.push(reader.uint32());
                        break;
                    case "pad_h":
                        message.pad_h = reader.uint32();
                        break;
                    case "pad_w":
                        message.pad_w = reader.uint32();
                        break;
                    case "kernel_h":
                        message.kernel_h = reader.uint32();
                        break;
                    case "kernel_w":
                        message.kernel_w = reader.uint32();
                        break;
                    case "stride_h":
                        message.stride_h = reader.uint32();
                        break;
                    case "stride_w":
                        message.stride_w = reader.uint32();
                        break;
                    case "group":
                        message.group = reader.uint32();
                        break;
                    case "weight_filler":
                        message.weight_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_filler":
                        message.bias_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "engine":
                        message.engine = reader.enum($root.caffe.ConvolutionParameter.Engine);
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "force_nd_im2col":
                        message.force_nd_im2col = reader.bool();
                        break;
                    case "hole":
                        message.hole = reader.uint32();
                        break;
                    case "hole_h":
                        message.hole_h = reader.uint32();
                        break;
                    case "hole_w":
                        message.hole_w = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ConvolutionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    if (!$util.isInteger(message.num_output))
                        return "num_output: integer expected";
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    if (typeof message.bias_term !== "boolean")
                        return "bias_term: boolean expected";
                if (message.pad != null && message.hasOwnProperty("pad")) {
                    if (!Array.isArray(message.pad))
                        return "pad: array expected";
                    for (var i = 0; i < message.pad.length; ++i)
                        if (!$util.isInteger(message.pad[i]))
                            return "pad: integer[] expected";
                }
                if (message.kernel_size != null && message.hasOwnProperty("kernel_size")) {
                    if (!Array.isArray(message.kernel_size))
                        return "kernel_size: array expected";
                    for (var i = 0; i < message.kernel_size.length; ++i)
                        if (!$util.isInteger(message.kernel_size[i]))
                            return "kernel_size: integer[] expected";
                }
                if (message.stride != null && message.hasOwnProperty("stride")) {
                    if (!Array.isArray(message.stride))
                        return "stride: array expected";
                    for (var i = 0; i < message.stride.length; ++i)
                        if (!$util.isInteger(message.stride[i]))
                            return "stride: integer[] expected";
                }
                if (message.dilation != null && message.hasOwnProperty("dilation")) {
                    if (!Array.isArray(message.dilation))
                        return "dilation: array expected";
                    for (var i = 0; i < message.dilation.length; ++i)
                        if (!$util.isInteger(message.dilation[i]))
                            return "dilation: integer[] expected";
                }
                if (message.pad_h != null && message.hasOwnProperty("pad_h"))
                    if (!$util.isInteger(message.pad_h))
                        return "pad_h: integer expected";
                if (message.pad_w != null && message.hasOwnProperty("pad_w"))
                    if (!$util.isInteger(message.pad_w))
                        return "pad_w: integer expected";
                if (message.kernel_h != null && message.hasOwnProperty("kernel_h"))
                    if (!$util.isInteger(message.kernel_h))
                        return "kernel_h: integer expected";
                if (message.kernel_w != null && message.hasOwnProperty("kernel_w"))
                    if (!$util.isInteger(message.kernel_w))
                        return "kernel_w: integer expected";
                if (message.stride_h != null && message.hasOwnProperty("stride_h"))
                    if (!$util.isInteger(message.stride_h))
                        return "stride_h: integer expected";
                if (message.stride_w != null && message.hasOwnProperty("stride_w"))
                    if (!$util.isInteger(message.stride_w))
                        return "stride_w: integer expected";
                if (message.group != null && message.hasOwnProperty("group"))
                    if (!$util.isInteger(message.group))
                        return "group: integer expected";
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.weight_filler);
                    if (error)
                        return "weight_filler." + error;
                }
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_filler);
                    if (error)
                        return "bias_filler." + error;
                }
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.force_nd_im2col != null && message.hasOwnProperty("force_nd_im2col"))
                    if (typeof message.force_nd_im2col !== "boolean")
                        return "force_nd_im2col: boolean expected";
                if (message.hole != null && message.hasOwnProperty("hole"))
                    if (!$util.isInteger(message.hole))
                        return "hole: integer expected";
                if (message.hole_h != null && message.hasOwnProperty("hole_h"))
                    if (!$util.isInteger(message.hole_h))
                        return "hole_h: integer expected";
                if (message.hole_w != null && message.hasOwnProperty("hole_w"))
                    if (!$util.isInteger(message.hole_w))
                        return "hole_w: integer expected";
                return null;
            };
    
            ConvolutionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ConvolutionParameter)
                    return object;
                var message = new $root.caffe.ConvolutionParameter();
                if (object.num_output != null)
                    message.num_output = object.num_output >>> 0;
                if (object.bias_term != null)
                    message.bias_term = Boolean(object.bias_term);
                if (object.pad) {
                    if (!Array.isArray(object.pad))
                        throw TypeError(".caffe.ConvolutionParameter.pad: array expected");
                    message.pad = [];
                    for (var i = 0; i < object.pad.length; ++i)
                        message.pad[i] = object.pad[i] >>> 0;
                }
                if (object.kernel_size) {
                    if (!Array.isArray(object.kernel_size))
                        throw TypeError(".caffe.ConvolutionParameter.kernel_size: array expected");
                    message.kernel_size = [];
                    for (var i = 0; i < object.kernel_size.length; ++i)
                        message.kernel_size[i] = object.kernel_size[i] >>> 0;
                }
                if (object.stride) {
                    if (!Array.isArray(object.stride))
                        throw TypeError(".caffe.ConvolutionParameter.stride: array expected");
                    message.stride = [];
                    for (var i = 0; i < object.stride.length; ++i)
                        message.stride[i] = object.stride[i] >>> 0;
                }
                if (object.dilation) {
                    if (!Array.isArray(object.dilation))
                        throw TypeError(".caffe.ConvolutionParameter.dilation: array expected");
                    message.dilation = [];
                    for (var i = 0; i < object.dilation.length; ++i)
                        message.dilation[i] = object.dilation[i] >>> 0;
                }
                if (object.pad_h != null)
                    message.pad_h = object.pad_h >>> 0;
                if (object.pad_w != null)
                    message.pad_w = object.pad_w >>> 0;
                if (object.kernel_h != null)
                    message.kernel_h = object.kernel_h >>> 0;
                if (object.kernel_w != null)
                    message.kernel_w = object.kernel_w >>> 0;
                if (object.stride_h != null)
                    message.stride_h = object.stride_h >>> 0;
                if (object.stride_w != null)
                    message.stride_w = object.stride_w >>> 0;
                if (object.group != null)
                    message.group = object.group >>> 0;
                if (object.weight_filler != null) {
                    if (typeof object.weight_filler !== "object")
                        throw TypeError(".caffe.ConvolutionParameter.weight_filler: object expected");
                    message.weight_filler = $root.caffe.FillerParameter.fromObject(object.weight_filler);
                }
                if (object.bias_filler != null) {
                    if (typeof object.bias_filler !== "object")
                        throw TypeError(".caffe.ConvolutionParameter.bias_filler: object expected");
                    message.bias_filler = $root.caffe.FillerParameter.fromObject(object.bias_filler);
                }
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.force_nd_im2col != null)
                    message.force_nd_im2col = Boolean(object.force_nd_im2col);
                if (object.hole != null)
                    message.hole = object.hole >>> 0;
                if (object.hole_h != null)
                    message.hole_h = object.hole_h >>> 0;
                if (object.hole_w != null)
                    message.hole_w = object.hole_w >>> 0;
                return message;
            };
    
            ConvolutionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.pad = [];
                    object.kernel_size = [];
                    object.stride = [];
                    object.dilation = [];
                }
                if (options.defaults) {
                    object.num_output = 0;
                    object.bias_term = true;
                    object.group = 1;
                    object.weight_filler = null;
                    object.bias_filler = null;
                    object.pad_h = 0;
                    object.pad_w = 0;
                    object.kernel_h = 0;
                    object.kernel_w = 0;
                    object.stride_h = 0;
                    object.stride_w = 0;
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                    object.axis = 1;
                    object.force_nd_im2col = false;
                    object.hole = 1;
                    object.hole_h = 1;
                    object.hole_w = 1;
                }
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    object.num_output = message.num_output;
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    object.bias_term = message.bias_term;
                if (message.pad && message.pad.length) {
                    object.pad = [];
                    for (var j = 0; j < message.pad.length; ++j)
                        object.pad[j] = message.pad[j];
                }
                if (message.kernel_size && message.kernel_size.length) {
                    object.kernel_size = [];
                    for (var j = 0; j < message.kernel_size.length; ++j)
                        object.kernel_size[j] = message.kernel_size[j];
                }
                if (message.group != null && message.hasOwnProperty("group"))
                    object.group = message.group;
                if (message.stride && message.stride.length) {
                    object.stride = [];
                    for (var j = 0; j < message.stride.length; ++j)
                        object.stride[j] = message.stride[j];
                }
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler"))
                    object.weight_filler = $root.caffe.FillerParameter.toObject(message.weight_filler, options);
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler"))
                    object.bias_filler = $root.caffe.FillerParameter.toObject(message.bias_filler, options);
                if (message.pad_h != null && message.hasOwnProperty("pad_h"))
                    object.pad_h = message.pad_h;
                if (message.pad_w != null && message.hasOwnProperty("pad_w"))
                    object.pad_w = message.pad_w;
                if (message.kernel_h != null && message.hasOwnProperty("kernel_h"))
                    object.kernel_h = message.kernel_h;
                if (message.kernel_w != null && message.hasOwnProperty("kernel_w"))
                    object.kernel_w = message.kernel_w;
                if (message.stride_h != null && message.hasOwnProperty("stride_h"))
                    object.stride_h = message.stride_h;
                if (message.stride_w != null && message.hasOwnProperty("stride_w"))
                    object.stride_w = message.stride_w;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.ConvolutionParameter.Engine[message.engine] : message.engine;
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.force_nd_im2col != null && message.hasOwnProperty("force_nd_im2col"))
                    object.force_nd_im2col = message.force_nd_im2col;
                if (message.dilation && message.dilation.length) {
                    object.dilation = [];
                    for (var j = 0; j < message.dilation.length; ++j)
                        object.dilation[j] = message.dilation[j];
                }
                if (message.hole != null && message.hasOwnProperty("hole"))
                    object.hole = message.hole;
                if (message.hole_h != null && message.hasOwnProperty("hole_h"))
                    object.hole_h = message.hole_h;
                if (message.hole_w != null && message.hasOwnProperty("hole_w"))
                    object.hole_w = message.hole_w;
                return object;
            };
    
            ConvolutionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            ConvolutionParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            return ConvolutionParameter;
        })();
    
        caffe.CropParameter = (function() {
    
            function CropParameter(properties) {
                this.offset = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            CropParameter.prototype.axis = 2;
            CropParameter.prototype.offset = $util.emptyArray;
    
            CropParameter.create = function create(properties) {
                return new CropParameter(properties);
            };
    
            CropParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.CropParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.axis = reader.int32();
                        break;
                    case 2:
                        if (!(message.offset && message.offset.length))
                            message.offset = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.offset.push(reader.uint32());
                        } else
                            message.offset.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            CropParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.CropParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "offset":
                        if (!(message.offset && message.offset.length))
                            message.offset = [];
                        message.offset.push(reader.uint32());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            CropParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.offset != null && message.hasOwnProperty("offset")) {
                    if (!Array.isArray(message.offset))
                        return "offset: array expected";
                    for (var i = 0; i < message.offset.length; ++i)
                        if (!$util.isInteger(message.offset[i]))
                            return "offset: integer[] expected";
                }
                return null;
            };
    
            CropParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.CropParameter)
                    return object;
                var message = new $root.caffe.CropParameter();
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.offset) {
                    if (!Array.isArray(object.offset))
                        throw TypeError(".caffe.CropParameter.offset: array expected");
                    message.offset = [];
                    for (var i = 0; i < object.offset.length; ++i)
                        message.offset[i] = object.offset[i] >>> 0;
                }
                return message;
            };
    
            CropParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.offset = [];
                if (options.defaults)
                    object.axis = 2;
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.offset && message.offset.length) {
                    object.offset = [];
                    for (var j = 0; j < message.offset.length; ++j)
                        object.offset[j] = message.offset[j];
                }
                return object;
            };
    
            CropParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return CropParameter;
        })();
    
        caffe.DataParameter = (function() {
    
            function DataParameter(properties) {
                this.side = [];
                this.slice_point = [];
                this.encoding = [];
                this.subtract = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            DataParameter.prototype.source = "";
            DataParameter.prototype.batch_size = 0;
            DataParameter.prototype.rand_skip = 0;
            DataParameter.prototype.backend = 0;
            DataParameter.prototype.scale = 1;
            DataParameter.prototype.mean_file = "";
            DataParameter.prototype.crop_size = 0;
            DataParameter.prototype.mirror = false;
            DataParameter.prototype.force_encoded_color = false;
            DataParameter.prototype.prefetch = 4;
            DataParameter.prototype.side = $util.emptyArray;
            DataParameter.prototype.disk_reader_threads = 1;
            DataParameter.prototype.huge_video_dataset = false;
            DataParameter.prototype.limit_samples = -1;
            DataParameter.prototype.preselection_file = "";
            DataParameter.prototype.preselection_label = 0;
            DataParameter.prototype.range_start = 0;
            DataParameter.prototype.range_end = -1;
            DataParameter.prototype.rand_permute = false;
            DataParameter.prototype.rand_permute_order = 0;
            DataParameter.prototype.rand_permute_seed = 0;
            DataParameter.prototype.slice_point = $util.emptyArray;
            DataParameter.prototype.encoding = $util.emptyArray;
            DataParameter.prototype.verbose = false;
            DataParameter.prototype.subtract = $util.emptyArray;
            DataParameter.prototype.permute_every_iter = 0;
            DataParameter.prototype.block_size = 0;
    
            DataParameter.create = function create(properties) {
                return new DataParameter(properties);
            };
    
            DataParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.DataParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.source = reader.string();
                        break;
                    case 4:
                        message.batch_size = reader.uint32();
                        break;
                    case 7:
                        message.rand_skip = reader.uint32();
                        break;
                    case 8:
                        message.backend = reader.int32();
                        break;
                    case 2:
                        message.scale = reader.float();
                        break;
                    case 3:
                        message.mean_file = reader.string();
                        break;
                    case 5:
                        message.crop_size = reader.uint32();
                        break;
                    case 6:
                        message.mirror = reader.bool();
                        break;
                    case 9:
                        message.force_encoded_color = reader.bool();
                        break;
                    case 10:
                        message.prefetch = reader.uint32();
                        break;
                    case 11:
                        if (!(message.side && message.side.length))
                            message.side = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.side.push(reader.uint32());
                        } else
                            message.side.push(reader.uint32());
                        break;
                    case 4001:
                        message.disk_reader_threads = reader.uint32();
                        break;
                    case 7000:
                        message.huge_video_dataset = reader.bool();
                        break;
                    case 7001:
                        message.limit_samples = reader.int32();
                        break;
                    case 3001:
                        message.preselection_file = reader.string();
                        break;
                    case 3002:
                        message.preselection_label = reader.int32();
                        break;
                    case 3003:
                        message.range_start = reader.int32();
                        break;
                    case 3004:
                        message.range_end = reader.int32();
                        break;
                    case 3005:
                        message.rand_permute = reader.bool();
                        break;
                    case 3006:
                        message.rand_permute_order = reader.int32();
                        break;
                    case 3007:
                        message.rand_permute_seed = reader.uint32();
                        break;
                    case 3008:
                        if (!(message.slice_point && message.slice_point.length))
                            message.slice_point = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.slice_point.push(reader.uint32());
                        } else
                            message.slice_point.push(reader.uint32());
                        break;
                    case 3009:
                        if (!(message.encoding && message.encoding.length))
                            message.encoding = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.encoding.push(reader.int32());
                        } else
                            message.encoding.push(reader.int32());
                        break;
                    case 3010:
                        message.verbose = reader.bool();
                        break;
                    case 3011:
                        if (!(message.subtract && message.subtract.length))
                            message.subtract = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.subtract.push(reader.float());
                        } else
                            message.subtract.push(reader.float());
                        break;
                    case 3012:
                        message.permute_every_iter = reader.uint32();
                        break;
                    case 3013:
                        message.block_size = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            DataParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.DataParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "source":
                        message.source = reader.string();
                        break;
                    case "batch_size":
                        message.batch_size = reader.uint32();
                        break;
                    case "rand_skip":
                        message.rand_skip = reader.uint32();
                        break;
                    case "backend":
                        message.backend = reader.enum($root.caffe.DataParameter.DB);
                        break;
                    case "scale":
                        message.scale = reader.float();
                        break;
                    case "mean_file":
                        message.mean_file = reader.string();
                        break;
                    case "crop_size":
                        message.crop_size = reader.uint32();
                        break;
                    case "mirror":
                        message.mirror = reader.bool();
                        break;
                    case "force_encoded_color":
                        message.force_encoded_color = reader.bool();
                        break;
                    case "prefetch":
                        message.prefetch = reader.uint32();
                        break;
                    case "side":
                        if (!(message.side && message.side.length))
                            message.side = [];
                        message.side.push(reader.uint32());
                        break;
                    case "disk_reader_threads":
                        message.disk_reader_threads = reader.uint32();
                        break;
                    case "huge_video_dataset":
                        message.huge_video_dataset = reader.bool();
                        break;
                    case "limit_samples":
                        message.limit_samples = reader.int32();
                        break;
                    case "preselection_file":
                        message.preselection_file = reader.string();
                        break;
                    case "preselection_label":
                        message.preselection_label = reader.int32();
                        break;
                    case "range_start":
                        message.range_start = reader.int32();
                        break;
                    case "range_end":
                        message.range_end = reader.int32();
                        break;
                    case "rand_permute":
                        message.rand_permute = reader.bool();
                        break;
                    case "rand_permute_order":
                        message.rand_permute_order = reader.enum($root.caffe.DataParameter.RANDPERMORDER);
                        break;
                    case "rand_permute_seed":
                        message.rand_permute_seed = reader.uint32();
                        break;
                    case "slice_point":
                        if (!(message.slice_point && message.slice_point.length))
                            message.slice_point = [];
                        message.slice_point.push(reader.uint32());
                        break;
                    case "encoding":
                        if (!(message.encoding && message.encoding.length))
                            message.encoding = [];
                        message.encoding.push(reader.enum($root.caffe.DataParameter.CHANNELENCODING));
                        break;
                    case "verbose":
                        message.verbose = reader.bool();
                        break;
                    case "subtract":
                        if (!(message.subtract && message.subtract.length))
                            message.subtract = [];
                        message.subtract.push(reader.float());
                        break;
                    case "permute_every_iter":
                        message.permute_every_iter = reader.uint32();
                        break;
                    case "block_size":
                        message.block_size = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            DataParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    if (!$util.isInteger(message.batch_size))
                        return "batch_size: integer expected";
                if (message.rand_skip != null && message.hasOwnProperty("rand_skip"))
                    if (!$util.isInteger(message.rand_skip))
                        return "rand_skip: integer expected";
                if (message.backend != null && message.hasOwnProperty("backend"))
                    switch (message.backend) {
                    default:
                        return "backend: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                if (message.mean_file != null && message.hasOwnProperty("mean_file"))
                    if (!$util.isString(message.mean_file))
                        return "mean_file: string expected";
                if (message.crop_size != null && message.hasOwnProperty("crop_size"))
                    if (!$util.isInteger(message.crop_size))
                        return "crop_size: integer expected";
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    if (typeof message.mirror !== "boolean")
                        return "mirror: boolean expected";
                if (message.force_encoded_color != null && message.hasOwnProperty("force_encoded_color"))
                    if (typeof message.force_encoded_color !== "boolean")
                        return "force_encoded_color: boolean expected";
                if (message.prefetch != null && message.hasOwnProperty("prefetch"))
                    if (!$util.isInteger(message.prefetch))
                        return "prefetch: integer expected";
                if (message.side != null && message.hasOwnProperty("side")) {
                    if (!Array.isArray(message.side))
                        return "side: array expected";
                    for (var i = 0; i < message.side.length; ++i)
                        if (!$util.isInteger(message.side[i]))
                            return "side: integer[] expected";
                }
                if (message.disk_reader_threads != null && message.hasOwnProperty("disk_reader_threads"))
                    if (!$util.isInteger(message.disk_reader_threads))
                        return "disk_reader_threads: integer expected";
                if (message.huge_video_dataset != null && message.hasOwnProperty("huge_video_dataset"))
                    if (typeof message.huge_video_dataset !== "boolean")
                        return "huge_video_dataset: boolean expected";
                if (message.limit_samples != null && message.hasOwnProperty("limit_samples"))
                    if (!$util.isInteger(message.limit_samples))
                        return "limit_samples: integer expected";
                if (message.preselection_file != null && message.hasOwnProperty("preselection_file"))
                    if (!$util.isString(message.preselection_file))
                        return "preselection_file: string expected";
                if (message.preselection_label != null && message.hasOwnProperty("preselection_label"))
                    if (!$util.isInteger(message.preselection_label))
                        return "preselection_label: integer expected";
                if (message.range_start != null && message.hasOwnProperty("range_start"))
                    if (!$util.isInteger(message.range_start))
                        return "range_start: integer expected";
                if (message.range_end != null && message.hasOwnProperty("range_end"))
                    if (!$util.isInteger(message.range_end))
                        return "range_end: integer expected";
                if (message.rand_permute != null && message.hasOwnProperty("rand_permute"))
                    if (typeof message.rand_permute !== "boolean")
                        return "rand_permute: boolean expected";
                if (message.rand_permute_order != null && message.hasOwnProperty("rand_permute_order"))
                    switch (message.rand_permute_order) {
                    default:
                        return "rand_permute_order: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.rand_permute_seed != null && message.hasOwnProperty("rand_permute_seed"))
                    if (!$util.isInteger(message.rand_permute_seed))
                        return "rand_permute_seed: integer expected";
                if (message.slice_point != null && message.hasOwnProperty("slice_point")) {
                    if (!Array.isArray(message.slice_point))
                        return "slice_point: array expected";
                    for (var i = 0; i < message.slice_point.length; ++i)
                        if (!$util.isInteger(message.slice_point[i]))
                            return "slice_point: integer[] expected";
                }
                if (message.encoding != null && message.hasOwnProperty("encoding")) {
                    if (!Array.isArray(message.encoding))
                        return "encoding: array expected";
                    for (var i = 0; i < message.encoding.length; ++i)
                        switch (message.encoding[i]) {
                        default:
                            return "encoding: enum value[] expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                }
                if (message.verbose != null && message.hasOwnProperty("verbose"))
                    if (typeof message.verbose !== "boolean")
                        return "verbose: boolean expected";
                if (message.subtract != null && message.hasOwnProperty("subtract")) {
                    if (!Array.isArray(message.subtract))
                        return "subtract: array expected";
                    for (var i = 0; i < message.subtract.length; ++i)
                        if (typeof message.subtract[i] !== "number")
                            return "subtract: number[] expected";
                }
                if (message.permute_every_iter != null && message.hasOwnProperty("permute_every_iter"))
                    if (!$util.isInteger(message.permute_every_iter))
                        return "permute_every_iter: integer expected";
                if (message.block_size != null && message.hasOwnProperty("block_size"))
                    if (!$util.isInteger(message.block_size))
                        return "block_size: integer expected";
                return null;
            };
    
            DataParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.DataParameter)
                    return object;
                var message = new $root.caffe.DataParameter();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.batch_size != null)
                    message.batch_size = object.batch_size >>> 0;
                if (object.rand_skip != null)
                    message.rand_skip = object.rand_skip >>> 0;
                switch (object.backend) {
                case "LEVELDB":
                case 0:
                    message.backend = 0;
                    break;
                case "LMDB":
                case 1:
                    message.backend = 1;
                    break;
                }
                if (object.scale != null)
                    message.scale = Number(object.scale);
                if (object.mean_file != null)
                    message.mean_file = String(object.mean_file);
                if (object.crop_size != null)
                    message.crop_size = object.crop_size >>> 0;
                if (object.mirror != null)
                    message.mirror = Boolean(object.mirror);
                if (object.force_encoded_color != null)
                    message.force_encoded_color = Boolean(object.force_encoded_color);
                if (object.prefetch != null)
                    message.prefetch = object.prefetch >>> 0;
                if (object.side) {
                    if (!Array.isArray(object.side))
                        throw TypeError(".caffe.DataParameter.side: array expected");
                    message.side = [];
                    for (var i = 0; i < object.side.length; ++i)
                        message.side[i] = object.side[i] >>> 0;
                }
                if (object.disk_reader_threads != null)
                    message.disk_reader_threads = object.disk_reader_threads >>> 0;
                if (object.huge_video_dataset != null)
                    message.huge_video_dataset = Boolean(object.huge_video_dataset);
                if (object.limit_samples != null)
                    message.limit_samples = object.limit_samples | 0;
                if (object.preselection_file != null)
                    message.preselection_file = String(object.preselection_file);
                if (object.preselection_label != null)
                    message.preselection_label = object.preselection_label | 0;
                if (object.range_start != null)
                    message.range_start = object.range_start | 0;
                if (object.range_end != null)
                    message.range_end = object.range_end | 0;
                if (object.rand_permute != null)
                    message.rand_permute = Boolean(object.rand_permute);
                switch (object.rand_permute_order) {
                case "FIRST_PERMUTE_THEN_RANGE":
                case 0:
                    message.rand_permute_order = 0;
                    break;
                case "FIRST_RANGE_THEN_PERMUTE":
                case 1:
                    message.rand_permute_order = 1;
                    break;
                }
                if (object.rand_permute_seed != null)
                    message.rand_permute_seed = object.rand_permute_seed >>> 0;
                if (object.slice_point) {
                    if (!Array.isArray(object.slice_point))
                        throw TypeError(".caffe.DataParameter.slice_point: array expected");
                    message.slice_point = [];
                    for (var i = 0; i < object.slice_point.length; ++i)
                        message.slice_point[i] = object.slice_point[i] >>> 0;
                }
                if (object.encoding) {
                    if (!Array.isArray(object.encoding))
                        throw TypeError(".caffe.DataParameter.encoding: array expected");
                    message.encoding = [];
                    for (var i = 0; i < object.encoding.length; ++i)
                        switch (object.encoding[i]) {
                        default:
                        case "UINT8":
                        case 1:
                            message.encoding[i] = 1;
                            break;
                        case "UINT16FLOW":
                        case 2:
                            message.encoding[i] = 2;
                            break;
                        case "BOOL1":
                        case 3:
                            message.encoding[i] = 3;
                            break;
                        }
                }
                if (object.verbose != null)
                    message.verbose = Boolean(object.verbose);
                if (object.subtract) {
                    if (!Array.isArray(object.subtract))
                        throw TypeError(".caffe.DataParameter.subtract: array expected");
                    message.subtract = [];
                    for (var i = 0; i < object.subtract.length; ++i)
                        message.subtract[i] = Number(object.subtract[i]);
                }
                if (object.permute_every_iter != null)
                    message.permute_every_iter = object.permute_every_iter >>> 0;
                if (object.block_size != null)
                    message.block_size = object.block_size >>> 0;
                return message;
            };
    
            DataParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.side = [];
                    object.slice_point = [];
                    object.encoding = [];
                    object.subtract = [];
                }
                if (options.defaults) {
                    object.source = "";
                    object.scale = 1;
                    object.mean_file = "";
                    object.batch_size = 0;
                    object.crop_size = 0;
                    object.mirror = false;
                    object.rand_skip = 0;
                    object.backend = options.enums === String ? "LEVELDB" : 0;
                    object.force_encoded_color = false;
                    object.prefetch = 4;
                    object.preselection_file = "";
                    object.preselection_label = 0;
                    object.range_start = 0;
                    object.range_end = -1;
                    object.rand_permute = false;
                    object.rand_permute_order = options.enums === String ? "FIRST_PERMUTE_THEN_RANGE" : 0;
                    object.rand_permute_seed = 0;
                    object.verbose = false;
                    object.permute_every_iter = 0;
                    object.block_size = 0;
                    object.disk_reader_threads = 1;
                    object.huge_video_dataset = false;
                    object.limit_samples = -1;
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                if (message.mean_file != null && message.hasOwnProperty("mean_file"))
                    object.mean_file = message.mean_file;
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    object.batch_size = message.batch_size;
                if (message.crop_size != null && message.hasOwnProperty("crop_size"))
                    object.crop_size = message.crop_size;
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    object.mirror = message.mirror;
                if (message.rand_skip != null && message.hasOwnProperty("rand_skip"))
                    object.rand_skip = message.rand_skip;
                if (message.backend != null && message.hasOwnProperty("backend"))
                    object.backend = options.enums === String ? $root.caffe.DataParameter.DB[message.backend] : message.backend;
                if (message.force_encoded_color != null && message.hasOwnProperty("force_encoded_color"))
                    object.force_encoded_color = message.force_encoded_color;
                if (message.prefetch != null && message.hasOwnProperty("prefetch"))
                    object.prefetch = message.prefetch;
                if (message.side && message.side.length) {
                    object.side = [];
                    for (var j = 0; j < message.side.length; ++j)
                        object.side[j] = message.side[j];
                }
                if (message.preselection_file != null && message.hasOwnProperty("preselection_file"))
                    object.preselection_file = message.preselection_file;
                if (message.preselection_label != null && message.hasOwnProperty("preselection_label"))
                    object.preselection_label = message.preselection_label;
                if (message.range_start != null && message.hasOwnProperty("range_start"))
                    object.range_start = message.range_start;
                if (message.range_end != null && message.hasOwnProperty("range_end"))
                    object.range_end = message.range_end;
                if (message.rand_permute != null && message.hasOwnProperty("rand_permute"))
                    object.rand_permute = message.rand_permute;
                if (message.rand_permute_order != null && message.hasOwnProperty("rand_permute_order"))
                    object.rand_permute_order = options.enums === String ? $root.caffe.DataParameter.RANDPERMORDER[message.rand_permute_order] : message.rand_permute_order;
                if (message.rand_permute_seed != null && message.hasOwnProperty("rand_permute_seed"))
                    object.rand_permute_seed = message.rand_permute_seed;
                if (message.slice_point && message.slice_point.length) {
                    object.slice_point = [];
                    for (var j = 0; j < message.slice_point.length; ++j)
                        object.slice_point[j] = message.slice_point[j];
                }
                if (message.encoding && message.encoding.length) {
                    object.encoding = [];
                    for (var j = 0; j < message.encoding.length; ++j)
                        object.encoding[j] = options.enums === String ? $root.caffe.DataParameter.CHANNELENCODING[message.encoding[j]] : message.encoding[j];
                }
                if (message.verbose != null && message.hasOwnProperty("verbose"))
                    object.verbose = message.verbose;
                if (message.subtract && message.subtract.length) {
                    object.subtract = [];
                    for (var j = 0; j < message.subtract.length; ++j)
                        object.subtract[j] = options.json && !isFinite(message.subtract[j]) ? String(message.subtract[j]) : message.subtract[j];
                }
                if (message.permute_every_iter != null && message.hasOwnProperty("permute_every_iter"))
                    object.permute_every_iter = message.permute_every_iter;
                if (message.block_size != null && message.hasOwnProperty("block_size"))
                    object.block_size = message.block_size;
                if (message.disk_reader_threads != null && message.hasOwnProperty("disk_reader_threads"))
                    object.disk_reader_threads = message.disk_reader_threads;
                if (message.huge_video_dataset != null && message.hasOwnProperty("huge_video_dataset"))
                    object.huge_video_dataset = message.huge_video_dataset;
                if (message.limit_samples != null && message.hasOwnProperty("limit_samples"))
                    object.limit_samples = message.limit_samples;
                return object;
            };
    
            DataParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            DataParameter.DB = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "LEVELDB"] = 0;
                values[valuesById[1] = "LMDB"] = 1;
                return values;
            })();
    
            DataParameter.RANDPERMORDER = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIRST_PERMUTE_THEN_RANGE"] = 0;
                values[valuesById[1] = "FIRST_RANGE_THEN_PERMUTE"] = 1;
                return values;
            })();
    
            DataParameter.CHANNELENCODING = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "UINT8"] = 1;
                values[valuesById[2] = "UINT16FLOW"] = 2;
                values[valuesById[3] = "BOOL1"] = 3;
                return values;
            })();
    
            return DataParameter;
        })();
    
        caffe.DropoutParameter = (function() {
    
            function DropoutParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            DropoutParameter.prototype.dropout_ratio = 0.5;
            DropoutParameter.prototype.sample_weights_test = false;
            DropoutParameter.prototype.scale_train = true;
    
            DropoutParameter.create = function create(properties) {
                return new DropoutParameter(properties);
            };
    
            DropoutParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.DropoutParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.dropout_ratio = reader.float();
                        break;
                    case 2:
                        message.sample_weights_test = reader.bool();
                        break;
                    case 3:
                        message.scale_train = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            DropoutParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.DropoutParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "dropout_ratio":
                        message.dropout_ratio = reader.float();
                        break;
                    case "sample_weights_test":
                        message.sample_weights_test = reader.bool();
                        break;
                    case "scale_train":
                        message.scale_train = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            DropoutParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.dropout_ratio != null && message.hasOwnProperty("dropout_ratio"))
                    if (typeof message.dropout_ratio !== "number")
                        return "dropout_ratio: number expected";
                if (message.sample_weights_test != null && message.hasOwnProperty("sample_weights_test"))
                    if (typeof message.sample_weights_test !== "boolean")
                        return "sample_weights_test: boolean expected";
                if (message.scale_train != null && message.hasOwnProperty("scale_train"))
                    if (typeof message.scale_train !== "boolean")
                        return "scale_train: boolean expected";
                return null;
            };
    
            DropoutParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.DropoutParameter)
                    return object;
                var message = new $root.caffe.DropoutParameter();
                if (object.dropout_ratio != null)
                    message.dropout_ratio = Number(object.dropout_ratio);
                if (object.sample_weights_test != null)
                    message.sample_weights_test = Boolean(object.sample_weights_test);
                if (object.scale_train != null)
                    message.scale_train = Boolean(object.scale_train);
                return message;
            };
    
            DropoutParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.dropout_ratio = 0.5;
                    object.sample_weights_test = false;
                    object.scale_train = true;
                }
                if (message.dropout_ratio != null && message.hasOwnProperty("dropout_ratio"))
                    object.dropout_ratio = options.json && !isFinite(message.dropout_ratio) ? String(message.dropout_ratio) : message.dropout_ratio;
                if (message.sample_weights_test != null && message.hasOwnProperty("sample_weights_test"))
                    object.sample_weights_test = message.sample_weights_test;
                if (message.scale_train != null && message.hasOwnProperty("scale_train"))
                    object.scale_train = message.scale_train;
                return object;
            };
    
            DropoutParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DropoutParameter;
        })();
    
        caffe.DummyDataParameter = (function() {
    
            function DummyDataParameter(properties) {
                this.data_filler = [];
                this.shape = [];
                this.num = [];
                this.channels = [];
                this.height = [];
                this.width = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            DummyDataParameter.prototype.data_filler = $util.emptyArray;
            DummyDataParameter.prototype.shape = $util.emptyArray;
            DummyDataParameter.prototype.num = $util.emptyArray;
            DummyDataParameter.prototype.channels = $util.emptyArray;
            DummyDataParameter.prototype.height = $util.emptyArray;
            DummyDataParameter.prototype.width = $util.emptyArray;
    
            DummyDataParameter.create = function create(properties) {
                return new DummyDataParameter(properties);
            };
    
            DummyDataParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.DummyDataParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.data_filler && message.data_filler.length))
                            message.data_filler = [];
                        message.data_filler.push($root.caffe.FillerParameter.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.shape && message.shape.length))
                            message.shape = [];
                        message.shape.push($root.caffe.BlobShape.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        if (!(message.num && message.num.length))
                            message.num = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.num.push(reader.uint32());
                        } else
                            message.num.push(reader.uint32());
                        break;
                    case 3:
                        if (!(message.channels && message.channels.length))
                            message.channels = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.channels.push(reader.uint32());
                        } else
                            message.channels.push(reader.uint32());
                        break;
                    case 4:
                        if (!(message.height && message.height.length))
                            message.height = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.height.push(reader.uint32());
                        } else
                            message.height.push(reader.uint32());
                        break;
                    case 5:
                        if (!(message.width && message.width.length))
                            message.width = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.width.push(reader.uint32());
                        } else
                            message.width.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            DummyDataParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.DummyDataParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "data_filler":
                        if (!(message.data_filler && message.data_filler.length))
                            message.data_filler = [];
                        message.data_filler.push($root.caffe.FillerParameter.decodeText(reader, true));
                        break;
                    case "shape":
                        if (!(message.shape && message.shape.length))
                            message.shape = [];
                        message.shape.push($root.caffe.BlobShape.decodeText(reader, true));
                        break;
                    case "num":
                        if (!(message.num && message.num.length))
                            message.num = [];
                        message.num.push(reader.uint32());
                        break;
                    case "channels":
                        if (!(message.channels && message.channels.length))
                            message.channels = [];
                        message.channels.push(reader.uint32());
                        break;
                    case "height":
                        if (!(message.height && message.height.length))
                            message.height = [];
                        message.height.push(reader.uint32());
                        break;
                    case "width":
                        if (!(message.width && message.width.length))
                            message.width = [];
                        message.width.push(reader.uint32());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            DummyDataParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data_filler != null && message.hasOwnProperty("data_filler")) {
                    if (!Array.isArray(message.data_filler))
                        return "data_filler: array expected";
                    for (var i = 0; i < message.data_filler.length; ++i) {
                        var error = $root.caffe.FillerParameter.verify(message.data_filler[i]);
                        if (error)
                            return "data_filler." + error;
                    }
                }
                if (message.shape != null && message.hasOwnProperty("shape")) {
                    if (!Array.isArray(message.shape))
                        return "shape: array expected";
                    for (var i = 0; i < message.shape.length; ++i) {
                        var error = $root.caffe.BlobShape.verify(message.shape[i]);
                        if (error)
                            return "shape." + error;
                    }
                }
                if (message.num != null && message.hasOwnProperty("num")) {
                    if (!Array.isArray(message.num))
                        return "num: array expected";
                    for (var i = 0; i < message.num.length; ++i)
                        if (!$util.isInteger(message.num[i]))
                            return "num: integer[] expected";
                }
                if (message.channels != null && message.hasOwnProperty("channels")) {
                    if (!Array.isArray(message.channels))
                        return "channels: array expected";
                    for (var i = 0; i < message.channels.length; ++i)
                        if (!$util.isInteger(message.channels[i]))
                            return "channels: integer[] expected";
                }
                if (message.height != null && message.hasOwnProperty("height")) {
                    if (!Array.isArray(message.height))
                        return "height: array expected";
                    for (var i = 0; i < message.height.length; ++i)
                        if (!$util.isInteger(message.height[i]))
                            return "height: integer[] expected";
                }
                if (message.width != null && message.hasOwnProperty("width")) {
                    if (!Array.isArray(message.width))
                        return "width: array expected";
                    for (var i = 0; i < message.width.length; ++i)
                        if (!$util.isInteger(message.width[i]))
                            return "width: integer[] expected";
                }
                return null;
            };
    
            DummyDataParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.DummyDataParameter)
                    return object;
                var message = new $root.caffe.DummyDataParameter();
                if (object.data_filler) {
                    if (!Array.isArray(object.data_filler))
                        throw TypeError(".caffe.DummyDataParameter.data_filler: array expected");
                    message.data_filler = [];
                    for (var i = 0; i < object.data_filler.length; ++i) {
                        if (typeof object.data_filler[i] !== "object")
                            throw TypeError(".caffe.DummyDataParameter.data_filler: object expected");
                        message.data_filler[i] = $root.caffe.FillerParameter.fromObject(object.data_filler[i]);
                    }
                }
                if (object.shape) {
                    if (!Array.isArray(object.shape))
                        throw TypeError(".caffe.DummyDataParameter.shape: array expected");
                    message.shape = [];
                    for (var i = 0; i < object.shape.length; ++i) {
                        if (typeof object.shape[i] !== "object")
                            throw TypeError(".caffe.DummyDataParameter.shape: object expected");
                        message.shape[i] = $root.caffe.BlobShape.fromObject(object.shape[i]);
                    }
                }
                if (object.num) {
                    if (!Array.isArray(object.num))
                        throw TypeError(".caffe.DummyDataParameter.num: array expected");
                    message.num = [];
                    for (var i = 0; i < object.num.length; ++i)
                        message.num[i] = object.num[i] >>> 0;
                }
                if (object.channels) {
                    if (!Array.isArray(object.channels))
                        throw TypeError(".caffe.DummyDataParameter.channels: array expected");
                    message.channels = [];
                    for (var i = 0; i < object.channels.length; ++i)
                        message.channels[i] = object.channels[i] >>> 0;
                }
                if (object.height) {
                    if (!Array.isArray(object.height))
                        throw TypeError(".caffe.DummyDataParameter.height: array expected");
                    message.height = [];
                    for (var i = 0; i < object.height.length; ++i)
                        message.height[i] = object.height[i] >>> 0;
                }
                if (object.width) {
                    if (!Array.isArray(object.width))
                        throw TypeError(".caffe.DummyDataParameter.width: array expected");
                    message.width = [];
                    for (var i = 0; i < object.width.length; ++i)
                        message.width[i] = object.width[i] >>> 0;
                }
                return message;
            };
    
            DummyDataParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.data_filler = [];
                    object.num = [];
                    object.channels = [];
                    object.height = [];
                    object.width = [];
                    object.shape = [];
                }
                if (message.data_filler && message.data_filler.length) {
                    object.data_filler = [];
                    for (var j = 0; j < message.data_filler.length; ++j)
                        object.data_filler[j] = $root.caffe.FillerParameter.toObject(message.data_filler[j], options);
                }
                if (message.num && message.num.length) {
                    object.num = [];
                    for (var j = 0; j < message.num.length; ++j)
                        object.num[j] = message.num[j];
                }
                if (message.channels && message.channels.length) {
                    object.channels = [];
                    for (var j = 0; j < message.channels.length; ++j)
                        object.channels[j] = message.channels[j];
                }
                if (message.height && message.height.length) {
                    object.height = [];
                    for (var j = 0; j < message.height.length; ++j)
                        object.height[j] = message.height[j];
                }
                if (message.width && message.width.length) {
                    object.width = [];
                    for (var j = 0; j < message.width.length; ++j)
                        object.width[j] = message.width[j];
                }
                if (message.shape && message.shape.length) {
                    object.shape = [];
                    for (var j = 0; j < message.shape.length; ++j)
                        object.shape[j] = $root.caffe.BlobShape.toObject(message.shape[j], options);
                }
                return object;
            };
    
            DummyDataParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DummyDataParameter;
        })();
    
        caffe.EltwiseParameter = (function() {
    
            function EltwiseParameter(properties) {
                this.coeff = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            EltwiseParameter.prototype.operation = 1;
            EltwiseParameter.prototype.coeff = $util.emptyArray;
            EltwiseParameter.prototype.stable_prod_grad = true;
    
            EltwiseParameter.create = function create(properties) {
                return new EltwiseParameter(properties);
            };
    
            EltwiseParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.EltwiseParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.operation = reader.int32();
                        break;
                    case 2:
                        if (!(message.coeff && message.coeff.length))
                            message.coeff = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.coeff.push(reader.float());
                        } else
                            message.coeff.push(reader.float());
                        break;
                    case 3:
                        message.stable_prod_grad = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            EltwiseParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.EltwiseParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "operation":
                        message.operation = reader.enum($root.caffe.EltwiseParameter.EltwiseOp);
                        break;
                    case "coeff":
                        if (!(message.coeff && message.coeff.length))
                            message.coeff = [];
                        message.coeff.push(reader.float());
                        break;
                    case "stable_prod_grad":
                        message.stable_prod_grad = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            EltwiseParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.operation != null && message.hasOwnProperty("operation"))
                    switch (message.operation) {
                    default:
                        return "operation: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.coeff != null && message.hasOwnProperty("coeff")) {
                    if (!Array.isArray(message.coeff))
                        return "coeff: array expected";
                    for (var i = 0; i < message.coeff.length; ++i)
                        if (typeof message.coeff[i] !== "number")
                            return "coeff: number[] expected";
                }
                if (message.stable_prod_grad != null && message.hasOwnProperty("stable_prod_grad"))
                    if (typeof message.stable_prod_grad !== "boolean")
                        return "stable_prod_grad: boolean expected";
                return null;
            };
    
            EltwiseParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.EltwiseParameter)
                    return object;
                var message = new $root.caffe.EltwiseParameter();
                switch (object.operation) {
                case "PROD":
                case 0:
                    message.operation = 0;
                    break;
                case "SUM":
                case 1:
                    message.operation = 1;
                    break;
                case "MAX":
                case 2:
                    message.operation = 2;
                    break;
                }
                if (object.coeff) {
                    if (!Array.isArray(object.coeff))
                        throw TypeError(".caffe.EltwiseParameter.coeff: array expected");
                    message.coeff = [];
                    for (var i = 0; i < object.coeff.length; ++i)
                        message.coeff[i] = Number(object.coeff[i]);
                }
                if (object.stable_prod_grad != null)
                    message.stable_prod_grad = Boolean(object.stable_prod_grad);
                return message;
            };
    
            EltwiseParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.coeff = [];
                if (options.defaults) {
                    object.operation = options.enums === String ? "SUM" : 1;
                    object.stable_prod_grad = true;
                }
                if (message.operation != null && message.hasOwnProperty("operation"))
                    object.operation = options.enums === String ? $root.caffe.EltwiseParameter.EltwiseOp[message.operation] : message.operation;
                if (message.coeff && message.coeff.length) {
                    object.coeff = [];
                    for (var j = 0; j < message.coeff.length; ++j)
                        object.coeff[j] = options.json && !isFinite(message.coeff[j]) ? String(message.coeff[j]) : message.coeff[j];
                }
                if (message.stable_prod_grad != null && message.hasOwnProperty("stable_prod_grad"))
                    object.stable_prod_grad = message.stable_prod_grad;
                return object;
            };
    
            EltwiseParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            EltwiseParameter.EltwiseOp = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "PROD"] = 0;
                values[valuesById[1] = "SUM"] = 1;
                values[valuesById[2] = "MAX"] = 2;
                return values;
            })();
    
            return EltwiseParameter;
        })();
    
        caffe.ELUParameter = (function() {
    
            function ELUParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ELUParameter.prototype.alpha = 1;
    
            ELUParameter.create = function create(properties) {
                return new ELUParameter(properties);
            };
    
            ELUParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ELUParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.alpha = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ELUParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ELUParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "alpha":
                        message.alpha = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ELUParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.alpha != null && message.hasOwnProperty("alpha"))
                    if (typeof message.alpha !== "number")
                        return "alpha: number expected";
                return null;
            };
    
            ELUParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ELUParameter)
                    return object;
                var message = new $root.caffe.ELUParameter();
                if (object.alpha != null)
                    message.alpha = Number(object.alpha);
                return message;
            };
    
            ELUParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.alpha = 1;
                if (message.alpha != null && message.hasOwnProperty("alpha"))
                    object.alpha = options.json && !isFinite(message.alpha) ? String(message.alpha) : message.alpha;
                return object;
            };
    
            ELUParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ELUParameter;
        })();
    
        caffe.EmbedParameter = (function() {
    
            function EmbedParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            EmbedParameter.prototype.num_output = 0;
            EmbedParameter.prototype.input_dim = 0;
            EmbedParameter.prototype.bias_term = true;
            EmbedParameter.prototype.weight_filler = null;
            EmbedParameter.prototype.bias_filler = null;
    
            EmbedParameter.create = function create(properties) {
                return new EmbedParameter(properties);
            };
    
            EmbedParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.EmbedParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_output = reader.uint32();
                        break;
                    case 2:
                        message.input_dim = reader.uint32();
                        break;
                    case 3:
                        message.bias_term = reader.bool();
                        break;
                    case 4:
                        message.weight_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.bias_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            EmbedParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.EmbedParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_output":
                        message.num_output = reader.uint32();
                        break;
                    case "input_dim":
                        message.input_dim = reader.uint32();
                        break;
                    case "bias_term":
                        message.bias_term = reader.bool();
                        break;
                    case "weight_filler":
                        message.weight_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_filler":
                        message.bias_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            EmbedParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    if (!$util.isInteger(message.num_output))
                        return "num_output: integer expected";
                if (message.input_dim != null && message.hasOwnProperty("input_dim"))
                    if (!$util.isInteger(message.input_dim))
                        return "input_dim: integer expected";
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    if (typeof message.bias_term !== "boolean")
                        return "bias_term: boolean expected";
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.weight_filler);
                    if (error)
                        return "weight_filler." + error;
                }
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_filler);
                    if (error)
                        return "bias_filler." + error;
                }
                return null;
            };
    
            EmbedParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.EmbedParameter)
                    return object;
                var message = new $root.caffe.EmbedParameter();
                if (object.num_output != null)
                    message.num_output = object.num_output >>> 0;
                if (object.input_dim != null)
                    message.input_dim = object.input_dim >>> 0;
                if (object.bias_term != null)
                    message.bias_term = Boolean(object.bias_term);
                if (object.weight_filler != null) {
                    if (typeof object.weight_filler !== "object")
                        throw TypeError(".caffe.EmbedParameter.weight_filler: object expected");
                    message.weight_filler = $root.caffe.FillerParameter.fromObject(object.weight_filler);
                }
                if (object.bias_filler != null) {
                    if (typeof object.bias_filler !== "object")
                        throw TypeError(".caffe.EmbedParameter.bias_filler: object expected");
                    message.bias_filler = $root.caffe.FillerParameter.fromObject(object.bias_filler);
                }
                return message;
            };
    
            EmbedParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.num_output = 0;
                    object.input_dim = 0;
                    object.bias_term = true;
                    object.weight_filler = null;
                    object.bias_filler = null;
                }
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    object.num_output = message.num_output;
                if (message.input_dim != null && message.hasOwnProperty("input_dim"))
                    object.input_dim = message.input_dim;
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    object.bias_term = message.bias_term;
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler"))
                    object.weight_filler = $root.caffe.FillerParameter.toObject(message.weight_filler, options);
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler"))
                    object.bias_filler = $root.caffe.FillerParameter.toObject(message.bias_filler, options);
                return object;
            };
    
            EmbedParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EmbedParameter;
        })();
    
        caffe.ExpParameter = (function() {
    
            function ExpParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ExpParameter.prototype.base = -1;
            ExpParameter.prototype.scale = 1;
            ExpParameter.prototype.shift = 0;
    
            ExpParameter.create = function create(properties) {
                return new ExpParameter(properties);
            };
    
            ExpParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ExpParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = reader.float();
                        break;
                    case 2:
                        message.scale = reader.float();
                        break;
                    case 3:
                        message.shift = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ExpParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ExpParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "base":
                        message.base = reader.float();
                        break;
                    case "scale":
                        message.scale = reader.float();
                        break;
                    case "shift":
                        message.shift = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ExpParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base"))
                    if (typeof message.base !== "number")
                        return "base: number expected";
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                if (message.shift != null && message.hasOwnProperty("shift"))
                    if (typeof message.shift !== "number")
                        return "shift: number expected";
                return null;
            };
    
            ExpParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ExpParameter)
                    return object;
                var message = new $root.caffe.ExpParameter();
                if (object.base != null)
                    message.base = Number(object.base);
                if (object.scale != null)
                    message.scale = Number(object.scale);
                if (object.shift != null)
                    message.shift = Number(object.shift);
                return message;
            };
    
            ExpParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = -1;
                    object.scale = 1;
                    object.shift = 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = options.json && !isFinite(message.base) ? String(message.base) : message.base;
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                if (message.shift != null && message.hasOwnProperty("shift"))
                    object.shift = options.json && !isFinite(message.shift) ? String(message.shift) : message.shift;
                return object;
            };
    
            ExpParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ExpParameter;
        })();
    
        caffe.FlattenParameter = (function() {
    
            function FlattenParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            FlattenParameter.prototype.axis = 1;
            FlattenParameter.prototype.end_axis = -1;
    
            FlattenParameter.create = function create(properties) {
                return new FlattenParameter(properties);
            };
    
            FlattenParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.FlattenParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.axis = reader.int32();
                        break;
                    case 2:
                        message.end_axis = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            FlattenParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.FlattenParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "end_axis":
                        message.end_axis = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            FlattenParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.end_axis != null && message.hasOwnProperty("end_axis"))
                    if (!$util.isInteger(message.end_axis))
                        return "end_axis: integer expected";
                return null;
            };
    
            FlattenParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.FlattenParameter)
                    return object;
                var message = new $root.caffe.FlattenParameter();
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.end_axis != null)
                    message.end_axis = object.end_axis | 0;
                return message;
            };
    
            FlattenParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.axis = 1;
                    object.end_axis = -1;
                }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.end_axis != null && message.hasOwnProperty("end_axis"))
                    object.end_axis = message.end_axis;
                return object;
            };
    
            FlattenParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FlattenParameter;
        })();
    
        caffe.HDF5DataParameter = (function() {
    
            function HDF5DataParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            HDF5DataParameter.prototype.source = "";
            HDF5DataParameter.prototype.batch_size = 0;
            HDF5DataParameter.prototype.shuffle = false;
    
            HDF5DataParameter.create = function create(properties) {
                return new HDF5DataParameter(properties);
            };
    
            HDF5DataParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.HDF5DataParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.source = reader.string();
                        break;
                    case 2:
                        message.batch_size = reader.uint32();
                        break;
                    case 3:
                        message.shuffle = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            HDF5DataParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.HDF5DataParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "source":
                        message.source = reader.string();
                        break;
                    case "batch_size":
                        message.batch_size = reader.uint32();
                        break;
                    case "shuffle":
                        message.shuffle = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            HDF5DataParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    if (!$util.isInteger(message.batch_size))
                        return "batch_size: integer expected";
                if (message.shuffle != null && message.hasOwnProperty("shuffle"))
                    if (typeof message.shuffle !== "boolean")
                        return "shuffle: boolean expected";
                return null;
            };
    
            HDF5DataParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.HDF5DataParameter)
                    return object;
                var message = new $root.caffe.HDF5DataParameter();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.batch_size != null)
                    message.batch_size = object.batch_size >>> 0;
                if (object.shuffle != null)
                    message.shuffle = Boolean(object.shuffle);
                return message;
            };
    
            HDF5DataParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.source = "";
                    object.batch_size = 0;
                    object.shuffle = false;
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    object.batch_size = message.batch_size;
                if (message.shuffle != null && message.hasOwnProperty("shuffle"))
                    object.shuffle = message.shuffle;
                return object;
            };
    
            HDF5DataParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HDF5DataParameter;
        })();
    
        caffe.HDF5OutputParameter = (function() {
    
            function HDF5OutputParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            HDF5OutputParameter.prototype.file_name = "";
    
            HDF5OutputParameter.create = function create(properties) {
                return new HDF5OutputParameter(properties);
            };
    
            HDF5OutputParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.HDF5OutputParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.file_name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            HDF5OutputParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.HDF5OutputParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "file_name":
                        message.file_name = reader.string();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            HDF5OutputParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file_name != null && message.hasOwnProperty("file_name"))
                    if (!$util.isString(message.file_name))
                        return "file_name: string expected";
                return null;
            };
    
            HDF5OutputParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.HDF5OutputParameter)
                    return object;
                var message = new $root.caffe.HDF5OutputParameter();
                if (object.file_name != null)
                    message.file_name = String(object.file_name);
                return message;
            };
    
            HDF5OutputParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.file_name = "";
                if (message.file_name != null && message.hasOwnProperty("file_name"))
                    object.file_name = message.file_name;
                return object;
            };
    
            HDF5OutputParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return HDF5OutputParameter;
        })();
    
        caffe.HingeLossParameter = (function() {
    
            function HingeLossParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            HingeLossParameter.prototype.norm = 1;
    
            HingeLossParameter.create = function create(properties) {
                return new HingeLossParameter(properties);
            };
    
            HingeLossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.HingeLossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.norm = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            HingeLossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.HingeLossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "norm":
                        message.norm = reader.enum($root.caffe.HingeLossParameter.Norm);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            HingeLossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.norm != null && message.hasOwnProperty("norm"))
                    switch (message.norm) {
                    default:
                        return "norm: enum value expected";
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };
    
            HingeLossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.HingeLossParameter)
                    return object;
                var message = new $root.caffe.HingeLossParameter();
                switch (object.norm) {
                case "L1":
                case 1:
                    message.norm = 1;
                    break;
                case "L2":
                case 2:
                    message.norm = 2;
                    break;
                }
                return message;
            };
    
            HingeLossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.norm = options.enums === String ? "L1" : 1;
                if (message.norm != null && message.hasOwnProperty("norm"))
                    object.norm = options.enums === String ? $root.caffe.HingeLossParameter.Norm[message.norm] : message.norm;
                return object;
            };
    
            HingeLossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            HingeLossParameter.Norm = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "L1"] = 1;
                values[valuesById[2] = "L2"] = 2;
                return values;
            })();
    
            return HingeLossParameter;
        })();
    
        caffe.ImageDataParameter = (function() {
    
            function ImageDataParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ImageDataParameter.prototype.source = "";
            ImageDataParameter.prototype.batch_size = 1;
            ImageDataParameter.prototype.rand_skip = 0;
            ImageDataParameter.prototype.shuffle = false;
            ImageDataParameter.prototype.new_height = 0;
            ImageDataParameter.prototype.new_width = 0;
            ImageDataParameter.prototype.is_color = true;
            ImageDataParameter.prototype.scale = 1;
            ImageDataParameter.prototype.mean_file = "";
            ImageDataParameter.prototype.crop_size = 0;
            ImageDataParameter.prototype.mirror = false;
            ImageDataParameter.prototype.root_folder = "";
    
            ImageDataParameter.create = function create(properties) {
                return new ImageDataParameter(properties);
            };
    
            ImageDataParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ImageDataParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.source = reader.string();
                        break;
                    case 4:
                        message.batch_size = reader.uint32();
                        break;
                    case 7:
                        message.rand_skip = reader.uint32();
                        break;
                    case 8:
                        message.shuffle = reader.bool();
                        break;
                    case 9:
                        message.new_height = reader.uint32();
                        break;
                    case 10:
                        message.new_width = reader.uint32();
                        break;
                    case 11:
                        message.is_color = reader.bool();
                        break;
                    case 2:
                        message.scale = reader.float();
                        break;
                    case 3:
                        message.mean_file = reader.string();
                        break;
                    case 5:
                        message.crop_size = reader.uint32();
                        break;
                    case 6:
                        message.mirror = reader.bool();
                        break;
                    case 12:
                        message.root_folder = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ImageDataParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ImageDataParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "source":
                        message.source = reader.string();
                        break;
                    case "batch_size":
                        message.batch_size = reader.uint32();
                        break;
                    case "rand_skip":
                        message.rand_skip = reader.uint32();
                        break;
                    case "shuffle":
                        message.shuffle = reader.bool();
                        break;
                    case "new_height":
                        message.new_height = reader.uint32();
                        break;
                    case "new_width":
                        message.new_width = reader.uint32();
                        break;
                    case "is_color":
                        message.is_color = reader.bool();
                        break;
                    case "scale":
                        message.scale = reader.float();
                        break;
                    case "mean_file":
                        message.mean_file = reader.string();
                        break;
                    case "crop_size":
                        message.crop_size = reader.uint32();
                        break;
                    case "mirror":
                        message.mirror = reader.bool();
                        break;
                    case "root_folder":
                        message.root_folder = reader.string();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ImageDataParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    if (!$util.isInteger(message.batch_size))
                        return "batch_size: integer expected";
                if (message.rand_skip != null && message.hasOwnProperty("rand_skip"))
                    if (!$util.isInteger(message.rand_skip))
                        return "rand_skip: integer expected";
                if (message.shuffle != null && message.hasOwnProperty("shuffle"))
                    if (typeof message.shuffle !== "boolean")
                        return "shuffle: boolean expected";
                if (message.new_height != null && message.hasOwnProperty("new_height"))
                    if (!$util.isInteger(message.new_height))
                        return "new_height: integer expected";
                if (message.new_width != null && message.hasOwnProperty("new_width"))
                    if (!$util.isInteger(message.new_width))
                        return "new_width: integer expected";
                if (message.is_color != null && message.hasOwnProperty("is_color"))
                    if (typeof message.is_color !== "boolean")
                        return "is_color: boolean expected";
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                if (message.mean_file != null && message.hasOwnProperty("mean_file"))
                    if (!$util.isString(message.mean_file))
                        return "mean_file: string expected";
                if (message.crop_size != null && message.hasOwnProperty("crop_size"))
                    if (!$util.isInteger(message.crop_size))
                        return "crop_size: integer expected";
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    if (typeof message.mirror !== "boolean")
                        return "mirror: boolean expected";
                if (message.root_folder != null && message.hasOwnProperty("root_folder"))
                    if (!$util.isString(message.root_folder))
                        return "root_folder: string expected";
                return null;
            };
    
            ImageDataParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ImageDataParameter)
                    return object;
                var message = new $root.caffe.ImageDataParameter();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.batch_size != null)
                    message.batch_size = object.batch_size >>> 0;
                if (object.rand_skip != null)
                    message.rand_skip = object.rand_skip >>> 0;
                if (object.shuffle != null)
                    message.shuffle = Boolean(object.shuffle);
                if (object.new_height != null)
                    message.new_height = object.new_height >>> 0;
                if (object.new_width != null)
                    message.new_width = object.new_width >>> 0;
                if (object.is_color != null)
                    message.is_color = Boolean(object.is_color);
                if (object.scale != null)
                    message.scale = Number(object.scale);
                if (object.mean_file != null)
                    message.mean_file = String(object.mean_file);
                if (object.crop_size != null)
                    message.crop_size = object.crop_size >>> 0;
                if (object.mirror != null)
                    message.mirror = Boolean(object.mirror);
                if (object.root_folder != null)
                    message.root_folder = String(object.root_folder);
                return message;
            };
    
            ImageDataParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.source = "";
                    object.scale = 1;
                    object.mean_file = "";
                    object.batch_size = 1;
                    object.crop_size = 0;
                    object.mirror = false;
                    object.rand_skip = 0;
                    object.shuffle = false;
                    object.new_height = 0;
                    object.new_width = 0;
                    object.is_color = true;
                    object.root_folder = "";
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                if (message.mean_file != null && message.hasOwnProperty("mean_file"))
                    object.mean_file = message.mean_file;
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    object.batch_size = message.batch_size;
                if (message.crop_size != null && message.hasOwnProperty("crop_size"))
                    object.crop_size = message.crop_size;
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    object.mirror = message.mirror;
                if (message.rand_skip != null && message.hasOwnProperty("rand_skip"))
                    object.rand_skip = message.rand_skip;
                if (message.shuffle != null && message.hasOwnProperty("shuffle"))
                    object.shuffle = message.shuffle;
                if (message.new_height != null && message.hasOwnProperty("new_height"))
                    object.new_height = message.new_height;
                if (message.new_width != null && message.hasOwnProperty("new_width"))
                    object.new_width = message.new_width;
                if (message.is_color != null && message.hasOwnProperty("is_color"))
                    object.is_color = message.is_color;
                if (message.root_folder != null && message.hasOwnProperty("root_folder"))
                    object.root_folder = message.root_folder;
                return object;
            };
    
            ImageDataParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ImageDataParameter;
        })();
    
        caffe.InfogainLossParameter = (function() {
    
            function InfogainLossParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            InfogainLossParameter.prototype.source = "";
            InfogainLossParameter.prototype.axis = 1;
    
            InfogainLossParameter.create = function create(properties) {
                return new InfogainLossParameter(properties);
            };
    
            InfogainLossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.InfogainLossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.source = reader.string();
                        break;
                    case 2:
                        message.axis = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            InfogainLossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.InfogainLossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "source":
                        message.source = reader.string();
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            InfogainLossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                return null;
            };
    
            InfogainLossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.InfogainLossParameter)
                    return object;
                var message = new $root.caffe.InfogainLossParameter();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.axis != null)
                    message.axis = object.axis | 0;
                return message;
            };
    
            InfogainLossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.source = "";
                    object.axis = 1;
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                return object;
            };
    
            InfogainLossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return InfogainLossParameter;
        })();
    
        caffe.InnerProductParameter = (function() {
    
            function InnerProductParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            InnerProductParameter.prototype.num_output = 0;
            InnerProductParameter.prototype.bias_term = true;
            InnerProductParameter.prototype.weight_filler = null;
            InnerProductParameter.prototype.bias_filler = null;
            InnerProductParameter.prototype.axis = 1;
            InnerProductParameter.prototype.transpose = false;
    
            InnerProductParameter.create = function create(properties) {
                return new InnerProductParameter(properties);
            };
    
            InnerProductParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.InnerProductParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_output = reader.uint32();
                        break;
                    case 2:
                        message.bias_term = reader.bool();
                        break;
                    case 3:
                        message.weight_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.bias_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.axis = reader.int32();
                        break;
                    case 6:
                        message.transpose = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            InnerProductParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.InnerProductParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_output":
                        message.num_output = reader.uint32();
                        break;
                    case "bias_term":
                        message.bias_term = reader.bool();
                        break;
                    case "weight_filler":
                        message.weight_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_filler":
                        message.bias_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "transpose":
                        message.transpose = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            InnerProductParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    if (!$util.isInteger(message.num_output))
                        return "num_output: integer expected";
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    if (typeof message.bias_term !== "boolean")
                        return "bias_term: boolean expected";
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.weight_filler);
                    if (error)
                        return "weight_filler." + error;
                }
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_filler);
                    if (error)
                        return "bias_filler." + error;
                }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.transpose != null && message.hasOwnProperty("transpose"))
                    if (typeof message.transpose !== "boolean")
                        return "transpose: boolean expected";
                return null;
            };
    
            InnerProductParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.InnerProductParameter)
                    return object;
                var message = new $root.caffe.InnerProductParameter();
                if (object.num_output != null)
                    message.num_output = object.num_output >>> 0;
                if (object.bias_term != null)
                    message.bias_term = Boolean(object.bias_term);
                if (object.weight_filler != null) {
                    if (typeof object.weight_filler !== "object")
                        throw TypeError(".caffe.InnerProductParameter.weight_filler: object expected");
                    message.weight_filler = $root.caffe.FillerParameter.fromObject(object.weight_filler);
                }
                if (object.bias_filler != null) {
                    if (typeof object.bias_filler !== "object")
                        throw TypeError(".caffe.InnerProductParameter.bias_filler: object expected");
                    message.bias_filler = $root.caffe.FillerParameter.fromObject(object.bias_filler);
                }
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.transpose != null)
                    message.transpose = Boolean(object.transpose);
                return message;
            };
    
            InnerProductParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.num_output = 0;
                    object.bias_term = true;
                    object.weight_filler = null;
                    object.bias_filler = null;
                    object.axis = 1;
                    object.transpose = false;
                }
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    object.num_output = message.num_output;
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    object.bias_term = message.bias_term;
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler"))
                    object.weight_filler = $root.caffe.FillerParameter.toObject(message.weight_filler, options);
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler"))
                    object.bias_filler = $root.caffe.FillerParameter.toObject(message.bias_filler, options);
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.transpose != null && message.hasOwnProperty("transpose"))
                    object.transpose = message.transpose;
                return object;
            };
    
            InnerProductParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return InnerProductParameter;
        })();
    
        caffe.InputParameter = (function() {
    
            function InputParameter(properties) {
                this.shape = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            InputParameter.prototype.shape = $util.emptyArray;
    
            InputParameter.create = function create(properties) {
                return new InputParameter(properties);
            };
    
            InputParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.InputParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.shape && message.shape.length))
                            message.shape = [];
                        message.shape.push($root.caffe.BlobShape.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            InputParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.InputParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "shape":
                        if (!(message.shape && message.shape.length))
                            message.shape = [];
                        message.shape.push($root.caffe.BlobShape.decodeText(reader, true));
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            InputParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.shape != null && message.hasOwnProperty("shape")) {
                    if (!Array.isArray(message.shape))
                        return "shape: array expected";
                    for (var i = 0; i < message.shape.length; ++i) {
                        var error = $root.caffe.BlobShape.verify(message.shape[i]);
                        if (error)
                            return "shape." + error;
                    }
                }
                return null;
            };
    
            InputParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.InputParameter)
                    return object;
                var message = new $root.caffe.InputParameter();
                if (object.shape) {
                    if (!Array.isArray(object.shape))
                        throw TypeError(".caffe.InputParameter.shape: array expected");
                    message.shape = [];
                    for (var i = 0; i < object.shape.length; ++i) {
                        if (typeof object.shape[i] !== "object")
                            throw TypeError(".caffe.InputParameter.shape: object expected");
                        message.shape[i] = $root.caffe.BlobShape.fromObject(object.shape[i]);
                    }
                }
                return message;
            };
    
            InputParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.shape = [];
                if (message.shape && message.shape.length) {
                    object.shape = [];
                    for (var j = 0; j < message.shape.length; ++j)
                        object.shape[j] = $root.caffe.BlobShape.toObject(message.shape[j], options);
                }
                return object;
            };
    
            InputParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return InputParameter;
        })();
    
        caffe.LogParameter = (function() {
    
            function LogParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            LogParameter.prototype.base = -1;
            LogParameter.prototype.scale = 1;
            LogParameter.prototype.shift = 0;
    
            LogParameter.create = function create(properties) {
                return new LogParameter(properties);
            };
    
            LogParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.LogParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = reader.float();
                        break;
                    case 2:
                        message.scale = reader.float();
                        break;
                    case 3:
                        message.shift = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            LogParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.LogParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "base":
                        message.base = reader.float();
                        break;
                    case "scale":
                        message.scale = reader.float();
                        break;
                    case "shift":
                        message.shift = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            LogParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base"))
                    if (typeof message.base !== "number")
                        return "base: number expected";
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                if (message.shift != null && message.hasOwnProperty("shift"))
                    if (typeof message.shift !== "number")
                        return "shift: number expected";
                return null;
            };
    
            LogParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.LogParameter)
                    return object;
                var message = new $root.caffe.LogParameter();
                if (object.base != null)
                    message.base = Number(object.base);
                if (object.scale != null)
                    message.scale = Number(object.scale);
                if (object.shift != null)
                    message.shift = Number(object.shift);
                return message;
            };
    
            LogParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = -1;
                    object.scale = 1;
                    object.shift = 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = options.json && !isFinite(message.base) ? String(message.base) : message.base;
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                if (message.shift != null && message.hasOwnProperty("shift"))
                    object.shift = options.json && !isFinite(message.shift) ? String(message.shift) : message.shift;
                return object;
            };
    
            LogParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LogParameter;
        })();
    
        caffe.LRNParameter = (function() {
    
            function LRNParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            LRNParameter.prototype.local_size = 5;
            LRNParameter.prototype.alpha = 1;
            LRNParameter.prototype.beta = 0.75;
            LRNParameter.prototype.norm_region = 0;
            LRNParameter.prototype.k = 1;
            LRNParameter.prototype.engine = 0;
    
            LRNParameter.create = function create(properties) {
                return new LRNParameter(properties);
            };
    
            LRNParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.LRNParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.local_size = reader.uint32();
                        break;
                    case 2:
                        message.alpha = reader.float();
                        break;
                    case 3:
                        message.beta = reader.float();
                        break;
                    case 4:
                        message.norm_region = reader.int32();
                        break;
                    case 5:
                        message.k = reader.float();
                        break;
                    case 6:
                        message.engine = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            LRNParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.LRNParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "local_size":
                        message.local_size = reader.uint32();
                        break;
                    case "alpha":
                        message.alpha = reader.float();
                        break;
                    case "beta":
                        message.beta = reader.float();
                        break;
                    case "norm_region":
                        message.norm_region = reader.enum($root.caffe.LRNParameter.NormRegion);
                        break;
                    case "k":
                        message.k = reader.float();
                        break;
                    case "engine":
                        message.engine = reader.enum($root.caffe.LRNParameter.Engine);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            LRNParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.local_size != null && message.hasOwnProperty("local_size"))
                    if (!$util.isInteger(message.local_size))
                        return "local_size: integer expected";
                if (message.alpha != null && message.hasOwnProperty("alpha"))
                    if (typeof message.alpha !== "number")
                        return "alpha: number expected";
                if (message.beta != null && message.hasOwnProperty("beta"))
                    if (typeof message.beta !== "number")
                        return "beta: number expected";
                if (message.norm_region != null && message.hasOwnProperty("norm_region"))
                    switch (message.norm_region) {
                    default:
                        return "norm_region: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.k != null && message.hasOwnProperty("k"))
                    if (typeof message.k !== "number")
                        return "k: number expected";
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };
    
            LRNParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.LRNParameter)
                    return object;
                var message = new $root.caffe.LRNParameter();
                if (object.local_size != null)
                    message.local_size = object.local_size >>> 0;
                if (object.alpha != null)
                    message.alpha = Number(object.alpha);
                if (object.beta != null)
                    message.beta = Number(object.beta);
                switch (object.norm_region) {
                case "ACROSS_CHANNELS":
                case 0:
                    message.norm_region = 0;
                    break;
                case "WITHIN_CHANNEL":
                case 1:
                    message.norm_region = 1;
                    break;
                }
                if (object.k != null)
                    message.k = Number(object.k);
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                return message;
            };
    
            LRNParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.local_size = 5;
                    object.alpha = 1;
                    object.beta = 0.75;
                    object.norm_region = options.enums === String ? "ACROSS_CHANNELS" : 0;
                    object.k = 1;
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                }
                if (message.local_size != null && message.hasOwnProperty("local_size"))
                    object.local_size = message.local_size;
                if (message.alpha != null && message.hasOwnProperty("alpha"))
                    object.alpha = options.json && !isFinite(message.alpha) ? String(message.alpha) : message.alpha;
                if (message.beta != null && message.hasOwnProperty("beta"))
                    object.beta = options.json && !isFinite(message.beta) ? String(message.beta) : message.beta;
                if (message.norm_region != null && message.hasOwnProperty("norm_region"))
                    object.norm_region = options.enums === String ? $root.caffe.LRNParameter.NormRegion[message.norm_region] : message.norm_region;
                if (message.k != null && message.hasOwnProperty("k"))
                    object.k = options.json && !isFinite(message.k) ? String(message.k) : message.k;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.LRNParameter.Engine[message.engine] : message.engine;
                return object;
            };
    
            LRNParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            LRNParameter.NormRegion = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ACROSS_CHANNELS"] = 0;
                values[valuesById[1] = "WITHIN_CHANNEL"] = 1;
                return values;
            })();
    
            LRNParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            return LRNParameter;
        })();
    
        caffe.MemoryDataParameter = (function() {
    
            function MemoryDataParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            MemoryDataParameter.prototype.batch_size = 0;
            MemoryDataParameter.prototype.channels = 0;
            MemoryDataParameter.prototype.height = 0;
            MemoryDataParameter.prototype.width = 0;
    
            MemoryDataParameter.create = function create(properties) {
                return new MemoryDataParameter(properties);
            };
    
            MemoryDataParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.MemoryDataParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.batch_size = reader.uint32();
                        break;
                    case 2:
                        message.channels = reader.uint32();
                        break;
                    case 3:
                        message.height = reader.uint32();
                        break;
                    case 4:
                        message.width = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            MemoryDataParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.MemoryDataParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "batch_size":
                        message.batch_size = reader.uint32();
                        break;
                    case "channels":
                        message.channels = reader.uint32();
                        break;
                    case "height":
                        message.height = reader.uint32();
                        break;
                    case "width":
                        message.width = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            MemoryDataParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    if (!$util.isInteger(message.batch_size))
                        return "batch_size: integer expected";
                if (message.channels != null && message.hasOwnProperty("channels"))
                    if (!$util.isInteger(message.channels))
                        return "channels: integer expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                return null;
            };
    
            MemoryDataParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.MemoryDataParameter)
                    return object;
                var message = new $root.caffe.MemoryDataParameter();
                if (object.batch_size != null)
                    message.batch_size = object.batch_size >>> 0;
                if (object.channels != null)
                    message.channels = object.channels >>> 0;
                if (object.height != null)
                    message.height = object.height >>> 0;
                if (object.width != null)
                    message.width = object.width >>> 0;
                return message;
            };
    
            MemoryDataParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.batch_size = 0;
                    object.channels = 0;
                    object.height = 0;
                    object.width = 0;
                }
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    object.batch_size = message.batch_size;
                if (message.channels != null && message.hasOwnProperty("channels"))
                    object.channels = message.channels;
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                return object;
            };
    
            MemoryDataParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MemoryDataParameter;
        })();
    
        caffe.MVNParameter = (function() {
    
            function MVNParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            MVNParameter.prototype.normalize_variance = true;
            MVNParameter.prototype.across_channels = false;
            MVNParameter.prototype.eps = 1e-9;
    
            MVNParameter.create = function create(properties) {
                return new MVNParameter(properties);
            };
    
            MVNParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.MVNParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.normalize_variance = reader.bool();
                        break;
                    case 2:
                        message.across_channels = reader.bool();
                        break;
                    case 3:
                        message.eps = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            MVNParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.MVNParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "normalize_variance":
                        message.normalize_variance = reader.bool();
                        break;
                    case "across_channels":
                        message.across_channels = reader.bool();
                        break;
                    case "eps":
                        message.eps = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            MVNParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.normalize_variance != null && message.hasOwnProperty("normalize_variance"))
                    if (typeof message.normalize_variance !== "boolean")
                        return "normalize_variance: boolean expected";
                if (message.across_channels != null && message.hasOwnProperty("across_channels"))
                    if (typeof message.across_channels !== "boolean")
                        return "across_channels: boolean expected";
                if (message.eps != null && message.hasOwnProperty("eps"))
                    if (typeof message.eps !== "number")
                        return "eps: number expected";
                return null;
            };
    
            MVNParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.MVNParameter)
                    return object;
                var message = new $root.caffe.MVNParameter();
                if (object.normalize_variance != null)
                    message.normalize_variance = Boolean(object.normalize_variance);
                if (object.across_channels != null)
                    message.across_channels = Boolean(object.across_channels);
                if (object.eps != null)
                    message.eps = Number(object.eps);
                return message;
            };
    
            MVNParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.normalize_variance = true;
                    object.across_channels = false;
                    object.eps = 1e-9;
                }
                if (message.normalize_variance != null && message.hasOwnProperty("normalize_variance"))
                    object.normalize_variance = message.normalize_variance;
                if (message.across_channels != null && message.hasOwnProperty("across_channels"))
                    object.across_channels = message.across_channels;
                if (message.eps != null && message.hasOwnProperty("eps"))
                    object.eps = options.json && !isFinite(message.eps) ? String(message.eps) : message.eps;
                return object;
            };
    
            MVNParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MVNParameter;
        })();
    
        caffe.ParameterParameter = (function() {
    
            function ParameterParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ParameterParameter.prototype.shape = null;
    
            ParameterParameter.create = function create(properties) {
                return new ParameterParameter(properties);
            };
    
            ParameterParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ParameterParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.shape = $root.caffe.BlobShape.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ParameterParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ParameterParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "shape":
                        message.shape = $root.caffe.BlobShape.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ParameterParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.shape != null && message.hasOwnProperty("shape")) {
                    var error = $root.caffe.BlobShape.verify(message.shape);
                    if (error)
                        return "shape." + error;
                }
                return null;
            };
    
            ParameterParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ParameterParameter)
                    return object;
                var message = new $root.caffe.ParameterParameter();
                if (object.shape != null) {
                    if (typeof object.shape !== "object")
                        throw TypeError(".caffe.ParameterParameter.shape: object expected");
                    message.shape = $root.caffe.BlobShape.fromObject(object.shape);
                }
                return message;
            };
    
            ParameterParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.shape = null;
                if (message.shape != null && message.hasOwnProperty("shape"))
                    object.shape = $root.caffe.BlobShape.toObject(message.shape, options);
                return object;
            };
    
            ParameterParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ParameterParameter;
        })();
    
        caffe.PoolingParameter = (function() {
    
            function PoolingParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            PoolingParameter.prototype.pool = 0;
            PoolingParameter.prototype.pad = 0;
            PoolingParameter.prototype.pad_h = 0;
            PoolingParameter.prototype.pad_w = 0;
            PoolingParameter.prototype.kernel_size = 0;
            PoolingParameter.prototype.kernel_h = 0;
            PoolingParameter.prototype.kernel_w = 0;
            PoolingParameter.prototype.stride = 1;
            PoolingParameter.prototype.stride_h = 0;
            PoolingParameter.prototype.stride_w = 0;
            PoolingParameter.prototype.engine = 0;
            PoolingParameter.prototype.global_pooling = false;
            PoolingParameter.prototype.ceil_mode = true;
            PoolingParameter.prototype.round_mode = 0;
    
            PoolingParameter.create = function create(properties) {
                return new PoolingParameter(properties);
            };
    
            PoolingParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.PoolingParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pool = reader.int32();
                        break;
                    case 4:
                        message.pad = reader.uint32();
                        break;
                    case 9:
                        message.pad_h = reader.uint32();
                        break;
                    case 10:
                        message.pad_w = reader.uint32();
                        break;
                    case 2:
                        message.kernel_size = reader.uint32();
                        break;
                    case 5:
                        message.kernel_h = reader.uint32();
                        break;
                    case 6:
                        message.kernel_w = reader.uint32();
                        break;
                    case 3:
                        message.stride = reader.uint32();
                        break;
                    case 7:
                        message.stride_h = reader.uint32();
                        break;
                    case 8:
                        message.stride_w = reader.uint32();
                        break;
                    case 11:
                        message.engine = reader.int32();
                        break;
                    case 12:
                        message.global_pooling = reader.bool();
                        break;
                    case 1013:
                        message.ceil_mode = reader.bool();
                        break;
                    case 13:
                        message.round_mode = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            PoolingParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.PoolingParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "pool":
                        message.pool = reader.enum($root.caffe.PoolingParameter.PoolMethod);
                        break;
                    case "pad":
                        message.pad = reader.uint32();
                        break;
                    case "pad_h":
                        message.pad_h = reader.uint32();
                        break;
                    case "pad_w":
                        message.pad_w = reader.uint32();
                        break;
                    case "kernel_size":
                        message.kernel_size = reader.uint32();
                        break;
                    case "kernel_h":
                        message.kernel_h = reader.uint32();
                        break;
                    case "kernel_w":
                        message.kernel_w = reader.uint32();
                        break;
                    case "stride":
                        message.stride = reader.uint32();
                        break;
                    case "stride_h":
                        message.stride_h = reader.uint32();
                        break;
                    case "stride_w":
                        message.stride_w = reader.uint32();
                        break;
                    case "engine":
                        message.engine = reader.enum($root.caffe.PoolingParameter.Engine);
                        break;
                    case "global_pooling":
                        message.global_pooling = reader.bool();
                        break;
                    case "ceil_mode":
                        message.ceil_mode = reader.bool();
                        break;
                    case "round_mode":
                        message.round_mode = reader.enum($root.caffe.PoolingParameter.RoundMode);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            PoolingParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pool != null && message.hasOwnProperty("pool"))
                    switch (message.pool) {
                    default:
                        return "pool: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.pad != null && message.hasOwnProperty("pad"))
                    if (!$util.isInteger(message.pad))
                        return "pad: integer expected";
                if (message.pad_h != null && message.hasOwnProperty("pad_h"))
                    if (!$util.isInteger(message.pad_h))
                        return "pad_h: integer expected";
                if (message.pad_w != null && message.hasOwnProperty("pad_w"))
                    if (!$util.isInteger(message.pad_w))
                        return "pad_w: integer expected";
                if (message.kernel_size != null && message.hasOwnProperty("kernel_size"))
                    if (!$util.isInteger(message.kernel_size))
                        return "kernel_size: integer expected";
                if (message.kernel_h != null && message.hasOwnProperty("kernel_h"))
                    if (!$util.isInteger(message.kernel_h))
                        return "kernel_h: integer expected";
                if (message.kernel_w != null && message.hasOwnProperty("kernel_w"))
                    if (!$util.isInteger(message.kernel_w))
                        return "kernel_w: integer expected";
                if (message.stride != null && message.hasOwnProperty("stride"))
                    if (!$util.isInteger(message.stride))
                        return "stride: integer expected";
                if (message.stride_h != null && message.hasOwnProperty("stride_h"))
                    if (!$util.isInteger(message.stride_h))
                        return "stride_h: integer expected";
                if (message.stride_w != null && message.hasOwnProperty("stride_w"))
                    if (!$util.isInteger(message.stride_w))
                        return "stride_w: integer expected";
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.global_pooling != null && message.hasOwnProperty("global_pooling"))
                    if (typeof message.global_pooling !== "boolean")
                        return "global_pooling: boolean expected";
                if (message.ceil_mode != null && message.hasOwnProperty("ceil_mode"))
                    if (typeof message.ceil_mode !== "boolean")
                        return "ceil_mode: boolean expected";
                if (message.round_mode != null && message.hasOwnProperty("round_mode"))
                    switch (message.round_mode) {
                    default:
                        return "round_mode: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };
    
            PoolingParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.PoolingParameter)
                    return object;
                var message = new $root.caffe.PoolingParameter();
                switch (object.pool) {
                case "MAX":
                case 0:
                    message.pool = 0;
                    break;
                case "AVE":
                case 1:
                    message.pool = 1;
                    break;
                case "STOCHASTIC":
                case 2:
                    message.pool = 2;
                    break;
                }
                if (object.pad != null)
                    message.pad = object.pad >>> 0;
                if (object.pad_h != null)
                    message.pad_h = object.pad_h >>> 0;
                if (object.pad_w != null)
                    message.pad_w = object.pad_w >>> 0;
                if (object.kernel_size != null)
                    message.kernel_size = object.kernel_size >>> 0;
                if (object.kernel_h != null)
                    message.kernel_h = object.kernel_h >>> 0;
                if (object.kernel_w != null)
                    message.kernel_w = object.kernel_w >>> 0;
                if (object.stride != null)
                    message.stride = object.stride >>> 0;
                if (object.stride_h != null)
                    message.stride_h = object.stride_h >>> 0;
                if (object.stride_w != null)
                    message.stride_w = object.stride_w >>> 0;
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                if (object.global_pooling != null)
                    message.global_pooling = Boolean(object.global_pooling);
                if (object.ceil_mode != null)
                    message.ceil_mode = Boolean(object.ceil_mode);
                switch (object.round_mode) {
                case "CEIL":
                case 0:
                    message.round_mode = 0;
                    break;
                case "FLOOR":
                case 1:
                    message.round_mode = 1;
                    break;
                }
                return message;
            };
    
            PoolingParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.pool = options.enums === String ? "MAX" : 0;
                    object.kernel_size = 0;
                    object.stride = 1;
                    object.pad = 0;
                    object.kernel_h = 0;
                    object.kernel_w = 0;
                    object.stride_h = 0;
                    object.stride_w = 0;
                    object.pad_h = 0;
                    object.pad_w = 0;
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                    object.global_pooling = false;
                    object.round_mode = options.enums === String ? "CEIL" : 0;
                    object.ceil_mode = true;
                }
                if (message.pool != null && message.hasOwnProperty("pool"))
                    object.pool = options.enums === String ? $root.caffe.PoolingParameter.PoolMethod[message.pool] : message.pool;
                if (message.kernel_size != null && message.hasOwnProperty("kernel_size"))
                    object.kernel_size = message.kernel_size;
                if (message.stride != null && message.hasOwnProperty("stride"))
                    object.stride = message.stride;
                if (message.pad != null && message.hasOwnProperty("pad"))
                    object.pad = message.pad;
                if (message.kernel_h != null && message.hasOwnProperty("kernel_h"))
                    object.kernel_h = message.kernel_h;
                if (message.kernel_w != null && message.hasOwnProperty("kernel_w"))
                    object.kernel_w = message.kernel_w;
                if (message.stride_h != null && message.hasOwnProperty("stride_h"))
                    object.stride_h = message.stride_h;
                if (message.stride_w != null && message.hasOwnProperty("stride_w"))
                    object.stride_w = message.stride_w;
                if (message.pad_h != null && message.hasOwnProperty("pad_h"))
                    object.pad_h = message.pad_h;
                if (message.pad_w != null && message.hasOwnProperty("pad_w"))
                    object.pad_w = message.pad_w;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.PoolingParameter.Engine[message.engine] : message.engine;
                if (message.global_pooling != null && message.hasOwnProperty("global_pooling"))
                    object.global_pooling = message.global_pooling;
                if (message.round_mode != null && message.hasOwnProperty("round_mode"))
                    object.round_mode = options.enums === String ? $root.caffe.PoolingParameter.RoundMode[message.round_mode] : message.round_mode;
                if (message.ceil_mode != null && message.hasOwnProperty("ceil_mode"))
                    object.ceil_mode = message.ceil_mode;
                return object;
            };
    
            PoolingParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            PoolingParameter.PoolMethod = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "MAX"] = 0;
                values[valuesById[1] = "AVE"] = 1;
                values[valuesById[2] = "STOCHASTIC"] = 2;
                return values;
            })();
    
            PoolingParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            PoolingParameter.RoundMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CEIL"] = 0;
                values[valuesById[1] = "FLOOR"] = 1;
                return values;
            })();
    
            return PoolingParameter;
        })();
    
        caffe.PowerParameter = (function() {
    
            function PowerParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            PowerParameter.prototype.power = 1;
            PowerParameter.prototype.scale = 1;
            PowerParameter.prototype.shift = 0;
    
            PowerParameter.create = function create(properties) {
                return new PowerParameter(properties);
            };
    
            PowerParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.PowerParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.power = reader.float();
                        break;
                    case 2:
                        message.scale = reader.float();
                        break;
                    case 3:
                        message.shift = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            PowerParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.PowerParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "power":
                        message.power = reader.float();
                        break;
                    case "scale":
                        message.scale = reader.float();
                        break;
                    case "shift":
                        message.shift = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            PowerParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.power != null && message.hasOwnProperty("power"))
                    if (typeof message.power !== "number")
                        return "power: number expected";
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                if (message.shift != null && message.hasOwnProperty("shift"))
                    if (typeof message.shift !== "number")
                        return "shift: number expected";
                return null;
            };
    
            PowerParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.PowerParameter)
                    return object;
                var message = new $root.caffe.PowerParameter();
                if (object.power != null)
                    message.power = Number(object.power);
                if (object.scale != null)
                    message.scale = Number(object.scale);
                if (object.shift != null)
                    message.shift = Number(object.shift);
                return message;
            };
    
            PowerParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.power = 1;
                    object.scale = 1;
                    object.shift = 0;
                }
                if (message.power != null && message.hasOwnProperty("power"))
                    object.power = options.json && !isFinite(message.power) ? String(message.power) : message.power;
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                if (message.shift != null && message.hasOwnProperty("shift"))
                    object.shift = options.json && !isFinite(message.shift) ? String(message.shift) : message.shift;
                return object;
            };
    
            PowerParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PowerParameter;
        })();
    
        caffe.PythonParameter = (function() {
    
            function PythonParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            PythonParameter.prototype.module = "";
            PythonParameter.prototype.layer = "";
            PythonParameter.prototype.param_str = "";
            PythonParameter.prototype.share_in_parallel = false;
    
            PythonParameter.create = function create(properties) {
                return new PythonParameter(properties);
            };
    
            PythonParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.PythonParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.module = reader.string();
                        break;
                    case 2:
                        message.layer = reader.string();
                        break;
                    case 3:
                        message.param_str = reader.string();
                        break;
                    case 4:
                        message.share_in_parallel = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            PythonParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.PythonParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "module":
                        message.module = reader.string();
                        break;
                    case "layer":
                        message.layer = reader.string();
                        break;
                    case "param_str":
                        message.param_str = reader.string();
                        break;
                    case "share_in_parallel":
                        message.share_in_parallel = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            PythonParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.module != null && message.hasOwnProperty("module"))
                    if (!$util.isString(message.module))
                        return "module: string expected";
                if (message.layer != null && message.hasOwnProperty("layer"))
                    if (!$util.isString(message.layer))
                        return "layer: string expected";
                if (message.param_str != null && message.hasOwnProperty("param_str"))
                    if (!$util.isString(message.param_str))
                        return "param_str: string expected";
                if (message.share_in_parallel != null && message.hasOwnProperty("share_in_parallel"))
                    if (typeof message.share_in_parallel !== "boolean")
                        return "share_in_parallel: boolean expected";
                return null;
            };
    
            PythonParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.PythonParameter)
                    return object;
                var message = new $root.caffe.PythonParameter();
                if (object.module != null)
                    message.module = String(object.module);
                if (object.layer != null)
                    message.layer = String(object.layer);
                if (object.param_str != null)
                    message.param_str = String(object.param_str);
                if (object.share_in_parallel != null)
                    message.share_in_parallel = Boolean(object.share_in_parallel);
                return message;
            };
    
            PythonParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.module = "";
                    object.layer = "";
                    object.param_str = "";
                    object.share_in_parallel = false;
                }
                if (message.module != null && message.hasOwnProperty("module"))
                    object.module = message.module;
                if (message.layer != null && message.hasOwnProperty("layer"))
                    object.layer = message.layer;
                if (message.param_str != null && message.hasOwnProperty("param_str"))
                    object.param_str = message.param_str;
                if (message.share_in_parallel != null && message.hasOwnProperty("share_in_parallel"))
                    object.share_in_parallel = message.share_in_parallel;
                return object;
            };
    
            PythonParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PythonParameter;
        })();
    
        caffe.RecurrentParameter = (function() {
    
            function RecurrentParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            RecurrentParameter.prototype.num_output = 0;
            RecurrentParameter.prototype.weight_filler = null;
            RecurrentParameter.prototype.bias_filler = null;
            RecurrentParameter.prototype.debug_info = false;
            RecurrentParameter.prototype.expose_hidden = false;
    
            RecurrentParameter.create = function create(properties) {
                return new RecurrentParameter(properties);
            };
    
            RecurrentParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.RecurrentParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_output = reader.uint32();
                        break;
                    case 2:
                        message.weight_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.bias_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.debug_info = reader.bool();
                        break;
                    case 5:
                        message.expose_hidden = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            RecurrentParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.RecurrentParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_output":
                        message.num_output = reader.uint32();
                        break;
                    case "weight_filler":
                        message.weight_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_filler":
                        message.bias_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "debug_info":
                        message.debug_info = reader.bool();
                        break;
                    case "expose_hidden":
                        message.expose_hidden = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            RecurrentParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    if (!$util.isInteger(message.num_output))
                        return "num_output: integer expected";
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.weight_filler);
                    if (error)
                        return "weight_filler." + error;
                }
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_filler);
                    if (error)
                        return "bias_filler." + error;
                }
                if (message.debug_info != null && message.hasOwnProperty("debug_info"))
                    if (typeof message.debug_info !== "boolean")
                        return "debug_info: boolean expected";
                if (message.expose_hidden != null && message.hasOwnProperty("expose_hidden"))
                    if (typeof message.expose_hidden !== "boolean")
                        return "expose_hidden: boolean expected";
                return null;
            };
    
            RecurrentParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.RecurrentParameter)
                    return object;
                var message = new $root.caffe.RecurrentParameter();
                if (object.num_output != null)
                    message.num_output = object.num_output >>> 0;
                if (object.weight_filler != null) {
                    if (typeof object.weight_filler !== "object")
                        throw TypeError(".caffe.RecurrentParameter.weight_filler: object expected");
                    message.weight_filler = $root.caffe.FillerParameter.fromObject(object.weight_filler);
                }
                if (object.bias_filler != null) {
                    if (typeof object.bias_filler !== "object")
                        throw TypeError(".caffe.RecurrentParameter.bias_filler: object expected");
                    message.bias_filler = $root.caffe.FillerParameter.fromObject(object.bias_filler);
                }
                if (object.debug_info != null)
                    message.debug_info = Boolean(object.debug_info);
                if (object.expose_hidden != null)
                    message.expose_hidden = Boolean(object.expose_hidden);
                return message;
            };
    
            RecurrentParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.num_output = 0;
                    object.weight_filler = null;
                    object.bias_filler = null;
                    object.debug_info = false;
                    object.expose_hidden = false;
                }
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    object.num_output = message.num_output;
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler"))
                    object.weight_filler = $root.caffe.FillerParameter.toObject(message.weight_filler, options);
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler"))
                    object.bias_filler = $root.caffe.FillerParameter.toObject(message.bias_filler, options);
                if (message.debug_info != null && message.hasOwnProperty("debug_info"))
                    object.debug_info = message.debug_info;
                if (message.expose_hidden != null && message.hasOwnProperty("expose_hidden"))
                    object.expose_hidden = message.expose_hidden;
                return object;
            };
    
            RecurrentParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RecurrentParameter;
        })();
    
        caffe.ReductionParameter = (function() {
    
            function ReductionParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ReductionParameter.prototype.operation = 1;
            ReductionParameter.prototype.axis = 0;
            ReductionParameter.prototype.coeff = 1;
    
            ReductionParameter.create = function create(properties) {
                return new ReductionParameter(properties);
            };
    
            ReductionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ReductionParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.operation = reader.int32();
                        break;
                    case 2:
                        message.axis = reader.int32();
                        break;
                    case 3:
                        message.coeff = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ReductionParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ReductionParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "operation":
                        message.operation = reader.enum($root.caffe.ReductionParameter.ReductionOp);
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "coeff":
                        message.coeff = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ReductionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.operation != null && message.hasOwnProperty("operation"))
                    switch (message.operation) {
                    default:
                        return "operation: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.coeff != null && message.hasOwnProperty("coeff"))
                    if (typeof message.coeff !== "number")
                        return "coeff: number expected";
                return null;
            };
    
            ReductionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ReductionParameter)
                    return object;
                var message = new $root.caffe.ReductionParameter();
                switch (object.operation) {
                case "SUM":
                case 1:
                    message.operation = 1;
                    break;
                case "ASUM":
                case 2:
                    message.operation = 2;
                    break;
                case "SUMSQ":
                case 3:
                    message.operation = 3;
                    break;
                case "MEAN":
                case 4:
                    message.operation = 4;
                    break;
                }
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.coeff != null)
                    message.coeff = Number(object.coeff);
                return message;
            };
    
            ReductionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.operation = options.enums === String ? "SUM" : 1;
                    object.axis = 0;
                    object.coeff = 1;
                }
                if (message.operation != null && message.hasOwnProperty("operation"))
                    object.operation = options.enums === String ? $root.caffe.ReductionParameter.ReductionOp[message.operation] : message.operation;
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.coeff != null && message.hasOwnProperty("coeff"))
                    object.coeff = options.json && !isFinite(message.coeff) ? String(message.coeff) : message.coeff;
                return object;
            };
    
            ReductionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            ReductionParameter.ReductionOp = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SUM"] = 1;
                values[valuesById[2] = "ASUM"] = 2;
                values[valuesById[3] = "SUMSQ"] = 3;
                values[valuesById[4] = "MEAN"] = 4;
                return values;
            })();
    
            return ReductionParameter;
        })();
    
        caffe.ReLUParameter = (function() {
    
            function ReLUParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ReLUParameter.prototype.negative_slope = 0;
            ReLUParameter.prototype.engine = 0;
    
            ReLUParameter.create = function create(properties) {
                return new ReLUParameter(properties);
            };
    
            ReLUParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ReLUParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.negative_slope = reader.float();
                        break;
                    case 2:
                        message.engine = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ReLUParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ReLUParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "negative_slope":
                        message.negative_slope = reader.float();
                        break;
                    case "engine":
                        message.engine = reader.enum($root.caffe.ReLUParameter.Engine);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ReLUParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.negative_slope != null && message.hasOwnProperty("negative_slope"))
                    if (typeof message.negative_slope !== "number")
                        return "negative_slope: number expected";
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };
    
            ReLUParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ReLUParameter)
                    return object;
                var message = new $root.caffe.ReLUParameter();
                if (object.negative_slope != null)
                    message.negative_slope = Number(object.negative_slope);
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                return message;
            };
    
            ReLUParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.negative_slope = 0;
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                }
                if (message.negative_slope != null && message.hasOwnProperty("negative_slope"))
                    object.negative_slope = options.json && !isFinite(message.negative_slope) ? String(message.negative_slope) : message.negative_slope;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.ReLUParameter.Engine[message.engine] : message.engine;
                return object;
            };
    
            ReLUParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            ReLUParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            return ReLUParameter;
        })();
    
        caffe.ReshapeParameter = (function() {
    
            function ReshapeParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ReshapeParameter.prototype.shape = null;
            ReshapeParameter.prototype.axis = 0;
            ReshapeParameter.prototype.num_axes = -1;
    
            ReshapeParameter.create = function create(properties) {
                return new ReshapeParameter(properties);
            };
    
            ReshapeParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ReshapeParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.shape = $root.caffe.BlobShape.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.axis = reader.int32();
                        break;
                    case 3:
                        message.num_axes = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ReshapeParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ReshapeParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "shape":
                        message.shape = $root.caffe.BlobShape.decodeText(reader, true);
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "num_axes":
                        message.num_axes = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ReshapeParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.shape != null && message.hasOwnProperty("shape")) {
                    var error = $root.caffe.BlobShape.verify(message.shape);
                    if (error)
                        return "shape." + error;
                }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.num_axes != null && message.hasOwnProperty("num_axes"))
                    if (!$util.isInteger(message.num_axes))
                        return "num_axes: integer expected";
                return null;
            };
    
            ReshapeParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ReshapeParameter)
                    return object;
                var message = new $root.caffe.ReshapeParameter();
                if (object.shape != null) {
                    if (typeof object.shape !== "object")
                        throw TypeError(".caffe.ReshapeParameter.shape: object expected");
                    message.shape = $root.caffe.BlobShape.fromObject(object.shape);
                }
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.num_axes != null)
                    message.num_axes = object.num_axes | 0;
                return message;
            };
    
            ReshapeParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.shape = null;
                    object.axis = 0;
                    object.num_axes = -1;
                }
                if (message.shape != null && message.hasOwnProperty("shape"))
                    object.shape = $root.caffe.BlobShape.toObject(message.shape, options);
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.num_axes != null && message.hasOwnProperty("num_axes"))
                    object.num_axes = message.num_axes;
                return object;
            };
    
            ReshapeParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ReshapeParameter;
        })();
    
        caffe.ScaleParameter = (function() {
    
            function ScaleParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ScaleParameter.prototype.axis = 1;
            ScaleParameter.prototype.num_axes = 1;
            ScaleParameter.prototype.filler = null;
            ScaleParameter.prototype.bias_term = false;
            ScaleParameter.prototype.bias_filler = null;
    
            ScaleParameter.create = function create(properties) {
                return new ScaleParameter(properties);
            };
    
            ScaleParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ScaleParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.axis = reader.int32();
                        break;
                    case 2:
                        message.num_axes = reader.int32();
                        break;
                    case 3:
                        message.filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.bias_term = reader.bool();
                        break;
                    case 5:
                        message.bias_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ScaleParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ScaleParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "num_axes":
                        message.num_axes = reader.int32();
                        break;
                    case "filler":
                        message.filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_term":
                        message.bias_term = reader.bool();
                        break;
                    case "bias_filler":
                        message.bias_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ScaleParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.num_axes != null && message.hasOwnProperty("num_axes"))
                    if (!$util.isInteger(message.num_axes))
                        return "num_axes: integer expected";
                if (message.filler != null && message.hasOwnProperty("filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.filler);
                    if (error)
                        return "filler." + error;
                }
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    if (typeof message.bias_term !== "boolean")
                        return "bias_term: boolean expected";
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_filler);
                    if (error)
                        return "bias_filler." + error;
                }
                return null;
            };
    
            ScaleParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ScaleParameter)
                    return object;
                var message = new $root.caffe.ScaleParameter();
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.num_axes != null)
                    message.num_axes = object.num_axes | 0;
                if (object.filler != null) {
                    if (typeof object.filler !== "object")
                        throw TypeError(".caffe.ScaleParameter.filler: object expected");
                    message.filler = $root.caffe.FillerParameter.fromObject(object.filler);
                }
                if (object.bias_term != null)
                    message.bias_term = Boolean(object.bias_term);
                if (object.bias_filler != null) {
                    if (typeof object.bias_filler !== "object")
                        throw TypeError(".caffe.ScaleParameter.bias_filler: object expected");
                    message.bias_filler = $root.caffe.FillerParameter.fromObject(object.bias_filler);
                }
                return message;
            };
    
            ScaleParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.axis = 1;
                    object.num_axes = 1;
                    object.filler = null;
                    object.bias_term = false;
                    object.bias_filler = null;
                }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.num_axes != null && message.hasOwnProperty("num_axes"))
                    object.num_axes = message.num_axes;
                if (message.filler != null && message.hasOwnProperty("filler"))
                    object.filler = $root.caffe.FillerParameter.toObject(message.filler, options);
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    object.bias_term = message.bias_term;
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler"))
                    object.bias_filler = $root.caffe.FillerParameter.toObject(message.bias_filler, options);
                return object;
            };
    
            ScaleParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ScaleParameter;
        })();
    
        caffe.SigmoidParameter = (function() {
    
            function SigmoidParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SigmoidParameter.prototype.engine = 0;
    
            SigmoidParameter.create = function create(properties) {
                return new SigmoidParameter(properties);
            };
    
            SigmoidParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SigmoidParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.engine = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SigmoidParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SigmoidParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "engine":
                        message.engine = reader.enum($root.caffe.SigmoidParameter.Engine);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SigmoidParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };
    
            SigmoidParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SigmoidParameter)
                    return object;
                var message = new $root.caffe.SigmoidParameter();
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                return message;
            };
    
            SigmoidParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.SigmoidParameter.Engine[message.engine] : message.engine;
                return object;
            };
    
            SigmoidParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            SigmoidParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            return SigmoidParameter;
        })();
    
        caffe.SliceParameter = (function() {
    
            function SliceParameter(properties) {
                this.slice_point = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SliceParameter.prototype.axis = 1;
            SliceParameter.prototype.slice_point = $util.emptyArray;
            SliceParameter.prototype.slice_dim = 1;
    
            SliceParameter.create = function create(properties) {
                return new SliceParameter(properties);
            };
    
            SliceParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SliceParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 3:
                        message.axis = reader.int32();
                        break;
                    case 2:
                        if (!(message.slice_point && message.slice_point.length))
                            message.slice_point = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.slice_point.push(reader.uint32());
                        } else
                            message.slice_point.push(reader.uint32());
                        break;
                    case 1:
                        message.slice_dim = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SliceParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SliceParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "slice_point":
                        if (!(message.slice_point && message.slice_point.length))
                            message.slice_point = [];
                        message.slice_point.push(reader.uint32());
                        break;
                    case "slice_dim":
                        message.slice_dim = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SliceParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.slice_point != null && message.hasOwnProperty("slice_point")) {
                    if (!Array.isArray(message.slice_point))
                        return "slice_point: array expected";
                    for (var i = 0; i < message.slice_point.length; ++i)
                        if (!$util.isInteger(message.slice_point[i]))
                            return "slice_point: integer[] expected";
                }
                if (message.slice_dim != null && message.hasOwnProperty("slice_dim"))
                    if (!$util.isInteger(message.slice_dim))
                        return "slice_dim: integer expected";
                return null;
            };
    
            SliceParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SliceParameter)
                    return object;
                var message = new $root.caffe.SliceParameter();
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.slice_point) {
                    if (!Array.isArray(object.slice_point))
                        throw TypeError(".caffe.SliceParameter.slice_point: array expected");
                    message.slice_point = [];
                    for (var i = 0; i < object.slice_point.length; ++i)
                        message.slice_point[i] = object.slice_point[i] >>> 0;
                }
                if (object.slice_dim != null)
                    message.slice_dim = object.slice_dim >>> 0;
                return message;
            };
    
            SliceParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.slice_point = [];
                if (options.defaults) {
                    object.slice_dim = 1;
                    object.axis = 1;
                }
                if (message.slice_dim != null && message.hasOwnProperty("slice_dim"))
                    object.slice_dim = message.slice_dim;
                if (message.slice_point && message.slice_point.length) {
                    object.slice_point = [];
                    for (var j = 0; j < message.slice_point.length; ++j)
                        object.slice_point[j] = message.slice_point[j];
                }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                return object;
            };
    
            SliceParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SliceParameter;
        })();
    
        caffe.SoftmaxParameter = (function() {
    
            function SoftmaxParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SoftmaxParameter.prototype.engine = 0;
            SoftmaxParameter.prototype.axis = 1;
    
            SoftmaxParameter.create = function create(properties) {
                return new SoftmaxParameter(properties);
            };
    
            SoftmaxParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SoftmaxParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.engine = reader.int32();
                        break;
                    case 2:
                        message.axis = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SoftmaxParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SoftmaxParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "engine":
                        message.engine = reader.enum($root.caffe.SoftmaxParameter.Engine);
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SoftmaxParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                return null;
            };
    
            SoftmaxParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SoftmaxParameter)
                    return object;
                var message = new $root.caffe.SoftmaxParameter();
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                if (object.axis != null)
                    message.axis = object.axis | 0;
                return message;
            };
    
            SoftmaxParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                    object.axis = 1;
                }
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.SoftmaxParameter.Engine[message.engine] : message.engine;
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                return object;
            };
    
            SoftmaxParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            SoftmaxParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            return SoftmaxParameter;
        })();
    
        caffe.SwishParameter = (function() {
    
            function SwishParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SwishParameter.prototype.beta = 1;
    
            SwishParameter.create = function create(properties) {
                return new SwishParameter(properties);
            };
    
            SwishParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SwishParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.beta = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SwishParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SwishParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "beta":
                        message.beta = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SwishParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.beta != null && message.hasOwnProperty("beta"))
                    if (typeof message.beta !== "number")
                        return "beta: number expected";
                return null;
            };
    
            SwishParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SwishParameter)
                    return object;
                var message = new $root.caffe.SwishParameter();
                if (object.beta != null)
                    message.beta = Number(object.beta);
                return message;
            };
    
            SwishParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.beta = 1;
                if (message.beta != null && message.hasOwnProperty("beta"))
                    object.beta = options.json && !isFinite(message.beta) ? String(message.beta) : message.beta;
                return object;
            };
    
            SwishParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SwishParameter;
        })();
    
        caffe.TanHParameter = (function() {
    
            function TanHParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            TanHParameter.prototype.engine = 0;
    
            TanHParameter.create = function create(properties) {
                return new TanHParameter(properties);
            };
    
            TanHParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.TanHParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.engine = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            TanHParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.TanHParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "engine":
                        message.engine = reader.enum($root.caffe.TanHParameter.Engine);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            TanHParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };
    
            TanHParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.TanHParameter)
                    return object;
                var message = new $root.caffe.TanHParameter();
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                return message;
            };
    
            TanHParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.TanHParameter.Engine[message.engine] : message.engine;
                return object;
            };
    
            TanHParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            TanHParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            return TanHParameter;
        })();
    
        caffe.TileParameter = (function() {
    
            function TileParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            TileParameter.prototype.axis = 1;
            TileParameter.prototype.tiles = 0;
    
            TileParameter.create = function create(properties) {
                return new TileParameter(properties);
            };
    
            TileParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.TileParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.axis = reader.int32();
                        break;
                    case 2:
                        message.tiles = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            TileParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.TileParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "tiles":
                        message.tiles = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            TileParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.tiles != null && message.hasOwnProperty("tiles"))
                    if (!$util.isInteger(message.tiles))
                        return "tiles: integer expected";
                return null;
            };
    
            TileParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.TileParameter)
                    return object;
                var message = new $root.caffe.TileParameter();
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.tiles != null)
                    message.tiles = object.tiles | 0;
                return message;
            };
    
            TileParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.axis = 1;
                    object.tiles = 0;
                }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.tiles != null && message.hasOwnProperty("tiles"))
                    object.tiles = message.tiles;
                return object;
            };
    
            TileParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TileParameter;
        })();
    
        caffe.ThresholdParameter = (function() {
    
            function ThresholdParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ThresholdParameter.prototype.threshold = 0;
    
            ThresholdParameter.create = function create(properties) {
                return new ThresholdParameter(properties);
            };
    
            ThresholdParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ThresholdParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.threshold = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ThresholdParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ThresholdParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "threshold":
                        message.threshold = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ThresholdParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.threshold != null && message.hasOwnProperty("threshold"))
                    if (typeof message.threshold !== "number")
                        return "threshold: number expected";
                return null;
            };
    
            ThresholdParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ThresholdParameter)
                    return object;
                var message = new $root.caffe.ThresholdParameter();
                if (object.threshold != null)
                    message.threshold = Number(object.threshold);
                return message;
            };
    
            ThresholdParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.threshold = 0;
                if (message.threshold != null && message.hasOwnProperty("threshold"))
                    object.threshold = options.json && !isFinite(message.threshold) ? String(message.threshold) : message.threshold;
                return object;
            };
    
            ThresholdParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ThresholdParameter;
        })();
    
        caffe.WindowDataParameter = (function() {
    
            function WindowDataParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            WindowDataParameter.prototype.source = "";
            WindowDataParameter.prototype.scale = 1;
            WindowDataParameter.prototype.mean_file = "";
            WindowDataParameter.prototype.batch_size = 0;
            WindowDataParameter.prototype.crop_size = 0;
            WindowDataParameter.prototype.mirror = false;
            WindowDataParameter.prototype.fg_threshold = 0.5;
            WindowDataParameter.prototype.bg_threshold = 0.5;
            WindowDataParameter.prototype.fg_fraction = 0.25;
            WindowDataParameter.prototype.context_pad = 0;
            WindowDataParameter.prototype.crop_mode = "warp";
            WindowDataParameter.prototype.cache_images = false;
            WindowDataParameter.prototype.root_folder = "";
    
            WindowDataParameter.create = function create(properties) {
                return new WindowDataParameter(properties);
            };
    
            WindowDataParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.WindowDataParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.source = reader.string();
                        break;
                    case 2:
                        message.scale = reader.float();
                        break;
                    case 3:
                        message.mean_file = reader.string();
                        break;
                    case 4:
                        message.batch_size = reader.uint32();
                        break;
                    case 5:
                        message.crop_size = reader.uint32();
                        break;
                    case 6:
                        message.mirror = reader.bool();
                        break;
                    case 7:
                        message.fg_threshold = reader.float();
                        break;
                    case 8:
                        message.bg_threshold = reader.float();
                        break;
                    case 9:
                        message.fg_fraction = reader.float();
                        break;
                    case 10:
                        message.context_pad = reader.uint32();
                        break;
                    case 11:
                        message.crop_mode = reader.string();
                        break;
                    case 12:
                        message.cache_images = reader.bool();
                        break;
                    case 13:
                        message.root_folder = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            WindowDataParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.WindowDataParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "source":
                        message.source = reader.string();
                        break;
                    case "scale":
                        message.scale = reader.float();
                        break;
                    case "mean_file":
                        message.mean_file = reader.string();
                        break;
                    case "batch_size":
                        message.batch_size = reader.uint32();
                        break;
                    case "crop_size":
                        message.crop_size = reader.uint32();
                        break;
                    case "mirror":
                        message.mirror = reader.bool();
                        break;
                    case "fg_threshold":
                        message.fg_threshold = reader.float();
                        break;
                    case "bg_threshold":
                        message.bg_threshold = reader.float();
                        break;
                    case "fg_fraction":
                        message.fg_fraction = reader.float();
                        break;
                    case "context_pad":
                        message.context_pad = reader.uint32();
                        break;
                    case "crop_mode":
                        message.crop_mode = reader.string();
                        break;
                    case "cache_images":
                        message.cache_images = reader.bool();
                        break;
                    case "root_folder":
                        message.root_folder = reader.string();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            WindowDataParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                if (message.mean_file != null && message.hasOwnProperty("mean_file"))
                    if (!$util.isString(message.mean_file))
                        return "mean_file: string expected";
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    if (!$util.isInteger(message.batch_size))
                        return "batch_size: integer expected";
                if (message.crop_size != null && message.hasOwnProperty("crop_size"))
                    if (!$util.isInteger(message.crop_size))
                        return "crop_size: integer expected";
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    if (typeof message.mirror !== "boolean")
                        return "mirror: boolean expected";
                if (message.fg_threshold != null && message.hasOwnProperty("fg_threshold"))
                    if (typeof message.fg_threshold !== "number")
                        return "fg_threshold: number expected";
                if (message.bg_threshold != null && message.hasOwnProperty("bg_threshold"))
                    if (typeof message.bg_threshold !== "number")
                        return "bg_threshold: number expected";
                if (message.fg_fraction != null && message.hasOwnProperty("fg_fraction"))
                    if (typeof message.fg_fraction !== "number")
                        return "fg_fraction: number expected";
                if (message.context_pad != null && message.hasOwnProperty("context_pad"))
                    if (!$util.isInteger(message.context_pad))
                        return "context_pad: integer expected";
                if (message.crop_mode != null && message.hasOwnProperty("crop_mode"))
                    if (!$util.isString(message.crop_mode))
                        return "crop_mode: string expected";
                if (message.cache_images != null && message.hasOwnProperty("cache_images"))
                    if (typeof message.cache_images !== "boolean")
                        return "cache_images: boolean expected";
                if (message.root_folder != null && message.hasOwnProperty("root_folder"))
                    if (!$util.isString(message.root_folder))
                        return "root_folder: string expected";
                return null;
            };
    
            WindowDataParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.WindowDataParameter)
                    return object;
                var message = new $root.caffe.WindowDataParameter();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.scale != null)
                    message.scale = Number(object.scale);
                if (object.mean_file != null)
                    message.mean_file = String(object.mean_file);
                if (object.batch_size != null)
                    message.batch_size = object.batch_size >>> 0;
                if (object.crop_size != null)
                    message.crop_size = object.crop_size >>> 0;
                if (object.mirror != null)
                    message.mirror = Boolean(object.mirror);
                if (object.fg_threshold != null)
                    message.fg_threshold = Number(object.fg_threshold);
                if (object.bg_threshold != null)
                    message.bg_threshold = Number(object.bg_threshold);
                if (object.fg_fraction != null)
                    message.fg_fraction = Number(object.fg_fraction);
                if (object.context_pad != null)
                    message.context_pad = object.context_pad >>> 0;
                if (object.crop_mode != null)
                    message.crop_mode = String(object.crop_mode);
                if (object.cache_images != null)
                    message.cache_images = Boolean(object.cache_images);
                if (object.root_folder != null)
                    message.root_folder = String(object.root_folder);
                return message;
            };
    
            WindowDataParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.source = "";
                    object.scale = 1;
                    object.mean_file = "";
                    object.batch_size = 0;
                    object.crop_size = 0;
                    object.mirror = false;
                    object.fg_threshold = 0.5;
                    object.bg_threshold = 0.5;
                    object.fg_fraction = 0.25;
                    object.context_pad = 0;
                    object.crop_mode = "warp";
                    object.cache_images = false;
                    object.root_folder = "";
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                if (message.mean_file != null && message.hasOwnProperty("mean_file"))
                    object.mean_file = message.mean_file;
                if (message.batch_size != null && message.hasOwnProperty("batch_size"))
                    object.batch_size = message.batch_size;
                if (message.crop_size != null && message.hasOwnProperty("crop_size"))
                    object.crop_size = message.crop_size;
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    object.mirror = message.mirror;
                if (message.fg_threshold != null && message.hasOwnProperty("fg_threshold"))
                    object.fg_threshold = options.json && !isFinite(message.fg_threshold) ? String(message.fg_threshold) : message.fg_threshold;
                if (message.bg_threshold != null && message.hasOwnProperty("bg_threshold"))
                    object.bg_threshold = options.json && !isFinite(message.bg_threshold) ? String(message.bg_threshold) : message.bg_threshold;
                if (message.fg_fraction != null && message.hasOwnProperty("fg_fraction"))
                    object.fg_fraction = options.json && !isFinite(message.fg_fraction) ? String(message.fg_fraction) : message.fg_fraction;
                if (message.context_pad != null && message.hasOwnProperty("context_pad"))
                    object.context_pad = message.context_pad;
                if (message.crop_mode != null && message.hasOwnProperty("crop_mode"))
                    object.crop_mode = message.crop_mode;
                if (message.cache_images != null && message.hasOwnProperty("cache_images"))
                    object.cache_images = message.cache_images;
                if (message.root_folder != null && message.hasOwnProperty("root_folder"))
                    object.root_folder = message.root_folder;
                return object;
            };
    
            WindowDataParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WindowDataParameter;
        })();
    
        caffe.SPPParameter = (function() {
    
            function SPPParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SPPParameter.prototype.pyramid_height = 0;
            SPPParameter.prototype.pool = 0;
            SPPParameter.prototype.engine = 0;
    
            SPPParameter.create = function create(properties) {
                return new SPPParameter(properties);
            };
    
            SPPParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SPPParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pyramid_height = reader.uint32();
                        break;
                    case 2:
                        message.pool = reader.int32();
                        break;
                    case 6:
                        message.engine = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SPPParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SPPParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "pyramid_height":
                        message.pyramid_height = reader.uint32();
                        break;
                    case "pool":
                        message.pool = reader.enum($root.caffe.SPPParameter.PoolMethod);
                        break;
                    case "engine":
                        message.engine = reader.enum($root.caffe.SPPParameter.Engine);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SPPParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pyramid_height != null && message.hasOwnProperty("pyramid_height"))
                    if (!$util.isInteger(message.pyramid_height))
                        return "pyramid_height: integer expected";
                if (message.pool != null && message.hasOwnProperty("pool"))
                    switch (message.pool) {
                    default:
                        return "pool: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };
    
            SPPParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SPPParameter)
                    return object;
                var message = new $root.caffe.SPPParameter();
                if (object.pyramid_height != null)
                    message.pyramid_height = object.pyramid_height >>> 0;
                switch (object.pool) {
                case "MAX":
                case 0:
                    message.pool = 0;
                    break;
                case "AVE":
                case 1:
                    message.pool = 1;
                    break;
                case "STOCHASTIC":
                case 2:
                    message.pool = 2;
                    break;
                }
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                return message;
            };
    
            SPPParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.pyramid_height = 0;
                    object.pool = options.enums === String ? "MAX" : 0;
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                }
                if (message.pyramid_height != null && message.hasOwnProperty("pyramid_height"))
                    object.pyramid_height = message.pyramid_height;
                if (message.pool != null && message.hasOwnProperty("pool"))
                    object.pool = options.enums === String ? $root.caffe.SPPParameter.PoolMethod[message.pool] : message.pool;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.SPPParameter.Engine[message.engine] : message.engine;
                return object;
            };
    
            SPPParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            SPPParameter.PoolMethod = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "MAX"] = 0;
                values[valuesById[1] = "AVE"] = 1;
                values[valuesById[2] = "STOCHASTIC"] = 2;
                return values;
            })();
    
            SPPParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            return SPPParameter;
        })();
    
        caffe.V1LayerParameter = (function() {
    
            function V1LayerParameter(properties) {
                this.bottom = [];
                this.top = [];
                this.include = [];
                this.exclude = [];
                this.blobs = [];
                this.param = [];
                this.blob_share_mode = [];
                this.blobs_lr = [];
                this.weight_decay = [];
                this.loss_weight = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            V1LayerParameter.prototype.bottom = $util.emptyArray;
            V1LayerParameter.prototype.top = $util.emptyArray;
            V1LayerParameter.prototype.name = "";
            V1LayerParameter.prototype.include = $util.emptyArray;
            V1LayerParameter.prototype.exclude = $util.emptyArray;
            V1LayerParameter.prototype.type = 0;
            V1LayerParameter.prototype.blobs = $util.emptyArray;
            V1LayerParameter.prototype.param = $util.emptyArray;
            V1LayerParameter.prototype.blob_share_mode = $util.emptyArray;
            V1LayerParameter.prototype.blobs_lr = $util.emptyArray;
            V1LayerParameter.prototype.weight_decay = $util.emptyArray;
            V1LayerParameter.prototype.loss_weight = $util.emptyArray;
            V1LayerParameter.prototype.accuracy_param = null;
            V1LayerParameter.prototype.argmax_param = null;
            V1LayerParameter.prototype.concat_param = null;
            V1LayerParameter.prototype.contrastive_loss_param = null;
            V1LayerParameter.prototype.convolution_param = null;
            V1LayerParameter.prototype.data_param = null;
            V1LayerParameter.prototype.dropout_param = null;
            V1LayerParameter.prototype.dummy_data_param = null;
            V1LayerParameter.prototype.eltwise_param = null;
            V1LayerParameter.prototype.exp_param = null;
            V1LayerParameter.prototype.hdf5_data_param = null;
            V1LayerParameter.prototype.hdf5_output_param = null;
            V1LayerParameter.prototype.hinge_loss_param = null;
            V1LayerParameter.prototype.image_data_param = null;
            V1LayerParameter.prototype.infogain_loss_param = null;
            V1LayerParameter.prototype.inner_product_param = null;
            V1LayerParameter.prototype.lrn_param = null;
            V1LayerParameter.prototype.memory_data_param = null;
            V1LayerParameter.prototype.mvn_param = null;
            V1LayerParameter.prototype.pooling_param = null;
            V1LayerParameter.prototype.power_param = null;
            V1LayerParameter.prototype.relu_param = null;
            V1LayerParameter.prototype.sigmoid_param = null;
            V1LayerParameter.prototype.softmax_param = null;
            V1LayerParameter.prototype.slice_param = null;
            V1LayerParameter.prototype.tanh_param = null;
            V1LayerParameter.prototype.threshold_param = null;
            V1LayerParameter.prototype.window_data_param = null;
            V1LayerParameter.prototype.transform_param = null;
            V1LayerParameter.prototype.loss_param = null;
            V1LayerParameter.prototype.layer = null;
    
            V1LayerParameter.create = function create(properties) {
                return new V1LayerParameter(properties);
            };
    
            V1LayerParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.V1LayerParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.bottom && message.bottom.length))
                            message.bottom = [];
                        message.bottom.push(reader.string());
                        break;
                    case 3:
                        if (!(message.top && message.top.length))
                            message.top = [];
                        message.top.push(reader.string());
                        break;
                    case 4:
                        message.name = reader.string();
                        break;
                    case 32:
                        if (!(message.include && message.include.length))
                            message.include = [];
                        message.include.push($root.caffe.NetStateRule.decode(reader, reader.uint32()));
                        break;
                    case 33:
                        if (!(message.exclude && message.exclude.length))
                            message.exclude = [];
                        message.exclude.push($root.caffe.NetStateRule.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        if (!(message.blobs && message.blobs.length))
                            message.blobs = [];
                        message.blobs.push($root.caffe.BlobProto.decode(reader, reader.uint32()));
                        break;
                    case 1001:
                        if (!(message.param && message.param.length))
                            message.param = [];
                        message.param.push(reader.string());
                        break;
                    case 1002:
                        if (!(message.blob_share_mode && message.blob_share_mode.length))
                            message.blob_share_mode = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.blob_share_mode.push(reader.int32());
                        } else
                            message.blob_share_mode.push(reader.int32());
                        break;
                    case 7:
                        if (!(message.blobs_lr && message.blobs_lr.length))
                            message.blobs_lr = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.blobs_lr.push(reader.float());
                        } else
                            message.blobs_lr.push(reader.float());
                        break;
                    case 8:
                        if (!(message.weight_decay && message.weight_decay.length))
                            message.weight_decay = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weight_decay.push(reader.float());
                        } else
                            message.weight_decay.push(reader.float());
                        break;
                    case 35:
                        if (!(message.loss_weight && message.loss_weight.length))
                            message.loss_weight = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.loss_weight.push(reader.float());
                        } else
                            message.loss_weight.push(reader.float());
                        break;
                    case 27:
                        message.accuracy_param = $root.caffe.AccuracyParameter.decode(reader, reader.uint32());
                        break;
                    case 23:
                        message.argmax_param = $root.caffe.ArgMaxParameter.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.concat_param = $root.caffe.ConcatParameter.decode(reader, reader.uint32());
                        break;
                    case 40:
                        message.contrastive_loss_param = $root.caffe.ContrastiveLossParameter.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.convolution_param = $root.caffe.ConvolutionParameter.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.data_param = $root.caffe.DataParameter.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.dropout_param = $root.caffe.DropoutParameter.decode(reader, reader.uint32());
                        break;
                    case 26:
                        message.dummy_data_param = $root.caffe.DummyDataParameter.decode(reader, reader.uint32());
                        break;
                    case 24:
                        message.eltwise_param = $root.caffe.EltwiseParameter.decode(reader, reader.uint32());
                        break;
                    case 41:
                        message.exp_param = $root.caffe.ExpParameter.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.hdf5_data_param = $root.caffe.HDF5DataParameter.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.hdf5_output_param = $root.caffe.HDF5OutputParameter.decode(reader, reader.uint32());
                        break;
                    case 29:
                        message.hinge_loss_param = $root.caffe.HingeLossParameter.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.image_data_param = $root.caffe.ImageDataParameter.decode(reader, reader.uint32());
                        break;
                    case 16:
                        message.infogain_loss_param = $root.caffe.InfogainLossParameter.decode(reader, reader.uint32());
                        break;
                    case 17:
                        message.inner_product_param = $root.caffe.InnerProductParameter.decode(reader, reader.uint32());
                        break;
                    case 18:
                        message.lrn_param = $root.caffe.LRNParameter.decode(reader, reader.uint32());
                        break;
                    case 22:
                        message.memory_data_param = $root.caffe.MemoryDataParameter.decode(reader, reader.uint32());
                        break;
                    case 34:
                        message.mvn_param = $root.caffe.MVNParameter.decode(reader, reader.uint32());
                        break;
                    case 19:
                        message.pooling_param = $root.caffe.PoolingParameter.decode(reader, reader.uint32());
                        break;
                    case 21:
                        message.power_param = $root.caffe.PowerParameter.decode(reader, reader.uint32());
                        break;
                    case 30:
                        message.relu_param = $root.caffe.ReLUParameter.decode(reader, reader.uint32());
                        break;
                    case 38:
                        message.sigmoid_param = $root.caffe.SigmoidParameter.decode(reader, reader.uint32());
                        break;
                    case 39:
                        message.softmax_param = $root.caffe.SoftmaxParameter.decode(reader, reader.uint32());
                        break;
                    case 31:
                        message.slice_param = $root.caffe.SliceParameter.decode(reader, reader.uint32());
                        break;
                    case 37:
                        message.tanh_param = $root.caffe.TanHParameter.decode(reader, reader.uint32());
                        break;
                    case 25:
                        message.threshold_param = $root.caffe.ThresholdParameter.decode(reader, reader.uint32());
                        break;
                    case 20:
                        message.window_data_param = $root.caffe.WindowDataParameter.decode(reader, reader.uint32());
                        break;
                    case 36:
                        message.transform_param = $root.caffe.TransformationParameter.decode(reader, reader.uint32());
                        break;
                    case 42:
                        message.loss_param = $root.caffe.LossParameter.decode(reader, reader.uint32());
                        break;
                    case 1:
                        message.layer = $root.caffe.V0LayerParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            V1LayerParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.V1LayerParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "bottom":
                        if (!(message.bottom && message.bottom.length))
                            message.bottom = [];
                        message.bottom.push(reader.string());
                        break;
                    case "top":
                        if (!(message.top && message.top.length))
                            message.top = [];
                        message.top.push(reader.string());
                        break;
                    case "name":
                        message.name = reader.string();
                        break;
                    case "include":
                        if (!(message.include && message.include.length))
                            message.include = [];
                        message.include.push($root.caffe.NetStateRule.decodeText(reader, true));
                        break;
                    case "exclude":
                        if (!(message.exclude && message.exclude.length))
                            message.exclude = [];
                        message.exclude.push($root.caffe.NetStateRule.decodeText(reader, true));
                        break;
                    case "type":
                        message.type = reader.enum($root.caffe.V1LayerParameter.LayerType);
                        break;
                    case "blobs":
                        if (!(message.blobs && message.blobs.length))
                            message.blobs = [];
                        message.blobs.push($root.caffe.BlobProto.decodeText(reader, true));
                        break;
                    case "param":
                        if (!(message.param && message.param.length))
                            message.param = [];
                        message.param.push(reader.string());
                        break;
                    case "blob_share_mode":
                        if (!(message.blob_share_mode && message.blob_share_mode.length))
                            message.blob_share_mode = [];
                        message.blob_share_mode.push(reader.enum($root.caffe.V1LayerParameter.DimCheckMode));
                        break;
                    case "blobs_lr":
                        if (!(message.blobs_lr && message.blobs_lr.length))
                            message.blobs_lr = [];
                        message.blobs_lr.push(reader.float());
                        break;
                    case "weight_decay":
                        if (!(message.weight_decay && message.weight_decay.length))
                            message.weight_decay = [];
                        message.weight_decay.push(reader.float());
                        break;
                    case "loss_weight":
                        if (!(message.loss_weight && message.loss_weight.length))
                            message.loss_weight = [];
                        message.loss_weight.push(reader.float());
                        break;
                    case "accuracy_param":
                        message.accuracy_param = $root.caffe.AccuracyParameter.decodeText(reader, true);
                        break;
                    case "argmax_param":
                        message.argmax_param = $root.caffe.ArgMaxParameter.decodeText(reader, true);
                        break;
                    case "concat_param":
                        message.concat_param = $root.caffe.ConcatParameter.decodeText(reader, true);
                        break;
                    case "contrastive_loss_param":
                        message.contrastive_loss_param = $root.caffe.ContrastiveLossParameter.decodeText(reader, true);
                        break;
                    case "convolution_param":
                        message.convolution_param = $root.caffe.ConvolutionParameter.decodeText(reader, true);
                        break;
                    case "data_param":
                        message.data_param = $root.caffe.DataParameter.decodeText(reader, true);
                        break;
                    case "dropout_param":
                        message.dropout_param = $root.caffe.DropoutParameter.decodeText(reader, true);
                        break;
                    case "dummy_data_param":
                        message.dummy_data_param = $root.caffe.DummyDataParameter.decodeText(reader, true);
                        break;
                    case "eltwise_param":
                        message.eltwise_param = $root.caffe.EltwiseParameter.decodeText(reader, true);
                        break;
                    case "exp_param":
                        message.exp_param = $root.caffe.ExpParameter.decodeText(reader, true);
                        break;
                    case "hdf5_data_param":
                        message.hdf5_data_param = $root.caffe.HDF5DataParameter.decodeText(reader, true);
                        break;
                    case "hdf5_output_param":
                        message.hdf5_output_param = $root.caffe.HDF5OutputParameter.decodeText(reader, true);
                        break;
                    case "hinge_loss_param":
                        message.hinge_loss_param = $root.caffe.HingeLossParameter.decodeText(reader, true);
                        break;
                    case "image_data_param":
                        message.image_data_param = $root.caffe.ImageDataParameter.decodeText(reader, true);
                        break;
                    case "infogain_loss_param":
                        message.infogain_loss_param = $root.caffe.InfogainLossParameter.decodeText(reader, true);
                        break;
                    case "inner_product_param":
                        message.inner_product_param = $root.caffe.InnerProductParameter.decodeText(reader, true);
                        break;
                    case "lrn_param":
                        message.lrn_param = $root.caffe.LRNParameter.decodeText(reader, true);
                        break;
                    case "memory_data_param":
                        message.memory_data_param = $root.caffe.MemoryDataParameter.decodeText(reader, true);
                        break;
                    case "mvn_param":
                        message.mvn_param = $root.caffe.MVNParameter.decodeText(reader, true);
                        break;
                    case "pooling_param":
                        message.pooling_param = $root.caffe.PoolingParameter.decodeText(reader, true);
                        break;
                    case "power_param":
                        message.power_param = $root.caffe.PowerParameter.decodeText(reader, true);
                        break;
                    case "relu_param":
                        message.relu_param = $root.caffe.ReLUParameter.decodeText(reader, true);
                        break;
                    case "sigmoid_param":
                        message.sigmoid_param = $root.caffe.SigmoidParameter.decodeText(reader, true);
                        break;
                    case "softmax_param":
                        message.softmax_param = $root.caffe.SoftmaxParameter.decodeText(reader, true);
                        break;
                    case "slice_param":
                        message.slice_param = $root.caffe.SliceParameter.decodeText(reader, true);
                        break;
                    case "tanh_param":
                        message.tanh_param = $root.caffe.TanHParameter.decodeText(reader, true);
                        break;
                    case "threshold_param":
                        message.threshold_param = $root.caffe.ThresholdParameter.decodeText(reader, true);
                        break;
                    case "window_data_param":
                        message.window_data_param = $root.caffe.WindowDataParameter.decodeText(reader, true);
                        break;
                    case "transform_param":
                        message.transform_param = $root.caffe.TransformationParameter.decodeText(reader, true);
                        break;
                    case "loss_param":
                        message.loss_param = $root.caffe.LossParameter.decodeText(reader, true);
                        break;
                    case "layer":
                        message.layer = $root.caffe.V0LayerParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            V1LayerParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bottom != null && message.hasOwnProperty("bottom")) {
                    if (!Array.isArray(message.bottom))
                        return "bottom: array expected";
                    for (var i = 0; i < message.bottom.length; ++i)
                        if (!$util.isString(message.bottom[i]))
                            return "bottom: string[] expected";
                }
                if (message.top != null && message.hasOwnProperty("top")) {
                    if (!Array.isArray(message.top))
                        return "top: array expected";
                    for (var i = 0; i < message.top.length; ++i)
                        if (!$util.isString(message.top[i]))
                            return "top: string[] expected";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.include != null && message.hasOwnProperty("include")) {
                    if (!Array.isArray(message.include))
                        return "include: array expected";
                    for (var i = 0; i < message.include.length; ++i) {
                        var error = $root.caffe.NetStateRule.verify(message.include[i]);
                        if (error)
                            return "include." + error;
                    }
                }
                if (message.exclude != null && message.hasOwnProperty("exclude")) {
                    if (!Array.isArray(message.exclude))
                        return "exclude: array expected";
                    for (var i = 0; i < message.exclude.length; ++i) {
                        var error = $root.caffe.NetStateRule.verify(message.exclude[i]);
                        if (error)
                            return "exclude." + error;
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 35:
                    case 1:
                    case 30:
                    case 2:
                    case 3:
                    case 37:
                    case 4:
                    case 40:
                    case 5:
                    case 39:
                    case 6:
                    case 32:
                    case 7:
                    case 25:
                    case 38:
                    case 8:
                    case 9:
                    case 10:
                    case 28:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 29:
                    case 16:
                    case 34:
                    case 17:
                    case 26:
                    case 18:
                    case 19:
                    case 27:
                    case 36:
                    case 20:
                    case 21:
                    case 22:
                    case 33:
                    case 23:
                    case 24:
                    case 31:
                    case 139:
                        break;
                    }
                if (message.blobs != null && message.hasOwnProperty("blobs")) {
                    if (!Array.isArray(message.blobs))
                        return "blobs: array expected";
                    for (var i = 0; i < message.blobs.length; ++i) {
                        var error = $root.caffe.BlobProto.verify(message.blobs[i]);
                        if (error)
                            return "blobs." + error;
                    }
                }
                if (message.param != null && message.hasOwnProperty("param")) {
                    if (!Array.isArray(message.param))
                        return "param: array expected";
                    for (var i = 0; i < message.param.length; ++i)
                        if (!$util.isString(message.param[i]))
                            return "param: string[] expected";
                }
                if (message.blob_share_mode != null && message.hasOwnProperty("blob_share_mode")) {
                    if (!Array.isArray(message.blob_share_mode))
                        return "blob_share_mode: array expected";
                    for (var i = 0; i < message.blob_share_mode.length; ++i)
                        switch (message.blob_share_mode[i]) {
                        default:
                            return "blob_share_mode: enum value[] expected";
                        case 0:
                        case 1:
                            break;
                        }
                }
                if (message.blobs_lr != null && message.hasOwnProperty("blobs_lr")) {
                    if (!Array.isArray(message.blobs_lr))
                        return "blobs_lr: array expected";
                    for (var i = 0; i < message.blobs_lr.length; ++i)
                        if (typeof message.blobs_lr[i] !== "number")
                            return "blobs_lr: number[] expected";
                }
                if (message.weight_decay != null && message.hasOwnProperty("weight_decay")) {
                    if (!Array.isArray(message.weight_decay))
                        return "weight_decay: array expected";
                    for (var i = 0; i < message.weight_decay.length; ++i)
                        if (typeof message.weight_decay[i] !== "number")
                            return "weight_decay: number[] expected";
                }
                if (message.loss_weight != null && message.hasOwnProperty("loss_weight")) {
                    if (!Array.isArray(message.loss_weight))
                        return "loss_weight: array expected";
                    for (var i = 0; i < message.loss_weight.length; ++i)
                        if (typeof message.loss_weight[i] !== "number")
                            return "loss_weight: number[] expected";
                }
                if (message.accuracy_param != null && message.hasOwnProperty("accuracy_param")) {
                    var error = $root.caffe.AccuracyParameter.verify(message.accuracy_param);
                    if (error)
                        return "accuracy_param." + error;
                }
                if (message.argmax_param != null && message.hasOwnProperty("argmax_param")) {
                    var error = $root.caffe.ArgMaxParameter.verify(message.argmax_param);
                    if (error)
                        return "argmax_param." + error;
                }
                if (message.concat_param != null && message.hasOwnProperty("concat_param")) {
                    var error = $root.caffe.ConcatParameter.verify(message.concat_param);
                    if (error)
                        return "concat_param." + error;
                }
                if (message.contrastive_loss_param != null && message.hasOwnProperty("contrastive_loss_param")) {
                    var error = $root.caffe.ContrastiveLossParameter.verify(message.contrastive_loss_param);
                    if (error)
                        return "contrastive_loss_param." + error;
                }
                if (message.convolution_param != null && message.hasOwnProperty("convolution_param")) {
                    var error = $root.caffe.ConvolutionParameter.verify(message.convolution_param);
                    if (error)
                        return "convolution_param." + error;
                }
                if (message.data_param != null && message.hasOwnProperty("data_param")) {
                    var error = $root.caffe.DataParameter.verify(message.data_param);
                    if (error)
                        return "data_param." + error;
                }
                if (message.dropout_param != null && message.hasOwnProperty("dropout_param")) {
                    var error = $root.caffe.DropoutParameter.verify(message.dropout_param);
                    if (error)
                        return "dropout_param." + error;
                }
                if (message.dummy_data_param != null && message.hasOwnProperty("dummy_data_param")) {
                    var error = $root.caffe.DummyDataParameter.verify(message.dummy_data_param);
                    if (error)
                        return "dummy_data_param." + error;
                }
                if (message.eltwise_param != null && message.hasOwnProperty("eltwise_param")) {
                    var error = $root.caffe.EltwiseParameter.verify(message.eltwise_param);
                    if (error)
                        return "eltwise_param." + error;
                }
                if (message.exp_param != null && message.hasOwnProperty("exp_param")) {
                    var error = $root.caffe.ExpParameter.verify(message.exp_param);
                    if (error)
                        return "exp_param." + error;
                }
                if (message.hdf5_data_param != null && message.hasOwnProperty("hdf5_data_param")) {
                    var error = $root.caffe.HDF5DataParameter.verify(message.hdf5_data_param);
                    if (error)
                        return "hdf5_data_param." + error;
                }
                if (message.hdf5_output_param != null && message.hasOwnProperty("hdf5_output_param")) {
                    var error = $root.caffe.HDF5OutputParameter.verify(message.hdf5_output_param);
                    if (error)
                        return "hdf5_output_param." + error;
                }
                if (message.hinge_loss_param != null && message.hasOwnProperty("hinge_loss_param")) {
                    var error = $root.caffe.HingeLossParameter.verify(message.hinge_loss_param);
                    if (error)
                        return "hinge_loss_param." + error;
                }
                if (message.image_data_param != null && message.hasOwnProperty("image_data_param")) {
                    var error = $root.caffe.ImageDataParameter.verify(message.image_data_param);
                    if (error)
                        return "image_data_param." + error;
                }
                if (message.infogain_loss_param != null && message.hasOwnProperty("infogain_loss_param")) {
                    var error = $root.caffe.InfogainLossParameter.verify(message.infogain_loss_param);
                    if (error)
                        return "infogain_loss_param." + error;
                }
                if (message.inner_product_param != null && message.hasOwnProperty("inner_product_param")) {
                    var error = $root.caffe.InnerProductParameter.verify(message.inner_product_param);
                    if (error)
                        return "inner_product_param." + error;
                }
                if (message.lrn_param != null && message.hasOwnProperty("lrn_param")) {
                    var error = $root.caffe.LRNParameter.verify(message.lrn_param);
                    if (error)
                        return "lrn_param." + error;
                }
                if (message.memory_data_param != null && message.hasOwnProperty("memory_data_param")) {
                    var error = $root.caffe.MemoryDataParameter.verify(message.memory_data_param);
                    if (error)
                        return "memory_data_param." + error;
                }
                if (message.mvn_param != null && message.hasOwnProperty("mvn_param")) {
                    var error = $root.caffe.MVNParameter.verify(message.mvn_param);
                    if (error)
                        return "mvn_param." + error;
                }
                if (message.pooling_param != null && message.hasOwnProperty("pooling_param")) {
                    var error = $root.caffe.PoolingParameter.verify(message.pooling_param);
                    if (error)
                        return "pooling_param." + error;
                }
                if (message.power_param != null && message.hasOwnProperty("power_param")) {
                    var error = $root.caffe.PowerParameter.verify(message.power_param);
                    if (error)
                        return "power_param." + error;
                }
                if (message.relu_param != null && message.hasOwnProperty("relu_param")) {
                    var error = $root.caffe.ReLUParameter.verify(message.relu_param);
                    if (error)
                        return "relu_param." + error;
                }
                if (message.sigmoid_param != null && message.hasOwnProperty("sigmoid_param")) {
                    var error = $root.caffe.SigmoidParameter.verify(message.sigmoid_param);
                    if (error)
                        return "sigmoid_param." + error;
                }
                if (message.softmax_param != null && message.hasOwnProperty("softmax_param")) {
                    var error = $root.caffe.SoftmaxParameter.verify(message.softmax_param);
                    if (error)
                        return "softmax_param." + error;
                }
                if (message.slice_param != null && message.hasOwnProperty("slice_param")) {
                    var error = $root.caffe.SliceParameter.verify(message.slice_param);
                    if (error)
                        return "slice_param." + error;
                }
                if (message.tanh_param != null && message.hasOwnProperty("tanh_param")) {
                    var error = $root.caffe.TanHParameter.verify(message.tanh_param);
                    if (error)
                        return "tanh_param." + error;
                }
                if (message.threshold_param != null && message.hasOwnProperty("threshold_param")) {
                    var error = $root.caffe.ThresholdParameter.verify(message.threshold_param);
                    if (error)
                        return "threshold_param." + error;
                }
                if (message.window_data_param != null && message.hasOwnProperty("window_data_param")) {
                    var error = $root.caffe.WindowDataParameter.verify(message.window_data_param);
                    if (error)
                        return "window_data_param." + error;
                }
                if (message.transform_param != null && message.hasOwnProperty("transform_param")) {
                    var error = $root.caffe.TransformationParameter.verify(message.transform_param);
                    if (error)
                        return "transform_param." + error;
                }
                if (message.loss_param != null && message.hasOwnProperty("loss_param")) {
                    var error = $root.caffe.LossParameter.verify(message.loss_param);
                    if (error)
                        return "loss_param." + error;
                }
                if (message.layer != null && message.hasOwnProperty("layer")) {
                    var error = $root.caffe.V0LayerParameter.verify(message.layer);
                    if (error)
                        return "layer." + error;
                }
                return null;
            };
    
            V1LayerParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.V1LayerParameter)
                    return object;
                var message = new $root.caffe.V1LayerParameter();
                if (object.bottom) {
                    if (!Array.isArray(object.bottom))
                        throw TypeError(".caffe.V1LayerParameter.bottom: array expected");
                    message.bottom = [];
                    for (var i = 0; i < object.bottom.length; ++i)
                        message.bottom[i] = String(object.bottom[i]);
                }
                if (object.top) {
                    if (!Array.isArray(object.top))
                        throw TypeError(".caffe.V1LayerParameter.top: array expected");
                    message.top = [];
                    for (var i = 0; i < object.top.length; ++i)
                        message.top[i] = String(object.top[i]);
                }
                if (object.name != null)
                    message.name = String(object.name);
                if (object.include) {
                    if (!Array.isArray(object.include))
                        throw TypeError(".caffe.V1LayerParameter.include: array expected");
                    message.include = [];
                    for (var i = 0; i < object.include.length; ++i) {
                        if (typeof object.include[i] !== "object")
                            throw TypeError(".caffe.V1LayerParameter.include: object expected");
                        message.include[i] = $root.caffe.NetStateRule.fromObject(object.include[i]);
                    }
                }
                if (object.exclude) {
                    if (!Array.isArray(object.exclude))
                        throw TypeError(".caffe.V1LayerParameter.exclude: array expected");
                    message.exclude = [];
                    for (var i = 0; i < object.exclude.length; ++i) {
                        if (typeof object.exclude[i] !== "object")
                            throw TypeError(".caffe.V1LayerParameter.exclude: object expected");
                        message.exclude[i] = $root.caffe.NetStateRule.fromObject(object.exclude[i]);
                    }
                }
                switch (object.type) {
                case "NONE":
                case 0:
                    message.type = 0;
                    break;
                case "ABSVAL":
                case 35:
                    message.type = 35;
                    break;
                case "ACCURACY":
                case 1:
                    message.type = 1;
                    break;
                case "ARGMAX":
                case 30:
                    message.type = 30;
                    break;
                case "BNLL":
                case 2:
                    message.type = 2;
                    break;
                case "CONCAT":
                case 3:
                    message.type = 3;
                    break;
                case "CONTRASTIVE_LOSS":
                case 37:
                    message.type = 37;
                    break;
                case "CONVOLUTION":
                case 4:
                    message.type = 4;
                    break;
                case "CROP":
                case 40:
                    message.type = 40;
                    break;
                case "DATA":
                case 5:
                    message.type = 5;
                    break;
                case "DECONVOLUTION":
                case 39:
                    message.type = 39;
                    break;
                case "DROPOUT":
                case 6:
                    message.type = 6;
                    break;
                case "DUMMY_DATA":
                case 32:
                    message.type = 32;
                    break;
                case "EUCLIDEAN_LOSS":
                case 7:
                    message.type = 7;
                    break;
                case "ELTWISE":
                case 25:
                    message.type = 25;
                    break;
                case "EXP":
                case 38:
                    message.type = 38;
                    break;
                case "FLATTEN":
                case 8:
                    message.type = 8;
                    break;
                case "HDF5_DATA":
                case 9:
                    message.type = 9;
                    break;
                case "HDF5_OUTPUT":
                case 10:
                    message.type = 10;
                    break;
                case "HINGE_LOSS":
                case 28:
                    message.type = 28;
                    break;
                case "IM2COL":
                case 11:
                    message.type = 11;
                    break;
                case "IMAGE_DATA":
                case 12:
                    message.type = 12;
                    break;
                case "INFOGAIN_LOSS":
                case 13:
                    message.type = 13;
                    break;
                case "INNER_PRODUCT":
                case 14:
                    message.type = 14;
                    break;
                case "LRN":
                case 15:
                    message.type = 15;
                    break;
                case "MEMORY_DATA":
                case 29:
                    message.type = 29;
                    break;
                case "MULTINOMIAL_LOGISTIC_LOSS":
                case 16:
                    message.type = 16;
                    break;
                case "MVN":
                case 34:
                    message.type = 34;
                    break;
                case "POOLING":
                case 17:
                    message.type = 17;
                    break;
                case "POWER":
                case 26:
                    message.type = 26;
                    break;
                case "RELU":
                case 18:
                    message.type = 18;
                    break;
                case "SIGMOID":
                case 19:
                    message.type = 19;
                    break;
                case "SIGMOID_CROSS_ENTROPY_LOSS":
                case 27:
                    message.type = 27;
                    break;
                case "SILENCE":
                case 36:
                    message.type = 36;
                    break;
                case "SOFTMAX":
                case 20:
                    message.type = 20;
                    break;
                case "SOFTMAX_LOSS":
                case 21:
                    message.type = 21;
                    break;
                case "SPLIT":
                case 22:
                    message.type = 22;
                    break;
                case "SLICE":
                case 33:
                    message.type = 33;
                    break;
                case "TANH":
                case 23:
                    message.type = 23;
                    break;
                case "WINDOW_DATA":
                case 24:
                    message.type = 24;
                    break;
                case "THRESHOLD":
                case 31:
                    message.type = 31;
                    break;
                case "IMAGE_SEG_DATA":
                case 139:
                    message.type = 139;
                    break;
                }
                if (object.blobs) {
                    if (!Array.isArray(object.blobs))
                        throw TypeError(".caffe.V1LayerParameter.blobs: array expected");
                    message.blobs = [];
                    for (var i = 0; i < object.blobs.length; ++i) {
                        if (typeof object.blobs[i] !== "object")
                            throw TypeError(".caffe.V1LayerParameter.blobs: object expected");
                        message.blobs[i] = $root.caffe.BlobProto.fromObject(object.blobs[i]);
                    }
                }
                if (object.param) {
                    if (!Array.isArray(object.param))
                        throw TypeError(".caffe.V1LayerParameter.param: array expected");
                    message.param = [];
                    for (var i = 0; i < object.param.length; ++i)
                        message.param[i] = String(object.param[i]);
                }
                if (object.blob_share_mode) {
                    if (!Array.isArray(object.blob_share_mode))
                        throw TypeError(".caffe.V1LayerParameter.blob_share_mode: array expected");
                    message.blob_share_mode = [];
                    for (var i = 0; i < object.blob_share_mode.length; ++i)
                        switch (object.blob_share_mode[i]) {
                        default:
                        case "STRICT":
                        case 0:
                            message.blob_share_mode[i] = 0;
                            break;
                        case "PERMISSIVE":
                        case 1:
                            message.blob_share_mode[i] = 1;
                            break;
                        }
                }
                if (object.blobs_lr) {
                    if (!Array.isArray(object.blobs_lr))
                        throw TypeError(".caffe.V1LayerParameter.blobs_lr: array expected");
                    message.blobs_lr = [];
                    for (var i = 0; i < object.blobs_lr.length; ++i)
                        message.blobs_lr[i] = Number(object.blobs_lr[i]);
                }
                if (object.weight_decay) {
                    if (!Array.isArray(object.weight_decay))
                        throw TypeError(".caffe.V1LayerParameter.weight_decay: array expected");
                    message.weight_decay = [];
                    for (var i = 0; i < object.weight_decay.length; ++i)
                        message.weight_decay[i] = Number(object.weight_decay[i]);
                }
                if (object.loss_weight) {
                    if (!Array.isArray(object.loss_weight))
                        throw TypeError(".caffe.V1LayerParameter.loss_weight: array expected");
                    message.loss_weight = [];
                    for (var i = 0; i < object.loss_weight.length; ++i)
                        message.loss_weight[i] = Number(object.loss_weight[i]);
                }
                if (object.accuracy_param != null) {
                    if (typeof object.accuracy_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.accuracy_param: object expected");
                    message.accuracy_param = $root.caffe.AccuracyParameter.fromObject(object.accuracy_param);
                }
                if (object.argmax_param != null) {
                    if (typeof object.argmax_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.argmax_param: object expected");
                    message.argmax_param = $root.caffe.ArgMaxParameter.fromObject(object.argmax_param);
                }
                if (object.concat_param != null) {
                    if (typeof object.concat_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.concat_param: object expected");
                    message.concat_param = $root.caffe.ConcatParameter.fromObject(object.concat_param);
                }
                if (object.contrastive_loss_param != null) {
                    if (typeof object.contrastive_loss_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.contrastive_loss_param: object expected");
                    message.contrastive_loss_param = $root.caffe.ContrastiveLossParameter.fromObject(object.contrastive_loss_param);
                }
                if (object.convolution_param != null) {
                    if (typeof object.convolution_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.convolution_param: object expected");
                    message.convolution_param = $root.caffe.ConvolutionParameter.fromObject(object.convolution_param);
                }
                if (object.data_param != null) {
                    if (typeof object.data_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.data_param: object expected");
                    message.data_param = $root.caffe.DataParameter.fromObject(object.data_param);
                }
                if (object.dropout_param != null) {
                    if (typeof object.dropout_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.dropout_param: object expected");
                    message.dropout_param = $root.caffe.DropoutParameter.fromObject(object.dropout_param);
                }
                if (object.dummy_data_param != null) {
                    if (typeof object.dummy_data_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.dummy_data_param: object expected");
                    message.dummy_data_param = $root.caffe.DummyDataParameter.fromObject(object.dummy_data_param);
                }
                if (object.eltwise_param != null) {
                    if (typeof object.eltwise_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.eltwise_param: object expected");
                    message.eltwise_param = $root.caffe.EltwiseParameter.fromObject(object.eltwise_param);
                }
                if (object.exp_param != null) {
                    if (typeof object.exp_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.exp_param: object expected");
                    message.exp_param = $root.caffe.ExpParameter.fromObject(object.exp_param);
                }
                if (object.hdf5_data_param != null) {
                    if (typeof object.hdf5_data_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.hdf5_data_param: object expected");
                    message.hdf5_data_param = $root.caffe.HDF5DataParameter.fromObject(object.hdf5_data_param);
                }
                if (object.hdf5_output_param != null) {
                    if (typeof object.hdf5_output_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.hdf5_output_param: object expected");
                    message.hdf5_output_param = $root.caffe.HDF5OutputParameter.fromObject(object.hdf5_output_param);
                }
                if (object.hinge_loss_param != null) {
                    if (typeof object.hinge_loss_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.hinge_loss_param: object expected");
                    message.hinge_loss_param = $root.caffe.HingeLossParameter.fromObject(object.hinge_loss_param);
                }
                if (object.image_data_param != null) {
                    if (typeof object.image_data_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.image_data_param: object expected");
                    message.image_data_param = $root.caffe.ImageDataParameter.fromObject(object.image_data_param);
                }
                if (object.infogain_loss_param != null) {
                    if (typeof object.infogain_loss_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.infogain_loss_param: object expected");
                    message.infogain_loss_param = $root.caffe.InfogainLossParameter.fromObject(object.infogain_loss_param);
                }
                if (object.inner_product_param != null) {
                    if (typeof object.inner_product_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.inner_product_param: object expected");
                    message.inner_product_param = $root.caffe.InnerProductParameter.fromObject(object.inner_product_param);
                }
                if (object.lrn_param != null) {
                    if (typeof object.lrn_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.lrn_param: object expected");
                    message.lrn_param = $root.caffe.LRNParameter.fromObject(object.lrn_param);
                }
                if (object.memory_data_param != null) {
                    if (typeof object.memory_data_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.memory_data_param: object expected");
                    message.memory_data_param = $root.caffe.MemoryDataParameter.fromObject(object.memory_data_param);
                }
                if (object.mvn_param != null) {
                    if (typeof object.mvn_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.mvn_param: object expected");
                    message.mvn_param = $root.caffe.MVNParameter.fromObject(object.mvn_param);
                }
                if (object.pooling_param != null) {
                    if (typeof object.pooling_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.pooling_param: object expected");
                    message.pooling_param = $root.caffe.PoolingParameter.fromObject(object.pooling_param);
                }
                if (object.power_param != null) {
                    if (typeof object.power_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.power_param: object expected");
                    message.power_param = $root.caffe.PowerParameter.fromObject(object.power_param);
                }
                if (object.relu_param != null) {
                    if (typeof object.relu_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.relu_param: object expected");
                    message.relu_param = $root.caffe.ReLUParameter.fromObject(object.relu_param);
                }
                if (object.sigmoid_param != null) {
                    if (typeof object.sigmoid_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.sigmoid_param: object expected");
                    message.sigmoid_param = $root.caffe.SigmoidParameter.fromObject(object.sigmoid_param);
                }
                if (object.softmax_param != null) {
                    if (typeof object.softmax_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.softmax_param: object expected");
                    message.softmax_param = $root.caffe.SoftmaxParameter.fromObject(object.softmax_param);
                }
                if (object.slice_param != null) {
                    if (typeof object.slice_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.slice_param: object expected");
                    message.slice_param = $root.caffe.SliceParameter.fromObject(object.slice_param);
                }
                if (object.tanh_param != null) {
                    if (typeof object.tanh_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.tanh_param: object expected");
                    message.tanh_param = $root.caffe.TanHParameter.fromObject(object.tanh_param);
                }
                if (object.threshold_param != null) {
                    if (typeof object.threshold_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.threshold_param: object expected");
                    message.threshold_param = $root.caffe.ThresholdParameter.fromObject(object.threshold_param);
                }
                if (object.window_data_param != null) {
                    if (typeof object.window_data_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.window_data_param: object expected");
                    message.window_data_param = $root.caffe.WindowDataParameter.fromObject(object.window_data_param);
                }
                if (object.transform_param != null) {
                    if (typeof object.transform_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.transform_param: object expected");
                    message.transform_param = $root.caffe.TransformationParameter.fromObject(object.transform_param);
                }
                if (object.loss_param != null) {
                    if (typeof object.loss_param !== "object")
                        throw TypeError(".caffe.V1LayerParameter.loss_param: object expected");
                    message.loss_param = $root.caffe.LossParameter.fromObject(object.loss_param);
                }
                if (object.layer != null) {
                    if (typeof object.layer !== "object")
                        throw TypeError(".caffe.V1LayerParameter.layer: object expected");
                    message.layer = $root.caffe.V0LayerParameter.fromObject(object.layer);
                }
                return message;
            };
    
            V1LayerParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.bottom = [];
                    object.top = [];
                    object.blobs = [];
                    object.blobs_lr = [];
                    object.weight_decay = [];
                    object.include = [];
                    object.exclude = [];
                    object.loss_weight = [];
                    object.param = [];
                    object.blob_share_mode = [];
                }
                if (options.defaults) {
                    object.layer = null;
                    object.name = "";
                    object.type = options.enums === String ? "NONE" : 0;
                    object.concat_param = null;
                    object.convolution_param = null;
                    object.data_param = null;
                    object.dropout_param = null;
                    object.hdf5_data_param = null;
                    object.hdf5_output_param = null;
                    object.image_data_param = null;
                    object.infogain_loss_param = null;
                    object.inner_product_param = null;
                    object.lrn_param = null;
                    object.pooling_param = null;
                    object.window_data_param = null;
                    object.power_param = null;
                    object.memory_data_param = null;
                    object.argmax_param = null;
                    object.eltwise_param = null;
                    object.threshold_param = null;
                    object.dummy_data_param = null;
                    object.accuracy_param = null;
                    object.hinge_loss_param = null;
                    object.relu_param = null;
                    object.slice_param = null;
                    object.mvn_param = null;
                    object.transform_param = null;
                    object.tanh_param = null;
                    object.sigmoid_param = null;
                    object.softmax_param = null;
                    object.contrastive_loss_param = null;
                    object.exp_param = null;
                    object.loss_param = null;
                }
                if (message.layer != null && message.hasOwnProperty("layer"))
                    object.layer = $root.caffe.V0LayerParameter.toObject(message.layer, options);
                if (message.bottom && message.bottom.length) {
                    object.bottom = [];
                    for (var j = 0; j < message.bottom.length; ++j)
                        object.bottom[j] = message.bottom[j];
                }
                if (message.top && message.top.length) {
                    object.top = [];
                    for (var j = 0; j < message.top.length; ++j)
                        object.top[j] = message.top[j];
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.caffe.V1LayerParameter.LayerType[message.type] : message.type;
                if (message.blobs && message.blobs.length) {
                    object.blobs = [];
                    for (var j = 0; j < message.blobs.length; ++j)
                        object.blobs[j] = $root.caffe.BlobProto.toObject(message.blobs[j], options);
                }
                if (message.blobs_lr && message.blobs_lr.length) {
                    object.blobs_lr = [];
                    for (var j = 0; j < message.blobs_lr.length; ++j)
                        object.blobs_lr[j] = options.json && !isFinite(message.blobs_lr[j]) ? String(message.blobs_lr[j]) : message.blobs_lr[j];
                }
                if (message.weight_decay && message.weight_decay.length) {
                    object.weight_decay = [];
                    for (var j = 0; j < message.weight_decay.length; ++j)
                        object.weight_decay[j] = options.json && !isFinite(message.weight_decay[j]) ? String(message.weight_decay[j]) : message.weight_decay[j];
                }
                if (message.concat_param != null && message.hasOwnProperty("concat_param"))
                    object.concat_param = $root.caffe.ConcatParameter.toObject(message.concat_param, options);
                if (message.convolution_param != null && message.hasOwnProperty("convolution_param"))
                    object.convolution_param = $root.caffe.ConvolutionParameter.toObject(message.convolution_param, options);
                if (message.data_param != null && message.hasOwnProperty("data_param"))
                    object.data_param = $root.caffe.DataParameter.toObject(message.data_param, options);
                if (message.dropout_param != null && message.hasOwnProperty("dropout_param"))
                    object.dropout_param = $root.caffe.DropoutParameter.toObject(message.dropout_param, options);
                if (message.hdf5_data_param != null && message.hasOwnProperty("hdf5_data_param"))
                    object.hdf5_data_param = $root.caffe.HDF5DataParameter.toObject(message.hdf5_data_param, options);
                if (message.hdf5_output_param != null && message.hasOwnProperty("hdf5_output_param"))
                    object.hdf5_output_param = $root.caffe.HDF5OutputParameter.toObject(message.hdf5_output_param, options);
                if (message.image_data_param != null && message.hasOwnProperty("image_data_param"))
                    object.image_data_param = $root.caffe.ImageDataParameter.toObject(message.image_data_param, options);
                if (message.infogain_loss_param != null && message.hasOwnProperty("infogain_loss_param"))
                    object.infogain_loss_param = $root.caffe.InfogainLossParameter.toObject(message.infogain_loss_param, options);
                if (message.inner_product_param != null && message.hasOwnProperty("inner_product_param"))
                    object.inner_product_param = $root.caffe.InnerProductParameter.toObject(message.inner_product_param, options);
                if (message.lrn_param != null && message.hasOwnProperty("lrn_param"))
                    object.lrn_param = $root.caffe.LRNParameter.toObject(message.lrn_param, options);
                if (message.pooling_param != null && message.hasOwnProperty("pooling_param"))
                    object.pooling_param = $root.caffe.PoolingParameter.toObject(message.pooling_param, options);
                if (message.window_data_param != null && message.hasOwnProperty("window_data_param"))
                    object.window_data_param = $root.caffe.WindowDataParameter.toObject(message.window_data_param, options);
                if (message.power_param != null && message.hasOwnProperty("power_param"))
                    object.power_param = $root.caffe.PowerParameter.toObject(message.power_param, options);
                if (message.memory_data_param != null && message.hasOwnProperty("memory_data_param"))
                    object.memory_data_param = $root.caffe.MemoryDataParameter.toObject(message.memory_data_param, options);
                if (message.argmax_param != null && message.hasOwnProperty("argmax_param"))
                    object.argmax_param = $root.caffe.ArgMaxParameter.toObject(message.argmax_param, options);
                if (message.eltwise_param != null && message.hasOwnProperty("eltwise_param"))
                    object.eltwise_param = $root.caffe.EltwiseParameter.toObject(message.eltwise_param, options);
                if (message.threshold_param != null && message.hasOwnProperty("threshold_param"))
                    object.threshold_param = $root.caffe.ThresholdParameter.toObject(message.threshold_param, options);
                if (message.dummy_data_param != null && message.hasOwnProperty("dummy_data_param"))
                    object.dummy_data_param = $root.caffe.DummyDataParameter.toObject(message.dummy_data_param, options);
                if (message.accuracy_param != null && message.hasOwnProperty("accuracy_param"))
                    object.accuracy_param = $root.caffe.AccuracyParameter.toObject(message.accuracy_param, options);
                if (message.hinge_loss_param != null && message.hasOwnProperty("hinge_loss_param"))
                    object.hinge_loss_param = $root.caffe.HingeLossParameter.toObject(message.hinge_loss_param, options);
                if (message.relu_param != null && message.hasOwnProperty("relu_param"))
                    object.relu_param = $root.caffe.ReLUParameter.toObject(message.relu_param, options);
                if (message.slice_param != null && message.hasOwnProperty("slice_param"))
                    object.slice_param = $root.caffe.SliceParameter.toObject(message.slice_param, options);
                if (message.include && message.include.length) {
                    object.include = [];
                    for (var j = 0; j < message.include.length; ++j)
                        object.include[j] = $root.caffe.NetStateRule.toObject(message.include[j], options);
                }
                if (message.exclude && message.exclude.length) {
                    object.exclude = [];
                    for (var j = 0; j < message.exclude.length; ++j)
                        object.exclude[j] = $root.caffe.NetStateRule.toObject(message.exclude[j], options);
                }
                if (message.mvn_param != null && message.hasOwnProperty("mvn_param"))
                    object.mvn_param = $root.caffe.MVNParameter.toObject(message.mvn_param, options);
                if (message.loss_weight && message.loss_weight.length) {
                    object.loss_weight = [];
                    for (var j = 0; j < message.loss_weight.length; ++j)
                        object.loss_weight[j] = options.json && !isFinite(message.loss_weight[j]) ? String(message.loss_weight[j]) : message.loss_weight[j];
                }
                if (message.transform_param != null && message.hasOwnProperty("transform_param"))
                    object.transform_param = $root.caffe.TransformationParameter.toObject(message.transform_param, options);
                if (message.tanh_param != null && message.hasOwnProperty("tanh_param"))
                    object.tanh_param = $root.caffe.TanHParameter.toObject(message.tanh_param, options);
                if (message.sigmoid_param != null && message.hasOwnProperty("sigmoid_param"))
                    object.sigmoid_param = $root.caffe.SigmoidParameter.toObject(message.sigmoid_param, options);
                if (message.softmax_param != null && message.hasOwnProperty("softmax_param"))
                    object.softmax_param = $root.caffe.SoftmaxParameter.toObject(message.softmax_param, options);
                if (message.contrastive_loss_param != null && message.hasOwnProperty("contrastive_loss_param"))
                    object.contrastive_loss_param = $root.caffe.ContrastiveLossParameter.toObject(message.contrastive_loss_param, options);
                if (message.exp_param != null && message.hasOwnProperty("exp_param"))
                    object.exp_param = $root.caffe.ExpParameter.toObject(message.exp_param, options);
                if (message.loss_param != null && message.hasOwnProperty("loss_param"))
                    object.loss_param = $root.caffe.LossParameter.toObject(message.loss_param, options);
                if (message.param && message.param.length) {
                    object.param = [];
                    for (var j = 0; j < message.param.length; ++j)
                        object.param[j] = message.param[j];
                }
                if (message.blob_share_mode && message.blob_share_mode.length) {
                    object.blob_share_mode = [];
                    for (var j = 0; j < message.blob_share_mode.length; ++j)
                        object.blob_share_mode[j] = options.enums === String ? $root.caffe.V1LayerParameter.DimCheckMode[message.blob_share_mode[j]] : message.blob_share_mode[j];
                }
                return object;
            };
    
            V1LayerParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            V1LayerParameter.LayerType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NONE"] = 0;
                values[valuesById[35] = "ABSVAL"] = 35;
                values[valuesById[1] = "ACCURACY"] = 1;
                values[valuesById[30] = "ARGMAX"] = 30;
                values[valuesById[2] = "BNLL"] = 2;
                values[valuesById[3] = "CONCAT"] = 3;
                values[valuesById[37] = "CONTRASTIVE_LOSS"] = 37;
                values[valuesById[4] = "CONVOLUTION"] = 4;
                values[valuesById[40] = "CROP"] = 40;
                values[valuesById[5] = "DATA"] = 5;
                values[valuesById[39] = "DECONVOLUTION"] = 39;
                values[valuesById[6] = "DROPOUT"] = 6;
                values[valuesById[32] = "DUMMY_DATA"] = 32;
                values[valuesById[7] = "EUCLIDEAN_LOSS"] = 7;
                values[valuesById[25] = "ELTWISE"] = 25;
                values[valuesById[38] = "EXP"] = 38;
                values[valuesById[8] = "FLATTEN"] = 8;
                values[valuesById[9] = "HDF5_DATA"] = 9;
                values[valuesById[10] = "HDF5_OUTPUT"] = 10;
                values[valuesById[28] = "HINGE_LOSS"] = 28;
                values[valuesById[11] = "IM2COL"] = 11;
                values[valuesById[12] = "IMAGE_DATA"] = 12;
                values[valuesById[13] = "INFOGAIN_LOSS"] = 13;
                values[valuesById[14] = "INNER_PRODUCT"] = 14;
                values[valuesById[15] = "LRN"] = 15;
                values[valuesById[29] = "MEMORY_DATA"] = 29;
                values[valuesById[16] = "MULTINOMIAL_LOGISTIC_LOSS"] = 16;
                values[valuesById[34] = "MVN"] = 34;
                values[valuesById[17] = "POOLING"] = 17;
                values[valuesById[26] = "POWER"] = 26;
                values[valuesById[18] = "RELU"] = 18;
                values[valuesById[19] = "SIGMOID"] = 19;
                values[valuesById[27] = "SIGMOID_CROSS_ENTROPY_LOSS"] = 27;
                values[valuesById[36] = "SILENCE"] = 36;
                values[valuesById[20] = "SOFTMAX"] = 20;
                values[valuesById[21] = "SOFTMAX_LOSS"] = 21;
                values[valuesById[22] = "SPLIT"] = 22;
                values[valuesById[33] = "SLICE"] = 33;
                values[valuesById[23] = "TANH"] = 23;
                values[valuesById[24] = "WINDOW_DATA"] = 24;
                values[valuesById[31] = "THRESHOLD"] = 31;
                values[valuesById[139] = "IMAGE_SEG_DATA"] = 139;
                return values;
            })();
    
            V1LayerParameter.DimCheckMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRICT"] = 0;
                values[valuesById[1] = "PERMISSIVE"] = 1;
                return values;
            })();
    
            return V1LayerParameter;
        })();
    
        caffe.V0LayerParameter = (function() {
    
            function V0LayerParameter(properties) {
                this.blobs = [];
                this.blobs_lr = [];
                this.weight_decay = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            V0LayerParameter.prototype.name = "";
            V0LayerParameter.prototype.type = "";
            V0LayerParameter.prototype.num_output = 0;
            V0LayerParameter.prototype.biasterm = true;
            V0LayerParameter.prototype.weight_filler = null;
            V0LayerParameter.prototype.bias_filler = null;
            V0LayerParameter.prototype.pad = 0;
            V0LayerParameter.prototype.kernelsize = 0;
            V0LayerParameter.prototype.group = 1;
            V0LayerParameter.prototype.stride = 1;
            V0LayerParameter.prototype.pool = 0;
            V0LayerParameter.prototype.dropout_ratio = 0.5;
            V0LayerParameter.prototype.local_size = 5;
            V0LayerParameter.prototype.alpha = 1;
            V0LayerParameter.prototype.beta = 0.75;
            V0LayerParameter.prototype.k = 1;
            V0LayerParameter.prototype.source = "";
            V0LayerParameter.prototype.scale = 1;
            V0LayerParameter.prototype.meanfile = "";
            V0LayerParameter.prototype.batchsize = 0;
            V0LayerParameter.prototype.cropsize = 0;
            V0LayerParameter.prototype.mirror = false;
            V0LayerParameter.prototype.blobs = $util.emptyArray;
            V0LayerParameter.prototype.blobs_lr = $util.emptyArray;
            V0LayerParameter.prototype.weight_decay = $util.emptyArray;
            V0LayerParameter.prototype.rand_skip = 0;
            V0LayerParameter.prototype.det_fg_threshold = 0.5;
            V0LayerParameter.prototype.det_bg_threshold = 0.5;
            V0LayerParameter.prototype.det_fg_fraction = 0.25;
            V0LayerParameter.prototype.det_context_pad = 0;
            V0LayerParameter.prototype.det_crop_mode = "warp";
            V0LayerParameter.prototype.new_num = 0;
            V0LayerParameter.prototype.new_channels = 0;
            V0LayerParameter.prototype.new_height = 0;
            V0LayerParameter.prototype.new_width = 0;
            V0LayerParameter.prototype.shuffle_images = false;
            V0LayerParameter.prototype.concat_dim = 1;
            V0LayerParameter.prototype.hdf5_output_param = null;
    
            V0LayerParameter.create = function create(properties) {
                return new V0LayerParameter(properties);
            };
    
            V0LayerParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.V0LayerParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.type = reader.string();
                        break;
                    case 3:
                        message.num_output = reader.uint32();
                        break;
                    case 4:
                        message.biasterm = reader.bool();
                        break;
                    case 5:
                        message.weight_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.bias_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.pad = reader.uint32();
                        break;
                    case 8:
                        message.kernelsize = reader.uint32();
                        break;
                    case 9:
                        message.group = reader.uint32();
                        break;
                    case 10:
                        message.stride = reader.uint32();
                        break;
                    case 11:
                        message.pool = reader.int32();
                        break;
                    case 12:
                        message.dropout_ratio = reader.float();
                        break;
                    case 13:
                        message.local_size = reader.uint32();
                        break;
                    case 14:
                        message.alpha = reader.float();
                        break;
                    case 15:
                        message.beta = reader.float();
                        break;
                    case 22:
                        message.k = reader.float();
                        break;
                    case 16:
                        message.source = reader.string();
                        break;
                    case 17:
                        message.scale = reader.float();
                        break;
                    case 18:
                        message.meanfile = reader.string();
                        break;
                    case 19:
                        message.batchsize = reader.uint32();
                        break;
                    case 20:
                        message.cropsize = reader.uint32();
                        break;
                    case 21:
                        message.mirror = reader.bool();
                        break;
                    case 50:
                        if (!(message.blobs && message.blobs.length))
                            message.blobs = [];
                        message.blobs.push($root.caffe.BlobProto.decode(reader, reader.uint32()));
                        break;
                    case 51:
                        if (!(message.blobs_lr && message.blobs_lr.length))
                            message.blobs_lr = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.blobs_lr.push(reader.float());
                        } else
                            message.blobs_lr.push(reader.float());
                        break;
                    case 52:
                        if (!(message.weight_decay && message.weight_decay.length))
                            message.weight_decay = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weight_decay.push(reader.float());
                        } else
                            message.weight_decay.push(reader.float());
                        break;
                    case 53:
                        message.rand_skip = reader.uint32();
                        break;
                    case 54:
                        message.det_fg_threshold = reader.float();
                        break;
                    case 55:
                        message.det_bg_threshold = reader.float();
                        break;
                    case 56:
                        message.det_fg_fraction = reader.float();
                        break;
                    case 58:
                        message.det_context_pad = reader.uint32();
                        break;
                    case 59:
                        message.det_crop_mode = reader.string();
                        break;
                    case 60:
                        message.new_num = reader.int32();
                        break;
                    case 61:
                        message.new_channels = reader.int32();
                        break;
                    case 62:
                        message.new_height = reader.int32();
                        break;
                    case 63:
                        message.new_width = reader.int32();
                        break;
                    case 64:
                        message.shuffle_images = reader.bool();
                        break;
                    case 65:
                        message.concat_dim = reader.uint32();
                        break;
                    case 1001:
                        message.hdf5_output_param = $root.caffe.HDF5OutputParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            V0LayerParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.V0LayerParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "name":
                        message.name = reader.string();
                        break;
                    case "type":
                        message.type = reader.string();
                        break;
                    case "num_output":
                        message.num_output = reader.uint32();
                        break;
                    case "biasterm":
                        message.biasterm = reader.bool();
                        break;
                    case "weight_filler":
                        message.weight_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_filler":
                        message.bias_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "pad":
                        message.pad = reader.uint32();
                        break;
                    case "kernelsize":
                        message.kernelsize = reader.uint32();
                        break;
                    case "group":
                        message.group = reader.uint32();
                        break;
                    case "stride":
                        message.stride = reader.uint32();
                        break;
                    case "pool":
                        message.pool = reader.enum($root.caffe.V0LayerParameter.PoolMethod);
                        break;
                    case "dropout_ratio":
                        message.dropout_ratio = reader.float();
                        break;
                    case "local_size":
                        message.local_size = reader.uint32();
                        break;
                    case "alpha":
                        message.alpha = reader.float();
                        break;
                    case "beta":
                        message.beta = reader.float();
                        break;
                    case "k":
                        message.k = reader.float();
                        break;
                    case "source":
                        message.source = reader.string();
                        break;
                    case "scale":
                        message.scale = reader.float();
                        break;
                    case "meanfile":
                        message.meanfile = reader.string();
                        break;
                    case "batchsize":
                        message.batchsize = reader.uint32();
                        break;
                    case "cropsize":
                        message.cropsize = reader.uint32();
                        break;
                    case "mirror":
                        message.mirror = reader.bool();
                        break;
                    case "blobs":
                        if (!(message.blobs && message.blobs.length))
                            message.blobs = [];
                        message.blobs.push($root.caffe.BlobProto.decodeText(reader, true));
                        break;
                    case "blobs_lr":
                        if (!(message.blobs_lr && message.blobs_lr.length))
                            message.blobs_lr = [];
                        message.blobs_lr.push(reader.float());
                        break;
                    case "weight_decay":
                        if (!(message.weight_decay && message.weight_decay.length))
                            message.weight_decay = [];
                        message.weight_decay.push(reader.float());
                        break;
                    case "rand_skip":
                        message.rand_skip = reader.uint32();
                        break;
                    case "det_fg_threshold":
                        message.det_fg_threshold = reader.float();
                        break;
                    case "det_bg_threshold":
                        message.det_bg_threshold = reader.float();
                        break;
                    case "det_fg_fraction":
                        message.det_fg_fraction = reader.float();
                        break;
                    case "det_context_pad":
                        message.det_context_pad = reader.uint32();
                        break;
                    case "det_crop_mode":
                        message.det_crop_mode = reader.string();
                        break;
                    case "new_num":
                        message.new_num = reader.int32();
                        break;
                    case "new_channels":
                        message.new_channels = reader.int32();
                        break;
                    case "new_height":
                        message.new_height = reader.int32();
                        break;
                    case "new_width":
                        message.new_width = reader.int32();
                        break;
                    case "shuffle_images":
                        message.shuffle_images = reader.bool();
                        break;
                    case "concat_dim":
                        message.concat_dim = reader.uint32();
                        break;
                    case "hdf5_output_param":
                        message.hdf5_output_param = $root.caffe.HDF5OutputParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            V0LayerParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    if (!$util.isInteger(message.num_output))
                        return "num_output: integer expected";
                if (message.biasterm != null && message.hasOwnProperty("biasterm"))
                    if (typeof message.biasterm !== "boolean")
                        return "biasterm: boolean expected";
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.weight_filler);
                    if (error)
                        return "weight_filler." + error;
                }
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_filler);
                    if (error)
                        return "bias_filler." + error;
                }
                if (message.pad != null && message.hasOwnProperty("pad"))
                    if (!$util.isInteger(message.pad))
                        return "pad: integer expected";
                if (message.kernelsize != null && message.hasOwnProperty("kernelsize"))
                    if (!$util.isInteger(message.kernelsize))
                        return "kernelsize: integer expected";
                if (message.group != null && message.hasOwnProperty("group"))
                    if (!$util.isInteger(message.group))
                        return "group: integer expected";
                if (message.stride != null && message.hasOwnProperty("stride"))
                    if (!$util.isInteger(message.stride))
                        return "stride: integer expected";
                if (message.pool != null && message.hasOwnProperty("pool"))
                    switch (message.pool) {
                    default:
                        return "pool: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.dropout_ratio != null && message.hasOwnProperty("dropout_ratio"))
                    if (typeof message.dropout_ratio !== "number")
                        return "dropout_ratio: number expected";
                if (message.local_size != null && message.hasOwnProperty("local_size"))
                    if (!$util.isInteger(message.local_size))
                        return "local_size: integer expected";
                if (message.alpha != null && message.hasOwnProperty("alpha"))
                    if (typeof message.alpha !== "number")
                        return "alpha: number expected";
                if (message.beta != null && message.hasOwnProperty("beta"))
                    if (typeof message.beta !== "number")
                        return "beta: number expected";
                if (message.k != null && message.hasOwnProperty("k"))
                    if (typeof message.k !== "number")
                        return "k: number expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                if (message.meanfile != null && message.hasOwnProperty("meanfile"))
                    if (!$util.isString(message.meanfile))
                        return "meanfile: string expected";
                if (message.batchsize != null && message.hasOwnProperty("batchsize"))
                    if (!$util.isInteger(message.batchsize))
                        return "batchsize: integer expected";
                if (message.cropsize != null && message.hasOwnProperty("cropsize"))
                    if (!$util.isInteger(message.cropsize))
                        return "cropsize: integer expected";
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    if (typeof message.mirror !== "boolean")
                        return "mirror: boolean expected";
                if (message.blobs != null && message.hasOwnProperty("blobs")) {
                    if (!Array.isArray(message.blobs))
                        return "blobs: array expected";
                    for (var i = 0; i < message.blobs.length; ++i) {
                        var error = $root.caffe.BlobProto.verify(message.blobs[i]);
                        if (error)
                            return "blobs." + error;
                    }
                }
                if (message.blobs_lr != null && message.hasOwnProperty("blobs_lr")) {
                    if (!Array.isArray(message.blobs_lr))
                        return "blobs_lr: array expected";
                    for (var i = 0; i < message.blobs_lr.length; ++i)
                        if (typeof message.blobs_lr[i] !== "number")
                            return "blobs_lr: number[] expected";
                }
                if (message.weight_decay != null && message.hasOwnProperty("weight_decay")) {
                    if (!Array.isArray(message.weight_decay))
                        return "weight_decay: array expected";
                    for (var i = 0; i < message.weight_decay.length; ++i)
                        if (typeof message.weight_decay[i] !== "number")
                            return "weight_decay: number[] expected";
                }
                if (message.rand_skip != null && message.hasOwnProperty("rand_skip"))
                    if (!$util.isInteger(message.rand_skip))
                        return "rand_skip: integer expected";
                if (message.det_fg_threshold != null && message.hasOwnProperty("det_fg_threshold"))
                    if (typeof message.det_fg_threshold !== "number")
                        return "det_fg_threshold: number expected";
                if (message.det_bg_threshold != null && message.hasOwnProperty("det_bg_threshold"))
                    if (typeof message.det_bg_threshold !== "number")
                        return "det_bg_threshold: number expected";
                if (message.det_fg_fraction != null && message.hasOwnProperty("det_fg_fraction"))
                    if (typeof message.det_fg_fraction !== "number")
                        return "det_fg_fraction: number expected";
                if (message.det_context_pad != null && message.hasOwnProperty("det_context_pad"))
                    if (!$util.isInteger(message.det_context_pad))
                        return "det_context_pad: integer expected";
                if (message.det_crop_mode != null && message.hasOwnProperty("det_crop_mode"))
                    if (!$util.isString(message.det_crop_mode))
                        return "det_crop_mode: string expected";
                if (message.new_num != null && message.hasOwnProperty("new_num"))
                    if (!$util.isInteger(message.new_num))
                        return "new_num: integer expected";
                if (message.new_channels != null && message.hasOwnProperty("new_channels"))
                    if (!$util.isInteger(message.new_channels))
                        return "new_channels: integer expected";
                if (message.new_height != null && message.hasOwnProperty("new_height"))
                    if (!$util.isInteger(message.new_height))
                        return "new_height: integer expected";
                if (message.new_width != null && message.hasOwnProperty("new_width"))
                    if (!$util.isInteger(message.new_width))
                        return "new_width: integer expected";
                if (message.shuffle_images != null && message.hasOwnProperty("shuffle_images"))
                    if (typeof message.shuffle_images !== "boolean")
                        return "shuffle_images: boolean expected";
                if (message.concat_dim != null && message.hasOwnProperty("concat_dim"))
                    if (!$util.isInteger(message.concat_dim))
                        return "concat_dim: integer expected";
                if (message.hdf5_output_param != null && message.hasOwnProperty("hdf5_output_param")) {
                    var error = $root.caffe.HDF5OutputParameter.verify(message.hdf5_output_param);
                    if (error)
                        return "hdf5_output_param." + error;
                }
                return null;
            };
    
            V0LayerParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.V0LayerParameter)
                    return object;
                var message = new $root.caffe.V0LayerParameter();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.type != null)
                    message.type = String(object.type);
                if (object.num_output != null)
                    message.num_output = object.num_output >>> 0;
                if (object.biasterm != null)
                    message.biasterm = Boolean(object.biasterm);
                if (object.weight_filler != null) {
                    if (typeof object.weight_filler !== "object")
                        throw TypeError(".caffe.V0LayerParameter.weight_filler: object expected");
                    message.weight_filler = $root.caffe.FillerParameter.fromObject(object.weight_filler);
                }
                if (object.bias_filler != null) {
                    if (typeof object.bias_filler !== "object")
                        throw TypeError(".caffe.V0LayerParameter.bias_filler: object expected");
                    message.bias_filler = $root.caffe.FillerParameter.fromObject(object.bias_filler);
                }
                if (object.pad != null)
                    message.pad = object.pad >>> 0;
                if (object.kernelsize != null)
                    message.kernelsize = object.kernelsize >>> 0;
                if (object.group != null)
                    message.group = object.group >>> 0;
                if (object.stride != null)
                    message.stride = object.stride >>> 0;
                switch (object.pool) {
                case "MAX":
                case 0:
                    message.pool = 0;
                    break;
                case "AVE":
                case 1:
                    message.pool = 1;
                    break;
                case "STOCHASTIC":
                case 2:
                    message.pool = 2;
                    break;
                }
                if (object.dropout_ratio != null)
                    message.dropout_ratio = Number(object.dropout_ratio);
                if (object.local_size != null)
                    message.local_size = object.local_size >>> 0;
                if (object.alpha != null)
                    message.alpha = Number(object.alpha);
                if (object.beta != null)
                    message.beta = Number(object.beta);
                if (object.k != null)
                    message.k = Number(object.k);
                if (object.source != null)
                    message.source = String(object.source);
                if (object.scale != null)
                    message.scale = Number(object.scale);
                if (object.meanfile != null)
                    message.meanfile = String(object.meanfile);
                if (object.batchsize != null)
                    message.batchsize = object.batchsize >>> 0;
                if (object.cropsize != null)
                    message.cropsize = object.cropsize >>> 0;
                if (object.mirror != null)
                    message.mirror = Boolean(object.mirror);
                if (object.blobs) {
                    if (!Array.isArray(object.blobs))
                        throw TypeError(".caffe.V0LayerParameter.blobs: array expected");
                    message.blobs = [];
                    for (var i = 0; i < object.blobs.length; ++i) {
                        if (typeof object.blobs[i] !== "object")
                            throw TypeError(".caffe.V0LayerParameter.blobs: object expected");
                        message.blobs[i] = $root.caffe.BlobProto.fromObject(object.blobs[i]);
                    }
                }
                if (object.blobs_lr) {
                    if (!Array.isArray(object.blobs_lr))
                        throw TypeError(".caffe.V0LayerParameter.blobs_lr: array expected");
                    message.blobs_lr = [];
                    for (var i = 0; i < object.blobs_lr.length; ++i)
                        message.blobs_lr[i] = Number(object.blobs_lr[i]);
                }
                if (object.weight_decay) {
                    if (!Array.isArray(object.weight_decay))
                        throw TypeError(".caffe.V0LayerParameter.weight_decay: array expected");
                    message.weight_decay = [];
                    for (var i = 0; i < object.weight_decay.length; ++i)
                        message.weight_decay[i] = Number(object.weight_decay[i]);
                }
                if (object.rand_skip != null)
                    message.rand_skip = object.rand_skip >>> 0;
                if (object.det_fg_threshold != null)
                    message.det_fg_threshold = Number(object.det_fg_threshold);
                if (object.det_bg_threshold != null)
                    message.det_bg_threshold = Number(object.det_bg_threshold);
                if (object.det_fg_fraction != null)
                    message.det_fg_fraction = Number(object.det_fg_fraction);
                if (object.det_context_pad != null)
                    message.det_context_pad = object.det_context_pad >>> 0;
                if (object.det_crop_mode != null)
                    message.det_crop_mode = String(object.det_crop_mode);
                if (object.new_num != null)
                    message.new_num = object.new_num | 0;
                if (object.new_channels != null)
                    message.new_channels = object.new_channels | 0;
                if (object.new_height != null)
                    message.new_height = object.new_height | 0;
                if (object.new_width != null)
                    message.new_width = object.new_width | 0;
                if (object.shuffle_images != null)
                    message.shuffle_images = Boolean(object.shuffle_images);
                if (object.concat_dim != null)
                    message.concat_dim = object.concat_dim >>> 0;
                if (object.hdf5_output_param != null) {
                    if (typeof object.hdf5_output_param !== "object")
                        throw TypeError(".caffe.V0LayerParameter.hdf5_output_param: object expected");
                    message.hdf5_output_param = $root.caffe.HDF5OutputParameter.fromObject(object.hdf5_output_param);
                }
                return message;
            };
    
            V0LayerParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.blobs = [];
                    object.blobs_lr = [];
                    object.weight_decay = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.type = "";
                    object.num_output = 0;
                    object.biasterm = true;
                    object.weight_filler = null;
                    object.bias_filler = null;
                    object.pad = 0;
                    object.kernelsize = 0;
                    object.group = 1;
                    object.stride = 1;
                    object.pool = options.enums === String ? "MAX" : 0;
                    object.dropout_ratio = 0.5;
                    object.local_size = 5;
                    object.alpha = 1;
                    object.beta = 0.75;
                    object.source = "";
                    object.scale = 1;
                    object.meanfile = "";
                    object.batchsize = 0;
                    object.cropsize = 0;
                    object.mirror = false;
                    object.k = 1;
                    object.rand_skip = 0;
                    object.det_fg_threshold = 0.5;
                    object.det_bg_threshold = 0.5;
                    object.det_fg_fraction = 0.25;
                    object.det_context_pad = 0;
                    object.det_crop_mode = "warp";
                    object.new_num = 0;
                    object.new_channels = 0;
                    object.new_height = 0;
                    object.new_width = 0;
                    object.shuffle_images = false;
                    object.concat_dim = 1;
                    object.hdf5_output_param = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    object.num_output = message.num_output;
                if (message.biasterm != null && message.hasOwnProperty("biasterm"))
                    object.biasterm = message.biasterm;
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler"))
                    object.weight_filler = $root.caffe.FillerParameter.toObject(message.weight_filler, options);
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler"))
                    object.bias_filler = $root.caffe.FillerParameter.toObject(message.bias_filler, options);
                if (message.pad != null && message.hasOwnProperty("pad"))
                    object.pad = message.pad;
                if (message.kernelsize != null && message.hasOwnProperty("kernelsize"))
                    object.kernelsize = message.kernelsize;
                if (message.group != null && message.hasOwnProperty("group"))
                    object.group = message.group;
                if (message.stride != null && message.hasOwnProperty("stride"))
                    object.stride = message.stride;
                if (message.pool != null && message.hasOwnProperty("pool"))
                    object.pool = options.enums === String ? $root.caffe.V0LayerParameter.PoolMethod[message.pool] : message.pool;
                if (message.dropout_ratio != null && message.hasOwnProperty("dropout_ratio"))
                    object.dropout_ratio = options.json && !isFinite(message.dropout_ratio) ? String(message.dropout_ratio) : message.dropout_ratio;
                if (message.local_size != null && message.hasOwnProperty("local_size"))
                    object.local_size = message.local_size;
                if (message.alpha != null && message.hasOwnProperty("alpha"))
                    object.alpha = options.json && !isFinite(message.alpha) ? String(message.alpha) : message.alpha;
                if (message.beta != null && message.hasOwnProperty("beta"))
                    object.beta = options.json && !isFinite(message.beta) ? String(message.beta) : message.beta;
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                if (message.meanfile != null && message.hasOwnProperty("meanfile"))
                    object.meanfile = message.meanfile;
                if (message.batchsize != null && message.hasOwnProperty("batchsize"))
                    object.batchsize = message.batchsize;
                if (message.cropsize != null && message.hasOwnProperty("cropsize"))
                    object.cropsize = message.cropsize;
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    object.mirror = message.mirror;
                if (message.k != null && message.hasOwnProperty("k"))
                    object.k = options.json && !isFinite(message.k) ? String(message.k) : message.k;
                if (message.blobs && message.blobs.length) {
                    object.blobs = [];
                    for (var j = 0; j < message.blobs.length; ++j)
                        object.blobs[j] = $root.caffe.BlobProto.toObject(message.blobs[j], options);
                }
                if (message.blobs_lr && message.blobs_lr.length) {
                    object.blobs_lr = [];
                    for (var j = 0; j < message.blobs_lr.length; ++j)
                        object.blobs_lr[j] = options.json && !isFinite(message.blobs_lr[j]) ? String(message.blobs_lr[j]) : message.blobs_lr[j];
                }
                if (message.weight_decay && message.weight_decay.length) {
                    object.weight_decay = [];
                    for (var j = 0; j < message.weight_decay.length; ++j)
                        object.weight_decay[j] = options.json && !isFinite(message.weight_decay[j]) ? String(message.weight_decay[j]) : message.weight_decay[j];
                }
                if (message.rand_skip != null && message.hasOwnProperty("rand_skip"))
                    object.rand_skip = message.rand_skip;
                if (message.det_fg_threshold != null && message.hasOwnProperty("det_fg_threshold"))
                    object.det_fg_threshold = options.json && !isFinite(message.det_fg_threshold) ? String(message.det_fg_threshold) : message.det_fg_threshold;
                if (message.det_bg_threshold != null && message.hasOwnProperty("det_bg_threshold"))
                    object.det_bg_threshold = options.json && !isFinite(message.det_bg_threshold) ? String(message.det_bg_threshold) : message.det_bg_threshold;
                if (message.det_fg_fraction != null && message.hasOwnProperty("det_fg_fraction"))
                    object.det_fg_fraction = options.json && !isFinite(message.det_fg_fraction) ? String(message.det_fg_fraction) : message.det_fg_fraction;
                if (message.det_context_pad != null && message.hasOwnProperty("det_context_pad"))
                    object.det_context_pad = message.det_context_pad;
                if (message.det_crop_mode != null && message.hasOwnProperty("det_crop_mode"))
                    object.det_crop_mode = message.det_crop_mode;
                if (message.new_num != null && message.hasOwnProperty("new_num"))
                    object.new_num = message.new_num;
                if (message.new_channels != null && message.hasOwnProperty("new_channels"))
                    object.new_channels = message.new_channels;
                if (message.new_height != null && message.hasOwnProperty("new_height"))
                    object.new_height = message.new_height;
                if (message.new_width != null && message.hasOwnProperty("new_width"))
                    object.new_width = message.new_width;
                if (message.shuffle_images != null && message.hasOwnProperty("shuffle_images"))
                    object.shuffle_images = message.shuffle_images;
                if (message.concat_dim != null && message.hasOwnProperty("concat_dim"))
                    object.concat_dim = message.concat_dim;
                if (message.hdf5_output_param != null && message.hasOwnProperty("hdf5_output_param"))
                    object.hdf5_output_param = $root.caffe.HDF5OutputParameter.toObject(message.hdf5_output_param, options);
                return object;
            };
    
            V0LayerParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            V0LayerParameter.PoolMethod = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "MAX"] = 0;
                values[valuesById[1] = "AVE"] = 1;
                values[valuesById[2] = "STOCHASTIC"] = 2;
                return values;
            })();
    
            return V0LayerParameter;
        })();
    
        caffe.PReLUParameter = (function() {
    
            function PReLUParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            PReLUParameter.prototype.filler = null;
            PReLUParameter.prototype.channel_shared = false;
    
            PReLUParameter.create = function create(properties) {
                return new PReLUParameter(properties);
            };
    
            PReLUParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.PReLUParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.channel_shared = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            PReLUParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.PReLUParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "filler":
                        message.filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "channel_shared":
                        message.channel_shared = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            PReLUParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.filler != null && message.hasOwnProperty("filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.filler);
                    if (error)
                        return "filler." + error;
                }
                if (message.channel_shared != null && message.hasOwnProperty("channel_shared"))
                    if (typeof message.channel_shared !== "boolean")
                        return "channel_shared: boolean expected";
                return null;
            };
    
            PReLUParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.PReLUParameter)
                    return object;
                var message = new $root.caffe.PReLUParameter();
                if (object.filler != null) {
                    if (typeof object.filler !== "object")
                        throw TypeError(".caffe.PReLUParameter.filler: object expected");
                    message.filler = $root.caffe.FillerParameter.fromObject(object.filler);
                }
                if (object.channel_shared != null)
                    message.channel_shared = Boolean(object.channel_shared);
                return message;
            };
    
            PReLUParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.filler = null;
                    object.channel_shared = false;
                }
                if (message.filler != null && message.hasOwnProperty("filler"))
                    object.filler = $root.caffe.FillerParameter.toObject(message.filler, options);
                if (message.channel_shared != null && message.hasOwnProperty("channel_shared"))
                    object.channel_shared = message.channel_shared;
                return object;
            };
    
            PReLUParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PReLUParameter;
        })();
    
        caffe.Sampler = (function() {
    
            function Sampler(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            Sampler.prototype.min_scale = 1;
            Sampler.prototype.max_scale = 1;
            Sampler.prototype.min_aspect_ratio = 1;
            Sampler.prototype.max_aspect_ratio = 1;
    
            Sampler.create = function create(properties) {
                return new Sampler(properties);
            };
    
            Sampler.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.Sampler();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.min_scale = reader.float();
                        break;
                    case 2:
                        message.max_scale = reader.float();
                        break;
                    case 3:
                        message.min_aspect_ratio = reader.float();
                        break;
                    case 4:
                        message.max_aspect_ratio = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            Sampler.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.Sampler();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "min_scale":
                        message.min_scale = reader.float();
                        break;
                    case "max_scale":
                        message.max_scale = reader.float();
                        break;
                    case "min_aspect_ratio":
                        message.min_aspect_ratio = reader.float();
                        break;
                    case "max_aspect_ratio":
                        message.max_aspect_ratio = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            Sampler.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.min_scale != null && message.hasOwnProperty("min_scale"))
                    if (typeof message.min_scale !== "number")
                        return "min_scale: number expected";
                if (message.max_scale != null && message.hasOwnProperty("max_scale"))
                    if (typeof message.max_scale !== "number")
                        return "max_scale: number expected";
                if (message.min_aspect_ratio != null && message.hasOwnProperty("min_aspect_ratio"))
                    if (typeof message.min_aspect_ratio !== "number")
                        return "min_aspect_ratio: number expected";
                if (message.max_aspect_ratio != null && message.hasOwnProperty("max_aspect_ratio"))
                    if (typeof message.max_aspect_ratio !== "number")
                        return "max_aspect_ratio: number expected";
                return null;
            };
    
            Sampler.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.Sampler)
                    return object;
                var message = new $root.caffe.Sampler();
                if (object.min_scale != null)
                    message.min_scale = Number(object.min_scale);
                if (object.max_scale != null)
                    message.max_scale = Number(object.max_scale);
                if (object.min_aspect_ratio != null)
                    message.min_aspect_ratio = Number(object.min_aspect_ratio);
                if (object.max_aspect_ratio != null)
                    message.max_aspect_ratio = Number(object.max_aspect_ratio);
                return message;
            };
    
            Sampler.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.min_scale = 1;
                    object.max_scale = 1;
                    object.min_aspect_ratio = 1;
                    object.max_aspect_ratio = 1;
                }
                if (message.min_scale != null && message.hasOwnProperty("min_scale"))
                    object.min_scale = options.json && !isFinite(message.min_scale) ? String(message.min_scale) : message.min_scale;
                if (message.max_scale != null && message.hasOwnProperty("max_scale"))
                    object.max_scale = options.json && !isFinite(message.max_scale) ? String(message.max_scale) : message.max_scale;
                if (message.min_aspect_ratio != null && message.hasOwnProperty("min_aspect_ratio"))
                    object.min_aspect_ratio = options.json && !isFinite(message.min_aspect_ratio) ? String(message.min_aspect_ratio) : message.min_aspect_ratio;
                if (message.max_aspect_ratio != null && message.hasOwnProperty("max_aspect_ratio"))
                    object.max_aspect_ratio = options.json && !isFinite(message.max_aspect_ratio) ? String(message.max_aspect_ratio) : message.max_aspect_ratio;
                return object;
            };
    
            Sampler.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Sampler;
        })();
    
        caffe.SampleConstraint = (function() {
    
            function SampleConstraint(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SampleConstraint.prototype.min_jaccard_overlap = 0;
            SampleConstraint.prototype.max_jaccard_overlap = 0;
            SampleConstraint.prototype.min_sample_coverage = 0;
            SampleConstraint.prototype.max_sample_coverage = 0;
            SampleConstraint.prototype.min_object_coverage = 0;
            SampleConstraint.prototype.max_object_coverage = 0;
    
            SampleConstraint.create = function create(properties) {
                return new SampleConstraint(properties);
            };
    
            SampleConstraint.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SampleConstraint();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.min_jaccard_overlap = reader.float();
                        break;
                    case 2:
                        message.max_jaccard_overlap = reader.float();
                        break;
                    case 3:
                        message.min_sample_coverage = reader.float();
                        break;
                    case 4:
                        message.max_sample_coverage = reader.float();
                        break;
                    case 5:
                        message.min_object_coverage = reader.float();
                        break;
                    case 6:
                        message.max_object_coverage = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SampleConstraint.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SampleConstraint();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "min_jaccard_overlap":
                        message.min_jaccard_overlap = reader.float();
                        break;
                    case "max_jaccard_overlap":
                        message.max_jaccard_overlap = reader.float();
                        break;
                    case "min_sample_coverage":
                        message.min_sample_coverage = reader.float();
                        break;
                    case "max_sample_coverage":
                        message.max_sample_coverage = reader.float();
                        break;
                    case "min_object_coverage":
                        message.min_object_coverage = reader.float();
                        break;
                    case "max_object_coverage":
                        message.max_object_coverage = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SampleConstraint.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.min_jaccard_overlap != null && message.hasOwnProperty("min_jaccard_overlap"))
                    if (typeof message.min_jaccard_overlap !== "number")
                        return "min_jaccard_overlap: number expected";
                if (message.max_jaccard_overlap != null && message.hasOwnProperty("max_jaccard_overlap"))
                    if (typeof message.max_jaccard_overlap !== "number")
                        return "max_jaccard_overlap: number expected";
                if (message.min_sample_coverage != null && message.hasOwnProperty("min_sample_coverage"))
                    if (typeof message.min_sample_coverage !== "number")
                        return "min_sample_coverage: number expected";
                if (message.max_sample_coverage != null && message.hasOwnProperty("max_sample_coverage"))
                    if (typeof message.max_sample_coverage !== "number")
                        return "max_sample_coverage: number expected";
                if (message.min_object_coverage != null && message.hasOwnProperty("min_object_coverage"))
                    if (typeof message.min_object_coverage !== "number")
                        return "min_object_coverage: number expected";
                if (message.max_object_coverage != null && message.hasOwnProperty("max_object_coverage"))
                    if (typeof message.max_object_coverage !== "number")
                        return "max_object_coverage: number expected";
                return null;
            };
    
            SampleConstraint.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SampleConstraint)
                    return object;
                var message = new $root.caffe.SampleConstraint();
                if (object.min_jaccard_overlap != null)
                    message.min_jaccard_overlap = Number(object.min_jaccard_overlap);
                if (object.max_jaccard_overlap != null)
                    message.max_jaccard_overlap = Number(object.max_jaccard_overlap);
                if (object.min_sample_coverage != null)
                    message.min_sample_coverage = Number(object.min_sample_coverage);
                if (object.max_sample_coverage != null)
                    message.max_sample_coverage = Number(object.max_sample_coverage);
                if (object.min_object_coverage != null)
                    message.min_object_coverage = Number(object.min_object_coverage);
                if (object.max_object_coverage != null)
                    message.max_object_coverage = Number(object.max_object_coverage);
                return message;
            };
    
            SampleConstraint.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.min_jaccard_overlap = 0;
                    object.max_jaccard_overlap = 0;
                    object.min_sample_coverage = 0;
                    object.max_sample_coverage = 0;
                    object.min_object_coverage = 0;
                    object.max_object_coverage = 0;
                }
                if (message.min_jaccard_overlap != null && message.hasOwnProperty("min_jaccard_overlap"))
                    object.min_jaccard_overlap = options.json && !isFinite(message.min_jaccard_overlap) ? String(message.min_jaccard_overlap) : message.min_jaccard_overlap;
                if (message.max_jaccard_overlap != null && message.hasOwnProperty("max_jaccard_overlap"))
                    object.max_jaccard_overlap = options.json && !isFinite(message.max_jaccard_overlap) ? String(message.max_jaccard_overlap) : message.max_jaccard_overlap;
                if (message.min_sample_coverage != null && message.hasOwnProperty("min_sample_coverage"))
                    object.min_sample_coverage = options.json && !isFinite(message.min_sample_coverage) ? String(message.min_sample_coverage) : message.min_sample_coverage;
                if (message.max_sample_coverage != null && message.hasOwnProperty("max_sample_coverage"))
                    object.max_sample_coverage = options.json && !isFinite(message.max_sample_coverage) ? String(message.max_sample_coverage) : message.max_sample_coverage;
                if (message.min_object_coverage != null && message.hasOwnProperty("min_object_coverage"))
                    object.min_object_coverage = options.json && !isFinite(message.min_object_coverage) ? String(message.min_object_coverage) : message.min_object_coverage;
                if (message.max_object_coverage != null && message.hasOwnProperty("max_object_coverage"))
                    object.max_object_coverage = options.json && !isFinite(message.max_object_coverage) ? String(message.max_object_coverage) : message.max_object_coverage;
                return object;
            };
    
            SampleConstraint.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SampleConstraint;
        })();
    
        caffe.BatchSampler = (function() {
    
            function BatchSampler(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BatchSampler.prototype.use_original_image = true;
            BatchSampler.prototype.sampler = null;
            BatchSampler.prototype.sample_constraint = null;
            BatchSampler.prototype.max_sample = 0;
            BatchSampler.prototype.max_trials = 100;
    
            BatchSampler.create = function create(properties) {
                return new BatchSampler(properties);
            };
    
            BatchSampler.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BatchSampler();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.use_original_image = reader.bool();
                        break;
                    case 2:
                        message.sampler = $root.caffe.Sampler.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.sample_constraint = $root.caffe.SampleConstraint.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.max_sample = reader.uint32();
                        break;
                    case 5:
                        message.max_trials = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BatchSampler.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BatchSampler();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "use_original_image":
                        message.use_original_image = reader.bool();
                        break;
                    case "sampler":
                        message.sampler = $root.caffe.Sampler.decodeText(reader, true);
                        break;
                    case "sample_constraint":
                        message.sample_constraint = $root.caffe.SampleConstraint.decodeText(reader, true);
                        break;
                    case "max_sample":
                        message.max_sample = reader.uint32();
                        break;
                    case "max_trials":
                        message.max_trials = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BatchSampler.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.use_original_image != null && message.hasOwnProperty("use_original_image"))
                    if (typeof message.use_original_image !== "boolean")
                        return "use_original_image: boolean expected";
                if (message.sampler != null && message.hasOwnProperty("sampler")) {
                    var error = $root.caffe.Sampler.verify(message.sampler);
                    if (error)
                        return "sampler." + error;
                }
                if (message.sample_constraint != null && message.hasOwnProperty("sample_constraint")) {
                    var error = $root.caffe.SampleConstraint.verify(message.sample_constraint);
                    if (error)
                        return "sample_constraint." + error;
                }
                if (message.max_sample != null && message.hasOwnProperty("max_sample"))
                    if (!$util.isInteger(message.max_sample))
                        return "max_sample: integer expected";
                if (message.max_trials != null && message.hasOwnProperty("max_trials"))
                    if (!$util.isInteger(message.max_trials))
                        return "max_trials: integer expected";
                return null;
            };
    
            BatchSampler.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BatchSampler)
                    return object;
                var message = new $root.caffe.BatchSampler();
                if (object.use_original_image != null)
                    message.use_original_image = Boolean(object.use_original_image);
                if (object.sampler != null) {
                    if (typeof object.sampler !== "object")
                        throw TypeError(".caffe.BatchSampler.sampler: object expected");
                    message.sampler = $root.caffe.Sampler.fromObject(object.sampler);
                }
                if (object.sample_constraint != null) {
                    if (typeof object.sample_constraint !== "object")
                        throw TypeError(".caffe.BatchSampler.sample_constraint: object expected");
                    message.sample_constraint = $root.caffe.SampleConstraint.fromObject(object.sample_constraint);
                }
                if (object.max_sample != null)
                    message.max_sample = object.max_sample >>> 0;
                if (object.max_trials != null)
                    message.max_trials = object.max_trials >>> 0;
                return message;
            };
    
            BatchSampler.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.use_original_image = true;
                    object.sampler = null;
                    object.sample_constraint = null;
                    object.max_sample = 0;
                    object.max_trials = 100;
                }
                if (message.use_original_image != null && message.hasOwnProperty("use_original_image"))
                    object.use_original_image = message.use_original_image;
                if (message.sampler != null && message.hasOwnProperty("sampler"))
                    object.sampler = $root.caffe.Sampler.toObject(message.sampler, options);
                if (message.sample_constraint != null && message.hasOwnProperty("sample_constraint"))
                    object.sample_constraint = $root.caffe.SampleConstraint.toObject(message.sample_constraint, options);
                if (message.max_sample != null && message.hasOwnProperty("max_sample"))
                    object.max_sample = message.max_sample;
                if (message.max_trials != null && message.hasOwnProperty("max_trials"))
                    object.max_trials = message.max_trials;
                return object;
            };
    
            BatchSampler.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BatchSampler;
        })();
    
        caffe.NonMaximumSuppressionParameter = (function() {
    
            function NonMaximumSuppressionParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            NonMaximumSuppressionParameter.prototype.nms_threshold = 0.3;
            NonMaximumSuppressionParameter.prototype.top_k = 0;
            NonMaximumSuppressionParameter.prototype.eta = 1;
    
            NonMaximumSuppressionParameter.create = function create(properties) {
                return new NonMaximumSuppressionParameter(properties);
            };
    
            NonMaximumSuppressionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.NonMaximumSuppressionParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nms_threshold = reader.float();
                        break;
                    case 2:
                        message.top_k = reader.int32();
                        break;
                    case 3:
                        message.eta = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            NonMaximumSuppressionParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.NonMaximumSuppressionParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "nms_threshold":
                        message.nms_threshold = reader.float();
                        break;
                    case "top_k":
                        message.top_k = reader.int32();
                        break;
                    case "eta":
                        message.eta = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            NonMaximumSuppressionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nms_threshold != null && message.hasOwnProperty("nms_threshold"))
                    if (typeof message.nms_threshold !== "number")
                        return "nms_threshold: number expected";
                if (message.top_k != null && message.hasOwnProperty("top_k"))
                    if (!$util.isInteger(message.top_k))
                        return "top_k: integer expected";
                if (message.eta != null && message.hasOwnProperty("eta"))
                    if (typeof message.eta !== "number")
                        return "eta: number expected";
                return null;
            };
    
            NonMaximumSuppressionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.NonMaximumSuppressionParameter)
                    return object;
                var message = new $root.caffe.NonMaximumSuppressionParameter();
                if (object.nms_threshold != null)
                    message.nms_threshold = Number(object.nms_threshold);
                if (object.top_k != null)
                    message.top_k = object.top_k | 0;
                if (object.eta != null)
                    message.eta = Number(object.eta);
                return message;
            };
    
            NonMaximumSuppressionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.nms_threshold = 0.3;
                    object.top_k = 0;
                    object.eta = 1;
                }
                if (message.nms_threshold != null && message.hasOwnProperty("nms_threshold"))
                    object.nms_threshold = options.json && !isFinite(message.nms_threshold) ? String(message.nms_threshold) : message.nms_threshold;
                if (message.top_k != null && message.hasOwnProperty("top_k"))
                    object.top_k = message.top_k;
                if (message.eta != null && message.hasOwnProperty("eta"))
                    object.eta = options.json && !isFinite(message.eta) ? String(message.eta) : message.eta;
                return object;
            };
    
            NonMaximumSuppressionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NonMaximumSuppressionParameter;
        })();
    
        caffe.SaveOutputParameter = (function() {
    
            function SaveOutputParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SaveOutputParameter.prototype.output_directory = "";
            SaveOutputParameter.prototype.output_name_prefix = "";
            SaveOutputParameter.prototype.output_format = "";
            SaveOutputParameter.prototype.label_map_file = "";
            SaveOutputParameter.prototype.name_size_file = "";
            SaveOutputParameter.prototype.num_test_image = 0;
            SaveOutputParameter.prototype.resize_param = null;
    
            SaveOutputParameter.create = function create(properties) {
                return new SaveOutputParameter(properties);
            };
    
            SaveOutputParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SaveOutputParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.output_directory = reader.string();
                        break;
                    case 2:
                        message.output_name_prefix = reader.string();
                        break;
                    case 3:
                        message.output_format = reader.string();
                        break;
                    case 4:
                        message.label_map_file = reader.string();
                        break;
                    case 5:
                        message.name_size_file = reader.string();
                        break;
                    case 6:
                        message.num_test_image = reader.uint32();
                        break;
                    case 7:
                        message.resize_param = $root.caffe.ResizeParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SaveOutputParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SaveOutputParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "output_directory":
                        message.output_directory = reader.string();
                        break;
                    case "output_name_prefix":
                        message.output_name_prefix = reader.string();
                        break;
                    case "output_format":
                        message.output_format = reader.string();
                        break;
                    case "label_map_file":
                        message.label_map_file = reader.string();
                        break;
                    case "name_size_file":
                        message.name_size_file = reader.string();
                        break;
                    case "num_test_image":
                        message.num_test_image = reader.uint32();
                        break;
                    case "resize_param":
                        message.resize_param = $root.caffe.ResizeParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SaveOutputParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.output_directory != null && message.hasOwnProperty("output_directory"))
                    if (!$util.isString(message.output_directory))
                        return "output_directory: string expected";
                if (message.output_name_prefix != null && message.hasOwnProperty("output_name_prefix"))
                    if (!$util.isString(message.output_name_prefix))
                        return "output_name_prefix: string expected";
                if (message.output_format != null && message.hasOwnProperty("output_format"))
                    if (!$util.isString(message.output_format))
                        return "output_format: string expected";
                if (message.label_map_file != null && message.hasOwnProperty("label_map_file"))
                    if (!$util.isString(message.label_map_file))
                        return "label_map_file: string expected";
                if (message.name_size_file != null && message.hasOwnProperty("name_size_file"))
                    if (!$util.isString(message.name_size_file))
                        return "name_size_file: string expected";
                if (message.num_test_image != null && message.hasOwnProperty("num_test_image"))
                    if (!$util.isInteger(message.num_test_image))
                        return "num_test_image: integer expected";
                if (message.resize_param != null && message.hasOwnProperty("resize_param")) {
                    var error = $root.caffe.ResizeParameter.verify(message.resize_param);
                    if (error)
                        return "resize_param." + error;
                }
                return null;
            };
    
            SaveOutputParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SaveOutputParameter)
                    return object;
                var message = new $root.caffe.SaveOutputParameter();
                if (object.output_directory != null)
                    message.output_directory = String(object.output_directory);
                if (object.output_name_prefix != null)
                    message.output_name_prefix = String(object.output_name_prefix);
                if (object.output_format != null)
                    message.output_format = String(object.output_format);
                if (object.label_map_file != null)
                    message.label_map_file = String(object.label_map_file);
                if (object.name_size_file != null)
                    message.name_size_file = String(object.name_size_file);
                if (object.num_test_image != null)
                    message.num_test_image = object.num_test_image >>> 0;
                if (object.resize_param != null) {
                    if (typeof object.resize_param !== "object")
                        throw TypeError(".caffe.SaveOutputParameter.resize_param: object expected");
                    message.resize_param = $root.caffe.ResizeParameter.fromObject(object.resize_param);
                }
                return message;
            };
    
            SaveOutputParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.output_directory = "";
                    object.output_name_prefix = "";
                    object.output_format = "";
                    object.label_map_file = "";
                    object.name_size_file = "";
                    object.num_test_image = 0;
                    object.resize_param = null;
                }
                if (message.output_directory != null && message.hasOwnProperty("output_directory"))
                    object.output_directory = message.output_directory;
                if (message.output_name_prefix != null && message.hasOwnProperty("output_name_prefix"))
                    object.output_name_prefix = message.output_name_prefix;
                if (message.output_format != null && message.hasOwnProperty("output_format"))
                    object.output_format = message.output_format;
                if (message.label_map_file != null && message.hasOwnProperty("label_map_file"))
                    object.label_map_file = message.label_map_file;
                if (message.name_size_file != null && message.hasOwnProperty("name_size_file"))
                    object.name_size_file = message.name_size_file;
                if (message.num_test_image != null && message.hasOwnProperty("num_test_image"))
                    object.num_test_image = message.num_test_image;
                if (message.resize_param != null && message.hasOwnProperty("resize_param"))
                    object.resize_param = $root.caffe.ResizeParameter.toObject(message.resize_param, options);
                return object;
            };
    
            SaveOutputParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SaveOutputParameter;
        })();
    
        caffe.ResizeParameter = (function() {
    
            function ResizeParameter(properties) {
                this.pad_value = [];
                this.interp_mode = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ResizeParameter.prototype.prob = 1;
            ResizeParameter.prototype.resize_mode = 1;
            ResizeParameter.prototype.height = 0;
            ResizeParameter.prototype.width = 0;
            ResizeParameter.prototype.height_scale = 0;
            ResizeParameter.prototype.width_scale = 0;
            ResizeParameter.prototype.pad_mode = 1;
            ResizeParameter.prototype.pad_value = $util.emptyArray;
            ResizeParameter.prototype.interp_mode = $util.emptyArray;
    
            ResizeParameter.create = function create(properties) {
                return new ResizeParameter(properties);
            };
    
            ResizeParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ResizeParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.prob = reader.float();
                        break;
                    case 2:
                        message.resize_mode = reader.int32();
                        break;
                    case 3:
                        message.height = reader.uint32();
                        break;
                    case 4:
                        message.width = reader.uint32();
                        break;
                    case 8:
                        message.height_scale = reader.uint32();
                        break;
                    case 9:
                        message.width_scale = reader.uint32();
                        break;
                    case 5:
                        message.pad_mode = reader.int32();
                        break;
                    case 6:
                        if (!(message.pad_value && message.pad_value.length))
                            message.pad_value = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.pad_value.push(reader.float());
                        } else
                            message.pad_value.push(reader.float());
                        break;
                    case 7:
                        if (!(message.interp_mode && message.interp_mode.length))
                            message.interp_mode = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.interp_mode.push(reader.int32());
                        } else
                            message.interp_mode.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ResizeParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ResizeParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "prob":
                        message.prob = reader.float();
                        break;
                    case "resize_mode":
                        message.resize_mode = reader.enum($root.caffe.ResizeParameter.Resize_mode);
                        break;
                    case "height":
                        message.height = reader.uint32();
                        break;
                    case "width":
                        message.width = reader.uint32();
                        break;
                    case "height_scale":
                        message.height_scale = reader.uint32();
                        break;
                    case "width_scale":
                        message.width_scale = reader.uint32();
                        break;
                    case "pad_mode":
                        message.pad_mode = reader.enum($root.caffe.ResizeParameter.Pad_mode);
                        break;
                    case "pad_value":
                        if (!(message.pad_value && message.pad_value.length))
                            message.pad_value = [];
                        message.pad_value.push(reader.float());
                        break;
                    case "interp_mode":
                        if (!(message.interp_mode && message.interp_mode.length))
                            message.interp_mode = [];
                        message.interp_mode.push(reader.enum($root.caffe.ResizeParameter.Interp_mode));
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ResizeParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.prob != null && message.hasOwnProperty("prob"))
                    if (typeof message.prob !== "number")
                        return "prob: number expected";
                if (message.resize_mode != null && message.hasOwnProperty("resize_mode"))
                    switch (message.resize_mode) {
                    default:
                        return "resize_mode: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                if (message.height_scale != null && message.hasOwnProperty("height_scale"))
                    if (!$util.isInteger(message.height_scale))
                        return "height_scale: integer expected";
                if (message.width_scale != null && message.hasOwnProperty("width_scale"))
                    if (!$util.isInteger(message.width_scale))
                        return "width_scale: integer expected";
                if (message.pad_mode != null && message.hasOwnProperty("pad_mode"))
                    switch (message.pad_mode) {
                    default:
                        return "pad_mode: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.pad_value != null && message.hasOwnProperty("pad_value")) {
                    if (!Array.isArray(message.pad_value))
                        return "pad_value: array expected";
                    for (var i = 0; i < message.pad_value.length; ++i)
                        if (typeof message.pad_value[i] !== "number")
                            return "pad_value: number[] expected";
                }
                if (message.interp_mode != null && message.hasOwnProperty("interp_mode")) {
                    if (!Array.isArray(message.interp_mode))
                        return "interp_mode: array expected";
                    for (var i = 0; i < message.interp_mode.length; ++i)
                        switch (message.interp_mode[i]) {
                        default:
                            return "interp_mode: enum value[] expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                }
                return null;
            };
    
            ResizeParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ResizeParameter)
                    return object;
                var message = new $root.caffe.ResizeParameter();
                if (object.prob != null)
                    message.prob = Number(object.prob);
                switch (object.resize_mode) {
                case "WARP":
                case 1:
                    message.resize_mode = 1;
                    break;
                case "FIT_SMALL_SIZE":
                case 2:
                    message.resize_mode = 2;
                    break;
                case "FIT_LARGE_SIZE_AND_PAD":
                case 3:
                    message.resize_mode = 3;
                    break;
                }
                if (object.height != null)
                    message.height = object.height >>> 0;
                if (object.width != null)
                    message.width = object.width >>> 0;
                if (object.height_scale != null)
                    message.height_scale = object.height_scale >>> 0;
                if (object.width_scale != null)
                    message.width_scale = object.width_scale >>> 0;
                switch (object.pad_mode) {
                case "CONSTANT":
                case 1:
                    message.pad_mode = 1;
                    break;
                case "MIRRORED":
                case 2:
                    message.pad_mode = 2;
                    break;
                case "REPEAT_NEAREST":
                case 3:
                    message.pad_mode = 3;
                    break;
                }
                if (object.pad_value) {
                    if (!Array.isArray(object.pad_value))
                        throw TypeError(".caffe.ResizeParameter.pad_value: array expected");
                    message.pad_value = [];
                    for (var i = 0; i < object.pad_value.length; ++i)
                        message.pad_value[i] = Number(object.pad_value[i]);
                }
                if (object.interp_mode) {
                    if (!Array.isArray(object.interp_mode))
                        throw TypeError(".caffe.ResizeParameter.interp_mode: array expected");
                    message.interp_mode = [];
                    for (var i = 0; i < object.interp_mode.length; ++i)
                        switch (object.interp_mode[i]) {
                        default:
                        case "LINEAR":
                        case 1:
                            message.interp_mode[i] = 1;
                            break;
                        case "AREA":
                        case 2:
                            message.interp_mode[i] = 2;
                            break;
                        case "NEAREST":
                        case 3:
                            message.interp_mode[i] = 3;
                            break;
                        case "CUBIC":
                        case 4:
                            message.interp_mode[i] = 4;
                            break;
                        case "LANCZOS4":
                        case 5:
                            message.interp_mode[i] = 5;
                            break;
                        }
                }
                return message;
            };
    
            ResizeParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.pad_value = [];
                    object.interp_mode = [];
                }
                if (options.defaults) {
                    object.prob = 1;
                    object.resize_mode = options.enums === String ? "WARP" : 1;
                    object.height = 0;
                    object.width = 0;
                    object.pad_mode = options.enums === String ? "CONSTANT" : 1;
                    object.height_scale = 0;
                    object.width_scale = 0;
                }
                if (message.prob != null && message.hasOwnProperty("prob"))
                    object.prob = options.json && !isFinite(message.prob) ? String(message.prob) : message.prob;
                if (message.resize_mode != null && message.hasOwnProperty("resize_mode"))
                    object.resize_mode = options.enums === String ? $root.caffe.ResizeParameter.Resize_mode[message.resize_mode] : message.resize_mode;
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                if (message.pad_mode != null && message.hasOwnProperty("pad_mode"))
                    object.pad_mode = options.enums === String ? $root.caffe.ResizeParameter.Pad_mode[message.pad_mode] : message.pad_mode;
                if (message.pad_value && message.pad_value.length) {
                    object.pad_value = [];
                    for (var j = 0; j < message.pad_value.length; ++j)
                        object.pad_value[j] = options.json && !isFinite(message.pad_value[j]) ? String(message.pad_value[j]) : message.pad_value[j];
                }
                if (message.interp_mode && message.interp_mode.length) {
                    object.interp_mode = [];
                    for (var j = 0; j < message.interp_mode.length; ++j)
                        object.interp_mode[j] = options.enums === String ? $root.caffe.ResizeParameter.Interp_mode[message.interp_mode[j]] : message.interp_mode[j];
                }
                if (message.height_scale != null && message.hasOwnProperty("height_scale"))
                    object.height_scale = message.height_scale;
                if (message.width_scale != null && message.hasOwnProperty("width_scale"))
                    object.width_scale = message.width_scale;
                return object;
            };
    
            ResizeParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            ResizeParameter.Resize_mode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "WARP"] = 1;
                values[valuesById[2] = "FIT_SMALL_SIZE"] = 2;
                values[valuesById[3] = "FIT_LARGE_SIZE_AND_PAD"] = 3;
                return values;
            })();
    
            ResizeParameter.Pad_mode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "CONSTANT"] = 1;
                values[valuesById[2] = "MIRRORED"] = 2;
                values[valuesById[3] = "REPEAT_NEAREST"] = 3;
                return values;
            })();
    
            ResizeParameter.Interp_mode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LINEAR"] = 1;
                values[valuesById[2] = "AREA"] = 2;
                values[valuesById[3] = "NEAREST"] = 3;
                values[valuesById[4] = "CUBIC"] = 4;
                values[valuesById[5] = "LANCZOS4"] = 5;
                return values;
            })();
    
            return ResizeParameter;
        })();
    
        caffe.NormalizedBBox = (function() {
    
            function NormalizedBBox(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            NormalizedBBox.prototype.xmin = 0;
            NormalizedBBox.prototype.ymin = 0;
            NormalizedBBox.prototype.xmax = 0;
            NormalizedBBox.prototype.ymax = 0;
            NormalizedBBox.prototype.label = 0;
            NormalizedBBox.prototype.difficult = false;
            NormalizedBBox.prototype.score = 0;
            NormalizedBBox.prototype.size = 0;
    
            NormalizedBBox.create = function create(properties) {
                return new NormalizedBBox(properties);
            };
    
            NormalizedBBox.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.NormalizedBBox();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.xmin = reader.float();
                        break;
                    case 2:
                        message.ymin = reader.float();
                        break;
                    case 3:
                        message.xmax = reader.float();
                        break;
                    case 4:
                        message.ymax = reader.float();
                        break;
                    case 5:
                        message.label = reader.int32();
                        break;
                    case 6:
                        message.difficult = reader.bool();
                        break;
                    case 7:
                        message.score = reader.float();
                        break;
                    case 8:
                        message.size = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            NormalizedBBox.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.NormalizedBBox();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "xmin":
                        message.xmin = reader.float();
                        break;
                    case "ymin":
                        message.ymin = reader.float();
                        break;
                    case "xmax":
                        message.xmax = reader.float();
                        break;
                    case "ymax":
                        message.ymax = reader.float();
                        break;
                    case "label":
                        message.label = reader.int32();
                        break;
                    case "difficult":
                        message.difficult = reader.bool();
                        break;
                    case "score":
                        message.score = reader.float();
                        break;
                    case "size":
                        message.size = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            NormalizedBBox.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.xmin != null && message.hasOwnProperty("xmin"))
                    if (typeof message.xmin !== "number")
                        return "xmin: number expected";
                if (message.ymin != null && message.hasOwnProperty("ymin"))
                    if (typeof message.ymin !== "number")
                        return "ymin: number expected";
                if (message.xmax != null && message.hasOwnProperty("xmax"))
                    if (typeof message.xmax !== "number")
                        return "xmax: number expected";
                if (message.ymax != null && message.hasOwnProperty("ymax"))
                    if (typeof message.ymax !== "number")
                        return "ymax: number expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    if (!$util.isInteger(message.label))
                        return "label: integer expected";
                if (message.difficult != null && message.hasOwnProperty("difficult"))
                    if (typeof message.difficult !== "boolean")
                        return "difficult: boolean expected";
                if (message.score != null && message.hasOwnProperty("score"))
                    if (typeof message.score !== "number")
                        return "score: number expected";
                if (message.size != null && message.hasOwnProperty("size"))
                    if (typeof message.size !== "number")
                        return "size: number expected";
                return null;
            };
    
            NormalizedBBox.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.NormalizedBBox)
                    return object;
                var message = new $root.caffe.NormalizedBBox();
                if (object.xmin != null)
                    message.xmin = Number(object.xmin);
                if (object.ymin != null)
                    message.ymin = Number(object.ymin);
                if (object.xmax != null)
                    message.xmax = Number(object.xmax);
                if (object.ymax != null)
                    message.ymax = Number(object.ymax);
                if (object.label != null)
                    message.label = object.label | 0;
                if (object.difficult != null)
                    message.difficult = Boolean(object.difficult);
                if (object.score != null)
                    message.score = Number(object.score);
                if (object.size != null)
                    message.size = Number(object.size);
                return message;
            };
    
            NormalizedBBox.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.xmin = 0;
                    object.ymin = 0;
                    object.xmax = 0;
                    object.ymax = 0;
                    object.label = 0;
                    object.difficult = false;
                    object.score = 0;
                    object.size = 0;
                }
                if (message.xmin != null && message.hasOwnProperty("xmin"))
                    object.xmin = options.json && !isFinite(message.xmin) ? String(message.xmin) : message.xmin;
                if (message.ymin != null && message.hasOwnProperty("ymin"))
                    object.ymin = options.json && !isFinite(message.ymin) ? String(message.ymin) : message.ymin;
                if (message.xmax != null && message.hasOwnProperty("xmax"))
                    object.xmax = options.json && !isFinite(message.xmax) ? String(message.xmax) : message.xmax;
                if (message.ymax != null && message.hasOwnProperty("ymax"))
                    object.ymax = options.json && !isFinite(message.ymax) ? String(message.ymax) : message.ymax;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = message.label;
                if (message.difficult != null && message.hasOwnProperty("difficult"))
                    object.difficult = message.difficult;
                if (message.score != null && message.hasOwnProperty("score"))
                    object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
                if (message.size != null && message.hasOwnProperty("size"))
                    object.size = options.json && !isFinite(message.size) ? String(message.size) : message.size;
                return object;
            };
    
            NormalizedBBox.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NormalizedBBox;
        })();
    
        caffe.Annotation = (function() {
    
            function Annotation(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            Annotation.prototype.instance_id = 0;
            Annotation.prototype.bbox = null;
    
            Annotation.create = function create(properties) {
                return new Annotation(properties);
            };
    
            Annotation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.Annotation();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.instance_id = reader.int32();
                        break;
                    case 2:
                        message.bbox = $root.caffe.NormalizedBBox.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            Annotation.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.Annotation();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "instance_id":
                        message.instance_id = reader.int32();
                        break;
                    case "bbox":
                        message.bbox = $root.caffe.NormalizedBBox.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            Annotation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.instance_id != null && message.hasOwnProperty("instance_id"))
                    if (!$util.isInteger(message.instance_id))
                        return "instance_id: integer expected";
                if (message.bbox != null && message.hasOwnProperty("bbox")) {
                    var error = $root.caffe.NormalizedBBox.verify(message.bbox);
                    if (error)
                        return "bbox." + error;
                }
                return null;
            };
    
            Annotation.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.Annotation)
                    return object;
                var message = new $root.caffe.Annotation();
                if (object.instance_id != null)
                    message.instance_id = object.instance_id | 0;
                if (object.bbox != null) {
                    if (typeof object.bbox !== "object")
                        throw TypeError(".caffe.Annotation.bbox: object expected");
                    message.bbox = $root.caffe.NormalizedBBox.fromObject(object.bbox);
                }
                return message;
            };
    
            Annotation.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.instance_id = 0;
                    object.bbox = null;
                }
                if (message.instance_id != null && message.hasOwnProperty("instance_id"))
                    object.instance_id = message.instance_id;
                if (message.bbox != null && message.hasOwnProperty("bbox"))
                    object.bbox = $root.caffe.NormalizedBBox.toObject(message.bbox, options);
                return object;
            };
    
            Annotation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Annotation;
        })();
    
        caffe.AnnotationGroup = (function() {
    
            function AnnotationGroup(properties) {
                this.annotation = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            AnnotationGroup.prototype.group_label = 0;
            AnnotationGroup.prototype.annotation = $util.emptyArray;
    
            AnnotationGroup.create = function create(properties) {
                return new AnnotationGroup(properties);
            };
    
            AnnotationGroup.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.AnnotationGroup();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.group_label = reader.int32();
                        break;
                    case 2:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.caffe.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            AnnotationGroup.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.AnnotationGroup();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "group_label":
                        message.group_label = reader.int32();
                        break;
                    case "annotation":
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.caffe.Annotation.decodeText(reader, true));
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            AnnotationGroup.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.group_label != null && message.hasOwnProperty("group_label"))
                    if (!$util.isInteger(message.group_label))
                        return "group_label: integer expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (var i = 0; i < message.annotation.length; ++i) {
                        var error = $root.caffe.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };
    
            AnnotationGroup.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.AnnotationGroup)
                    return object;
                var message = new $root.caffe.AnnotationGroup();
                if (object.group_label != null)
                    message.group_label = object.group_label | 0;
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".caffe.AnnotationGroup.annotation: array expected");
                    message.annotation = [];
                    for (var i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".caffe.AnnotationGroup.annotation: object expected");
                        message.annotation[i] = $root.caffe.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };
    
            AnnotationGroup.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (options.defaults)
                    object.group_label = 0;
                if (message.group_label != null && message.hasOwnProperty("group_label"))
                    object.group_label = message.group_label;
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (var j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.caffe.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };
    
            AnnotationGroup.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AnnotationGroup;
        })();
    
        caffe.AnnotatedDatum = (function() {
    
            function AnnotatedDatum(properties) {
                this.annotation_group = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            AnnotatedDatum.prototype.datum = null;
            AnnotatedDatum.prototype.type = 0;
            AnnotatedDatum.prototype.annotation_group = $util.emptyArray;
    
            AnnotatedDatum.create = function create(properties) {
                return new AnnotatedDatum(properties);
            };
    
            AnnotatedDatum.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.AnnotatedDatum();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.datum = $root.caffe.Datum.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.type = reader.int32();
                        break;
                    case 3:
                        if (!(message.annotation_group && message.annotation_group.length))
                            message.annotation_group = [];
                        message.annotation_group.push($root.caffe.AnnotationGroup.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            AnnotatedDatum.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.AnnotatedDatum();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "datum":
                        message.datum = $root.caffe.Datum.decodeText(reader, true);
                        break;
                    case "type":
                        message.type = reader.enum($root.caffe.AnnotatedDatum.AnnotationType);
                        break;
                    case "annotation_group":
                        if (!(message.annotation_group && message.annotation_group.length))
                            message.annotation_group = [];
                        message.annotation_group.push($root.caffe.AnnotationGroup.decodeText(reader, true));
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            AnnotatedDatum.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.datum != null && message.hasOwnProperty("datum")) {
                    var error = $root.caffe.Datum.verify(message.datum);
                    if (error)
                        return "datum." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                        break;
                    }
                if (message.annotation_group != null && message.hasOwnProperty("annotation_group")) {
                    if (!Array.isArray(message.annotation_group))
                        return "annotation_group: array expected";
                    for (var i = 0; i < message.annotation_group.length; ++i) {
                        var error = $root.caffe.AnnotationGroup.verify(message.annotation_group[i]);
                        if (error)
                            return "annotation_group." + error;
                    }
                }
                return null;
            };
    
            AnnotatedDatum.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.AnnotatedDatum)
                    return object;
                var message = new $root.caffe.AnnotatedDatum();
                if (object.datum != null) {
                    if (typeof object.datum !== "object")
                        throw TypeError(".caffe.AnnotatedDatum.datum: object expected");
                    message.datum = $root.caffe.Datum.fromObject(object.datum);
                }
                switch (object.type) {
                case "BBOX":
                case 0:
                    message.type = 0;
                    break;
                }
                if (object.annotation_group) {
                    if (!Array.isArray(object.annotation_group))
                        throw TypeError(".caffe.AnnotatedDatum.annotation_group: array expected");
                    message.annotation_group = [];
                    for (var i = 0; i < object.annotation_group.length; ++i) {
                        if (typeof object.annotation_group[i] !== "object")
                            throw TypeError(".caffe.AnnotatedDatum.annotation_group: object expected");
                        message.annotation_group[i] = $root.caffe.AnnotationGroup.fromObject(object.annotation_group[i]);
                    }
                }
                return message;
            };
    
            AnnotatedDatum.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.annotation_group = [];
                if (options.defaults) {
                    object.datum = null;
                    object.type = options.enums === String ? "BBOX" : 0;
                }
                if (message.datum != null && message.hasOwnProperty("datum"))
                    object.datum = $root.caffe.Datum.toObject(message.datum, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.caffe.AnnotatedDatum.AnnotationType[message.type] : message.type;
                if (message.annotation_group && message.annotation_group.length) {
                    object.annotation_group = [];
                    for (var j = 0; j < message.annotation_group.length; ++j)
                        object.annotation_group[j] = $root.caffe.AnnotationGroup.toObject(message.annotation_group[j], options);
                }
                return object;
            };
    
            AnnotatedDatum.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            AnnotatedDatum.AnnotationType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "BBOX"] = 0;
                return values;
            })();
    
            return AnnotatedDatum;
        })();
    
        caffe.MultinodeLayerParameter = (function() {
    
            function MultinodeLayerParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            MultinodeLayerParameter.prototype.num_nodes = 0;
            MultinodeLayerParameter.prototype.model_parts = 1;
    
            MultinodeLayerParameter.create = function create(properties) {
                return new MultinodeLayerParameter(properties);
            };
    
            MultinodeLayerParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.MultinodeLayerParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_nodes = reader.uint32();
                        break;
                    case 2:
                        message.model_parts = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            MultinodeLayerParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.MultinodeLayerParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_nodes":
                        message.num_nodes = reader.uint32();
                        break;
                    case "model_parts":
                        message.model_parts = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            MultinodeLayerParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_nodes != null && message.hasOwnProperty("num_nodes"))
                    if (!$util.isInteger(message.num_nodes))
                        return "num_nodes: integer expected";
                if (message.model_parts != null && message.hasOwnProperty("model_parts"))
                    if (!$util.isInteger(message.model_parts))
                        return "model_parts: integer expected";
                return null;
            };
    
            MultinodeLayerParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.MultinodeLayerParameter)
                    return object;
                var message = new $root.caffe.MultinodeLayerParameter();
                if (object.num_nodes != null)
                    message.num_nodes = object.num_nodes >>> 0;
                if (object.model_parts != null)
                    message.model_parts = object.model_parts >>> 0;
                return message;
            };
    
            MultinodeLayerParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.num_nodes = 0;
                    object.model_parts = 1;
                }
                if (message.num_nodes != null && message.hasOwnProperty("num_nodes"))
                    object.num_nodes = message.num_nodes;
                if (message.model_parts != null && message.hasOwnProperty("model_parts"))
                    object.model_parts = message.model_parts;
                return object;
            };
    
            MultinodeLayerParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MultinodeLayerParameter;
        })();
    
        caffe.MnActivationParameter = (function() {
    
            function MnActivationParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            MnActivationParameter.prototype.num_nodes_in = 0;
            MnActivationParameter.prototype.num_nodes_out = 0;
            MnActivationParameter.prototype.model_parts_in = 1;
            MnActivationParameter.prototype.model_parts_out = 1;
            MnActivationParameter.prototype.need_reduce = true;
    
            MnActivationParameter.create = function create(properties) {
                return new MnActivationParameter(properties);
            };
    
            MnActivationParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.MnActivationParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_nodes_in = reader.uint32();
                        break;
                    case 2:
                        message.num_nodes_out = reader.uint32();
                        break;
                    case 3:
                        message.model_parts_in = reader.uint32();
                        break;
                    case 4:
                        message.model_parts_out = reader.uint32();
                        break;
                    case 5:
                        message.need_reduce = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            MnActivationParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.MnActivationParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_nodes_in":
                        message.num_nodes_in = reader.uint32();
                        break;
                    case "num_nodes_out":
                        message.num_nodes_out = reader.uint32();
                        break;
                    case "model_parts_in":
                        message.model_parts_in = reader.uint32();
                        break;
                    case "model_parts_out":
                        message.model_parts_out = reader.uint32();
                        break;
                    case "need_reduce":
                        message.need_reduce = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            MnActivationParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_nodes_in != null && message.hasOwnProperty("num_nodes_in"))
                    if (!$util.isInteger(message.num_nodes_in))
                        return "num_nodes_in: integer expected";
                if (message.num_nodes_out != null && message.hasOwnProperty("num_nodes_out"))
                    if (!$util.isInteger(message.num_nodes_out))
                        return "num_nodes_out: integer expected";
                if (message.model_parts_in != null && message.hasOwnProperty("model_parts_in"))
                    if (!$util.isInteger(message.model_parts_in))
                        return "model_parts_in: integer expected";
                if (message.model_parts_out != null && message.hasOwnProperty("model_parts_out"))
                    if (!$util.isInteger(message.model_parts_out))
                        return "model_parts_out: integer expected";
                if (message.need_reduce != null && message.hasOwnProperty("need_reduce"))
                    if (typeof message.need_reduce !== "boolean")
                        return "need_reduce: boolean expected";
                return null;
            };
    
            MnActivationParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.MnActivationParameter)
                    return object;
                var message = new $root.caffe.MnActivationParameter();
                if (object.num_nodes_in != null)
                    message.num_nodes_in = object.num_nodes_in >>> 0;
                if (object.num_nodes_out != null)
                    message.num_nodes_out = object.num_nodes_out >>> 0;
                if (object.model_parts_in != null)
                    message.model_parts_in = object.model_parts_in >>> 0;
                if (object.model_parts_out != null)
                    message.model_parts_out = object.model_parts_out >>> 0;
                if (object.need_reduce != null)
                    message.need_reduce = Boolean(object.need_reduce);
                return message;
            };
    
            MnActivationParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.num_nodes_in = 0;
                    object.num_nodes_out = 0;
                    object.model_parts_in = 1;
                    object.model_parts_out = 1;
                    object.need_reduce = true;
                }
                if (message.num_nodes_in != null && message.hasOwnProperty("num_nodes_in"))
                    object.num_nodes_in = message.num_nodes_in;
                if (message.num_nodes_out != null && message.hasOwnProperty("num_nodes_out"))
                    object.num_nodes_out = message.num_nodes_out;
                if (message.model_parts_in != null && message.hasOwnProperty("model_parts_in"))
                    object.model_parts_in = message.model_parts_in;
                if (message.model_parts_out != null && message.hasOwnProperty("model_parts_out"))
                    object.model_parts_out = message.model_parts_out;
                if (message.need_reduce != null && message.hasOwnProperty("need_reduce"))
                    object.need_reduce = message.need_reduce;
                return object;
            };
    
            MnActivationParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MnActivationParameter;
        })();
    
        caffe.BoxAnnotatorOHEMParameter = (function() {
    
            function BoxAnnotatorOHEMParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BoxAnnotatorOHEMParameter.prototype.roi_per_img = 0;
            BoxAnnotatorOHEMParameter.prototype.ignore_label = -1;
    
            BoxAnnotatorOHEMParameter.create = function create(properties) {
                return new BoxAnnotatorOHEMParameter(properties);
            };
    
            BoxAnnotatorOHEMParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BoxAnnotatorOHEMParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.roi_per_img = reader.uint32();
                        break;
                    case 2:
                        message.ignore_label = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("roi_per_img"))
                    throw $util.ProtocolError("missing required 'roi_per_img'", { instance: message });
                return message;
            };
    
            BoxAnnotatorOHEMParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BoxAnnotatorOHEMParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "roi_per_img":
                        message.roi_per_img = reader.uint32();
                        break;
                    case "ignore_label":
                        message.ignore_label = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                if (!message.hasOwnProperty("roi_per_img"))
                    throw $util.ProtocolError("missing required 'roi_per_img'", { instance: message });
                return message;
            };
    
            BoxAnnotatorOHEMParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.roi_per_img))
                    return "roi_per_img: integer expected";
                if (message.ignore_label != null && message.hasOwnProperty("ignore_label"))
                    if (!$util.isInteger(message.ignore_label))
                        return "ignore_label: integer expected";
                return null;
            };
    
            BoxAnnotatorOHEMParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BoxAnnotatorOHEMParameter)
                    return object;
                var message = new $root.caffe.BoxAnnotatorOHEMParameter();
                if (object.roi_per_img != null)
                    message.roi_per_img = object.roi_per_img >>> 0;
                if (object.ignore_label != null)
                    message.ignore_label = object.ignore_label | 0;
                return message;
            };
    
            BoxAnnotatorOHEMParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.roi_per_img = 0;
                    object.ignore_label = -1;
                }
                if (message.roi_per_img != null && message.hasOwnProperty("roi_per_img"))
                    object.roi_per_img = message.roi_per_img;
                if (message.ignore_label != null && message.hasOwnProperty("ignore_label"))
                    object.ignore_label = message.ignore_label;
                return object;
            };
    
            BoxAnnotatorOHEMParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BoxAnnotatorOHEMParameter;
        })();
    
        caffe.PSROIPoolingParameter = (function() {
    
            function PSROIPoolingParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            PSROIPoolingParameter.prototype.spatial_scale = 0;
            PSROIPoolingParameter.prototype.output_dim = 0;
            PSROIPoolingParameter.prototype.group_size = 0;
    
            PSROIPoolingParameter.create = function create(properties) {
                return new PSROIPoolingParameter(properties);
            };
    
            PSROIPoolingParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.PSROIPoolingParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.spatial_scale = reader.float();
                        break;
                    case 2:
                        message.output_dim = reader.int32();
                        break;
                    case 3:
                        message.group_size = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("spatial_scale"))
                    throw $util.ProtocolError("missing required 'spatial_scale'", { instance: message });
                if (!message.hasOwnProperty("output_dim"))
                    throw $util.ProtocolError("missing required 'output_dim'", { instance: message });
                if (!message.hasOwnProperty("group_size"))
                    throw $util.ProtocolError("missing required 'group_size'", { instance: message });
                return message;
            };
    
            PSROIPoolingParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.PSROIPoolingParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "spatial_scale":
                        message.spatial_scale = reader.float();
                        break;
                    case "output_dim":
                        message.output_dim = reader.int32();
                        break;
                    case "group_size":
                        message.group_size = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                if (!message.hasOwnProperty("spatial_scale"))
                    throw $util.ProtocolError("missing required 'spatial_scale'", { instance: message });
                if (!message.hasOwnProperty("output_dim"))
                    throw $util.ProtocolError("missing required 'output_dim'", { instance: message });
                if (!message.hasOwnProperty("group_size"))
                    throw $util.ProtocolError("missing required 'group_size'", { instance: message });
                return message;
            };
    
            PSROIPoolingParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (typeof message.spatial_scale !== "number")
                    return "spatial_scale: number expected";
                if (!$util.isInteger(message.output_dim))
                    return "output_dim: integer expected";
                if (!$util.isInteger(message.group_size))
                    return "group_size: integer expected";
                return null;
            };
    
            PSROIPoolingParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.PSROIPoolingParameter)
                    return object;
                var message = new $root.caffe.PSROIPoolingParameter();
                if (object.spatial_scale != null)
                    message.spatial_scale = Number(object.spatial_scale);
                if (object.output_dim != null)
                    message.output_dim = object.output_dim | 0;
                if (object.group_size != null)
                    message.group_size = object.group_size | 0;
                return message;
            };
    
            PSROIPoolingParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.spatial_scale = 0;
                    object.output_dim = 0;
                    object.group_size = 0;
                }
                if (message.spatial_scale != null && message.hasOwnProperty("spatial_scale"))
                    object.spatial_scale = options.json && !isFinite(message.spatial_scale) ? String(message.spatial_scale) : message.spatial_scale;
                if (message.output_dim != null && message.hasOwnProperty("output_dim"))
                    object.output_dim = message.output_dim;
                if (message.group_size != null && message.hasOwnProperty("group_size"))
                    object.group_size = message.group_size;
                return object;
            };
    
            PSROIPoolingParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PSROIPoolingParameter;
        })();
    
        caffe.ROIPoolingParameter = (function() {
    
            function ROIPoolingParameter(properties) {
                this.pooled_size = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ROIPoolingParameter.prototype.pooled_h = 0;
            ROIPoolingParameter.prototype.pooled_w = 0;
            ROIPoolingParameter.prototype.spatial_scale = 1;
            ROIPoolingParameter.prototype.pooled_size = $util.emptyArray;
            ROIPoolingParameter.prototype.pad_ratio = 0;
            ROIPoolingParameter.prototype.ringpad = false;
    
            ROIPoolingParameter.create = function create(properties) {
                return new ROIPoolingParameter(properties);
            };
    
            ROIPoolingParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ROIPoolingParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pooled_h = reader.uint32();
                        break;
                    case 2:
                        message.pooled_w = reader.uint32();
                        break;
                    case 3:
                        message.spatial_scale = reader.float();
                        break;
                    case 4:
                        if (!(message.pooled_size && message.pooled_size.length))
                            message.pooled_size = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.pooled_size.push(reader.uint32());
                        } else
                            message.pooled_size.push(reader.uint32());
                        break;
                    case 6:
                        message.pad_ratio = reader.float();
                        break;
                    case 5:
                        message.ringpad = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ROIPoolingParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ROIPoolingParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "pooled_h":
                        message.pooled_h = reader.uint32();
                        break;
                    case "pooled_w":
                        message.pooled_w = reader.uint32();
                        break;
                    case "spatial_scale":
                        message.spatial_scale = reader.float();
                        break;
                    case "pooled_size":
                        if (!(message.pooled_size && message.pooled_size.length))
                            message.pooled_size = [];
                        message.pooled_size.push(reader.uint32());
                        break;
                    case "pad_ratio":
                        message.pad_ratio = reader.float();
                        break;
                    case "ringpad":
                        message.ringpad = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ROIPoolingParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pooled_h != null && message.hasOwnProperty("pooled_h"))
                    if (!$util.isInteger(message.pooled_h))
                        return "pooled_h: integer expected";
                if (message.pooled_w != null && message.hasOwnProperty("pooled_w"))
                    if (!$util.isInteger(message.pooled_w))
                        return "pooled_w: integer expected";
                if (message.spatial_scale != null && message.hasOwnProperty("spatial_scale"))
                    if (typeof message.spatial_scale !== "number")
                        return "spatial_scale: number expected";
                if (message.pooled_size != null && message.hasOwnProperty("pooled_size")) {
                    if (!Array.isArray(message.pooled_size))
                        return "pooled_size: array expected";
                    for (var i = 0; i < message.pooled_size.length; ++i)
                        if (!$util.isInteger(message.pooled_size[i]))
                            return "pooled_size: integer[] expected";
                }
                if (message.pad_ratio != null && message.hasOwnProperty("pad_ratio"))
                    if (typeof message.pad_ratio !== "number")
                        return "pad_ratio: number expected";
                if (message.ringpad != null && message.hasOwnProperty("ringpad"))
                    if (typeof message.ringpad !== "boolean")
                        return "ringpad: boolean expected";
                return null;
            };
    
            ROIPoolingParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ROIPoolingParameter)
                    return object;
                var message = new $root.caffe.ROIPoolingParameter();
                if (object.pooled_h != null)
                    message.pooled_h = object.pooled_h >>> 0;
                if (object.pooled_w != null)
                    message.pooled_w = object.pooled_w >>> 0;
                if (object.spatial_scale != null)
                    message.spatial_scale = Number(object.spatial_scale);
                if (object.pooled_size) {
                    if (!Array.isArray(object.pooled_size))
                        throw TypeError(".caffe.ROIPoolingParameter.pooled_size: array expected");
                    message.pooled_size = [];
                    for (var i = 0; i < object.pooled_size.length; ++i)
                        message.pooled_size[i] = object.pooled_size[i] >>> 0;
                }
                if (object.pad_ratio != null)
                    message.pad_ratio = Number(object.pad_ratio);
                if (object.ringpad != null)
                    message.ringpad = Boolean(object.ringpad);
                return message;
            };
    
            ROIPoolingParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.pooled_size = [];
                if (options.defaults) {
                    object.pooled_h = 0;
                    object.pooled_w = 0;
                    object.spatial_scale = 1;
                    object.ringpad = false;
                    object.pad_ratio = 0;
                }
                if (message.pooled_h != null && message.hasOwnProperty("pooled_h"))
                    object.pooled_h = message.pooled_h;
                if (message.pooled_w != null && message.hasOwnProperty("pooled_w"))
                    object.pooled_w = message.pooled_w;
                if (message.spatial_scale != null && message.hasOwnProperty("spatial_scale"))
                    object.spatial_scale = options.json && !isFinite(message.spatial_scale) ? String(message.spatial_scale) : message.spatial_scale;
                if (message.pooled_size && message.pooled_size.length) {
                    object.pooled_size = [];
                    for (var j = 0; j < message.pooled_size.length; ++j)
                        object.pooled_size[j] = message.pooled_size[j];
                }
                if (message.ringpad != null && message.hasOwnProperty("ringpad"))
                    object.ringpad = message.ringpad;
                if (message.pad_ratio != null && message.hasOwnProperty("pad_ratio"))
                    object.pad_ratio = options.json && !isFinite(message.pad_ratio) ? String(message.pad_ratio) : message.pad_ratio;
                return object;
            };
    
            ROIPoolingParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ROIPoolingParameter;
        })();
    
        caffe.SpatialDropoutParameter = (function() {
    
            function SpatialDropoutParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SpatialDropoutParameter.prototype.dropout_ratio = 0.5;
    
            SpatialDropoutParameter.create = function create(properties) {
                return new SpatialDropoutParameter(properties);
            };
    
            SpatialDropoutParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SpatialDropoutParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.dropout_ratio = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SpatialDropoutParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SpatialDropoutParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "dropout_ratio":
                        message.dropout_ratio = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SpatialDropoutParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.dropout_ratio != null && message.hasOwnProperty("dropout_ratio"))
                    if (typeof message.dropout_ratio !== "number")
                        return "dropout_ratio: number expected";
                return null;
            };
    
            SpatialDropoutParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SpatialDropoutParameter)
                    return object;
                var message = new $root.caffe.SpatialDropoutParameter();
                if (object.dropout_ratio != null)
                    message.dropout_ratio = Number(object.dropout_ratio);
                return message;
            };
    
            SpatialDropoutParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.dropout_ratio = 0.5;
                if (message.dropout_ratio != null && message.hasOwnProperty("dropout_ratio"))
                    object.dropout_ratio = options.json && !isFinite(message.dropout_ratio) ? String(message.dropout_ratio) : message.dropout_ratio;
                return object;
            };
    
            SpatialDropoutParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SpatialDropoutParameter;
        })();
    
        caffe.MnParamGradCompressParameter = (function() {
    
            function MnParamGradCompressParameter(properties) {
                this.param_grad_compress_enable = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            MnParamGradCompressParameter.prototype.param_grad_compress_enable = $util.emptyArray;
    
            MnParamGradCompressParameter.create = function create(properties) {
                return new MnParamGradCompressParameter(properties);
            };
    
            MnParamGradCompressParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.MnParamGradCompressParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.param_grad_compress_enable && message.param_grad_compress_enable.length))
                            message.param_grad_compress_enable = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.param_grad_compress_enable.push(reader.bool());
                        } else
                            message.param_grad_compress_enable.push(reader.bool());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            MnParamGradCompressParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.MnParamGradCompressParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "param_grad_compress_enable":
                        if (!(message.param_grad_compress_enable && message.param_grad_compress_enable.length))
                            message.param_grad_compress_enable = [];
                        message.param_grad_compress_enable.push(reader.bool());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            MnParamGradCompressParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.param_grad_compress_enable != null && message.hasOwnProperty("param_grad_compress_enable")) {
                    if (!Array.isArray(message.param_grad_compress_enable))
                        return "param_grad_compress_enable: array expected";
                    for (var i = 0; i < message.param_grad_compress_enable.length; ++i)
                        if (typeof message.param_grad_compress_enable[i] !== "boolean")
                            return "param_grad_compress_enable: boolean[] expected";
                }
                return null;
            };
    
            MnParamGradCompressParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.MnParamGradCompressParameter)
                    return object;
                var message = new $root.caffe.MnParamGradCompressParameter();
                if (object.param_grad_compress_enable) {
                    if (!Array.isArray(object.param_grad_compress_enable))
                        throw TypeError(".caffe.MnParamGradCompressParameter.param_grad_compress_enable: array expected");
                    message.param_grad_compress_enable = [];
                    for (var i = 0; i < object.param_grad_compress_enable.length; ++i)
                        message.param_grad_compress_enable[i] = Boolean(object.param_grad_compress_enable[i]);
                }
                return message;
            };
    
            MnParamGradCompressParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.param_grad_compress_enable = [];
                if (message.param_grad_compress_enable && message.param_grad_compress_enable.length) {
                    object.param_grad_compress_enable = [];
                    for (var j = 0; j < message.param_grad_compress_enable.length; ++j)
                        object.param_grad_compress_enable[j] = message.param_grad_compress_enable[j];
                }
                return object;
            };
    
            MnParamGradCompressParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MnParamGradCompressParameter;
        })();
    
        caffe.QuantizationParameter = (function() {
    
            function QuantizationParameter(properties) {
                this.fl_layer_in = [];
                this.fl_layer_out = [];
                this.fl_params = [];
                this.scale_in = [];
                this.scale_out = [];
                this.scale_params = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            QuantizationParameter.prototype.precision = 0;
            QuantizationParameter.prototype.rounding_scheme = 0;
            QuantizationParameter.prototype.bw_layer_in = 32;
            QuantizationParameter.prototype.bw_layer_out = 32;
            QuantizationParameter.prototype.bw_params = 32;
            QuantizationParameter.prototype.fl_layer_in = $util.emptyArray;
            QuantizationParameter.prototype.fl_layer_out = $util.emptyArray;
            QuantizationParameter.prototype.fl_params = $util.emptyArray;
            QuantizationParameter.prototype.scale_in = $util.emptyArray;
            QuantizationParameter.prototype.scale_out = $util.emptyArray;
            QuantizationParameter.prototype.scale_params = $util.emptyArray;
    
            QuantizationParameter.create = function create(properties) {
                return new QuantizationParameter(properties);
            };
    
            QuantizationParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.QuantizationParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.precision = reader.int32();
                        break;
                    case 2:
                        message.rounding_scheme = reader.int32();
                        break;
                    case 3:
                        message.bw_layer_in = reader.uint32();
                        break;
                    case 4:
                        message.bw_layer_out = reader.uint32();
                        break;
                    case 5:
                        message.bw_params = reader.uint32();
                        break;
                    case 6:
                        if (!(message.fl_layer_in && message.fl_layer_in.length))
                            message.fl_layer_in = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.fl_layer_in.push(reader.int32());
                        } else
                            message.fl_layer_in.push(reader.int32());
                        break;
                    case 7:
                        if (!(message.fl_layer_out && message.fl_layer_out.length))
                            message.fl_layer_out = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.fl_layer_out.push(reader.int32());
                        } else
                            message.fl_layer_out.push(reader.int32());
                        break;
                    case 8:
                        if (!(message.fl_params && message.fl_params.length))
                            message.fl_params = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.fl_params.push(reader.int32());
                        } else
                            message.fl_params.push(reader.int32());
                        break;
                    case 20:
                        if (!(message.scale_in && message.scale_in.length))
                            message.scale_in = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.scale_in.push(reader.float());
                        } else
                            message.scale_in.push(reader.float());
                        break;
                    case 21:
                        if (!(message.scale_out && message.scale_out.length))
                            message.scale_out = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.scale_out.push(reader.float());
                        } else
                            message.scale_out.push(reader.float());
                        break;
                    case 22:
                        if (!(message.scale_params && message.scale_params.length))
                            message.scale_params = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.scale_params.push(reader.float());
                        } else
                            message.scale_params.push(reader.float());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            QuantizationParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.QuantizationParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "precision":
                        message.precision = reader.enum($root.caffe.QuantizationParameter.Precision);
                        break;
                    case "rounding_scheme":
                        message.rounding_scheme = reader.enum($root.caffe.QuantizationParameter.Rounding);
                        break;
                    case "bw_layer_in":
                        message.bw_layer_in = reader.uint32();
                        break;
                    case "bw_layer_out":
                        message.bw_layer_out = reader.uint32();
                        break;
                    case "bw_params":
                        message.bw_params = reader.uint32();
                        break;
                    case "fl_layer_in":
                        if (!(message.fl_layer_in && message.fl_layer_in.length))
                            message.fl_layer_in = [];
                        message.fl_layer_in.push(reader.int32());
                        break;
                    case "fl_layer_out":
                        if (!(message.fl_layer_out && message.fl_layer_out.length))
                            message.fl_layer_out = [];
                        message.fl_layer_out.push(reader.int32());
                        break;
                    case "fl_params":
                        if (!(message.fl_params && message.fl_params.length))
                            message.fl_params = [];
                        message.fl_params.push(reader.int32());
                        break;
                    case "scale_in":
                        if (!(message.scale_in && message.scale_in.length))
                            message.scale_in = [];
                        message.scale_in.push(reader.float());
                        break;
                    case "scale_out":
                        if (!(message.scale_out && message.scale_out.length))
                            message.scale_out = [];
                        message.scale_out.push(reader.float());
                        break;
                    case "scale_params":
                        if (!(message.scale_params && message.scale_params.length))
                            message.scale_params = [];
                        message.scale_params.push(reader.float());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            QuantizationParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.precision != null && message.hasOwnProperty("precision"))
                    switch (message.precision) {
                    default:
                        return "precision: enum value expected";
                    case 0:
                        break;
                    }
                if (message.rounding_scheme != null && message.hasOwnProperty("rounding_scheme"))
                    switch (message.rounding_scheme) {
                    default:
                        return "rounding_scheme: enum value expected";
                    case 0:
                        break;
                    }
                if (message.bw_layer_in != null && message.hasOwnProperty("bw_layer_in"))
                    if (!$util.isInteger(message.bw_layer_in))
                        return "bw_layer_in: integer expected";
                if (message.bw_layer_out != null && message.hasOwnProperty("bw_layer_out"))
                    if (!$util.isInteger(message.bw_layer_out))
                        return "bw_layer_out: integer expected";
                if (message.bw_params != null && message.hasOwnProperty("bw_params"))
                    if (!$util.isInteger(message.bw_params))
                        return "bw_params: integer expected";
                if (message.fl_layer_in != null && message.hasOwnProperty("fl_layer_in")) {
                    if (!Array.isArray(message.fl_layer_in))
                        return "fl_layer_in: array expected";
                    for (var i = 0; i < message.fl_layer_in.length; ++i)
                        if (!$util.isInteger(message.fl_layer_in[i]))
                            return "fl_layer_in: integer[] expected";
                }
                if (message.fl_layer_out != null && message.hasOwnProperty("fl_layer_out")) {
                    if (!Array.isArray(message.fl_layer_out))
                        return "fl_layer_out: array expected";
                    for (var i = 0; i < message.fl_layer_out.length; ++i)
                        if (!$util.isInteger(message.fl_layer_out[i]))
                            return "fl_layer_out: integer[] expected";
                }
                if (message.fl_params != null && message.hasOwnProperty("fl_params")) {
                    if (!Array.isArray(message.fl_params))
                        return "fl_params: array expected";
                    for (var i = 0; i < message.fl_params.length; ++i)
                        if (!$util.isInteger(message.fl_params[i]))
                            return "fl_params: integer[] expected";
                }
                if (message.scale_in != null && message.hasOwnProperty("scale_in")) {
                    if (!Array.isArray(message.scale_in))
                        return "scale_in: array expected";
                    for (var i = 0; i < message.scale_in.length; ++i)
                        if (typeof message.scale_in[i] !== "number")
                            return "scale_in: number[] expected";
                }
                if (message.scale_out != null && message.hasOwnProperty("scale_out")) {
                    if (!Array.isArray(message.scale_out))
                        return "scale_out: array expected";
                    for (var i = 0; i < message.scale_out.length; ++i)
                        if (typeof message.scale_out[i] !== "number")
                            return "scale_out: number[] expected";
                }
                if (message.scale_params != null && message.hasOwnProperty("scale_params")) {
                    if (!Array.isArray(message.scale_params))
                        return "scale_params: array expected";
                    for (var i = 0; i < message.scale_params.length; ++i)
                        if (typeof message.scale_params[i] !== "number")
                            return "scale_params: number[] expected";
                }
                return null;
            };
    
            QuantizationParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.QuantizationParameter)
                    return object;
                var message = new $root.caffe.QuantizationParameter();
                switch (object.precision) {
                case "DYNAMIC_FIXED_POINT":
                case 0:
                    message.precision = 0;
                    break;
                }
                switch (object.rounding_scheme) {
                case "NEAREST":
                case 0:
                    message.rounding_scheme = 0;
                    break;
                }
                if (object.bw_layer_in != null)
                    message.bw_layer_in = object.bw_layer_in >>> 0;
                if (object.bw_layer_out != null)
                    message.bw_layer_out = object.bw_layer_out >>> 0;
                if (object.bw_params != null)
                    message.bw_params = object.bw_params >>> 0;
                if (object.fl_layer_in) {
                    if (!Array.isArray(object.fl_layer_in))
                        throw TypeError(".caffe.QuantizationParameter.fl_layer_in: array expected");
                    message.fl_layer_in = [];
                    for (var i = 0; i < object.fl_layer_in.length; ++i)
                        message.fl_layer_in[i] = object.fl_layer_in[i] | 0;
                }
                if (object.fl_layer_out) {
                    if (!Array.isArray(object.fl_layer_out))
                        throw TypeError(".caffe.QuantizationParameter.fl_layer_out: array expected");
                    message.fl_layer_out = [];
                    for (var i = 0; i < object.fl_layer_out.length; ++i)
                        message.fl_layer_out[i] = object.fl_layer_out[i] | 0;
                }
                if (object.fl_params) {
                    if (!Array.isArray(object.fl_params))
                        throw TypeError(".caffe.QuantizationParameter.fl_params: array expected");
                    message.fl_params = [];
                    for (var i = 0; i < object.fl_params.length; ++i)
                        message.fl_params[i] = object.fl_params[i] | 0;
                }
                if (object.scale_in) {
                    if (!Array.isArray(object.scale_in))
                        throw TypeError(".caffe.QuantizationParameter.scale_in: array expected");
                    message.scale_in = [];
                    for (var i = 0; i < object.scale_in.length; ++i)
                        message.scale_in[i] = Number(object.scale_in[i]);
                }
                if (object.scale_out) {
                    if (!Array.isArray(object.scale_out))
                        throw TypeError(".caffe.QuantizationParameter.scale_out: array expected");
                    message.scale_out = [];
                    for (var i = 0; i < object.scale_out.length; ++i)
                        message.scale_out[i] = Number(object.scale_out[i]);
                }
                if (object.scale_params) {
                    if (!Array.isArray(object.scale_params))
                        throw TypeError(".caffe.QuantizationParameter.scale_params: array expected");
                    message.scale_params = [];
                    for (var i = 0; i < object.scale_params.length; ++i)
                        message.scale_params[i] = Number(object.scale_params[i]);
                }
                return message;
            };
    
            QuantizationParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.fl_layer_in = [];
                    object.fl_layer_out = [];
                    object.fl_params = [];
                    object.scale_in = [];
                    object.scale_out = [];
                    object.scale_params = [];
                }
                if (options.defaults) {
                    object.precision = options.enums === String ? "DYNAMIC_FIXED_POINT" : 0;
                    object.rounding_scheme = options.enums === String ? "NEAREST" : 0;
                    object.bw_layer_in = 32;
                    object.bw_layer_out = 32;
                    object.bw_params = 32;
                }
                if (message.precision != null && message.hasOwnProperty("precision"))
                    object.precision = options.enums === String ? $root.caffe.QuantizationParameter.Precision[message.precision] : message.precision;
                if (message.rounding_scheme != null && message.hasOwnProperty("rounding_scheme"))
                    object.rounding_scheme = options.enums === String ? $root.caffe.QuantizationParameter.Rounding[message.rounding_scheme] : message.rounding_scheme;
                if (message.bw_layer_in != null && message.hasOwnProperty("bw_layer_in"))
                    object.bw_layer_in = message.bw_layer_in;
                if (message.bw_layer_out != null && message.hasOwnProperty("bw_layer_out"))
                    object.bw_layer_out = message.bw_layer_out;
                if (message.bw_params != null && message.hasOwnProperty("bw_params"))
                    object.bw_params = message.bw_params;
                if (message.fl_layer_in && message.fl_layer_in.length) {
                    object.fl_layer_in = [];
                    for (var j = 0; j < message.fl_layer_in.length; ++j)
                        object.fl_layer_in[j] = message.fl_layer_in[j];
                }
                if (message.fl_layer_out && message.fl_layer_out.length) {
                    object.fl_layer_out = [];
                    for (var j = 0; j < message.fl_layer_out.length; ++j)
                        object.fl_layer_out[j] = message.fl_layer_out[j];
                }
                if (message.fl_params && message.fl_params.length) {
                    object.fl_params = [];
                    for (var j = 0; j < message.fl_params.length; ++j)
                        object.fl_params[j] = message.fl_params[j];
                }
                if (message.scale_in && message.scale_in.length) {
                    object.scale_in = [];
                    for (var j = 0; j < message.scale_in.length; ++j)
                        object.scale_in[j] = options.json && !isFinite(message.scale_in[j]) ? String(message.scale_in[j]) : message.scale_in[j];
                }
                if (message.scale_out && message.scale_out.length) {
                    object.scale_out = [];
                    for (var j = 0; j < message.scale_out.length; ++j)
                        object.scale_out[j] = options.json && !isFinite(message.scale_out[j]) ? String(message.scale_out[j]) : message.scale_out[j];
                }
                if (message.scale_params && message.scale_params.length) {
                    object.scale_params = [];
                    for (var j = 0; j < message.scale_params.length; ++j)
                        object.scale_params[j] = options.json && !isFinite(message.scale_params[j]) ? String(message.scale_params[j]) : message.scale_params[j];
                }
                return object;
            };
    
            QuantizationParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            QuantizationParameter.Precision = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DYNAMIC_FIXED_POINT"] = 0;
                return values;
            })();
    
            QuantizationParameter.Rounding = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NEAREST"] = 0;
                return values;
            })();
    
            return QuantizationParameter;
        })();
    
        caffe.ReorgParameter = (function() {
    
            function ReorgParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ReorgParameter.prototype.stride = 0;
            ReorgParameter.prototype.reverse = false;
    
            ReorgParameter.create = function create(properties) {
                return new ReorgParameter(properties);
            };
    
            ReorgParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ReorgParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.stride = reader.uint32();
                        break;
                    case 2:
                        message.reverse = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ReorgParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ReorgParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "stride":
                        message.stride = reader.uint32();
                        break;
                    case "reverse":
                        message.reverse = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ReorgParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.stride != null && message.hasOwnProperty("stride"))
                    if (!$util.isInteger(message.stride))
                        return "stride: integer expected";
                if (message.reverse != null && message.hasOwnProperty("reverse"))
                    if (typeof message.reverse !== "boolean")
                        return "reverse: boolean expected";
                return null;
            };
    
            ReorgParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ReorgParameter)
                    return object;
                var message = new $root.caffe.ReorgParameter();
                if (object.stride != null)
                    message.stride = object.stride >>> 0;
                if (object.reverse != null)
                    message.reverse = Boolean(object.reverse);
                return message;
            };
    
            ReorgParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.stride = 0;
                    object.reverse = false;
                }
                if (message.stride != null && message.hasOwnProperty("stride"))
                    object.stride = message.stride;
                if (message.reverse != null && message.hasOwnProperty("reverse"))
                    object.reverse = message.reverse;
                return object;
            };
    
            ReorgParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ReorgParameter;
        })();
    
        caffe.AnnotatedDataParameter = (function() {
    
            function AnnotatedDataParameter(properties) {
                this.batch_sampler = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            AnnotatedDataParameter.prototype.batch_sampler = $util.emptyArray;
            AnnotatedDataParameter.prototype.label_map_file = "";
            AnnotatedDataParameter.prototype.anno_type = 0;
            AnnotatedDataParameter.prototype.yolo_data_type = 0;
            AnnotatedDataParameter.prototype.yolo_data_jitter = 0.3;
    
            AnnotatedDataParameter.create = function create(properties) {
                return new AnnotatedDataParameter(properties);
            };
    
            AnnotatedDataParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.AnnotatedDataParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.batch_sampler && message.batch_sampler.length))
                            message.batch_sampler = [];
                        message.batch_sampler.push($root.caffe.BatchSampler.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.label_map_file = reader.string();
                        break;
                    case 3:
                        message.anno_type = reader.int32();
                        break;
                    case 4:
                        message.yolo_data_type = reader.int32();
                        break;
                    case 5:
                        message.yolo_data_jitter = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            AnnotatedDataParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.AnnotatedDataParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "batch_sampler":
                        if (!(message.batch_sampler && message.batch_sampler.length))
                            message.batch_sampler = [];
                        message.batch_sampler.push($root.caffe.BatchSampler.decodeText(reader, true));
                        break;
                    case "label_map_file":
                        message.label_map_file = reader.string();
                        break;
                    case "anno_type":
                        message.anno_type = reader.enum($root.caffe.AnnotatedDatum.AnnotationType);
                        break;
                    case "yolo_data_type":
                        message.yolo_data_type = reader.int32();
                        break;
                    case "yolo_data_jitter":
                        message.yolo_data_jitter = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            AnnotatedDataParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.batch_sampler != null && message.hasOwnProperty("batch_sampler")) {
                    if (!Array.isArray(message.batch_sampler))
                        return "batch_sampler: array expected";
                    for (var i = 0; i < message.batch_sampler.length; ++i) {
                        var error = $root.caffe.BatchSampler.verify(message.batch_sampler[i]);
                        if (error)
                            return "batch_sampler." + error;
                    }
                }
                if (message.label_map_file != null && message.hasOwnProperty("label_map_file"))
                    if (!$util.isString(message.label_map_file))
                        return "label_map_file: string expected";
                if (message.anno_type != null && message.hasOwnProperty("anno_type"))
                    switch (message.anno_type) {
                    default:
                        return "anno_type: enum value expected";
                    case 0:
                        break;
                    }
                if (message.yolo_data_type != null && message.hasOwnProperty("yolo_data_type"))
                    if (!$util.isInteger(message.yolo_data_type))
                        return "yolo_data_type: integer expected";
                if (message.yolo_data_jitter != null && message.hasOwnProperty("yolo_data_jitter"))
                    if (typeof message.yolo_data_jitter !== "number")
                        return "yolo_data_jitter: number expected";
                return null;
            };
    
            AnnotatedDataParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.AnnotatedDataParameter)
                    return object;
                var message = new $root.caffe.AnnotatedDataParameter();
                if (object.batch_sampler) {
                    if (!Array.isArray(object.batch_sampler))
                        throw TypeError(".caffe.AnnotatedDataParameter.batch_sampler: array expected");
                    message.batch_sampler = [];
                    for (var i = 0; i < object.batch_sampler.length; ++i) {
                        if (typeof object.batch_sampler[i] !== "object")
                            throw TypeError(".caffe.AnnotatedDataParameter.batch_sampler: object expected");
                        message.batch_sampler[i] = $root.caffe.BatchSampler.fromObject(object.batch_sampler[i]);
                    }
                }
                if (object.label_map_file != null)
                    message.label_map_file = String(object.label_map_file);
                switch (object.anno_type) {
                case "BBOX":
                case 0:
                    message.anno_type = 0;
                    break;
                }
                if (object.yolo_data_type != null)
                    message.yolo_data_type = object.yolo_data_type | 0;
                if (object.yolo_data_jitter != null)
                    message.yolo_data_jitter = Number(object.yolo_data_jitter);
                return message;
            };
    
            AnnotatedDataParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.batch_sampler = [];
                if (options.defaults) {
                    object.label_map_file = "";
                    object.anno_type = options.enums === String ? "BBOX" : 0;
                    object.yolo_data_type = 0;
                    object.yolo_data_jitter = 0.3;
                }
                if (message.batch_sampler && message.batch_sampler.length) {
                    object.batch_sampler = [];
                    for (var j = 0; j < message.batch_sampler.length; ++j)
                        object.batch_sampler[j] = $root.caffe.BatchSampler.toObject(message.batch_sampler[j], options);
                }
                if (message.label_map_file != null && message.hasOwnProperty("label_map_file"))
                    object.label_map_file = message.label_map_file;
                if (message.anno_type != null && message.hasOwnProperty("anno_type"))
                    object.anno_type = options.enums === String ? $root.caffe.AnnotatedDatum.AnnotationType[message.anno_type] : message.anno_type;
                if (message.yolo_data_type != null && message.hasOwnProperty("yolo_data_type"))
                    object.yolo_data_type = message.yolo_data_type;
                if (message.yolo_data_jitter != null && message.hasOwnProperty("yolo_data_jitter"))
                    object.yolo_data_jitter = options.json && !isFinite(message.yolo_data_jitter) ? String(message.yolo_data_jitter) : message.yolo_data_jitter;
                return object;
            };
    
            AnnotatedDataParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AnnotatedDataParameter;
        })();
    
        caffe.MultiBoxLossParameter = (function() {
    
            function MultiBoxLossParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            MultiBoxLossParameter.prototype.loc_loss_type = 1;
            MultiBoxLossParameter.prototype.conf_loss_type = 0;
            MultiBoxLossParameter.prototype.loc_weight = 1;
            MultiBoxLossParameter.prototype.num_classes = 0;
            MultiBoxLossParameter.prototype.share_location = true;
            MultiBoxLossParameter.prototype.match_type = 1;
            MultiBoxLossParameter.prototype.overlap_threshold = 0.5;
            MultiBoxLossParameter.prototype.use_prior_for_matching = true;
            MultiBoxLossParameter.prototype.background_label_id = 0;
            MultiBoxLossParameter.prototype.use_difficult_gt = true;
            MultiBoxLossParameter.prototype.do_neg_mining = false;
            MultiBoxLossParameter.prototype.neg_pos_ratio = 3;
            MultiBoxLossParameter.prototype.neg_overlap = 0.5;
            MultiBoxLossParameter.prototype.code_type = 1;
            MultiBoxLossParameter.prototype.encode_variance_in_target = false;
            MultiBoxLossParameter.prototype.map_object_to_agnostic = false;
            MultiBoxLossParameter.prototype.ignore_cross_boundary_bbox = false;
            MultiBoxLossParameter.prototype.bp_inside = false;
            MultiBoxLossParameter.prototype.mining_type = 1;
            MultiBoxLossParameter.prototype.nms_param = null;
            MultiBoxLossParameter.prototype.sample_size = 64;
            MultiBoxLossParameter.prototype.use_prior_for_nms = false;
    
            MultiBoxLossParameter.create = function create(properties) {
                return new MultiBoxLossParameter(properties);
            };
    
            MultiBoxLossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.MultiBoxLossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.loc_loss_type = reader.int32();
                        break;
                    case 2:
                        message.conf_loss_type = reader.int32();
                        break;
                    case 3:
                        message.loc_weight = reader.float();
                        break;
                    case 4:
                        message.num_classes = reader.uint32();
                        break;
                    case 5:
                        message.share_location = reader.bool();
                        break;
                    case 6:
                        message.match_type = reader.int32();
                        break;
                    case 7:
                        message.overlap_threshold = reader.float();
                        break;
                    case 8:
                        message.use_prior_for_matching = reader.bool();
                        break;
                    case 9:
                        message.background_label_id = reader.uint32();
                        break;
                    case 10:
                        message.use_difficult_gt = reader.bool();
                        break;
                    case 11:
                        message.do_neg_mining = reader.bool();
                        break;
                    case 12:
                        message.neg_pos_ratio = reader.float();
                        break;
                    case 13:
                        message.neg_overlap = reader.float();
                        break;
                    case 14:
                        message.code_type = reader.int32();
                        break;
                    case 16:
                        message.encode_variance_in_target = reader.bool();
                        break;
                    case 17:
                        message.map_object_to_agnostic = reader.bool();
                        break;
                    case 18:
                        message.ignore_cross_boundary_bbox = reader.bool();
                        break;
                    case 19:
                        message.bp_inside = reader.bool();
                        break;
                    case 20:
                        message.mining_type = reader.int32();
                        break;
                    case 21:
                        message.nms_param = $root.caffe.NonMaximumSuppressionParameter.decode(reader, reader.uint32());
                        break;
                    case 22:
                        message.sample_size = reader.int32();
                        break;
                    case 23:
                        message.use_prior_for_nms = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            MultiBoxLossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.MultiBoxLossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "loc_loss_type":
                        message.loc_loss_type = reader.enum($root.caffe.MultiBoxLossParameter.LocLossType);
                        break;
                    case "conf_loss_type":
                        message.conf_loss_type = reader.enum($root.caffe.MultiBoxLossParameter.ConfLossType);
                        break;
                    case "loc_weight":
                        message.loc_weight = reader.float();
                        break;
                    case "num_classes":
                        message.num_classes = reader.uint32();
                        break;
                    case "share_location":
                        message.share_location = reader.bool();
                        break;
                    case "match_type":
                        message.match_type = reader.enum($root.caffe.MultiBoxLossParameter.MatchType);
                        break;
                    case "overlap_threshold":
                        message.overlap_threshold = reader.float();
                        break;
                    case "use_prior_for_matching":
                        message.use_prior_for_matching = reader.bool();
                        break;
                    case "background_label_id":
                        message.background_label_id = reader.uint32();
                        break;
                    case "use_difficult_gt":
                        message.use_difficult_gt = reader.bool();
                        break;
                    case "do_neg_mining":
                        message.do_neg_mining = reader.bool();
                        break;
                    case "neg_pos_ratio":
                        message.neg_pos_ratio = reader.float();
                        break;
                    case "neg_overlap":
                        message.neg_overlap = reader.float();
                        break;
                    case "code_type":
                        message.code_type = reader.enum($root.caffe.PriorBoxParameter.CodeType);
                        break;
                    case "encode_variance_in_target":
                        message.encode_variance_in_target = reader.bool();
                        break;
                    case "map_object_to_agnostic":
                        message.map_object_to_agnostic = reader.bool();
                        break;
                    case "ignore_cross_boundary_bbox":
                        message.ignore_cross_boundary_bbox = reader.bool();
                        break;
                    case "bp_inside":
                        message.bp_inside = reader.bool();
                        break;
                    case "mining_type":
                        message.mining_type = reader.enum($root.caffe.MultiBoxLossParameter.MiningType);
                        break;
                    case "nms_param":
                        message.nms_param = $root.caffe.NonMaximumSuppressionParameter.decodeText(reader, true);
                        break;
                    case "sample_size":
                        message.sample_size = reader.int32();
                        break;
                    case "use_prior_for_nms":
                        message.use_prior_for_nms = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            MultiBoxLossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.loc_loss_type != null && message.hasOwnProperty("loc_loss_type"))
                    switch (message.loc_loss_type) {
                    default:
                        return "loc_loss_type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.conf_loss_type != null && message.hasOwnProperty("conf_loss_type"))
                    switch (message.conf_loss_type) {
                    default:
                        return "conf_loss_type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.loc_weight != null && message.hasOwnProperty("loc_weight"))
                    if (typeof message.loc_weight !== "number")
                        return "loc_weight: number expected";
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    if (!$util.isInteger(message.num_classes))
                        return "num_classes: integer expected";
                if (message.share_location != null && message.hasOwnProperty("share_location"))
                    if (typeof message.share_location !== "boolean")
                        return "share_location: boolean expected";
                if (message.match_type != null && message.hasOwnProperty("match_type"))
                    switch (message.match_type) {
                    default:
                        return "match_type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.overlap_threshold != null && message.hasOwnProperty("overlap_threshold"))
                    if (typeof message.overlap_threshold !== "number")
                        return "overlap_threshold: number expected";
                if (message.use_prior_for_matching != null && message.hasOwnProperty("use_prior_for_matching"))
                    if (typeof message.use_prior_for_matching !== "boolean")
                        return "use_prior_for_matching: boolean expected";
                if (message.background_label_id != null && message.hasOwnProperty("background_label_id"))
                    if (!$util.isInteger(message.background_label_id))
                        return "background_label_id: integer expected";
                if (message.use_difficult_gt != null && message.hasOwnProperty("use_difficult_gt"))
                    if (typeof message.use_difficult_gt !== "boolean")
                        return "use_difficult_gt: boolean expected";
                if (message.do_neg_mining != null && message.hasOwnProperty("do_neg_mining"))
                    if (typeof message.do_neg_mining !== "boolean")
                        return "do_neg_mining: boolean expected";
                if (message.neg_pos_ratio != null && message.hasOwnProperty("neg_pos_ratio"))
                    if (typeof message.neg_pos_ratio !== "number")
                        return "neg_pos_ratio: number expected";
                if (message.neg_overlap != null && message.hasOwnProperty("neg_overlap"))
                    if (typeof message.neg_overlap !== "number")
                        return "neg_overlap: number expected";
                if (message.code_type != null && message.hasOwnProperty("code_type"))
                    switch (message.code_type) {
                    default:
                        return "code_type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.encode_variance_in_target != null && message.hasOwnProperty("encode_variance_in_target"))
                    if (typeof message.encode_variance_in_target !== "boolean")
                        return "encode_variance_in_target: boolean expected";
                if (message.map_object_to_agnostic != null && message.hasOwnProperty("map_object_to_agnostic"))
                    if (typeof message.map_object_to_agnostic !== "boolean")
                        return "map_object_to_agnostic: boolean expected";
                if (message.ignore_cross_boundary_bbox != null && message.hasOwnProperty("ignore_cross_boundary_bbox"))
                    if (typeof message.ignore_cross_boundary_bbox !== "boolean")
                        return "ignore_cross_boundary_bbox: boolean expected";
                if (message.bp_inside != null && message.hasOwnProperty("bp_inside"))
                    if (typeof message.bp_inside !== "boolean")
                        return "bp_inside: boolean expected";
                if (message.mining_type != null && message.hasOwnProperty("mining_type"))
                    switch (message.mining_type) {
                    default:
                        return "mining_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.nms_param != null && message.hasOwnProperty("nms_param")) {
                    var error = $root.caffe.NonMaximumSuppressionParameter.verify(message.nms_param);
                    if (error)
                        return "nms_param." + error;
                }
                if (message.sample_size != null && message.hasOwnProperty("sample_size"))
                    if (!$util.isInteger(message.sample_size))
                        return "sample_size: integer expected";
                if (message.use_prior_for_nms != null && message.hasOwnProperty("use_prior_for_nms"))
                    if (typeof message.use_prior_for_nms !== "boolean")
                        return "use_prior_for_nms: boolean expected";
                return null;
            };
    
            MultiBoxLossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.MultiBoxLossParameter)
                    return object;
                var message = new $root.caffe.MultiBoxLossParameter();
                switch (object.loc_loss_type) {
                case "L2":
                case 0:
                    message.loc_loss_type = 0;
                    break;
                case "SMOOTH_L1":
                case 1:
                    message.loc_loss_type = 1;
                    break;
                }
                switch (object.conf_loss_type) {
                case "SOFTMAX":
                case 0:
                    message.conf_loss_type = 0;
                    break;
                case "LOGISTIC":
                case 1:
                    message.conf_loss_type = 1;
                    break;
                }
                if (object.loc_weight != null)
                    message.loc_weight = Number(object.loc_weight);
                if (object.num_classes != null)
                    message.num_classes = object.num_classes >>> 0;
                if (object.share_location != null)
                    message.share_location = Boolean(object.share_location);
                switch (object.match_type) {
                case "BIPARTITE":
                case 0:
                    message.match_type = 0;
                    break;
                case "PER_PREDICTION":
                case 1:
                    message.match_type = 1;
                    break;
                }
                if (object.overlap_threshold != null)
                    message.overlap_threshold = Number(object.overlap_threshold);
                if (object.use_prior_for_matching != null)
                    message.use_prior_for_matching = Boolean(object.use_prior_for_matching);
                if (object.background_label_id != null)
                    message.background_label_id = object.background_label_id >>> 0;
                if (object.use_difficult_gt != null)
                    message.use_difficult_gt = Boolean(object.use_difficult_gt);
                if (object.do_neg_mining != null)
                    message.do_neg_mining = Boolean(object.do_neg_mining);
                if (object.neg_pos_ratio != null)
                    message.neg_pos_ratio = Number(object.neg_pos_ratio);
                if (object.neg_overlap != null)
                    message.neg_overlap = Number(object.neg_overlap);
                switch (object.code_type) {
                case "CORNER":
                case 1:
                    message.code_type = 1;
                    break;
                case "CENTER_SIZE":
                case 2:
                    message.code_type = 2;
                    break;
                case "CORNER_SIZE":
                case 3:
                    message.code_type = 3;
                    break;
                }
                if (object.encode_variance_in_target != null)
                    message.encode_variance_in_target = Boolean(object.encode_variance_in_target);
                if (object.map_object_to_agnostic != null)
                    message.map_object_to_agnostic = Boolean(object.map_object_to_agnostic);
                if (object.ignore_cross_boundary_bbox != null)
                    message.ignore_cross_boundary_bbox = Boolean(object.ignore_cross_boundary_bbox);
                if (object.bp_inside != null)
                    message.bp_inside = Boolean(object.bp_inside);
                switch (object.mining_type) {
                case "NONE":
                case 0:
                    message.mining_type = 0;
                    break;
                case "MAX_NEGATIVE":
                case 1:
                    message.mining_type = 1;
                    break;
                case "HARD_EXAMPLE":
                case 2:
                    message.mining_type = 2;
                    break;
                }
                if (object.nms_param != null) {
                    if (typeof object.nms_param !== "object")
                        throw TypeError(".caffe.MultiBoxLossParameter.nms_param: object expected");
                    message.nms_param = $root.caffe.NonMaximumSuppressionParameter.fromObject(object.nms_param);
                }
                if (object.sample_size != null)
                    message.sample_size = object.sample_size | 0;
                if (object.use_prior_for_nms != null)
                    message.use_prior_for_nms = Boolean(object.use_prior_for_nms);
                return message;
            };
    
            MultiBoxLossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.loc_loss_type = options.enums === String ? "SMOOTH_L1" : 1;
                    object.conf_loss_type = options.enums === String ? "SOFTMAX" : 0;
                    object.loc_weight = 1;
                    object.num_classes = 0;
                    object.share_location = true;
                    object.match_type = options.enums === String ? "PER_PREDICTION" : 1;
                    object.overlap_threshold = 0.5;
                    object.use_prior_for_matching = true;
                    object.background_label_id = 0;
                    object.use_difficult_gt = true;
                    object.do_neg_mining = false;
                    object.neg_pos_ratio = 3;
                    object.neg_overlap = 0.5;
                    object.code_type = options.enums === String ? "CORNER" : 1;
                    object.encode_variance_in_target = false;
                    object.map_object_to_agnostic = false;
                    object.ignore_cross_boundary_bbox = false;
                    object.bp_inside = false;
                    object.mining_type = options.enums === String ? "MAX_NEGATIVE" : 1;
                    object.nms_param = null;
                    object.sample_size = 64;
                    object.use_prior_for_nms = false;
                }
                if (message.loc_loss_type != null && message.hasOwnProperty("loc_loss_type"))
                    object.loc_loss_type = options.enums === String ? $root.caffe.MultiBoxLossParameter.LocLossType[message.loc_loss_type] : message.loc_loss_type;
                if (message.conf_loss_type != null && message.hasOwnProperty("conf_loss_type"))
                    object.conf_loss_type = options.enums === String ? $root.caffe.MultiBoxLossParameter.ConfLossType[message.conf_loss_type] : message.conf_loss_type;
                if (message.loc_weight != null && message.hasOwnProperty("loc_weight"))
                    object.loc_weight = options.json && !isFinite(message.loc_weight) ? String(message.loc_weight) : message.loc_weight;
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    object.num_classes = message.num_classes;
                if (message.share_location != null && message.hasOwnProperty("share_location"))
                    object.share_location = message.share_location;
                if (message.match_type != null && message.hasOwnProperty("match_type"))
                    object.match_type = options.enums === String ? $root.caffe.MultiBoxLossParameter.MatchType[message.match_type] : message.match_type;
                if (message.overlap_threshold != null && message.hasOwnProperty("overlap_threshold"))
                    object.overlap_threshold = options.json && !isFinite(message.overlap_threshold) ? String(message.overlap_threshold) : message.overlap_threshold;
                if (message.use_prior_for_matching != null && message.hasOwnProperty("use_prior_for_matching"))
                    object.use_prior_for_matching = message.use_prior_for_matching;
                if (message.background_label_id != null && message.hasOwnProperty("background_label_id"))
                    object.background_label_id = message.background_label_id;
                if (message.use_difficult_gt != null && message.hasOwnProperty("use_difficult_gt"))
                    object.use_difficult_gt = message.use_difficult_gt;
                if (message.do_neg_mining != null && message.hasOwnProperty("do_neg_mining"))
                    object.do_neg_mining = message.do_neg_mining;
                if (message.neg_pos_ratio != null && message.hasOwnProperty("neg_pos_ratio"))
                    object.neg_pos_ratio = options.json && !isFinite(message.neg_pos_ratio) ? String(message.neg_pos_ratio) : message.neg_pos_ratio;
                if (message.neg_overlap != null && message.hasOwnProperty("neg_overlap"))
                    object.neg_overlap = options.json && !isFinite(message.neg_overlap) ? String(message.neg_overlap) : message.neg_overlap;
                if (message.code_type != null && message.hasOwnProperty("code_type"))
                    object.code_type = options.enums === String ? $root.caffe.PriorBoxParameter.CodeType[message.code_type] : message.code_type;
                if (message.encode_variance_in_target != null && message.hasOwnProperty("encode_variance_in_target"))
                    object.encode_variance_in_target = message.encode_variance_in_target;
                if (message.map_object_to_agnostic != null && message.hasOwnProperty("map_object_to_agnostic"))
                    object.map_object_to_agnostic = message.map_object_to_agnostic;
                if (message.ignore_cross_boundary_bbox != null && message.hasOwnProperty("ignore_cross_boundary_bbox"))
                    object.ignore_cross_boundary_bbox = message.ignore_cross_boundary_bbox;
                if (message.bp_inside != null && message.hasOwnProperty("bp_inside"))
                    object.bp_inside = message.bp_inside;
                if (message.mining_type != null && message.hasOwnProperty("mining_type"))
                    object.mining_type = options.enums === String ? $root.caffe.MultiBoxLossParameter.MiningType[message.mining_type] : message.mining_type;
                if (message.nms_param != null && message.hasOwnProperty("nms_param"))
                    object.nms_param = $root.caffe.NonMaximumSuppressionParameter.toObject(message.nms_param, options);
                if (message.sample_size != null && message.hasOwnProperty("sample_size"))
                    object.sample_size = message.sample_size;
                if (message.use_prior_for_nms != null && message.hasOwnProperty("use_prior_for_nms"))
                    object.use_prior_for_nms = message.use_prior_for_nms;
                return object;
            };
    
            MultiBoxLossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            MultiBoxLossParameter.LocLossType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "L2"] = 0;
                values[valuesById[1] = "SMOOTH_L1"] = 1;
                return values;
            })();
    
            MultiBoxLossParameter.ConfLossType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "SOFTMAX"] = 0;
                values[valuesById[1] = "LOGISTIC"] = 1;
                return values;
            })();
    
            MultiBoxLossParameter.MatchType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "BIPARTITE"] = 0;
                values[valuesById[1] = "PER_PREDICTION"] = 1;
                return values;
            })();
    
            MultiBoxLossParameter.MiningType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NONE"] = 0;
                values[valuesById[1] = "MAX_NEGATIVE"] = 1;
                values[valuesById[2] = "HARD_EXAMPLE"] = 2;
                return values;
            })();
    
            return MultiBoxLossParameter;
        })();
    
        caffe.PermuteParameter = (function() {
    
            function PermuteParameter(properties) {
                this.order = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            PermuteParameter.prototype.order = $util.emptyArray;
    
            PermuteParameter.create = function create(properties) {
                return new PermuteParameter(properties);
            };
    
            PermuteParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.PermuteParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.order && message.order.length))
                            message.order = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.order.push(reader.uint32());
                        } else
                            message.order.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            PermuteParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.PermuteParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "order":
                        if (!(message.order && message.order.length))
                            message.order = [];
                        message.order.push(reader.uint32());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            PermuteParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.order != null && message.hasOwnProperty("order")) {
                    if (!Array.isArray(message.order))
                        return "order: array expected";
                    for (var i = 0; i < message.order.length; ++i)
                        if (!$util.isInteger(message.order[i]))
                            return "order: integer[] expected";
                }
                return null;
            };
    
            PermuteParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.PermuteParameter)
                    return object;
                var message = new $root.caffe.PermuteParameter();
                if (object.order) {
                    if (!Array.isArray(object.order))
                        throw TypeError(".caffe.PermuteParameter.order: array expected");
                    message.order = [];
                    for (var i = 0; i < object.order.length; ++i)
                        message.order[i] = object.order[i] >>> 0;
                }
                return message;
            };
    
            PermuteParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.order = [];
                if (message.order && message.order.length) {
                    object.order = [];
                    for (var j = 0; j < message.order.length; ++j)
                        object.order[j] = message.order[j];
                }
                return object;
            };
    
            PermuteParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PermuteParameter;
        })();
    
        caffe.NormalizeBBoxParameter = (function() {
    
            function NormalizeBBoxParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            NormalizeBBoxParameter.prototype.across_spatial = true;
            NormalizeBBoxParameter.prototype.scale_filler = null;
            NormalizeBBoxParameter.prototype.channel_shared = true;
            NormalizeBBoxParameter.prototype.eps = 1e-10;
    
            NormalizeBBoxParameter.create = function create(properties) {
                return new NormalizeBBoxParameter(properties);
            };
    
            NormalizeBBoxParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.NormalizeBBoxParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.across_spatial = reader.bool();
                        break;
                    case 2:
                        message.scale_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.channel_shared = reader.bool();
                        break;
                    case 4:
                        message.eps = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            NormalizeBBoxParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.NormalizeBBoxParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "across_spatial":
                        message.across_spatial = reader.bool();
                        break;
                    case "scale_filler":
                        message.scale_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "channel_shared":
                        message.channel_shared = reader.bool();
                        break;
                    case "eps":
                        message.eps = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            NormalizeBBoxParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.across_spatial != null && message.hasOwnProperty("across_spatial"))
                    if (typeof message.across_spatial !== "boolean")
                        return "across_spatial: boolean expected";
                if (message.scale_filler != null && message.hasOwnProperty("scale_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.scale_filler);
                    if (error)
                        return "scale_filler." + error;
                }
                if (message.channel_shared != null && message.hasOwnProperty("channel_shared"))
                    if (typeof message.channel_shared !== "boolean")
                        return "channel_shared: boolean expected";
                if (message.eps != null && message.hasOwnProperty("eps"))
                    if (typeof message.eps !== "number")
                        return "eps: number expected";
                return null;
            };
    
            NormalizeBBoxParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.NormalizeBBoxParameter)
                    return object;
                var message = new $root.caffe.NormalizeBBoxParameter();
                if (object.across_spatial != null)
                    message.across_spatial = Boolean(object.across_spatial);
                if (object.scale_filler != null) {
                    if (typeof object.scale_filler !== "object")
                        throw TypeError(".caffe.NormalizeBBoxParameter.scale_filler: object expected");
                    message.scale_filler = $root.caffe.FillerParameter.fromObject(object.scale_filler);
                }
                if (object.channel_shared != null)
                    message.channel_shared = Boolean(object.channel_shared);
                if (object.eps != null)
                    message.eps = Number(object.eps);
                return message;
            };
    
            NormalizeBBoxParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.across_spatial = true;
                    object.scale_filler = null;
                    object.channel_shared = true;
                    object.eps = 1e-10;
                }
                if (message.across_spatial != null && message.hasOwnProperty("across_spatial"))
                    object.across_spatial = message.across_spatial;
                if (message.scale_filler != null && message.hasOwnProperty("scale_filler"))
                    object.scale_filler = $root.caffe.FillerParameter.toObject(message.scale_filler, options);
                if (message.channel_shared != null && message.hasOwnProperty("channel_shared"))
                    object.channel_shared = message.channel_shared;
                if (message.eps != null && message.hasOwnProperty("eps"))
                    object.eps = options.json && !isFinite(message.eps) ? String(message.eps) : message.eps;
                return object;
            };
    
            NormalizeBBoxParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NormalizeBBoxParameter;
        })();
    
        caffe.PriorBoxParameter = (function() {
    
            function PriorBoxParameter(properties) {
                this.min_size = [];
                this.max_size = [];
                this.aspect_ratio = [];
                this.variance = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            PriorBoxParameter.prototype.min_size = $util.emptyArray;
            PriorBoxParameter.prototype.max_size = $util.emptyArray;
            PriorBoxParameter.prototype.aspect_ratio = $util.emptyArray;
            PriorBoxParameter.prototype.flip = true;
            PriorBoxParameter.prototype.clip = false;
            PriorBoxParameter.prototype.variance = $util.emptyArray;
            PriorBoxParameter.prototype.img_size = 0;
            PriorBoxParameter.prototype.img_h = 0;
            PriorBoxParameter.prototype.img_w = 0;
            PriorBoxParameter.prototype.step = 0;
            PriorBoxParameter.prototype.step_h = 0;
            PriorBoxParameter.prototype.step_w = 0;
            PriorBoxParameter.prototype.offset = 0.5;
    
            PriorBoxParameter.create = function create(properties) {
                return new PriorBoxParameter(properties);
            };
    
            PriorBoxParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.PriorBoxParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.min_size && message.min_size.length))
                            message.min_size = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.min_size.push(reader.float());
                        } else
                            message.min_size.push(reader.float());
                        break;
                    case 2:
                        if (!(message.max_size && message.max_size.length))
                            message.max_size = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.max_size.push(reader.float());
                        } else
                            message.max_size.push(reader.float());
                        break;
                    case 3:
                        if (!(message.aspect_ratio && message.aspect_ratio.length))
                            message.aspect_ratio = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.aspect_ratio.push(reader.float());
                        } else
                            message.aspect_ratio.push(reader.float());
                        break;
                    case 4:
                        message.flip = reader.bool();
                        break;
                    case 5:
                        message.clip = reader.bool();
                        break;
                    case 6:
                        if (!(message.variance && message.variance.length))
                            message.variance = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.variance.push(reader.float());
                        } else
                            message.variance.push(reader.float());
                        break;
                    case 7:
                        message.img_size = reader.uint32();
                        break;
                    case 8:
                        message.img_h = reader.uint32();
                        break;
                    case 9:
                        message.img_w = reader.uint32();
                        break;
                    case 10:
                        message.step = reader.float();
                        break;
                    case 11:
                        message.step_h = reader.float();
                        break;
                    case 12:
                        message.step_w = reader.float();
                        break;
                    case 13:
                        message.offset = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            PriorBoxParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.PriorBoxParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "min_size":
                        if (!(message.min_size && message.min_size.length))
                            message.min_size = [];
                        message.min_size.push(reader.float());
                        break;
                    case "max_size":
                        if (!(message.max_size && message.max_size.length))
                            message.max_size = [];
                        message.max_size.push(reader.float());
                        break;
                    case "aspect_ratio":
                        if (!(message.aspect_ratio && message.aspect_ratio.length))
                            message.aspect_ratio = [];
                        message.aspect_ratio.push(reader.float());
                        break;
                    case "flip":
                        message.flip = reader.bool();
                        break;
                    case "clip":
                        message.clip = reader.bool();
                        break;
                    case "variance":
                        if (!(message.variance && message.variance.length))
                            message.variance = [];
                        message.variance.push(reader.float());
                        break;
                    case "img_size":
                        message.img_size = reader.uint32();
                        break;
                    case "img_h":
                        message.img_h = reader.uint32();
                        break;
                    case "img_w":
                        message.img_w = reader.uint32();
                        break;
                    case "step":
                        message.step = reader.float();
                        break;
                    case "step_h":
                        message.step_h = reader.float();
                        break;
                    case "step_w":
                        message.step_w = reader.float();
                        break;
                    case "offset":
                        message.offset = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            PriorBoxParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.min_size != null && message.hasOwnProperty("min_size")) {
                    if (!Array.isArray(message.min_size))
                        return "min_size: array expected";
                    for (var i = 0; i < message.min_size.length; ++i)
                        if (typeof message.min_size[i] !== "number")
                            return "min_size: number[] expected";
                }
                if (message.max_size != null && message.hasOwnProperty("max_size")) {
                    if (!Array.isArray(message.max_size))
                        return "max_size: array expected";
                    for (var i = 0; i < message.max_size.length; ++i)
                        if (typeof message.max_size[i] !== "number")
                            return "max_size: number[] expected";
                }
                if (message.aspect_ratio != null && message.hasOwnProperty("aspect_ratio")) {
                    if (!Array.isArray(message.aspect_ratio))
                        return "aspect_ratio: array expected";
                    for (var i = 0; i < message.aspect_ratio.length; ++i)
                        if (typeof message.aspect_ratio[i] !== "number")
                            return "aspect_ratio: number[] expected";
                }
                if (message.flip != null && message.hasOwnProperty("flip"))
                    if (typeof message.flip !== "boolean")
                        return "flip: boolean expected";
                if (message.clip != null && message.hasOwnProperty("clip"))
                    if (typeof message.clip !== "boolean")
                        return "clip: boolean expected";
                if (message.variance != null && message.hasOwnProperty("variance")) {
                    if (!Array.isArray(message.variance))
                        return "variance: array expected";
                    for (var i = 0; i < message.variance.length; ++i)
                        if (typeof message.variance[i] !== "number")
                            return "variance: number[] expected";
                }
                if (message.img_size != null && message.hasOwnProperty("img_size"))
                    if (!$util.isInteger(message.img_size))
                        return "img_size: integer expected";
                if (message.img_h != null && message.hasOwnProperty("img_h"))
                    if (!$util.isInteger(message.img_h))
                        return "img_h: integer expected";
                if (message.img_w != null && message.hasOwnProperty("img_w"))
                    if (!$util.isInteger(message.img_w))
                        return "img_w: integer expected";
                if (message.step != null && message.hasOwnProperty("step"))
                    if (typeof message.step !== "number")
                        return "step: number expected";
                if (message.step_h != null && message.hasOwnProperty("step_h"))
                    if (typeof message.step_h !== "number")
                        return "step_h: number expected";
                if (message.step_w != null && message.hasOwnProperty("step_w"))
                    if (typeof message.step_w !== "number")
                        return "step_w: number expected";
                if (message.offset != null && message.hasOwnProperty("offset"))
                    if (typeof message.offset !== "number")
                        return "offset: number expected";
                return null;
            };
    
            PriorBoxParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.PriorBoxParameter)
                    return object;
                var message = new $root.caffe.PriorBoxParameter();
                if (object.min_size) {
                    if (!Array.isArray(object.min_size))
                        throw TypeError(".caffe.PriorBoxParameter.min_size: array expected");
                    message.min_size = [];
                    for (var i = 0; i < object.min_size.length; ++i)
                        message.min_size[i] = Number(object.min_size[i]);
                }
                if (object.max_size) {
                    if (!Array.isArray(object.max_size))
                        throw TypeError(".caffe.PriorBoxParameter.max_size: array expected");
                    message.max_size = [];
                    for (var i = 0; i < object.max_size.length; ++i)
                        message.max_size[i] = Number(object.max_size[i]);
                }
                if (object.aspect_ratio) {
                    if (!Array.isArray(object.aspect_ratio))
                        throw TypeError(".caffe.PriorBoxParameter.aspect_ratio: array expected");
                    message.aspect_ratio = [];
                    for (var i = 0; i < object.aspect_ratio.length; ++i)
                        message.aspect_ratio[i] = Number(object.aspect_ratio[i]);
                }
                if (object.flip != null)
                    message.flip = Boolean(object.flip);
                if (object.clip != null)
                    message.clip = Boolean(object.clip);
                if (object.variance) {
                    if (!Array.isArray(object.variance))
                        throw TypeError(".caffe.PriorBoxParameter.variance: array expected");
                    message.variance = [];
                    for (var i = 0; i < object.variance.length; ++i)
                        message.variance[i] = Number(object.variance[i]);
                }
                if (object.img_size != null)
                    message.img_size = object.img_size >>> 0;
                if (object.img_h != null)
                    message.img_h = object.img_h >>> 0;
                if (object.img_w != null)
                    message.img_w = object.img_w >>> 0;
                if (object.step != null)
                    message.step = Number(object.step);
                if (object.step_h != null)
                    message.step_h = Number(object.step_h);
                if (object.step_w != null)
                    message.step_w = Number(object.step_w);
                if (object.offset != null)
                    message.offset = Number(object.offset);
                return message;
            };
    
            PriorBoxParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.min_size = [];
                    object.max_size = [];
                    object.aspect_ratio = [];
                    object.variance = [];
                }
                if (options.defaults) {
                    object.flip = true;
                    object.clip = false;
                    object.img_size = 0;
                    object.img_h = 0;
                    object.img_w = 0;
                    object.step = 0;
                    object.step_h = 0;
                    object.step_w = 0;
                    object.offset = 0.5;
                }
                if (message.min_size && message.min_size.length) {
                    object.min_size = [];
                    for (var j = 0; j < message.min_size.length; ++j)
                        object.min_size[j] = options.json && !isFinite(message.min_size[j]) ? String(message.min_size[j]) : message.min_size[j];
                }
                if (message.max_size && message.max_size.length) {
                    object.max_size = [];
                    for (var j = 0; j < message.max_size.length; ++j)
                        object.max_size[j] = options.json && !isFinite(message.max_size[j]) ? String(message.max_size[j]) : message.max_size[j];
                }
                if (message.aspect_ratio && message.aspect_ratio.length) {
                    object.aspect_ratio = [];
                    for (var j = 0; j < message.aspect_ratio.length; ++j)
                        object.aspect_ratio[j] = options.json && !isFinite(message.aspect_ratio[j]) ? String(message.aspect_ratio[j]) : message.aspect_ratio[j];
                }
                if (message.flip != null && message.hasOwnProperty("flip"))
                    object.flip = message.flip;
                if (message.clip != null && message.hasOwnProperty("clip"))
                    object.clip = message.clip;
                if (message.variance && message.variance.length) {
                    object.variance = [];
                    for (var j = 0; j < message.variance.length; ++j)
                        object.variance[j] = options.json && !isFinite(message.variance[j]) ? String(message.variance[j]) : message.variance[j];
                }
                if (message.img_size != null && message.hasOwnProperty("img_size"))
                    object.img_size = message.img_size;
                if (message.img_h != null && message.hasOwnProperty("img_h"))
                    object.img_h = message.img_h;
                if (message.img_w != null && message.hasOwnProperty("img_w"))
                    object.img_w = message.img_w;
                if (message.step != null && message.hasOwnProperty("step"))
                    object.step = options.json && !isFinite(message.step) ? String(message.step) : message.step;
                if (message.step_h != null && message.hasOwnProperty("step_h"))
                    object.step_h = options.json && !isFinite(message.step_h) ? String(message.step_h) : message.step_h;
                if (message.step_w != null && message.hasOwnProperty("step_w"))
                    object.step_w = options.json && !isFinite(message.step_w) ? String(message.step_w) : message.step_w;
                if (message.offset != null && message.hasOwnProperty("offset"))
                    object.offset = options.json && !isFinite(message.offset) ? String(message.offset) : message.offset;
                return object;
            };
    
            PriorBoxParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            PriorBoxParameter.CodeType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "CORNER"] = 1;
                values[valuesById[2] = "CENTER_SIZE"] = 2;
                values[valuesById[3] = "CORNER_SIZE"] = 3;
                return values;
            })();
    
            return PriorBoxParameter;
        })();
    
        caffe.DetectionOutputParameter = (function() {
    
            function DetectionOutputParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            DetectionOutputParameter.prototype.num_classes = 0;
            DetectionOutputParameter.prototype.share_location = true;
            DetectionOutputParameter.prototype.background_label_id = 0;
            DetectionOutputParameter.prototype.nms_param = null;
            DetectionOutputParameter.prototype.save_output_param = null;
            DetectionOutputParameter.prototype.code_type = 1;
            DetectionOutputParameter.prototype.variance_encoded_in_target = false;
            DetectionOutputParameter.prototype.keep_top_k = -1;
            DetectionOutputParameter.prototype.confidence_threshold = 0;
            DetectionOutputParameter.prototype.visualize = false;
            DetectionOutputParameter.prototype.visualize_threshold = 0;
            DetectionOutputParameter.prototype.save_file = "";
            DetectionOutputParameter.prototype.nms_threshold = 0.3;
            DetectionOutputParameter.prototype.top_k = 0;
    
            DetectionOutputParameter.create = function create(properties) {
                return new DetectionOutputParameter(properties);
            };
    
            DetectionOutputParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.DetectionOutputParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_classes = reader.uint32();
                        break;
                    case 2:
                        message.share_location = reader.bool();
                        break;
                    case 3:
                        message.background_label_id = reader.int32();
                        break;
                    case 4:
                        message.nms_param = $root.caffe.NonMaximumSuppressionParameter.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.save_output_param = $root.caffe.SaveOutputParameter.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.code_type = reader.int32();
                        break;
                    case 8:
                        message.variance_encoded_in_target = reader.bool();
                        break;
                    case 7:
                        message.keep_top_k = reader.int32();
                        break;
                    case 9:
                        message.confidence_threshold = reader.float();
                        break;
                    case 10:
                        message.visualize = reader.bool();
                        break;
                    case 11:
                        message.visualize_threshold = reader.float();
                        break;
                    case 12:
                        message.save_file = reader.string();
                        break;
                    case 32768:
                        message.nms_threshold = reader.float();
                        break;
                    case 32769:
                        message.top_k = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            DetectionOutputParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.DetectionOutputParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_classes":
                        message.num_classes = reader.uint32();
                        break;
                    case "share_location":
                        message.share_location = reader.bool();
                        break;
                    case "background_label_id":
                        message.background_label_id = reader.int32();
                        break;
                    case "nms_param":
                        message.nms_param = $root.caffe.NonMaximumSuppressionParameter.decodeText(reader, true);
                        break;
                    case "save_output_param":
                        message.save_output_param = $root.caffe.SaveOutputParameter.decodeText(reader, true);
                        break;
                    case "code_type":
                        message.code_type = reader.enum($root.caffe.PriorBoxParameter.CodeType);
                        break;
                    case "variance_encoded_in_target":
                        message.variance_encoded_in_target = reader.bool();
                        break;
                    case "keep_top_k":
                        message.keep_top_k = reader.int32();
                        break;
                    case "confidence_threshold":
                        message.confidence_threshold = reader.float();
                        break;
                    case "visualize":
                        message.visualize = reader.bool();
                        break;
                    case "visualize_threshold":
                        message.visualize_threshold = reader.float();
                        break;
                    case "save_file":
                        message.save_file = reader.string();
                        break;
                    case "nms_threshold":
                        message.nms_threshold = reader.float();
                        break;
                    case "top_k":
                        message.top_k = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            DetectionOutputParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    if (!$util.isInteger(message.num_classes))
                        return "num_classes: integer expected";
                if (message.share_location != null && message.hasOwnProperty("share_location"))
                    if (typeof message.share_location !== "boolean")
                        return "share_location: boolean expected";
                if (message.background_label_id != null && message.hasOwnProperty("background_label_id"))
                    if (!$util.isInteger(message.background_label_id))
                        return "background_label_id: integer expected";
                if (message.nms_param != null && message.hasOwnProperty("nms_param")) {
                    var error = $root.caffe.NonMaximumSuppressionParameter.verify(message.nms_param);
                    if (error)
                        return "nms_param." + error;
                }
                if (message.save_output_param != null && message.hasOwnProperty("save_output_param")) {
                    var error = $root.caffe.SaveOutputParameter.verify(message.save_output_param);
                    if (error)
                        return "save_output_param." + error;
                }
                if (message.code_type != null && message.hasOwnProperty("code_type"))
                    switch (message.code_type) {
                    default:
                        return "code_type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.variance_encoded_in_target != null && message.hasOwnProperty("variance_encoded_in_target"))
                    if (typeof message.variance_encoded_in_target !== "boolean")
                        return "variance_encoded_in_target: boolean expected";
                if (message.keep_top_k != null && message.hasOwnProperty("keep_top_k"))
                    if (!$util.isInteger(message.keep_top_k))
                        return "keep_top_k: integer expected";
                if (message.confidence_threshold != null && message.hasOwnProperty("confidence_threshold"))
                    if (typeof message.confidence_threshold !== "number")
                        return "confidence_threshold: number expected";
                if (message.visualize != null && message.hasOwnProperty("visualize"))
                    if (typeof message.visualize !== "boolean")
                        return "visualize: boolean expected";
                if (message.visualize_threshold != null && message.hasOwnProperty("visualize_threshold"))
                    if (typeof message.visualize_threshold !== "number")
                        return "visualize_threshold: number expected";
                if (message.save_file != null && message.hasOwnProperty("save_file"))
                    if (!$util.isString(message.save_file))
                        return "save_file: string expected";
                if (message.nms_threshold != null && message.hasOwnProperty("nms_threshold"))
                    if (typeof message.nms_threshold !== "number")
                        return "nms_threshold: number expected";
                if (message.top_k != null && message.hasOwnProperty("top_k"))
                    if (!$util.isInteger(message.top_k))
                        return "top_k: integer expected";
                return null;
            };
    
            DetectionOutputParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.DetectionOutputParameter)
                    return object;
                var message = new $root.caffe.DetectionOutputParameter();
                if (object.num_classes != null)
                    message.num_classes = object.num_classes >>> 0;
                if (object.share_location != null)
                    message.share_location = Boolean(object.share_location);
                if (object.background_label_id != null)
                    message.background_label_id = object.background_label_id | 0;
                if (object.nms_param != null) {
                    if (typeof object.nms_param !== "object")
                        throw TypeError(".caffe.DetectionOutputParameter.nms_param: object expected");
                    message.nms_param = $root.caffe.NonMaximumSuppressionParameter.fromObject(object.nms_param);
                }
                if (object.save_output_param != null) {
                    if (typeof object.save_output_param !== "object")
                        throw TypeError(".caffe.DetectionOutputParameter.save_output_param: object expected");
                    message.save_output_param = $root.caffe.SaveOutputParameter.fromObject(object.save_output_param);
                }
                switch (object.code_type) {
                case "CORNER":
                case 1:
                    message.code_type = 1;
                    break;
                case "CENTER_SIZE":
                case 2:
                    message.code_type = 2;
                    break;
                case "CORNER_SIZE":
                case 3:
                    message.code_type = 3;
                    break;
                }
                if (object.variance_encoded_in_target != null)
                    message.variance_encoded_in_target = Boolean(object.variance_encoded_in_target);
                if (object.keep_top_k != null)
                    message.keep_top_k = object.keep_top_k | 0;
                if (object.confidence_threshold != null)
                    message.confidence_threshold = Number(object.confidence_threshold);
                if (object.visualize != null)
                    message.visualize = Boolean(object.visualize);
                if (object.visualize_threshold != null)
                    message.visualize_threshold = Number(object.visualize_threshold);
                if (object.save_file != null)
                    message.save_file = String(object.save_file);
                if (object.nms_threshold != null)
                    message.nms_threshold = Number(object.nms_threshold);
                if (object.top_k != null)
                    message.top_k = object.top_k | 0;
                return message;
            };
    
            DetectionOutputParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.num_classes = 0;
                    object.share_location = true;
                    object.background_label_id = 0;
                    object.nms_param = null;
                    object.save_output_param = null;
                    object.code_type = options.enums === String ? "CORNER" : 1;
                    object.keep_top_k = -1;
                    object.variance_encoded_in_target = false;
                    object.confidence_threshold = 0;
                    object.visualize = false;
                    object.visualize_threshold = 0;
                    object.save_file = "";
                    object.nms_threshold = 0.3;
                    object.top_k = 0;
                }
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    object.num_classes = message.num_classes;
                if (message.share_location != null && message.hasOwnProperty("share_location"))
                    object.share_location = message.share_location;
                if (message.background_label_id != null && message.hasOwnProperty("background_label_id"))
                    object.background_label_id = message.background_label_id;
                if (message.nms_param != null && message.hasOwnProperty("nms_param"))
                    object.nms_param = $root.caffe.NonMaximumSuppressionParameter.toObject(message.nms_param, options);
                if (message.save_output_param != null && message.hasOwnProperty("save_output_param"))
                    object.save_output_param = $root.caffe.SaveOutputParameter.toObject(message.save_output_param, options);
                if (message.code_type != null && message.hasOwnProperty("code_type"))
                    object.code_type = options.enums === String ? $root.caffe.PriorBoxParameter.CodeType[message.code_type] : message.code_type;
                if (message.keep_top_k != null && message.hasOwnProperty("keep_top_k"))
                    object.keep_top_k = message.keep_top_k;
                if (message.variance_encoded_in_target != null && message.hasOwnProperty("variance_encoded_in_target"))
                    object.variance_encoded_in_target = message.variance_encoded_in_target;
                if (message.confidence_threshold != null && message.hasOwnProperty("confidence_threshold"))
                    object.confidence_threshold = options.json && !isFinite(message.confidence_threshold) ? String(message.confidence_threshold) : message.confidence_threshold;
                if (message.visualize != null && message.hasOwnProperty("visualize"))
                    object.visualize = message.visualize;
                if (message.visualize_threshold != null && message.hasOwnProperty("visualize_threshold"))
                    object.visualize_threshold = options.json && !isFinite(message.visualize_threshold) ? String(message.visualize_threshold) : message.visualize_threshold;
                if (message.save_file != null && message.hasOwnProperty("save_file"))
                    object.save_file = message.save_file;
                if (message.nms_threshold != null && message.hasOwnProperty("nms_threshold"))
                    object.nms_threshold = options.json && !isFinite(message.nms_threshold) ? String(message.nms_threshold) : message.nms_threshold;
                if (message.top_k != null && message.hasOwnProperty("top_k"))
                    object.top_k = message.top_k;
                return object;
            };
    
            DetectionOutputParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DetectionOutputParameter;
        })();
    
        caffe.DetectionEvaluateParameter = (function() {
    
            function DetectionEvaluateParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            DetectionEvaluateParameter.prototype.num_classes = 0;
            DetectionEvaluateParameter.prototype.background_label_id = 0;
            DetectionEvaluateParameter.prototype.overlap_threshold = 0.5;
            DetectionEvaluateParameter.prototype.evaluate_difficult_gt = true;
            DetectionEvaluateParameter.prototype.name_size_file = "";
            DetectionEvaluateParameter.prototype.resize_param = null;
    
            DetectionEvaluateParameter.create = function create(properties) {
                return new DetectionEvaluateParameter(properties);
            };
    
            DetectionEvaluateParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.DetectionEvaluateParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_classes = reader.uint32();
                        break;
                    case 2:
                        message.background_label_id = reader.uint32();
                        break;
                    case 3:
                        message.overlap_threshold = reader.float();
                        break;
                    case 4:
                        message.evaluate_difficult_gt = reader.bool();
                        break;
                    case 5:
                        message.name_size_file = reader.string();
                        break;
                    case 6:
                        message.resize_param = $root.caffe.ResizeParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            DetectionEvaluateParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.DetectionEvaluateParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_classes":
                        message.num_classes = reader.uint32();
                        break;
                    case "background_label_id":
                        message.background_label_id = reader.uint32();
                        break;
                    case "overlap_threshold":
                        message.overlap_threshold = reader.float();
                        break;
                    case "evaluate_difficult_gt":
                        message.evaluate_difficult_gt = reader.bool();
                        break;
                    case "name_size_file":
                        message.name_size_file = reader.string();
                        break;
                    case "resize_param":
                        message.resize_param = $root.caffe.ResizeParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            DetectionEvaluateParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    if (!$util.isInteger(message.num_classes))
                        return "num_classes: integer expected";
                if (message.background_label_id != null && message.hasOwnProperty("background_label_id"))
                    if (!$util.isInteger(message.background_label_id))
                        return "background_label_id: integer expected";
                if (message.overlap_threshold != null && message.hasOwnProperty("overlap_threshold"))
                    if (typeof message.overlap_threshold !== "number")
                        return "overlap_threshold: number expected";
                if (message.evaluate_difficult_gt != null && message.hasOwnProperty("evaluate_difficult_gt"))
                    if (typeof message.evaluate_difficult_gt !== "boolean")
                        return "evaluate_difficult_gt: boolean expected";
                if (message.name_size_file != null && message.hasOwnProperty("name_size_file"))
                    if (!$util.isString(message.name_size_file))
                        return "name_size_file: string expected";
                if (message.resize_param != null && message.hasOwnProperty("resize_param")) {
                    var error = $root.caffe.ResizeParameter.verify(message.resize_param);
                    if (error)
                        return "resize_param." + error;
                }
                return null;
            };
    
            DetectionEvaluateParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.DetectionEvaluateParameter)
                    return object;
                var message = new $root.caffe.DetectionEvaluateParameter();
                if (object.num_classes != null)
                    message.num_classes = object.num_classes >>> 0;
                if (object.background_label_id != null)
                    message.background_label_id = object.background_label_id >>> 0;
                if (object.overlap_threshold != null)
                    message.overlap_threshold = Number(object.overlap_threshold);
                if (object.evaluate_difficult_gt != null)
                    message.evaluate_difficult_gt = Boolean(object.evaluate_difficult_gt);
                if (object.name_size_file != null)
                    message.name_size_file = String(object.name_size_file);
                if (object.resize_param != null) {
                    if (typeof object.resize_param !== "object")
                        throw TypeError(".caffe.DetectionEvaluateParameter.resize_param: object expected");
                    message.resize_param = $root.caffe.ResizeParameter.fromObject(object.resize_param);
                }
                return message;
            };
    
            DetectionEvaluateParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.num_classes = 0;
                    object.background_label_id = 0;
                    object.overlap_threshold = 0.5;
                    object.evaluate_difficult_gt = true;
                    object.name_size_file = "";
                    object.resize_param = null;
                }
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    object.num_classes = message.num_classes;
                if (message.background_label_id != null && message.hasOwnProperty("background_label_id"))
                    object.background_label_id = message.background_label_id;
                if (message.overlap_threshold != null && message.hasOwnProperty("overlap_threshold"))
                    object.overlap_threshold = options.json && !isFinite(message.overlap_threshold) ? String(message.overlap_threshold) : message.overlap_threshold;
                if (message.evaluate_difficult_gt != null && message.hasOwnProperty("evaluate_difficult_gt"))
                    object.evaluate_difficult_gt = message.evaluate_difficult_gt;
                if (message.name_size_file != null && message.hasOwnProperty("name_size_file"))
                    object.name_size_file = message.name_size_file;
                if (message.resize_param != null && message.hasOwnProperty("resize_param"))
                    object.resize_param = $root.caffe.ResizeParameter.toObject(message.resize_param, options);
                return object;
            };
    
            DetectionEvaluateParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DetectionEvaluateParameter;
        })();
    
        caffe.NormalizeParameter = (function() {
    
            function NormalizeParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            NormalizeParameter.prototype.across_spatial = true;
            NormalizeParameter.prototype.scale_filler = null;
            NormalizeParameter.prototype.channel_shared = true;
            NormalizeParameter.prototype.eps = 1e-10;
    
            NormalizeParameter.create = function create(properties) {
                return new NormalizeParameter(properties);
            };
    
            NormalizeParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.NormalizeParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.across_spatial = reader.bool();
                        break;
                    case 2:
                        message.scale_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.channel_shared = reader.bool();
                        break;
                    case 4:
                        message.eps = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            NormalizeParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.NormalizeParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "across_spatial":
                        message.across_spatial = reader.bool();
                        break;
                    case "scale_filler":
                        message.scale_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "channel_shared":
                        message.channel_shared = reader.bool();
                        break;
                    case "eps":
                        message.eps = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            NormalizeParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.across_spatial != null && message.hasOwnProperty("across_spatial"))
                    if (typeof message.across_spatial !== "boolean")
                        return "across_spatial: boolean expected";
                if (message.scale_filler != null && message.hasOwnProperty("scale_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.scale_filler);
                    if (error)
                        return "scale_filler." + error;
                }
                if (message.channel_shared != null && message.hasOwnProperty("channel_shared"))
                    if (typeof message.channel_shared !== "boolean")
                        return "channel_shared: boolean expected";
                if (message.eps != null && message.hasOwnProperty("eps"))
                    if (typeof message.eps !== "number")
                        return "eps: number expected";
                return null;
            };
    
            NormalizeParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.NormalizeParameter)
                    return object;
                var message = new $root.caffe.NormalizeParameter();
                if (object.across_spatial != null)
                    message.across_spatial = Boolean(object.across_spatial);
                if (object.scale_filler != null) {
                    if (typeof object.scale_filler !== "object")
                        throw TypeError(".caffe.NormalizeParameter.scale_filler: object expected");
                    message.scale_filler = $root.caffe.FillerParameter.fromObject(object.scale_filler);
                }
                if (object.channel_shared != null)
                    message.channel_shared = Boolean(object.channel_shared);
                if (object.eps != null)
                    message.eps = Number(object.eps);
                return message;
            };
    
            NormalizeParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.across_spatial = true;
                    object.scale_filler = null;
                    object.channel_shared = true;
                    object.eps = 1e-10;
                }
                if (message.across_spatial != null && message.hasOwnProperty("across_spatial"))
                    object.across_spatial = message.across_spatial;
                if (message.scale_filler != null && message.hasOwnProperty("scale_filler"))
                    object.scale_filler = $root.caffe.FillerParameter.toObject(message.scale_filler, options);
                if (message.channel_shared != null && message.hasOwnProperty("channel_shared"))
                    object.channel_shared = message.channel_shared;
                if (message.eps != null && message.hasOwnProperty("eps"))
                    object.eps = options.json && !isFinite(message.eps) ? String(message.eps) : message.eps;
                return object;
            };
    
            NormalizeParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return NormalizeParameter;
        })();
    
        caffe.VideoDataParameter = (function() {
    
            function VideoDataParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            VideoDataParameter.prototype.video_type = 0;
            VideoDataParameter.prototype.device_id = 0;
            VideoDataParameter.prototype.video_file = "";
            VideoDataParameter.prototype.skip_frames = 0;
    
            VideoDataParameter.create = function create(properties) {
                return new VideoDataParameter(properties);
            };
    
            VideoDataParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.VideoDataParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.video_type = reader.int32();
                        break;
                    case 2:
                        message.device_id = reader.int32();
                        break;
                    case 3:
                        message.video_file = reader.string();
                        break;
                    case 4:
                        message.skip_frames = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            VideoDataParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.VideoDataParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "video_type":
                        message.video_type = reader.enum($root.caffe.VideoDataParameter.VideoType);
                        break;
                    case "device_id":
                        message.device_id = reader.int32();
                        break;
                    case "video_file":
                        message.video_file = reader.string();
                        break;
                    case "skip_frames":
                        message.skip_frames = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            VideoDataParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.video_type != null && message.hasOwnProperty("video_type"))
                    switch (message.video_type) {
                    default:
                        return "video_type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.device_id != null && message.hasOwnProperty("device_id"))
                    if (!$util.isInteger(message.device_id))
                        return "device_id: integer expected";
                if (message.video_file != null && message.hasOwnProperty("video_file"))
                    if (!$util.isString(message.video_file))
                        return "video_file: string expected";
                if (message.skip_frames != null && message.hasOwnProperty("skip_frames"))
                    if (!$util.isInteger(message.skip_frames))
                        return "skip_frames: integer expected";
                return null;
            };
    
            VideoDataParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.VideoDataParameter)
                    return object;
                var message = new $root.caffe.VideoDataParameter();
                switch (object.video_type) {
                case "WEBCAM":
                case 0:
                    message.video_type = 0;
                    break;
                case "VIDEO":
                case 1:
                    message.video_type = 1;
                    break;
                }
                if (object.device_id != null)
                    message.device_id = object.device_id | 0;
                if (object.video_file != null)
                    message.video_file = String(object.video_file);
                if (object.skip_frames != null)
                    message.skip_frames = object.skip_frames >>> 0;
                return message;
            };
    
            VideoDataParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.video_type = options.enums === String ? "WEBCAM" : 0;
                    object.device_id = 0;
                    object.video_file = "";
                    object.skip_frames = 0;
                }
                if (message.video_type != null && message.hasOwnProperty("video_type"))
                    object.video_type = options.enums === String ? $root.caffe.VideoDataParameter.VideoType[message.video_type] : message.video_type;
                if (message.device_id != null && message.hasOwnProperty("device_id"))
                    object.device_id = message.device_id;
                if (message.video_file != null && message.hasOwnProperty("video_file"))
                    object.video_file = message.video_file;
                if (message.skip_frames != null && message.hasOwnProperty("skip_frames"))
                    object.skip_frames = message.skip_frames;
                return object;
            };
    
            VideoDataParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            VideoDataParameter.VideoType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "WEBCAM"] = 0;
                values[valuesById[1] = "VIDEO"] = 1;
                return values;
            })();
    
            return VideoDataParameter;
        })();
    
        caffe.SplitParameter = (function() {
    
            function SplitParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SplitParameter.prototype.engine = 0;
    
            SplitParameter.create = function create(properties) {
                return new SplitParameter(properties);
            };
    
            SplitParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SplitParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.engine = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SplitParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SplitParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "engine":
                        message.engine = reader.enum($root.caffe.SplitParameter.Engine);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SplitParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 3:
                    case 4:
                        break;
                    }
                return null;
            };
    
            SplitParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SplitParameter)
                    return object;
                var message = new $root.caffe.SplitParameter();
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "MKL2017":
                case 3:
                    message.engine = 3;
                    break;
                case "MKLDNN":
                case 4:
                    message.engine = 4;
                    break;
                }
                return message;
            };
    
            SplitParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.SplitParameter.Engine[message.engine] : message.engine;
                return object;
            };
    
            SplitParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            SplitParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[3] = "MKL2017"] = 3;
                values[valuesById[4] = "MKLDNN"] = 4;
                return values;
            })();
    
            return SplitParameter;
        })();
    
        caffe.RegionLossParameter = (function() {
    
            function RegionLossParameter(properties) {
                this.biases = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            RegionLossParameter.prototype.side = 13;
            RegionLossParameter.prototype.num_class = 20;
            RegionLossParameter.prototype.bias_match = 1;
            RegionLossParameter.prototype.coords = 4;
            RegionLossParameter.prototype.num = 5;
            RegionLossParameter.prototype.softmax = 1;
            RegionLossParameter.prototype.jitter = 0.2;
            RegionLossParameter.prototype.rescore = 1;
            RegionLossParameter.prototype.object_scale = 1;
            RegionLossParameter.prototype.class_scale = 1;
            RegionLossParameter.prototype.noobject_scale = 0.5;
            RegionLossParameter.prototype.coord_scale = 5;
            RegionLossParameter.prototype.absolute = 1;
            RegionLossParameter.prototype.thresh = 0.2;
            RegionLossParameter.prototype.random = 1;
            RegionLossParameter.prototype.biases = $util.emptyArray;
            RegionLossParameter.prototype.softmax_tree = "";
            RegionLossParameter.prototype.class_map = "";
    
            RegionLossParameter.create = function create(properties) {
                return new RegionLossParameter(properties);
            };
    
            RegionLossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.RegionLossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.side = reader.uint32();
                        break;
                    case 2:
                        message.num_class = reader.uint32();
                        break;
                    case 3:
                        message.bias_match = reader.uint32();
                        break;
                    case 4:
                        message.coords = reader.uint32();
                        break;
                    case 5:
                        message.num = reader.uint32();
                        break;
                    case 6:
                        message.softmax = reader.uint32();
                        break;
                    case 7:
                        message.jitter = reader.float();
                        break;
                    case 8:
                        message.rescore = reader.uint32();
                        break;
                    case 9:
                        message.object_scale = reader.float();
                        break;
                    case 10:
                        message.class_scale = reader.float();
                        break;
                    case 11:
                        message.noobject_scale = reader.float();
                        break;
                    case 12:
                        message.coord_scale = reader.float();
                        break;
                    case 13:
                        message.absolute = reader.uint32();
                        break;
                    case 14:
                        message.thresh = reader.float();
                        break;
                    case 15:
                        message.random = reader.uint32();
                        break;
                    case 16:
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.biases.push(reader.float());
                        } else
                            message.biases.push(reader.float());
                        break;
                    case 17:
                        message.softmax_tree = reader.string();
                        break;
                    case 18:
                        message.class_map = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            RegionLossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.RegionLossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "side":
                        message.side = reader.uint32();
                        break;
                    case "num_class":
                        message.num_class = reader.uint32();
                        break;
                    case "bias_match":
                        message.bias_match = reader.uint32();
                        break;
                    case "coords":
                        message.coords = reader.uint32();
                        break;
                    case "num":
                        message.num = reader.uint32();
                        break;
                    case "softmax":
                        message.softmax = reader.uint32();
                        break;
                    case "jitter":
                        message.jitter = reader.float();
                        break;
                    case "rescore":
                        message.rescore = reader.uint32();
                        break;
                    case "object_scale":
                        message.object_scale = reader.float();
                        break;
                    case "class_scale":
                        message.class_scale = reader.float();
                        break;
                    case "noobject_scale":
                        message.noobject_scale = reader.float();
                        break;
                    case "coord_scale":
                        message.coord_scale = reader.float();
                        break;
                    case "absolute":
                        message.absolute = reader.uint32();
                        break;
                    case "thresh":
                        message.thresh = reader.float();
                        break;
                    case "random":
                        message.random = reader.uint32();
                        break;
                    case "biases":
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        message.biases.push(reader.float());
                        break;
                    case "softmax_tree":
                        message.softmax_tree = reader.string();
                        break;
                    case "class_map":
                        message.class_map = reader.string();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            RegionLossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.side != null && message.hasOwnProperty("side"))
                    if (!$util.isInteger(message.side))
                        return "side: integer expected";
                if (message.num_class != null && message.hasOwnProperty("num_class"))
                    if (!$util.isInteger(message.num_class))
                        return "num_class: integer expected";
                if (message.bias_match != null && message.hasOwnProperty("bias_match"))
                    if (!$util.isInteger(message.bias_match))
                        return "bias_match: integer expected";
                if (message.coords != null && message.hasOwnProperty("coords"))
                    if (!$util.isInteger(message.coords))
                        return "coords: integer expected";
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.softmax != null && message.hasOwnProperty("softmax"))
                    if (!$util.isInteger(message.softmax))
                        return "softmax: integer expected";
                if (message.jitter != null && message.hasOwnProperty("jitter"))
                    if (typeof message.jitter !== "number")
                        return "jitter: number expected";
                if (message.rescore != null && message.hasOwnProperty("rescore"))
                    if (!$util.isInteger(message.rescore))
                        return "rescore: integer expected";
                if (message.object_scale != null && message.hasOwnProperty("object_scale"))
                    if (typeof message.object_scale !== "number")
                        return "object_scale: number expected";
                if (message.class_scale != null && message.hasOwnProperty("class_scale"))
                    if (typeof message.class_scale !== "number")
                        return "class_scale: number expected";
                if (message.noobject_scale != null && message.hasOwnProperty("noobject_scale"))
                    if (typeof message.noobject_scale !== "number")
                        return "noobject_scale: number expected";
                if (message.coord_scale != null && message.hasOwnProperty("coord_scale"))
                    if (typeof message.coord_scale !== "number")
                        return "coord_scale: number expected";
                if (message.absolute != null && message.hasOwnProperty("absolute"))
                    if (!$util.isInteger(message.absolute))
                        return "absolute: integer expected";
                if (message.thresh != null && message.hasOwnProperty("thresh"))
                    if (typeof message.thresh !== "number")
                        return "thresh: number expected";
                if (message.random != null && message.hasOwnProperty("random"))
                    if (!$util.isInteger(message.random))
                        return "random: integer expected";
                if (message.biases != null && message.hasOwnProperty("biases")) {
                    if (!Array.isArray(message.biases))
                        return "biases: array expected";
                    for (var i = 0; i < message.biases.length; ++i)
                        if (typeof message.biases[i] !== "number")
                            return "biases: number[] expected";
                }
                if (message.softmax_tree != null && message.hasOwnProperty("softmax_tree"))
                    if (!$util.isString(message.softmax_tree))
                        return "softmax_tree: string expected";
                if (message.class_map != null && message.hasOwnProperty("class_map"))
                    if (!$util.isString(message.class_map))
                        return "class_map: string expected";
                return null;
            };
    
            RegionLossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.RegionLossParameter)
                    return object;
                var message = new $root.caffe.RegionLossParameter();
                if (object.side != null)
                    message.side = object.side >>> 0;
                if (object.num_class != null)
                    message.num_class = object.num_class >>> 0;
                if (object.bias_match != null)
                    message.bias_match = object.bias_match >>> 0;
                if (object.coords != null)
                    message.coords = object.coords >>> 0;
                if (object.num != null)
                    message.num = object.num >>> 0;
                if (object.softmax != null)
                    message.softmax = object.softmax >>> 0;
                if (object.jitter != null)
                    message.jitter = Number(object.jitter);
                if (object.rescore != null)
                    message.rescore = object.rescore >>> 0;
                if (object.object_scale != null)
                    message.object_scale = Number(object.object_scale);
                if (object.class_scale != null)
                    message.class_scale = Number(object.class_scale);
                if (object.noobject_scale != null)
                    message.noobject_scale = Number(object.noobject_scale);
                if (object.coord_scale != null)
                    message.coord_scale = Number(object.coord_scale);
                if (object.absolute != null)
                    message.absolute = object.absolute >>> 0;
                if (object.thresh != null)
                    message.thresh = Number(object.thresh);
                if (object.random != null)
                    message.random = object.random >>> 0;
                if (object.biases) {
                    if (!Array.isArray(object.biases))
                        throw TypeError(".caffe.RegionLossParameter.biases: array expected");
                    message.biases = [];
                    for (var i = 0; i < object.biases.length; ++i)
                        message.biases[i] = Number(object.biases[i]);
                }
                if (object.softmax_tree != null)
                    message.softmax_tree = String(object.softmax_tree);
                if (object.class_map != null)
                    message.class_map = String(object.class_map);
                return message;
            };
    
            RegionLossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.biases = [];
                if (options.defaults) {
                    object.side = 13;
                    object.num_class = 20;
                    object.bias_match = 1;
                    object.coords = 4;
                    object.num = 5;
                    object.softmax = 1;
                    object.jitter = 0.2;
                    object.rescore = 1;
                    object.object_scale = 1;
                    object.class_scale = 1;
                    object.noobject_scale = 0.5;
                    object.coord_scale = 5;
                    object.absolute = 1;
                    object.thresh = 0.2;
                    object.random = 1;
                    object.softmax_tree = "";
                    object.class_map = "";
                }
                if (message.side != null && message.hasOwnProperty("side"))
                    object.side = message.side;
                if (message.num_class != null && message.hasOwnProperty("num_class"))
                    object.num_class = message.num_class;
                if (message.bias_match != null && message.hasOwnProperty("bias_match"))
                    object.bias_match = message.bias_match;
                if (message.coords != null && message.hasOwnProperty("coords"))
                    object.coords = message.coords;
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.softmax != null && message.hasOwnProperty("softmax"))
                    object.softmax = message.softmax;
                if (message.jitter != null && message.hasOwnProperty("jitter"))
                    object.jitter = options.json && !isFinite(message.jitter) ? String(message.jitter) : message.jitter;
                if (message.rescore != null && message.hasOwnProperty("rescore"))
                    object.rescore = message.rescore;
                if (message.object_scale != null && message.hasOwnProperty("object_scale"))
                    object.object_scale = options.json && !isFinite(message.object_scale) ? String(message.object_scale) : message.object_scale;
                if (message.class_scale != null && message.hasOwnProperty("class_scale"))
                    object.class_scale = options.json && !isFinite(message.class_scale) ? String(message.class_scale) : message.class_scale;
                if (message.noobject_scale != null && message.hasOwnProperty("noobject_scale"))
                    object.noobject_scale = options.json && !isFinite(message.noobject_scale) ? String(message.noobject_scale) : message.noobject_scale;
                if (message.coord_scale != null && message.hasOwnProperty("coord_scale"))
                    object.coord_scale = options.json && !isFinite(message.coord_scale) ? String(message.coord_scale) : message.coord_scale;
                if (message.absolute != null && message.hasOwnProperty("absolute"))
                    object.absolute = message.absolute;
                if (message.thresh != null && message.hasOwnProperty("thresh"))
                    object.thresh = options.json && !isFinite(message.thresh) ? String(message.thresh) : message.thresh;
                if (message.random != null && message.hasOwnProperty("random"))
                    object.random = message.random;
                if (message.biases && message.biases.length) {
                    object.biases = [];
                    for (var j = 0; j < message.biases.length; ++j)
                        object.biases[j] = options.json && !isFinite(message.biases[j]) ? String(message.biases[j]) : message.biases[j];
                }
                if (message.softmax_tree != null && message.hasOwnProperty("softmax_tree"))
                    object.softmax_tree = message.softmax_tree;
                if (message.class_map != null && message.hasOwnProperty("class_map"))
                    object.class_map = message.class_map;
                return object;
            };
    
            RegionLossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RegionLossParameter;
        })();
    
        caffe.EvalDetectionParameter = (function() {
    
            function EvalDetectionParameter(properties) {
                this.biases = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            EvalDetectionParameter.prototype.side = 7;
            EvalDetectionParameter.prototype.num_class = 20;
            EvalDetectionParameter.prototype.num_object = 2;
            EvalDetectionParameter.prototype.threshold = 0.5;
            EvalDetectionParameter.prototype.sqrt = true;
            EvalDetectionParameter.prototype.constriant = true;
            EvalDetectionParameter.prototype.score_type = 2;
            EvalDetectionParameter.prototype.nms = -1;
            EvalDetectionParameter.prototype.biases = $util.emptyArray;
    
            EvalDetectionParameter.create = function create(properties) {
                return new EvalDetectionParameter(properties);
            };
    
            EvalDetectionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.EvalDetectionParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.side = reader.uint32();
                        break;
                    case 2:
                        message.num_class = reader.uint32();
                        break;
                    case 3:
                        message.num_object = reader.uint32();
                        break;
                    case 4:
                        message.threshold = reader.float();
                        break;
                    case 5:
                        message.sqrt = reader.bool();
                        break;
                    case 6:
                        message.constriant = reader.bool();
                        break;
                    case 7:
                        message.score_type = reader.int32();
                        break;
                    case 8:
                        message.nms = reader.float();
                        break;
                    case 9:
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.biases.push(reader.float());
                        } else
                            message.biases.push(reader.float());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            EvalDetectionParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.EvalDetectionParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "side":
                        message.side = reader.uint32();
                        break;
                    case "num_class":
                        message.num_class = reader.uint32();
                        break;
                    case "num_object":
                        message.num_object = reader.uint32();
                        break;
                    case "threshold":
                        message.threshold = reader.float();
                        break;
                    case "sqrt":
                        message.sqrt = reader.bool();
                        break;
                    case "constriant":
                        message.constriant = reader.bool();
                        break;
                    case "score_type":
                        message.score_type = reader.enum($root.caffe.EvalDetectionParameter.ScoreType);
                        break;
                    case "nms":
                        message.nms = reader.float();
                        break;
                    case "biases":
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        message.biases.push(reader.float());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            EvalDetectionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.side != null && message.hasOwnProperty("side"))
                    if (!$util.isInteger(message.side))
                        return "side: integer expected";
                if (message.num_class != null && message.hasOwnProperty("num_class"))
                    if (!$util.isInteger(message.num_class))
                        return "num_class: integer expected";
                if (message.num_object != null && message.hasOwnProperty("num_object"))
                    if (!$util.isInteger(message.num_object))
                        return "num_object: integer expected";
                if (message.threshold != null && message.hasOwnProperty("threshold"))
                    if (typeof message.threshold !== "number")
                        return "threshold: number expected";
                if (message.sqrt != null && message.hasOwnProperty("sqrt"))
                    if (typeof message.sqrt !== "boolean")
                        return "sqrt: boolean expected";
                if (message.constriant != null && message.hasOwnProperty("constriant"))
                    if (typeof message.constriant !== "boolean")
                        return "constriant: boolean expected";
                if (message.score_type != null && message.hasOwnProperty("score_type"))
                    switch (message.score_type) {
                    default:
                        return "score_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.nms != null && message.hasOwnProperty("nms"))
                    if (typeof message.nms !== "number")
                        return "nms: number expected";
                if (message.biases != null && message.hasOwnProperty("biases")) {
                    if (!Array.isArray(message.biases))
                        return "biases: array expected";
                    for (var i = 0; i < message.biases.length; ++i)
                        if (typeof message.biases[i] !== "number")
                            return "biases: number[] expected";
                }
                return null;
            };
    
            EvalDetectionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.EvalDetectionParameter)
                    return object;
                var message = new $root.caffe.EvalDetectionParameter();
                if (object.side != null)
                    message.side = object.side >>> 0;
                if (object.num_class != null)
                    message.num_class = object.num_class >>> 0;
                if (object.num_object != null)
                    message.num_object = object.num_object >>> 0;
                if (object.threshold != null)
                    message.threshold = Number(object.threshold);
                if (object.sqrt != null)
                    message.sqrt = Boolean(object.sqrt);
                if (object.constriant != null)
                    message.constriant = Boolean(object.constriant);
                switch (object.score_type) {
                case "OBJ":
                case 0:
                    message.score_type = 0;
                    break;
                case "PROB":
                case 1:
                    message.score_type = 1;
                    break;
                case "MULTIPLY":
                case 2:
                    message.score_type = 2;
                    break;
                }
                if (object.nms != null)
                    message.nms = Number(object.nms);
                if (object.biases) {
                    if (!Array.isArray(object.biases))
                        throw TypeError(".caffe.EvalDetectionParameter.biases: array expected");
                    message.biases = [];
                    for (var i = 0; i < object.biases.length; ++i)
                        message.biases[i] = Number(object.biases[i]);
                }
                return message;
            };
    
            EvalDetectionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.biases = [];
                if (options.defaults) {
                    object.side = 7;
                    object.num_class = 20;
                    object.num_object = 2;
                    object.threshold = 0.5;
                    object.sqrt = true;
                    object.constriant = true;
                    object.score_type = options.enums === String ? "MULTIPLY" : 2;
                    object.nms = -1;
                }
                if (message.side != null && message.hasOwnProperty("side"))
                    object.side = message.side;
                if (message.num_class != null && message.hasOwnProperty("num_class"))
                    object.num_class = message.num_class;
                if (message.num_object != null && message.hasOwnProperty("num_object"))
                    object.num_object = message.num_object;
                if (message.threshold != null && message.hasOwnProperty("threshold"))
                    object.threshold = options.json && !isFinite(message.threshold) ? String(message.threshold) : message.threshold;
                if (message.sqrt != null && message.hasOwnProperty("sqrt"))
                    object.sqrt = message.sqrt;
                if (message.constriant != null && message.hasOwnProperty("constriant"))
                    object.constriant = message.constriant;
                if (message.score_type != null && message.hasOwnProperty("score_type"))
                    object.score_type = options.enums === String ? $root.caffe.EvalDetectionParameter.ScoreType[message.score_type] : message.score_type;
                if (message.nms != null && message.hasOwnProperty("nms"))
                    object.nms = options.json && !isFinite(message.nms) ? String(message.nms) : message.nms;
                if (message.biases && message.biases.length) {
                    object.biases = [];
                    for (var j = 0; j < message.biases.length; ++j)
                        object.biases[j] = options.json && !isFinite(message.biases[j]) ? String(message.biases[j]) : message.biases[j];
                }
                return object;
            };
    
            EvalDetectionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            EvalDetectionParameter.ScoreType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "OBJ"] = 0;
                values[valuesById[1] = "PROB"] = 1;
                values[valuesById[2] = "MULTIPLY"] = 2;
                return values;
            })();
    
            return EvalDetectionParameter;
        })();
    
        caffe.ShuffleChannelParameter = (function() {
    
            function ShuffleChannelParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ShuffleChannelParameter.prototype.group = 1;
    
            ShuffleChannelParameter.create = function create(properties) {
                return new ShuffleChannelParameter(properties);
            };
    
            ShuffleChannelParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ShuffleChannelParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.group = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ShuffleChannelParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ShuffleChannelParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "group":
                        message.group = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ShuffleChannelParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.group != null && message.hasOwnProperty("group"))
                    if (!$util.isInteger(message.group))
                        return "group: integer expected";
                return null;
            };
    
            ShuffleChannelParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ShuffleChannelParameter)
                    return object;
                var message = new $root.caffe.ShuffleChannelParameter();
                if (object.group != null)
                    message.group = object.group >>> 0;
                return message;
            };
    
            ShuffleChannelParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.group = 1;
                if (message.group != null && message.hasOwnProperty("group"))
                    object.group = message.group;
                return object;
            };
    
            ShuffleChannelParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ShuffleChannelParameter;
        })();
    
        caffe.CoeffScheduleParameter = (function() {
    
            function CoeffScheduleParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            CoeffScheduleParameter.prototype.half_life = 1;
            CoeffScheduleParameter.prototype.initial_coeff = 1;
            CoeffScheduleParameter.prototype.final_coeff = 1;
    
            CoeffScheduleParameter.create = function create(properties) {
                return new CoeffScheduleParameter(properties);
            };
    
            CoeffScheduleParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.CoeffScheduleParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.half_life = reader.float();
                        break;
                    case 2:
                        message.initial_coeff = reader.float();
                        break;
                    case 3:
                        message.final_coeff = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            CoeffScheduleParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.CoeffScheduleParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "half_life":
                        message.half_life = reader.float();
                        break;
                    case "initial_coeff":
                        message.initial_coeff = reader.float();
                        break;
                    case "final_coeff":
                        message.final_coeff = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            CoeffScheduleParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.half_life != null && message.hasOwnProperty("half_life"))
                    if (typeof message.half_life !== "number")
                        return "half_life: number expected";
                if (message.initial_coeff != null && message.hasOwnProperty("initial_coeff"))
                    if (typeof message.initial_coeff !== "number")
                        return "initial_coeff: number expected";
                if (message.final_coeff != null && message.hasOwnProperty("final_coeff"))
                    if (typeof message.final_coeff !== "number")
                        return "final_coeff: number expected";
                return null;
            };
    
            CoeffScheduleParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.CoeffScheduleParameter)
                    return object;
                var message = new $root.caffe.CoeffScheduleParameter();
                if (object.half_life != null)
                    message.half_life = Number(object.half_life);
                if (object.initial_coeff != null)
                    message.initial_coeff = Number(object.initial_coeff);
                if (object.final_coeff != null)
                    message.final_coeff = Number(object.final_coeff);
                return message;
            };
    
            CoeffScheduleParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.half_life = 1;
                    object.initial_coeff = 1;
                    object.final_coeff = 1;
                }
                if (message.half_life != null && message.hasOwnProperty("half_life"))
                    object.half_life = options.json && !isFinite(message.half_life) ? String(message.half_life) : message.half_life;
                if (message.initial_coeff != null && message.hasOwnProperty("initial_coeff"))
                    object.initial_coeff = options.json && !isFinite(message.initial_coeff) ? String(message.initial_coeff) : message.initial_coeff;
                if (message.final_coeff != null && message.hasOwnProperty("final_coeff"))
                    object.final_coeff = options.json && !isFinite(message.final_coeff) ? String(message.final_coeff) : message.final_coeff;
                return object;
            };
    
            CoeffScheduleParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return CoeffScheduleParameter;
        })();
    
        caffe.AugmentationParameter = (function() {
    
            function AugmentationParameter(properties) {
                this.mean = [];
                this.chromatic_eigvec = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            AugmentationParameter.prototype.crop_width = 0;
            AugmentationParameter.prototype.crop_height = 0;
            AugmentationParameter.prototype.write_augmented = "";
            AugmentationParameter.prototype.max_multiplier = 255;
            AugmentationParameter.prototype.augment_during_test = false;
            AugmentationParameter.prototype.recompute_mean = 0;
            AugmentationParameter.prototype.write_mean = "";
            AugmentationParameter.prototype.mean_per_pixel = true;
            AugmentationParameter.prototype.mean = $util.emptyArray;
            AugmentationParameter.prototype.mode = "add";
            AugmentationParameter.prototype.bottomwidth = 0;
            AugmentationParameter.prototype.bottomheight = 0;
            AugmentationParameter.prototype.num = 0;
            AugmentationParameter.prototype.chromatic_eigvec = $util.emptyArray;
            AugmentationParameter.prototype.mirror = null;
            AugmentationParameter.prototype.translate = null;
            AugmentationParameter.prototype.rotate = null;
            AugmentationParameter.prototype.zoom = null;
            AugmentationParameter.prototype.squeeze = null;
            AugmentationParameter.prototype.translate_x = null;
            AugmentationParameter.prototype.translate_y = null;
            AugmentationParameter.prototype.gamma = null;
            AugmentationParameter.prototype.brightness = null;
            AugmentationParameter.prototype.contrast = null;
            AugmentationParameter.prototype.color = null;
            AugmentationParameter.prototype.lmult_pow = null;
            AugmentationParameter.prototype.lmult_mult = null;
            AugmentationParameter.prototype.lmult_add = null;
            AugmentationParameter.prototype.sat_pow = null;
            AugmentationParameter.prototype.sat_mult = null;
            AugmentationParameter.prototype.sat_add = null;
            AugmentationParameter.prototype.col_pow = null;
            AugmentationParameter.prototype.col_mult = null;
            AugmentationParameter.prototype.col_add = null;
            AugmentationParameter.prototype.ladd_pow = null;
            AugmentationParameter.prototype.ladd_mult = null;
            AugmentationParameter.prototype.ladd_add = null;
            AugmentationParameter.prototype.col_rotate = null;
            AugmentationParameter.prototype.fog_amount = null;
            AugmentationParameter.prototype.fog_size = null;
            AugmentationParameter.prototype.motion_blur_angle = null;
            AugmentationParameter.prototype.motion_blur_size = null;
            AugmentationParameter.prototype.shadow_angle = null;
            AugmentationParameter.prototype.shadow_distance = null;
            AugmentationParameter.prototype.shadow_strength = null;
            AugmentationParameter.prototype.noise = null;
    
            AugmentationParameter.create = function create(properties) {
                return new AugmentationParameter(properties);
            };
    
            AugmentationParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.AugmentationParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.crop_width = reader.uint32();
                        break;
                    case 34:
                        message.crop_height = reader.uint32();
                        break;
                    case 2:
                        message.write_augmented = reader.string();
                        break;
                    case 3:
                        message.max_multiplier = reader.float();
                        break;
                    case 4:
                        message.augment_during_test = reader.bool();
                        break;
                    case 5:
                        message.recompute_mean = reader.uint32();
                        break;
                    case 6:
                        message.write_mean = reader.string();
                        break;
                    case 7:
                        message.mean_per_pixel = reader.bool();
                        break;
                    case 18:
                        if (!(message.mean && message.mean.length))
                            message.mean = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.mean.push(reader.float());
                        } else
                            message.mean.push(reader.float());
                        break;
                    case 8:
                        message.mode = reader.string();
                        break;
                    case 80:
                        message.bottomwidth = reader.uint32();
                        break;
                    case 81:
                        message.bottomheight = reader.uint32();
                        break;
                    case 82:
                        message.num = reader.uint32();
                        break;
                    case 83:
                        if (!(message.chromatic_eigvec && message.chromatic_eigvec.length))
                            message.chromatic_eigvec = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.chromatic_eigvec.push(reader.float());
                        } else
                            message.chromatic_eigvec.push(reader.float());
                        break;
                    case 10:
                        message.mirror = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.translate = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.rotate = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.zoom = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.squeeze = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.translate_x = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 16:
                        message.translate_y = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 35:
                        message.gamma = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 36:
                        message.brightness = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 37:
                        message.contrast = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 38:
                        message.color = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 20:
                        message.lmult_pow = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 21:
                        message.lmult_mult = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 22:
                        message.lmult_add = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 23:
                        message.sat_pow = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 24:
                        message.sat_mult = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 25:
                        message.sat_add = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 26:
                        message.col_pow = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 27:
                        message.col_mult = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 28:
                        message.col_add = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 29:
                        message.ladd_pow = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 30:
                        message.ladd_mult = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 31:
                        message.ladd_add = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 32:
                        message.col_rotate = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 100:
                        message.fog_amount = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 101:
                        message.fog_size = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 102:
                        message.motion_blur_angle = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 103:
                        message.motion_blur_size = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 104:
                        message.shadow_angle = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 105:
                        message.shadow_distance = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 106:
                        message.shadow_strength = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 107:
                        message.noise = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            AugmentationParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.AugmentationParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "crop_width":
                        message.crop_width = reader.uint32();
                        break;
                    case "crop_height":
                        message.crop_height = reader.uint32();
                        break;
                    case "write_augmented":
                        message.write_augmented = reader.string();
                        break;
                    case "max_multiplier":
                        message.max_multiplier = reader.float();
                        break;
                    case "augment_during_test":
                        message.augment_during_test = reader.bool();
                        break;
                    case "recompute_mean":
                        message.recompute_mean = reader.uint32();
                        break;
                    case "write_mean":
                        message.write_mean = reader.string();
                        break;
                    case "mean_per_pixel":
                        message.mean_per_pixel = reader.bool();
                        break;
                    case "mean":
                        if (!(message.mean && message.mean.length))
                            message.mean = [];
                        message.mean.push(reader.float());
                        break;
                    case "mode":
                        message.mode = reader.string();
                        break;
                    case "bottomwidth":
                        message.bottomwidth = reader.uint32();
                        break;
                    case "bottomheight":
                        message.bottomheight = reader.uint32();
                        break;
                    case "num":
                        message.num = reader.uint32();
                        break;
                    case "chromatic_eigvec":
                        if (!(message.chromatic_eigvec && message.chromatic_eigvec.length))
                            message.chromatic_eigvec = [];
                        message.chromatic_eigvec.push(reader.float());
                        break;
                    case "mirror":
                        message.mirror = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "translate":
                        message.translate = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "rotate":
                        message.rotate = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "zoom":
                        message.zoom = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "squeeze":
                        message.squeeze = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "translate_x":
                        message.translate_x = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "translate_y":
                        message.translate_y = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "gamma":
                        message.gamma = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "brightness":
                        message.brightness = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "contrast":
                        message.contrast = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "color":
                        message.color = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "lmult_pow":
                        message.lmult_pow = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "lmult_mult":
                        message.lmult_mult = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "lmult_add":
                        message.lmult_add = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "sat_pow":
                        message.sat_pow = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "sat_mult":
                        message.sat_mult = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "sat_add":
                        message.sat_add = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "col_pow":
                        message.col_pow = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "col_mult":
                        message.col_mult = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "col_add":
                        message.col_add = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "ladd_pow":
                        message.ladd_pow = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "ladd_mult":
                        message.ladd_mult = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "ladd_add":
                        message.ladd_add = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "col_rotate":
                        message.col_rotate = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "fog_amount":
                        message.fog_amount = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "fog_size":
                        message.fog_size = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "motion_blur_angle":
                        message.motion_blur_angle = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "motion_blur_size":
                        message.motion_blur_size = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "shadow_angle":
                        message.shadow_angle = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "shadow_distance":
                        message.shadow_distance = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "shadow_strength":
                        message.shadow_strength = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "noise":
                        message.noise = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            AugmentationParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.crop_width != null && message.hasOwnProperty("crop_width"))
                    if (!$util.isInteger(message.crop_width))
                        return "crop_width: integer expected";
                if (message.crop_height != null && message.hasOwnProperty("crop_height"))
                    if (!$util.isInteger(message.crop_height))
                        return "crop_height: integer expected";
                if (message.write_augmented != null && message.hasOwnProperty("write_augmented"))
                    if (!$util.isString(message.write_augmented))
                        return "write_augmented: string expected";
                if (message.max_multiplier != null && message.hasOwnProperty("max_multiplier"))
                    if (typeof message.max_multiplier !== "number")
                        return "max_multiplier: number expected";
                if (message.augment_during_test != null && message.hasOwnProperty("augment_during_test"))
                    if (typeof message.augment_during_test !== "boolean")
                        return "augment_during_test: boolean expected";
                if (message.recompute_mean != null && message.hasOwnProperty("recompute_mean"))
                    if (!$util.isInteger(message.recompute_mean))
                        return "recompute_mean: integer expected";
                if (message.write_mean != null && message.hasOwnProperty("write_mean"))
                    if (!$util.isString(message.write_mean))
                        return "write_mean: string expected";
                if (message.mean_per_pixel != null && message.hasOwnProperty("mean_per_pixel"))
                    if (typeof message.mean_per_pixel !== "boolean")
                        return "mean_per_pixel: boolean expected";
                if (message.mean != null && message.hasOwnProperty("mean")) {
                    if (!Array.isArray(message.mean))
                        return "mean: array expected";
                    for (var i = 0; i < message.mean.length; ++i)
                        if (typeof message.mean[i] !== "number")
                            return "mean: number[] expected";
                }
                if (message.mode != null && message.hasOwnProperty("mode"))
                    if (!$util.isString(message.mode))
                        return "mode: string expected";
                if (message.bottomwidth != null && message.hasOwnProperty("bottomwidth"))
                    if (!$util.isInteger(message.bottomwidth))
                        return "bottomwidth: integer expected";
                if (message.bottomheight != null && message.hasOwnProperty("bottomheight"))
                    if (!$util.isInteger(message.bottomheight))
                        return "bottomheight: integer expected";
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.chromatic_eigvec != null && message.hasOwnProperty("chromatic_eigvec")) {
                    if (!Array.isArray(message.chromatic_eigvec))
                        return "chromatic_eigvec: array expected";
                    for (var i = 0; i < message.chromatic_eigvec.length; ++i)
                        if (typeof message.chromatic_eigvec[i] !== "number")
                            return "chromatic_eigvec: number[] expected";
                }
                if (message.mirror != null && message.hasOwnProperty("mirror")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.mirror);
                    if (error)
                        return "mirror." + error;
                }
                if (message.translate != null && message.hasOwnProperty("translate")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.translate);
                    if (error)
                        return "translate." + error;
                }
                if (message.rotate != null && message.hasOwnProperty("rotate")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.rotate);
                    if (error)
                        return "rotate." + error;
                }
                if (message.zoom != null && message.hasOwnProperty("zoom")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.zoom);
                    if (error)
                        return "zoom." + error;
                }
                if (message.squeeze != null && message.hasOwnProperty("squeeze")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.squeeze);
                    if (error)
                        return "squeeze." + error;
                }
                if (message.translate_x != null && message.hasOwnProperty("translate_x")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.translate_x);
                    if (error)
                        return "translate_x." + error;
                }
                if (message.translate_y != null && message.hasOwnProperty("translate_y")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.translate_y);
                    if (error)
                        return "translate_y." + error;
                }
                if (message.gamma != null && message.hasOwnProperty("gamma")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.gamma);
                    if (error)
                        return "gamma." + error;
                }
                if (message.brightness != null && message.hasOwnProperty("brightness")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.brightness);
                    if (error)
                        return "brightness." + error;
                }
                if (message.contrast != null && message.hasOwnProperty("contrast")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.contrast);
                    if (error)
                        return "contrast." + error;
                }
                if (message.color != null && message.hasOwnProperty("color")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.color);
                    if (error)
                        return "color." + error;
                }
                if (message.lmult_pow != null && message.hasOwnProperty("lmult_pow")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.lmult_pow);
                    if (error)
                        return "lmult_pow." + error;
                }
                if (message.lmult_mult != null && message.hasOwnProperty("lmult_mult")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.lmult_mult);
                    if (error)
                        return "lmult_mult." + error;
                }
                if (message.lmult_add != null && message.hasOwnProperty("lmult_add")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.lmult_add);
                    if (error)
                        return "lmult_add." + error;
                }
                if (message.sat_pow != null && message.hasOwnProperty("sat_pow")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.sat_pow);
                    if (error)
                        return "sat_pow." + error;
                }
                if (message.sat_mult != null && message.hasOwnProperty("sat_mult")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.sat_mult);
                    if (error)
                        return "sat_mult." + error;
                }
                if (message.sat_add != null && message.hasOwnProperty("sat_add")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.sat_add);
                    if (error)
                        return "sat_add." + error;
                }
                if (message.col_pow != null && message.hasOwnProperty("col_pow")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.col_pow);
                    if (error)
                        return "col_pow." + error;
                }
                if (message.col_mult != null && message.hasOwnProperty("col_mult")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.col_mult);
                    if (error)
                        return "col_mult." + error;
                }
                if (message.col_add != null && message.hasOwnProperty("col_add")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.col_add);
                    if (error)
                        return "col_add." + error;
                }
                if (message.ladd_pow != null && message.hasOwnProperty("ladd_pow")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.ladd_pow);
                    if (error)
                        return "ladd_pow." + error;
                }
                if (message.ladd_mult != null && message.hasOwnProperty("ladd_mult")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.ladd_mult);
                    if (error)
                        return "ladd_mult." + error;
                }
                if (message.ladd_add != null && message.hasOwnProperty("ladd_add")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.ladd_add);
                    if (error)
                        return "ladd_add." + error;
                }
                if (message.col_rotate != null && message.hasOwnProperty("col_rotate")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.col_rotate);
                    if (error)
                        return "col_rotate." + error;
                }
                if (message.fog_amount != null && message.hasOwnProperty("fog_amount")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.fog_amount);
                    if (error)
                        return "fog_amount." + error;
                }
                if (message.fog_size != null && message.hasOwnProperty("fog_size")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.fog_size);
                    if (error)
                        return "fog_size." + error;
                }
                if (message.motion_blur_angle != null && message.hasOwnProperty("motion_blur_angle")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.motion_blur_angle);
                    if (error)
                        return "motion_blur_angle." + error;
                }
                if (message.motion_blur_size != null && message.hasOwnProperty("motion_blur_size")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.motion_blur_size);
                    if (error)
                        return "motion_blur_size." + error;
                }
                if (message.shadow_angle != null && message.hasOwnProperty("shadow_angle")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.shadow_angle);
                    if (error)
                        return "shadow_angle." + error;
                }
                if (message.shadow_distance != null && message.hasOwnProperty("shadow_distance")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.shadow_distance);
                    if (error)
                        return "shadow_distance." + error;
                }
                if (message.shadow_strength != null && message.hasOwnProperty("shadow_strength")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.shadow_strength);
                    if (error)
                        return "shadow_strength." + error;
                }
                if (message.noise != null && message.hasOwnProperty("noise")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.noise);
                    if (error)
                        return "noise." + error;
                }
                return null;
            };
    
            AugmentationParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.AugmentationParameter)
                    return object;
                var message = new $root.caffe.AugmentationParameter();
                if (object.crop_width != null)
                    message.crop_width = object.crop_width >>> 0;
                if (object.crop_height != null)
                    message.crop_height = object.crop_height >>> 0;
                if (object.write_augmented != null)
                    message.write_augmented = String(object.write_augmented);
                if (object.max_multiplier != null)
                    message.max_multiplier = Number(object.max_multiplier);
                if (object.augment_during_test != null)
                    message.augment_during_test = Boolean(object.augment_during_test);
                if (object.recompute_mean != null)
                    message.recompute_mean = object.recompute_mean >>> 0;
                if (object.write_mean != null)
                    message.write_mean = String(object.write_mean);
                if (object.mean_per_pixel != null)
                    message.mean_per_pixel = Boolean(object.mean_per_pixel);
                if (object.mean) {
                    if (!Array.isArray(object.mean))
                        throw TypeError(".caffe.AugmentationParameter.mean: array expected");
                    message.mean = [];
                    for (var i = 0; i < object.mean.length; ++i)
                        message.mean[i] = Number(object.mean[i]);
                }
                if (object.mode != null)
                    message.mode = String(object.mode);
                if (object.bottomwidth != null)
                    message.bottomwidth = object.bottomwidth >>> 0;
                if (object.bottomheight != null)
                    message.bottomheight = object.bottomheight >>> 0;
                if (object.num != null)
                    message.num = object.num >>> 0;
                if (object.chromatic_eigvec) {
                    if (!Array.isArray(object.chromatic_eigvec))
                        throw TypeError(".caffe.AugmentationParameter.chromatic_eigvec: array expected");
                    message.chromatic_eigvec = [];
                    for (var i = 0; i < object.chromatic_eigvec.length; ++i)
                        message.chromatic_eigvec[i] = Number(object.chromatic_eigvec[i]);
                }
                if (object.mirror != null) {
                    if (typeof object.mirror !== "object")
                        throw TypeError(".caffe.AugmentationParameter.mirror: object expected");
                    message.mirror = $root.caffe.RandomGeneratorParameter.fromObject(object.mirror);
                }
                if (object.translate != null) {
                    if (typeof object.translate !== "object")
                        throw TypeError(".caffe.AugmentationParameter.translate: object expected");
                    message.translate = $root.caffe.RandomGeneratorParameter.fromObject(object.translate);
                }
                if (object.rotate != null) {
                    if (typeof object.rotate !== "object")
                        throw TypeError(".caffe.AugmentationParameter.rotate: object expected");
                    message.rotate = $root.caffe.RandomGeneratorParameter.fromObject(object.rotate);
                }
                if (object.zoom != null) {
                    if (typeof object.zoom !== "object")
                        throw TypeError(".caffe.AugmentationParameter.zoom: object expected");
                    message.zoom = $root.caffe.RandomGeneratorParameter.fromObject(object.zoom);
                }
                if (object.squeeze != null) {
                    if (typeof object.squeeze !== "object")
                        throw TypeError(".caffe.AugmentationParameter.squeeze: object expected");
                    message.squeeze = $root.caffe.RandomGeneratorParameter.fromObject(object.squeeze);
                }
                if (object.translate_x != null) {
                    if (typeof object.translate_x !== "object")
                        throw TypeError(".caffe.AugmentationParameter.translate_x: object expected");
                    message.translate_x = $root.caffe.RandomGeneratorParameter.fromObject(object.translate_x);
                }
                if (object.translate_y != null) {
                    if (typeof object.translate_y !== "object")
                        throw TypeError(".caffe.AugmentationParameter.translate_y: object expected");
                    message.translate_y = $root.caffe.RandomGeneratorParameter.fromObject(object.translate_y);
                }
                if (object.gamma != null) {
                    if (typeof object.gamma !== "object")
                        throw TypeError(".caffe.AugmentationParameter.gamma: object expected");
                    message.gamma = $root.caffe.RandomGeneratorParameter.fromObject(object.gamma);
                }
                if (object.brightness != null) {
                    if (typeof object.brightness !== "object")
                        throw TypeError(".caffe.AugmentationParameter.brightness: object expected");
                    message.brightness = $root.caffe.RandomGeneratorParameter.fromObject(object.brightness);
                }
                if (object.contrast != null) {
                    if (typeof object.contrast !== "object")
                        throw TypeError(".caffe.AugmentationParameter.contrast: object expected");
                    message.contrast = $root.caffe.RandomGeneratorParameter.fromObject(object.contrast);
                }
                if (object.color != null) {
                    if (typeof object.color !== "object")
                        throw TypeError(".caffe.AugmentationParameter.color: object expected");
                    message.color = $root.caffe.RandomGeneratorParameter.fromObject(object.color);
                }
                if (object.lmult_pow != null) {
                    if (typeof object.lmult_pow !== "object")
                        throw TypeError(".caffe.AugmentationParameter.lmult_pow: object expected");
                    message.lmult_pow = $root.caffe.RandomGeneratorParameter.fromObject(object.lmult_pow);
                }
                if (object.lmult_mult != null) {
                    if (typeof object.lmult_mult !== "object")
                        throw TypeError(".caffe.AugmentationParameter.lmult_mult: object expected");
                    message.lmult_mult = $root.caffe.RandomGeneratorParameter.fromObject(object.lmult_mult);
                }
                if (object.lmult_add != null) {
                    if (typeof object.lmult_add !== "object")
                        throw TypeError(".caffe.AugmentationParameter.lmult_add: object expected");
                    message.lmult_add = $root.caffe.RandomGeneratorParameter.fromObject(object.lmult_add);
                }
                if (object.sat_pow != null) {
                    if (typeof object.sat_pow !== "object")
                        throw TypeError(".caffe.AugmentationParameter.sat_pow: object expected");
                    message.sat_pow = $root.caffe.RandomGeneratorParameter.fromObject(object.sat_pow);
                }
                if (object.sat_mult != null) {
                    if (typeof object.sat_mult !== "object")
                        throw TypeError(".caffe.AugmentationParameter.sat_mult: object expected");
                    message.sat_mult = $root.caffe.RandomGeneratorParameter.fromObject(object.sat_mult);
                }
                if (object.sat_add != null) {
                    if (typeof object.sat_add !== "object")
                        throw TypeError(".caffe.AugmentationParameter.sat_add: object expected");
                    message.sat_add = $root.caffe.RandomGeneratorParameter.fromObject(object.sat_add);
                }
                if (object.col_pow != null) {
                    if (typeof object.col_pow !== "object")
                        throw TypeError(".caffe.AugmentationParameter.col_pow: object expected");
                    message.col_pow = $root.caffe.RandomGeneratorParameter.fromObject(object.col_pow);
                }
                if (object.col_mult != null) {
                    if (typeof object.col_mult !== "object")
                        throw TypeError(".caffe.AugmentationParameter.col_mult: object expected");
                    message.col_mult = $root.caffe.RandomGeneratorParameter.fromObject(object.col_mult);
                }
                if (object.col_add != null) {
                    if (typeof object.col_add !== "object")
                        throw TypeError(".caffe.AugmentationParameter.col_add: object expected");
                    message.col_add = $root.caffe.RandomGeneratorParameter.fromObject(object.col_add);
                }
                if (object.ladd_pow != null) {
                    if (typeof object.ladd_pow !== "object")
                        throw TypeError(".caffe.AugmentationParameter.ladd_pow: object expected");
                    message.ladd_pow = $root.caffe.RandomGeneratorParameter.fromObject(object.ladd_pow);
                }
                if (object.ladd_mult != null) {
                    if (typeof object.ladd_mult !== "object")
                        throw TypeError(".caffe.AugmentationParameter.ladd_mult: object expected");
                    message.ladd_mult = $root.caffe.RandomGeneratorParameter.fromObject(object.ladd_mult);
                }
                if (object.ladd_add != null) {
                    if (typeof object.ladd_add !== "object")
                        throw TypeError(".caffe.AugmentationParameter.ladd_add: object expected");
                    message.ladd_add = $root.caffe.RandomGeneratorParameter.fromObject(object.ladd_add);
                }
                if (object.col_rotate != null) {
                    if (typeof object.col_rotate !== "object")
                        throw TypeError(".caffe.AugmentationParameter.col_rotate: object expected");
                    message.col_rotate = $root.caffe.RandomGeneratorParameter.fromObject(object.col_rotate);
                }
                if (object.fog_amount != null) {
                    if (typeof object.fog_amount !== "object")
                        throw TypeError(".caffe.AugmentationParameter.fog_amount: object expected");
                    message.fog_amount = $root.caffe.RandomGeneratorParameter.fromObject(object.fog_amount);
                }
                if (object.fog_size != null) {
                    if (typeof object.fog_size !== "object")
                        throw TypeError(".caffe.AugmentationParameter.fog_size: object expected");
                    message.fog_size = $root.caffe.RandomGeneratorParameter.fromObject(object.fog_size);
                }
                if (object.motion_blur_angle != null) {
                    if (typeof object.motion_blur_angle !== "object")
                        throw TypeError(".caffe.AugmentationParameter.motion_blur_angle: object expected");
                    message.motion_blur_angle = $root.caffe.RandomGeneratorParameter.fromObject(object.motion_blur_angle);
                }
                if (object.motion_blur_size != null) {
                    if (typeof object.motion_blur_size !== "object")
                        throw TypeError(".caffe.AugmentationParameter.motion_blur_size: object expected");
                    message.motion_blur_size = $root.caffe.RandomGeneratorParameter.fromObject(object.motion_blur_size);
                }
                if (object.shadow_angle != null) {
                    if (typeof object.shadow_angle !== "object")
                        throw TypeError(".caffe.AugmentationParameter.shadow_angle: object expected");
                    message.shadow_angle = $root.caffe.RandomGeneratorParameter.fromObject(object.shadow_angle);
                }
                if (object.shadow_distance != null) {
                    if (typeof object.shadow_distance !== "object")
                        throw TypeError(".caffe.AugmentationParameter.shadow_distance: object expected");
                    message.shadow_distance = $root.caffe.RandomGeneratorParameter.fromObject(object.shadow_distance);
                }
                if (object.shadow_strength != null) {
                    if (typeof object.shadow_strength !== "object")
                        throw TypeError(".caffe.AugmentationParameter.shadow_strength: object expected");
                    message.shadow_strength = $root.caffe.RandomGeneratorParameter.fromObject(object.shadow_strength);
                }
                if (object.noise != null) {
                    if (typeof object.noise !== "object")
                        throw TypeError(".caffe.AugmentationParameter.noise: object expected");
                    message.noise = $root.caffe.RandomGeneratorParameter.fromObject(object.noise);
                }
                return message;
            };
    
            AugmentationParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.mean = [];
                    object.chromatic_eigvec = [];
                }
                if (options.defaults) {
                    object.write_augmented = "";
                    object.max_multiplier = 255;
                    object.augment_during_test = false;
                    object.recompute_mean = 0;
                    object.write_mean = "";
                    object.mean_per_pixel = true;
                    object.mode = "add";
                    object.mirror = null;
                    object.translate = null;
                    object.rotate = null;
                    object.zoom = null;
                    object.squeeze = null;
                    object.translate_x = null;
                    object.translate_y = null;
                    object.lmult_pow = null;
                    object.lmult_mult = null;
                    object.lmult_add = null;
                    object.sat_pow = null;
                    object.sat_mult = null;
                    object.sat_add = null;
                    object.col_pow = null;
                    object.col_mult = null;
                    object.col_add = null;
                    object.ladd_pow = null;
                    object.ladd_mult = null;
                    object.ladd_add = null;
                    object.col_rotate = null;
                    object.crop_width = 0;
                    object.crop_height = 0;
                    object.gamma = null;
                    object.brightness = null;
                    object.contrast = null;
                    object.color = null;
                    object.bottomwidth = 0;
                    object.bottomheight = 0;
                    object.num = 0;
                    object.fog_amount = null;
                    object.fog_size = null;
                    object.motion_blur_angle = null;
                    object.motion_blur_size = null;
                    object.shadow_angle = null;
                    object.shadow_distance = null;
                    object.shadow_strength = null;
                    object.noise = null;
                }
                if (message.write_augmented != null && message.hasOwnProperty("write_augmented"))
                    object.write_augmented = message.write_augmented;
                if (message.max_multiplier != null && message.hasOwnProperty("max_multiplier"))
                    object.max_multiplier = options.json && !isFinite(message.max_multiplier) ? String(message.max_multiplier) : message.max_multiplier;
                if (message.augment_during_test != null && message.hasOwnProperty("augment_during_test"))
                    object.augment_during_test = message.augment_during_test;
                if (message.recompute_mean != null && message.hasOwnProperty("recompute_mean"))
                    object.recompute_mean = message.recompute_mean;
                if (message.write_mean != null && message.hasOwnProperty("write_mean"))
                    object.write_mean = message.write_mean;
                if (message.mean_per_pixel != null && message.hasOwnProperty("mean_per_pixel"))
                    object.mean_per_pixel = message.mean_per_pixel;
                if (message.mode != null && message.hasOwnProperty("mode"))
                    object.mode = message.mode;
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    object.mirror = $root.caffe.RandomGeneratorParameter.toObject(message.mirror, options);
                if (message.translate != null && message.hasOwnProperty("translate"))
                    object.translate = $root.caffe.RandomGeneratorParameter.toObject(message.translate, options);
                if (message.rotate != null && message.hasOwnProperty("rotate"))
                    object.rotate = $root.caffe.RandomGeneratorParameter.toObject(message.rotate, options);
                if (message.zoom != null && message.hasOwnProperty("zoom"))
                    object.zoom = $root.caffe.RandomGeneratorParameter.toObject(message.zoom, options);
                if (message.squeeze != null && message.hasOwnProperty("squeeze"))
                    object.squeeze = $root.caffe.RandomGeneratorParameter.toObject(message.squeeze, options);
                if (message.translate_x != null && message.hasOwnProperty("translate_x"))
                    object.translate_x = $root.caffe.RandomGeneratorParameter.toObject(message.translate_x, options);
                if (message.translate_y != null && message.hasOwnProperty("translate_y"))
                    object.translate_y = $root.caffe.RandomGeneratorParameter.toObject(message.translate_y, options);
                if (message.mean && message.mean.length) {
                    object.mean = [];
                    for (var j = 0; j < message.mean.length; ++j)
                        object.mean[j] = options.json && !isFinite(message.mean[j]) ? String(message.mean[j]) : message.mean[j];
                }
                if (message.lmult_pow != null && message.hasOwnProperty("lmult_pow"))
                    object.lmult_pow = $root.caffe.RandomGeneratorParameter.toObject(message.lmult_pow, options);
                if (message.lmult_mult != null && message.hasOwnProperty("lmult_mult"))
                    object.lmult_mult = $root.caffe.RandomGeneratorParameter.toObject(message.lmult_mult, options);
                if (message.lmult_add != null && message.hasOwnProperty("lmult_add"))
                    object.lmult_add = $root.caffe.RandomGeneratorParameter.toObject(message.lmult_add, options);
                if (message.sat_pow != null && message.hasOwnProperty("sat_pow"))
                    object.sat_pow = $root.caffe.RandomGeneratorParameter.toObject(message.sat_pow, options);
                if (message.sat_mult != null && message.hasOwnProperty("sat_mult"))
                    object.sat_mult = $root.caffe.RandomGeneratorParameter.toObject(message.sat_mult, options);
                if (message.sat_add != null && message.hasOwnProperty("sat_add"))
                    object.sat_add = $root.caffe.RandomGeneratorParameter.toObject(message.sat_add, options);
                if (message.col_pow != null && message.hasOwnProperty("col_pow"))
                    object.col_pow = $root.caffe.RandomGeneratorParameter.toObject(message.col_pow, options);
                if (message.col_mult != null && message.hasOwnProperty("col_mult"))
                    object.col_mult = $root.caffe.RandomGeneratorParameter.toObject(message.col_mult, options);
                if (message.col_add != null && message.hasOwnProperty("col_add"))
                    object.col_add = $root.caffe.RandomGeneratorParameter.toObject(message.col_add, options);
                if (message.ladd_pow != null && message.hasOwnProperty("ladd_pow"))
                    object.ladd_pow = $root.caffe.RandomGeneratorParameter.toObject(message.ladd_pow, options);
                if (message.ladd_mult != null && message.hasOwnProperty("ladd_mult"))
                    object.ladd_mult = $root.caffe.RandomGeneratorParameter.toObject(message.ladd_mult, options);
                if (message.ladd_add != null && message.hasOwnProperty("ladd_add"))
                    object.ladd_add = $root.caffe.RandomGeneratorParameter.toObject(message.ladd_add, options);
                if (message.col_rotate != null && message.hasOwnProperty("col_rotate"))
                    object.col_rotate = $root.caffe.RandomGeneratorParameter.toObject(message.col_rotate, options);
                if (message.crop_width != null && message.hasOwnProperty("crop_width"))
                    object.crop_width = message.crop_width;
                if (message.crop_height != null && message.hasOwnProperty("crop_height"))
                    object.crop_height = message.crop_height;
                if (message.gamma != null && message.hasOwnProperty("gamma"))
                    object.gamma = $root.caffe.RandomGeneratorParameter.toObject(message.gamma, options);
                if (message.brightness != null && message.hasOwnProperty("brightness"))
                    object.brightness = $root.caffe.RandomGeneratorParameter.toObject(message.brightness, options);
                if (message.contrast != null && message.hasOwnProperty("contrast"))
                    object.contrast = $root.caffe.RandomGeneratorParameter.toObject(message.contrast, options);
                if (message.color != null && message.hasOwnProperty("color"))
                    object.color = $root.caffe.RandomGeneratorParameter.toObject(message.color, options);
                if (message.bottomwidth != null && message.hasOwnProperty("bottomwidth"))
                    object.bottomwidth = message.bottomwidth;
                if (message.bottomheight != null && message.hasOwnProperty("bottomheight"))
                    object.bottomheight = message.bottomheight;
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.chromatic_eigvec && message.chromatic_eigvec.length) {
                    object.chromatic_eigvec = [];
                    for (var j = 0; j < message.chromatic_eigvec.length; ++j)
                        object.chromatic_eigvec[j] = options.json && !isFinite(message.chromatic_eigvec[j]) ? String(message.chromatic_eigvec[j]) : message.chromatic_eigvec[j];
                }
                if (message.fog_amount != null && message.hasOwnProperty("fog_amount"))
                    object.fog_amount = $root.caffe.RandomGeneratorParameter.toObject(message.fog_amount, options);
                if (message.fog_size != null && message.hasOwnProperty("fog_size"))
                    object.fog_size = $root.caffe.RandomGeneratorParameter.toObject(message.fog_size, options);
                if (message.motion_blur_angle != null && message.hasOwnProperty("motion_blur_angle"))
                    object.motion_blur_angle = $root.caffe.RandomGeneratorParameter.toObject(message.motion_blur_angle, options);
                if (message.motion_blur_size != null && message.hasOwnProperty("motion_blur_size"))
                    object.motion_blur_size = $root.caffe.RandomGeneratorParameter.toObject(message.motion_blur_size, options);
                if (message.shadow_angle != null && message.hasOwnProperty("shadow_angle"))
                    object.shadow_angle = $root.caffe.RandomGeneratorParameter.toObject(message.shadow_angle, options);
                if (message.shadow_distance != null && message.hasOwnProperty("shadow_distance"))
                    object.shadow_distance = $root.caffe.RandomGeneratorParameter.toObject(message.shadow_distance, options);
                if (message.shadow_strength != null && message.hasOwnProperty("shadow_strength"))
                    object.shadow_strength = $root.caffe.RandomGeneratorParameter.toObject(message.shadow_strength, options);
                if (message.noise != null && message.hasOwnProperty("noise"))
                    object.noise = $root.caffe.RandomGeneratorParameter.toObject(message.noise, options);
                return object;
            };
    
            AugmentationParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AugmentationParameter;
        })();
    
        caffe.BlackAugmentationParameter = (function() {
    
            function BlackAugmentationParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BlackAugmentationParameter.prototype.black = null;
            BlackAugmentationParameter.prototype.border = null;
    
            BlackAugmentationParameter.create = function create(properties) {
                return new BlackAugmentationParameter(properties);
            };
    
            BlackAugmentationParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BlackAugmentationParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 10:
                        message.black = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.border = $root.caffe.RandomGeneratorParameter.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BlackAugmentationParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BlackAugmentationParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "black":
                        message.black = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    case "border":
                        message.border = $root.caffe.RandomGeneratorParameter.decodeText(reader, true);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BlackAugmentationParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.black != null && message.hasOwnProperty("black")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.black);
                    if (error)
                        return "black." + error;
                }
                if (message.border != null && message.hasOwnProperty("border")) {
                    var error = $root.caffe.RandomGeneratorParameter.verify(message.border);
                    if (error)
                        return "border." + error;
                }
                return null;
            };
    
            BlackAugmentationParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BlackAugmentationParameter)
                    return object;
                var message = new $root.caffe.BlackAugmentationParameter();
                if (object.black != null) {
                    if (typeof object.black !== "object")
                        throw TypeError(".caffe.BlackAugmentationParameter.black: object expected");
                    message.black = $root.caffe.RandomGeneratorParameter.fromObject(object.black);
                }
                if (object.border != null) {
                    if (typeof object.border !== "object")
                        throw TypeError(".caffe.BlackAugmentationParameter.border: object expected");
                    message.border = $root.caffe.RandomGeneratorParameter.fromObject(object.border);
                }
                return message;
            };
    
            BlackAugmentationParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.black = null;
                    object.border = null;
                }
                if (message.black != null && message.hasOwnProperty("black"))
                    object.black = $root.caffe.RandomGeneratorParameter.toObject(message.black, options);
                if (message.border != null && message.hasOwnProperty("border"))
                    object.border = $root.caffe.RandomGeneratorParameter.toObject(message.border, options);
                return object;
            };
    
            BlackAugmentationParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BlackAugmentationParameter;
        })();
    
        caffe.CorrelationParameter = (function() {
    
            function CorrelationParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            CorrelationParameter.prototype.pad = 0;
            CorrelationParameter.prototype.kernel_size = 0;
            CorrelationParameter.prototype.max_displacement = 0;
            CorrelationParameter.prototype.stride_1 = 1;
            CorrelationParameter.prototype.stride_2 = 1;
            CorrelationParameter.prototype.single_direction = 0;
            CorrelationParameter.prototype.do_abs = false;
            CorrelationParameter.prototype.correlation_type = 0;
    
            CorrelationParameter.create = function create(properties) {
                return new CorrelationParameter(properties);
            };
    
            CorrelationParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.CorrelationParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.pad = reader.uint32();
                        break;
                    case 3:
                        message.kernel_size = reader.uint32();
                        break;
                    case 4:
                        message.max_displacement = reader.uint32();
                        break;
                    case 5:
                        message.stride_1 = reader.uint32();
                        break;
                    case 6:
                        message.stride_2 = reader.uint32();
                        break;
                    case 8:
                        message.single_direction = reader.int32();
                        break;
                    case 7:
                        message.do_abs = reader.bool();
                        break;
                    case 15:
                        message.correlation_type = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            CorrelationParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.CorrelationParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "pad":
                        message.pad = reader.uint32();
                        break;
                    case "kernel_size":
                        message.kernel_size = reader.uint32();
                        break;
                    case "max_displacement":
                        message.max_displacement = reader.uint32();
                        break;
                    case "stride_1":
                        message.stride_1 = reader.uint32();
                        break;
                    case "stride_2":
                        message.stride_2 = reader.uint32();
                        break;
                    case "single_direction":
                        message.single_direction = reader.int32();
                        break;
                    case "do_abs":
                        message.do_abs = reader.bool();
                        break;
                    case "correlation_type":
                        message.correlation_type = reader.enum($root.caffe.CorrelationParameter.CorrelationType);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            CorrelationParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pad != null && message.hasOwnProperty("pad"))
                    if (!$util.isInteger(message.pad))
                        return "pad: integer expected";
                if (message.kernel_size != null && message.hasOwnProperty("kernel_size"))
                    if (!$util.isInteger(message.kernel_size))
                        return "kernel_size: integer expected";
                if (message.max_displacement != null && message.hasOwnProperty("max_displacement"))
                    if (!$util.isInteger(message.max_displacement))
                        return "max_displacement: integer expected";
                if (message.stride_1 != null && message.hasOwnProperty("stride_1"))
                    if (!$util.isInteger(message.stride_1))
                        return "stride_1: integer expected";
                if (message.stride_2 != null && message.hasOwnProperty("stride_2"))
                    if (!$util.isInteger(message.stride_2))
                        return "stride_2: integer expected";
                if (message.single_direction != null && message.hasOwnProperty("single_direction"))
                    if (!$util.isInteger(message.single_direction))
                        return "single_direction: integer expected";
                if (message.do_abs != null && message.hasOwnProperty("do_abs"))
                    if (typeof message.do_abs !== "boolean")
                        return "do_abs: boolean expected";
                if (message.correlation_type != null && message.hasOwnProperty("correlation_type"))
                    switch (message.correlation_type) {
                    default:
                        return "correlation_type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };
    
            CorrelationParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.CorrelationParameter)
                    return object;
                var message = new $root.caffe.CorrelationParameter();
                if (object.pad != null)
                    message.pad = object.pad >>> 0;
                if (object.kernel_size != null)
                    message.kernel_size = object.kernel_size >>> 0;
                if (object.max_displacement != null)
                    message.max_displacement = object.max_displacement >>> 0;
                if (object.stride_1 != null)
                    message.stride_1 = object.stride_1 >>> 0;
                if (object.stride_2 != null)
                    message.stride_2 = object.stride_2 >>> 0;
                if (object.single_direction != null)
                    message.single_direction = object.single_direction | 0;
                if (object.do_abs != null)
                    message.do_abs = Boolean(object.do_abs);
                switch (object.correlation_type) {
                case "MULTIPLY":
                case 0:
                    message.correlation_type = 0;
                    break;
                case "SUBTRACT":
                case 1:
                    message.correlation_type = 1;
                    break;
                }
                return message;
            };
    
            CorrelationParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.pad = 0;
                    object.kernel_size = 0;
                    object.max_displacement = 0;
                    object.stride_1 = 1;
                    object.stride_2 = 1;
                    object.do_abs = false;
                    object.single_direction = 0;
                    object.correlation_type = options.enums === String ? "MULTIPLY" : 0;
                }
                if (message.pad != null && message.hasOwnProperty("pad"))
                    object.pad = message.pad;
                if (message.kernel_size != null && message.hasOwnProperty("kernel_size"))
                    object.kernel_size = message.kernel_size;
                if (message.max_displacement != null && message.hasOwnProperty("max_displacement"))
                    object.max_displacement = message.max_displacement;
                if (message.stride_1 != null && message.hasOwnProperty("stride_1"))
                    object.stride_1 = message.stride_1;
                if (message.stride_2 != null && message.hasOwnProperty("stride_2"))
                    object.stride_2 = message.stride_2;
                if (message.do_abs != null && message.hasOwnProperty("do_abs"))
                    object.do_abs = message.do_abs;
                if (message.single_direction != null && message.hasOwnProperty("single_direction"))
                    object.single_direction = message.single_direction;
                if (message.correlation_type != null && message.hasOwnProperty("correlation_type"))
                    object.correlation_type = options.enums === String ? $root.caffe.CorrelationParameter.CorrelationType[message.correlation_type] : message.correlation_type;
                return object;
            };
    
            CorrelationParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            CorrelationParameter.CorrelationType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "MULTIPLY"] = 0;
                values[valuesById[1] = "SUBTRACT"] = 1;
                return values;
            })();
    
            return CorrelationParameter;
        })();
    
        caffe.L1LossParameter = (function() {
    
            function L1LossParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            L1LossParameter.prototype.l2_per_location = false;
            L1LossParameter.prototype.l2_prescale_by_channels = false;
            L1LossParameter.prototype.normalize_by_num_entries = false;
            L1LossParameter.prototype.epsilon = 0.01;
            L1LossParameter.prototype.plateau = 0;
    
            L1LossParameter.create = function create(properties) {
                return new L1LossParameter(properties);
            };
    
            L1LossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.L1LossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.l2_per_location = reader.bool();
                        break;
                    case 2:
                        message.l2_prescale_by_channels = reader.bool();
                        break;
                    case 3:
                        message.normalize_by_num_entries = reader.bool();
                        break;
                    case 4:
                        message.epsilon = reader.float();
                        break;
                    case 3001:
                        message.plateau = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            L1LossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.L1LossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "l2_per_location":
                        message.l2_per_location = reader.bool();
                        break;
                    case "l2_prescale_by_channels":
                        message.l2_prescale_by_channels = reader.bool();
                        break;
                    case "normalize_by_num_entries":
                        message.normalize_by_num_entries = reader.bool();
                        break;
                    case "epsilon":
                        message.epsilon = reader.float();
                        break;
                    case "plateau":
                        message.plateau = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            L1LossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.l2_per_location != null && message.hasOwnProperty("l2_per_location"))
                    if (typeof message.l2_per_location !== "boolean")
                        return "l2_per_location: boolean expected";
                if (message.l2_prescale_by_channels != null && message.hasOwnProperty("l2_prescale_by_channels"))
                    if (typeof message.l2_prescale_by_channels !== "boolean")
                        return "l2_prescale_by_channels: boolean expected";
                if (message.normalize_by_num_entries != null && message.hasOwnProperty("normalize_by_num_entries"))
                    if (typeof message.normalize_by_num_entries !== "boolean")
                        return "normalize_by_num_entries: boolean expected";
                if (message.epsilon != null && message.hasOwnProperty("epsilon"))
                    if (typeof message.epsilon !== "number")
                        return "epsilon: number expected";
                if (message.plateau != null && message.hasOwnProperty("plateau"))
                    if (typeof message.plateau !== "number")
                        return "plateau: number expected";
                return null;
            };
    
            L1LossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.L1LossParameter)
                    return object;
                var message = new $root.caffe.L1LossParameter();
                if (object.l2_per_location != null)
                    message.l2_per_location = Boolean(object.l2_per_location);
                if (object.l2_prescale_by_channels != null)
                    message.l2_prescale_by_channels = Boolean(object.l2_prescale_by_channels);
                if (object.normalize_by_num_entries != null)
                    message.normalize_by_num_entries = Boolean(object.normalize_by_num_entries);
                if (object.epsilon != null)
                    message.epsilon = Number(object.epsilon);
                if (object.plateau != null)
                    message.plateau = Number(object.plateau);
                return message;
            };
    
            L1LossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.l2_per_location = false;
                    object.l2_prescale_by_channels = false;
                    object.normalize_by_num_entries = false;
                    object.epsilon = 0.01;
                    object.plateau = 0;
                }
                if (message.l2_per_location != null && message.hasOwnProperty("l2_per_location"))
                    object.l2_per_location = message.l2_per_location;
                if (message.l2_prescale_by_channels != null && message.hasOwnProperty("l2_prescale_by_channels"))
                    object.l2_prescale_by_channels = message.l2_prescale_by_channels;
                if (message.normalize_by_num_entries != null && message.hasOwnProperty("normalize_by_num_entries"))
                    object.normalize_by_num_entries = message.normalize_by_num_entries;
                if (message.epsilon != null && message.hasOwnProperty("epsilon"))
                    object.epsilon = options.json && !isFinite(message.epsilon) ? String(message.epsilon) : message.epsilon;
                if (message.plateau != null && message.hasOwnProperty("plateau"))
                    object.plateau = options.json && !isFinite(message.plateau) ? String(message.plateau) : message.plateau;
                return object;
            };
    
            L1LossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return L1LossParameter;
        })();
    
        caffe.ReaderParameter = (function() {
    
            function ReaderParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ReaderParameter.prototype.file = "";
            ReaderParameter.prototype.num = 1;
    
            ReaderParameter.create = function create(properties) {
                return new ReaderParameter(properties);
            };
    
            ReaderParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ReaderParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.file = reader.string();
                        break;
                    case 2:
                        message.num = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("file"))
                    throw $util.ProtocolError("missing required 'file'", { instance: message });
                return message;
            };
    
            ReaderParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ReaderParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "file":
                        message.file = reader.string();
                        break;
                    case "num":
                        message.num = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                if (!message.hasOwnProperty("file"))
                    throw $util.ProtocolError("missing required 'file'", { instance: message });
                return message;
            };
    
            ReaderParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.file))
                    return "file: string expected";
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                return null;
            };
    
            ReaderParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ReaderParameter)
                    return object;
                var message = new $root.caffe.ReaderParameter();
                if (object.file != null)
                    message.file = String(object.file);
                if (object.num != null)
                    message.num = object.num >>> 0;
                return message;
            };
    
            ReaderParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.file = "";
                    object.num = 1;
                }
                if (message.file != null && message.hasOwnProperty("file"))
                    object.file = message.file;
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                return object;
            };
    
            ReaderParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ReaderParameter;
        })();
    
        caffe.WriterParameter = (function() {
    
            function WriterParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            WriterParameter.prototype.file = "";
            WriterParameter.prototype.folder = "";
            WriterParameter.prototype.prefix = "";
            WriterParameter.prototype.suffix = "";
            WriterParameter.prototype.normalize = false;
            WriterParameter.prototype.scale = 1;
    
            WriterParameter.create = function create(properties) {
                return new WriterParameter(properties);
            };
    
            WriterParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.WriterParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.file = reader.string();
                        break;
                    case 2:
                        message.folder = reader.string();
                        break;
                    case 3:
                        message.prefix = reader.string();
                        break;
                    case 4:
                        message.suffix = reader.string();
                        break;
                    case 5:
                        message.normalize = reader.bool();
                        break;
                    case 6:
                        message.scale = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            WriterParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.WriterParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "file":
                        message.file = reader.string();
                        break;
                    case "folder":
                        message.folder = reader.string();
                        break;
                    case "prefix":
                        message.prefix = reader.string();
                        break;
                    case "suffix":
                        message.suffix = reader.string();
                        break;
                    case "normalize":
                        message.normalize = reader.bool();
                        break;
                    case "scale":
                        message.scale = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            WriterParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file"))
                    if (!$util.isString(message.file))
                        return "file: string expected";
                if (message.folder != null && message.hasOwnProperty("folder"))
                    if (!$util.isString(message.folder))
                        return "folder: string expected";
                if (message.prefix != null && message.hasOwnProperty("prefix"))
                    if (!$util.isString(message.prefix))
                        return "prefix: string expected";
                if (message.suffix != null && message.hasOwnProperty("suffix"))
                    if (!$util.isString(message.suffix))
                        return "suffix: string expected";
                if (message.normalize != null && message.hasOwnProperty("normalize"))
                    if (typeof message.normalize !== "boolean")
                        return "normalize: boolean expected";
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                return null;
            };
    
            WriterParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.WriterParameter)
                    return object;
                var message = new $root.caffe.WriterParameter();
                if (object.file != null)
                    message.file = String(object.file);
                if (object.folder != null)
                    message.folder = String(object.folder);
                if (object.prefix != null)
                    message.prefix = String(object.prefix);
                if (object.suffix != null)
                    message.suffix = String(object.suffix);
                if (object.normalize != null)
                    message.normalize = Boolean(object.normalize);
                if (object.scale != null)
                    message.scale = Number(object.scale);
                return message;
            };
    
            WriterParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.file = "";
                    object.folder = "";
                    object.prefix = "";
                    object.suffix = "";
                    object.normalize = false;
                    object.scale = 1;
                }
                if (message.file != null && message.hasOwnProperty("file"))
                    object.file = message.file;
                if (message.folder != null && message.hasOwnProperty("folder"))
                    object.folder = message.folder;
                if (message.prefix != null && message.hasOwnProperty("prefix"))
                    object.prefix = message.prefix;
                if (message.suffix != null && message.hasOwnProperty("suffix"))
                    object.suffix = message.suffix;
                if (message.normalize != null && message.hasOwnProperty("normalize"))
                    object.normalize = message.normalize;
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                return object;
            };
    
            WriterParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WriterParameter;
        })();
    
        caffe.MeanParameter = (function() {
    
            function MeanParameter(properties) {
                this.value = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            MeanParameter.prototype.operation = 1;
            MeanParameter.prototype.file = "";
            MeanParameter.prototype.value = $util.emptyArray;
            MeanParameter.prototype.mean_scale = 1;
            MeanParameter.prototype.input_scale = 1;
            MeanParameter.prototype.output_scale = 1;
    
            MeanParameter.create = function create(properties) {
                return new MeanParameter(properties);
            };
    
            MeanParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.MeanParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.operation = reader.int32();
                        break;
                    case 2:
                        message.file = reader.string();
                        break;
                    case 3:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.value.push(reader.float());
                        } else
                            message.value.push(reader.float());
                        break;
                    case 4:
                        message.mean_scale = reader.float();
                        break;
                    case 5:
                        message.input_scale = reader.float();
                        break;
                    case 6:
                        message.output_scale = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("operation"))
                    throw $util.ProtocolError("missing required 'operation'", { instance: message });
                return message;
            };
    
            MeanParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.MeanParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "operation":
                        message.operation = reader.enum($root.caffe.MeanParameter.MeanOperation);
                        break;
                    case "file":
                        message.file = reader.string();
                        break;
                    case "value":
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push(reader.float());
                        break;
                    case "mean_scale":
                        message.mean_scale = reader.float();
                        break;
                    case "input_scale":
                        message.input_scale = reader.float();
                        break;
                    case "output_scale":
                        message.output_scale = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                if (!message.hasOwnProperty("operation"))
                    throw $util.ProtocolError("missing required 'operation'", { instance: message });
                return message;
            };
    
            MeanParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.operation) {
                default:
                    return "operation: enum value expected";
                case 1:
                case 4:
                    break;
                }
                if (message.file != null && message.hasOwnProperty("file"))
                    if (!$util.isString(message.file))
                        return "file: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (var i = 0; i < message.value.length; ++i)
                        if (typeof message.value[i] !== "number")
                            return "value: number[] expected";
                }
                if (message.mean_scale != null && message.hasOwnProperty("mean_scale"))
                    if (typeof message.mean_scale !== "number")
                        return "mean_scale: number expected";
                if (message.input_scale != null && message.hasOwnProperty("input_scale"))
                    if (typeof message.input_scale !== "number")
                        return "input_scale: number expected";
                if (message.output_scale != null && message.hasOwnProperty("output_scale"))
                    if (typeof message.output_scale !== "number")
                        return "output_scale: number expected";
                return null;
            };
    
            MeanParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.MeanParameter)
                    return object;
                var message = new $root.caffe.MeanParameter();
                switch (object.operation) {
                case "ADD":
                case 1:
                    message.operation = 1;
                    break;
                case "SUBTRACT":
                case 4:
                    message.operation = 4;
                    break;
                }
                if (object.file != null)
                    message.file = String(object.file);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".caffe.MeanParameter.value: array expected");
                    message.value = [];
                    for (var i = 0; i < object.value.length; ++i)
                        message.value[i] = Number(object.value[i]);
                }
                if (object.mean_scale != null)
                    message.mean_scale = Number(object.mean_scale);
                if (object.input_scale != null)
                    message.input_scale = Number(object.input_scale);
                if (object.output_scale != null)
                    message.output_scale = Number(object.output_scale);
                return message;
            };
    
            MeanParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.value = [];
                if (options.defaults) {
                    object.operation = options.enums === String ? "ADD" : 1;
                    object.file = "";
                    object.mean_scale = 1;
                    object.input_scale = 1;
                    object.output_scale = 1;
                }
                if (message.operation != null && message.hasOwnProperty("operation"))
                    object.operation = options.enums === String ? $root.caffe.MeanParameter.MeanOperation[message.operation] : message.operation;
                if (message.file != null && message.hasOwnProperty("file"))
                    object.file = message.file;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (var j = 0; j < message.value.length; ++j)
                        object.value[j] = options.json && !isFinite(message.value[j]) ? String(message.value[j]) : message.value[j];
                }
                if (message.mean_scale != null && message.hasOwnProperty("mean_scale"))
                    object.mean_scale = options.json && !isFinite(message.mean_scale) ? String(message.mean_scale) : message.mean_scale;
                if (message.input_scale != null && message.hasOwnProperty("input_scale"))
                    object.input_scale = options.json && !isFinite(message.input_scale) ? String(message.input_scale) : message.input_scale;
                if (message.output_scale != null && message.hasOwnProperty("output_scale"))
                    object.output_scale = options.json && !isFinite(message.output_scale) ? String(message.output_scale) : message.output_scale;
                return object;
            };
    
            MeanParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            MeanParameter.MeanOperation = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "ADD"] = 1;
                values[valuesById[4] = "SUBTRACT"] = 4;
                return values;
            })();
    
            return MeanParameter;
        })();
    
        caffe.ResampleParameter = (function() {
    
            function ResampleParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            ResampleParameter.prototype.antialias = true;
            ResampleParameter.prototype.width = 0;
            ResampleParameter.prototype.height = 0;
            ResampleParameter.prototype.type = 2;
            ResampleParameter.prototype.factor = 1;
    
            ResampleParameter.create = function create(properties) {
                return new ResampleParameter(properties);
            };
    
            ResampleParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.ResampleParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 4:
                        message.antialias = reader.bool();
                        break;
                    case 1:
                        message.width = reader.uint32();
                        break;
                    case 2:
                        message.height = reader.uint32();
                        break;
                    case 3:
                        message.type = reader.int32();
                        break;
                    case 5:
                        message.factor = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            ResampleParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.ResampleParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "antialias":
                        message.antialias = reader.bool();
                        break;
                    case "width":
                        message.width = reader.uint32();
                        break;
                    case "height":
                        message.height = reader.uint32();
                        break;
                    case "type":
                        message.type = reader.enum($root.caffe.ResampleParameter.ResampleType);
                        break;
                    case "factor":
                        message.factor = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            ResampleParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.antialias != null && message.hasOwnProperty("antialias"))
                    if (typeof message.antialias !== "boolean")
                        return "antialias: boolean expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    }
                if (message.factor != null && message.hasOwnProperty("factor"))
                    if (typeof message.factor !== "number")
                        return "factor: number expected";
                return null;
            };
    
            ResampleParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.ResampleParameter)
                    return object;
                var message = new $root.caffe.ResampleParameter();
                if (object.antialias != null)
                    message.antialias = Boolean(object.antialias);
                if (object.width != null)
                    message.width = object.width >>> 0;
                if (object.height != null)
                    message.height = object.height >>> 0;
                switch (object.type) {
                case "NEAREST":
                case 1:
                    message.type = 1;
                    break;
                case "LINEAR":
                case 2:
                    message.type = 2;
                    break;
                case "CUBIC":
                case 3:
                    message.type = 3;
                    break;
                case "AREA":
                case 4:
                    message.type = 4;
                    break;
                }
                if (object.factor != null)
                    message.factor = Number(object.factor);
                return message;
            };
    
            ResampleParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.width = 0;
                    object.height = 0;
                    object.type = options.enums === String ? "LINEAR" : 2;
                    object.antialias = true;
                    object.factor = 1;
                }
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.caffe.ResampleParameter.ResampleType[message.type] : message.type;
                if (message.antialias != null && message.hasOwnProperty("antialias"))
                    object.antialias = message.antialias;
                if (message.factor != null && message.hasOwnProperty("factor"))
                    object.factor = options.json && !isFinite(message.factor) ? String(message.factor) : message.factor;
                return object;
            };
    
            ResampleParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            ResampleParameter.ResampleType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "NEAREST"] = 1;
                values[valuesById[2] = "LINEAR"] = 2;
                values[valuesById[3] = "CUBIC"] = 3;
                values[valuesById[4] = "AREA"] = 4;
                return values;
            })();
    
            return ResampleParameter;
        })();
    
        caffe.DownsampleParameter = (function() {
    
            function DownsampleParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            DownsampleParameter.prototype.top_height = 0;
            DownsampleParameter.prototype.top_width = 0;
    
            DownsampleParameter.create = function create(properties) {
                return new DownsampleParameter(properties);
            };
    
            DownsampleParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.DownsampleParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.top_height = reader.uint32();
                        break;
                    case 2:
                        message.top_width = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            DownsampleParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.DownsampleParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "top_height":
                        message.top_height = reader.uint32();
                        break;
                    case "top_width":
                        message.top_width = reader.uint32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            DownsampleParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.top_height != null && message.hasOwnProperty("top_height"))
                    if (!$util.isInteger(message.top_height))
                        return "top_height: integer expected";
                if (message.top_width != null && message.hasOwnProperty("top_width"))
                    if (!$util.isInteger(message.top_width))
                        return "top_width: integer expected";
                return null;
            };
    
            DownsampleParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.DownsampleParameter)
                    return object;
                var message = new $root.caffe.DownsampleParameter();
                if (object.top_height != null)
                    message.top_height = object.top_height >>> 0;
                if (object.top_width != null)
                    message.top_width = object.top_width >>> 0;
                return message;
            };
    
            DownsampleParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.top_height = 0;
                    object.top_width = 0;
                }
                if (message.top_height != null && message.hasOwnProperty("top_height"))
                    object.top_height = message.top_height;
                if (message.top_width != null && message.hasOwnProperty("top_width"))
                    object.top_width = message.top_width;
                return object;
            };
    
            DownsampleParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DownsampleParameter;
        })();
    
        caffe.LpqLossParameter = (function() {
    
            function LpqLossParameter(properties) {
                this.pq_episode_starts_at_iter = [];
                this.p = [];
                this.q = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            LpqLossParameter.prototype.l2_prescale_by_channels = false;
            LpqLossParameter.prototype.normalize_by_num_entries = false;
            LpqLossParameter.prototype.p_epsilon = 0;
            LpqLossParameter.prototype.q_epsilon = 0.01;
            LpqLossParameter.prototype.pq_episode_starts_at_iter = $util.emptyArray;
            LpqLossParameter.prototype.p = $util.emptyArray;
            LpqLossParameter.prototype.q = $util.emptyArray;
    
            LpqLossParameter.create = function create(properties) {
                return new LpqLossParameter(properties);
            };
    
            LpqLossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.LpqLossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 4016:
                        message.l2_prescale_by_channels = reader.bool();
                        break;
                    case 4017:
                        message.normalize_by_num_entries = reader.bool();
                        break;
                    case 4013:
                        message.p_epsilon = reader.float();
                        break;
                    case 4014:
                        message.q_epsilon = reader.float();
                        break;
                    case 4010:
                        if (!(message.pq_episode_starts_at_iter && message.pq_episode_starts_at_iter.length))
                            message.pq_episode_starts_at_iter = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.pq_episode_starts_at_iter.push(reader.uint32());
                        } else
                            message.pq_episode_starts_at_iter.push(reader.uint32());
                        break;
                    case 4011:
                        if (!(message.p && message.p.length))
                            message.p = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.p.push(reader.float());
                        } else
                            message.p.push(reader.float());
                        break;
                    case 4012:
                        if (!(message.q && message.q.length))
                            message.q = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.q.push(reader.float());
                        } else
                            message.q.push(reader.float());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            LpqLossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.LpqLossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "l2_prescale_by_channels":
                        message.l2_prescale_by_channels = reader.bool();
                        break;
                    case "normalize_by_num_entries":
                        message.normalize_by_num_entries = reader.bool();
                        break;
                    case "p_epsilon":
                        message.p_epsilon = reader.float();
                        break;
                    case "q_epsilon":
                        message.q_epsilon = reader.float();
                        break;
                    case "pq_episode_starts_at_iter":
                        if (!(message.pq_episode_starts_at_iter && message.pq_episode_starts_at_iter.length))
                            message.pq_episode_starts_at_iter = [];
                        message.pq_episode_starts_at_iter.push(reader.uint32());
                        break;
                    case "p":
                        if (!(message.p && message.p.length))
                            message.p = [];
                        message.p.push(reader.float());
                        break;
                    case "q":
                        if (!(message.q && message.q.length))
                            message.q = [];
                        message.q.push(reader.float());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            LpqLossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.l2_prescale_by_channels != null && message.hasOwnProperty("l2_prescale_by_channels"))
                    if (typeof message.l2_prescale_by_channels !== "boolean")
                        return "l2_prescale_by_channels: boolean expected";
                if (message.normalize_by_num_entries != null && message.hasOwnProperty("normalize_by_num_entries"))
                    if (typeof message.normalize_by_num_entries !== "boolean")
                        return "normalize_by_num_entries: boolean expected";
                if (message.p_epsilon != null && message.hasOwnProperty("p_epsilon"))
                    if (typeof message.p_epsilon !== "number")
                        return "p_epsilon: number expected";
                if (message.q_epsilon != null && message.hasOwnProperty("q_epsilon"))
                    if (typeof message.q_epsilon !== "number")
                        return "q_epsilon: number expected";
                if (message.pq_episode_starts_at_iter != null && message.hasOwnProperty("pq_episode_starts_at_iter")) {
                    if (!Array.isArray(message.pq_episode_starts_at_iter))
                        return "pq_episode_starts_at_iter: array expected";
                    for (var i = 0; i < message.pq_episode_starts_at_iter.length; ++i)
                        if (!$util.isInteger(message.pq_episode_starts_at_iter[i]))
                            return "pq_episode_starts_at_iter: integer[] expected";
                }
                if (message.p != null && message.hasOwnProperty("p")) {
                    if (!Array.isArray(message.p))
                        return "p: array expected";
                    for (var i = 0; i < message.p.length; ++i)
                        if (typeof message.p[i] !== "number")
                            return "p: number[] expected";
                }
                if (message.q != null && message.hasOwnProperty("q")) {
                    if (!Array.isArray(message.q))
                        return "q: array expected";
                    for (var i = 0; i < message.q.length; ++i)
                        if (typeof message.q[i] !== "number")
                            return "q: number[] expected";
                }
                return null;
            };
    
            LpqLossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.LpqLossParameter)
                    return object;
                var message = new $root.caffe.LpqLossParameter();
                if (object.l2_prescale_by_channels != null)
                    message.l2_prescale_by_channels = Boolean(object.l2_prescale_by_channels);
                if (object.normalize_by_num_entries != null)
                    message.normalize_by_num_entries = Boolean(object.normalize_by_num_entries);
                if (object.p_epsilon != null)
                    message.p_epsilon = Number(object.p_epsilon);
                if (object.q_epsilon != null)
                    message.q_epsilon = Number(object.q_epsilon);
                if (object.pq_episode_starts_at_iter) {
                    if (!Array.isArray(object.pq_episode_starts_at_iter))
                        throw TypeError(".caffe.LpqLossParameter.pq_episode_starts_at_iter: array expected");
                    message.pq_episode_starts_at_iter = [];
                    for (var i = 0; i < object.pq_episode_starts_at_iter.length; ++i)
                        message.pq_episode_starts_at_iter[i] = object.pq_episode_starts_at_iter[i] >>> 0;
                }
                if (object.p) {
                    if (!Array.isArray(object.p))
                        throw TypeError(".caffe.LpqLossParameter.p: array expected");
                    message.p = [];
                    for (var i = 0; i < object.p.length; ++i)
                        message.p[i] = Number(object.p[i]);
                }
                if (object.q) {
                    if (!Array.isArray(object.q))
                        throw TypeError(".caffe.LpqLossParameter.q: array expected");
                    message.q = [];
                    for (var i = 0; i < object.q.length; ++i)
                        message.q[i] = Number(object.q[i]);
                }
                return message;
            };
    
            LpqLossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.pq_episode_starts_at_iter = [];
                    object.p = [];
                    object.q = [];
                }
                if (options.defaults) {
                    object.p_epsilon = 0;
                    object.q_epsilon = 0.01;
                    object.l2_prescale_by_channels = false;
                    object.normalize_by_num_entries = false;
                }
                if (message.pq_episode_starts_at_iter && message.pq_episode_starts_at_iter.length) {
                    object.pq_episode_starts_at_iter = [];
                    for (var j = 0; j < message.pq_episode_starts_at_iter.length; ++j)
                        object.pq_episode_starts_at_iter[j] = message.pq_episode_starts_at_iter[j];
                }
                if (message.p && message.p.length) {
                    object.p = [];
                    for (var j = 0; j < message.p.length; ++j)
                        object.p[j] = options.json && !isFinite(message.p[j]) ? String(message.p[j]) : message.p[j];
                }
                if (message.q && message.q.length) {
                    object.q = [];
                    for (var j = 0; j < message.q.length; ++j)
                        object.q[j] = options.json && !isFinite(message.q[j]) ? String(message.q[j]) : message.q[j];
                }
                if (message.p_epsilon != null && message.hasOwnProperty("p_epsilon"))
                    object.p_epsilon = options.json && !isFinite(message.p_epsilon) ? String(message.p_epsilon) : message.p_epsilon;
                if (message.q_epsilon != null && message.hasOwnProperty("q_epsilon"))
                    object.q_epsilon = options.json && !isFinite(message.q_epsilon) ? String(message.q_epsilon) : message.q_epsilon;
                if (message.l2_prescale_by_channels != null && message.hasOwnProperty("l2_prescale_by_channels"))
                    object.l2_prescale_by_channels = message.l2_prescale_by_channels;
                if (message.normalize_by_num_entries != null && message.hasOwnProperty("normalize_by_num_entries"))
                    object.normalize_by_num_entries = message.normalize_by_num_entries;
                return object;
            };
    
            LpqLossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LpqLossParameter;
        })();
    
        caffe.FlowWarpParameter = (function() {
    
            function FlowWarpParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            FlowWarpParameter.prototype.fill_value = 1;
    
            FlowWarpParameter.create = function create(properties) {
                return new FlowWarpParameter(properties);
            };
    
            FlowWarpParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.FlowWarpParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.fill_value = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            FlowWarpParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.FlowWarpParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "fill_value":
                        message.fill_value = reader.enum($root.caffe.FlowWarpParameter.FillParameter);
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            FlowWarpParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.fill_value != null && message.hasOwnProperty("fill_value"))
                    switch (message.fill_value) {
                    default:
                        return "fill_value: enum value expected";
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };
    
            FlowWarpParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.FlowWarpParameter)
                    return object;
                var message = new $root.caffe.FlowWarpParameter();
                switch (object.fill_value) {
                case "ZERO":
                case 1:
                    message.fill_value = 1;
                    break;
                case "NOT_A_NUMBER":
                case 2:
                    message.fill_value = 2;
                    break;
                }
                return message;
            };
    
            FlowWarpParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.fill_value = options.enums === String ? "ZERO" : 1;
                if (message.fill_value != null && message.hasOwnProperty("fill_value"))
                    object.fill_value = options.enums === String ? $root.caffe.FlowWarpParameter.FillParameter[message.fill_value] : message.fill_value;
                return object;
            };
    
            FlowWarpParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            FlowWarpParameter.FillParameter = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "ZERO"] = 1;
                values[valuesById[2] = "NOT_A_NUMBER"] = 2;
                return values;
            })();
    
            return FlowWarpParameter;
        })();
    
        caffe.AccumParameter = (function() {
    
            function AccumParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            AccumParameter.prototype.top_height = 0;
            AccumParameter.prototype.top_width = 0;
            AccumParameter.prototype.size_divisible_by = 0;
            AccumParameter.prototype.have_reference = false;
    
            AccumParameter.create = function create(properties) {
                return new AccumParameter(properties);
            };
    
            AccumParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.AccumParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.top_height = reader.uint32();
                        break;
                    case 2:
                        message.top_width = reader.uint32();
                        break;
                    case 3:
                        message.size_divisible_by = reader.uint32();
                        break;
                    case 4:
                        message.have_reference = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            AccumParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.AccumParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "top_height":
                        message.top_height = reader.uint32();
                        break;
                    case "top_width":
                        message.top_width = reader.uint32();
                        break;
                    case "size_divisible_by":
                        message.size_divisible_by = reader.uint32();
                        break;
                    case "have_reference":
                        message.have_reference = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            AccumParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.top_height != null && message.hasOwnProperty("top_height"))
                    if (!$util.isInteger(message.top_height))
                        return "top_height: integer expected";
                if (message.top_width != null && message.hasOwnProperty("top_width"))
                    if (!$util.isInteger(message.top_width))
                        return "top_width: integer expected";
                if (message.size_divisible_by != null && message.hasOwnProperty("size_divisible_by"))
                    if (!$util.isInteger(message.size_divisible_by))
                        return "size_divisible_by: integer expected";
                if (message.have_reference != null && message.hasOwnProperty("have_reference"))
                    if (typeof message.have_reference !== "boolean")
                        return "have_reference: boolean expected";
                return null;
            };
    
            AccumParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.AccumParameter)
                    return object;
                var message = new $root.caffe.AccumParameter();
                if (object.top_height != null)
                    message.top_height = object.top_height >>> 0;
                if (object.top_width != null)
                    message.top_width = object.top_width >>> 0;
                if (object.size_divisible_by != null)
                    message.size_divisible_by = object.size_divisible_by >>> 0;
                if (object.have_reference != null)
                    message.have_reference = Boolean(object.have_reference);
                return message;
            };
    
            AccumParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.top_height = 0;
                    object.top_width = 0;
                    object.size_divisible_by = 0;
                    object.have_reference = false;
                }
                if (message.top_height != null && message.hasOwnProperty("top_height"))
                    object.top_height = message.top_height;
                if (message.top_width != null && message.hasOwnProperty("top_width"))
                    object.top_width = message.top_width;
                if (message.size_divisible_by != null && message.hasOwnProperty("size_divisible_by"))
                    object.size_divisible_by = message.size_divisible_by;
                if (message.have_reference != null && message.hasOwnProperty("have_reference"))
                    object.have_reference = message.have_reference;
                return object;
            };
    
            AccumParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AccumParameter;
        })();
    
        caffe.YoloV2LossParameter = (function() {
    
            function YoloV2LossParameter(properties) {
                this.anchors = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            YoloV2LossParameter.prototype.anchors = $util.emptyArray;
            YoloV2LossParameter.prototype.side = 0;
            YoloV2LossParameter.prototype.num_classes = 0;
            YoloV2LossParameter.prototype.num_object = 0;
            YoloV2LossParameter.prototype.box_scale = 0.5;
            YoloV2LossParameter.prototype.class_scale = 0.5;
            YoloV2LossParameter.prototype.noobject_scale = 0.5;
            YoloV2LossParameter.prototype.object_scale = 0.5;
            YoloV2LossParameter.prototype.rescore = true;
            YoloV2LossParameter.prototype.constraint = true;
            YoloV2LossParameter.prototype.thresh = 0.7;
    
            YoloV2LossParameter.create = function create(properties) {
                return new YoloV2LossParameter(properties);
            };
    
            YoloV2LossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.YoloV2LossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.anchors && message.anchors.length))
                            message.anchors = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.anchors.push(reader.float());
                        } else
                            message.anchors.push(reader.float());
                        break;
                    case 2:
                        message.side = reader.int32();
                        break;
                    case 3:
                        message.num_classes = reader.int32();
                        break;
                    case 4:
                        message.num_object = reader.int32();
                        break;
                    case 5:
                        message.box_scale = reader.float();
                        break;
                    case 6:
                        message.class_scale = reader.float();
                        break;
                    case 7:
                        message.noobject_scale = reader.float();
                        break;
                    case 8:
                        message.object_scale = reader.float();
                        break;
                    case 9:
                        message.rescore = reader.bool();
                        break;
                    case 10:
                        message.constraint = reader.bool();
                        break;
                    case 11:
                        message.thresh = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            YoloV2LossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.YoloV2LossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "anchors":
                        if (!(message.anchors && message.anchors.length))
                            message.anchors = [];
                        message.anchors.push(reader.float());
                        break;
                    case "side":
                        message.side = reader.int32();
                        break;
                    case "num_classes":
                        message.num_classes = reader.int32();
                        break;
                    case "num_object":
                        message.num_object = reader.int32();
                        break;
                    case "box_scale":
                        message.box_scale = reader.float();
                        break;
                    case "class_scale":
                        message.class_scale = reader.float();
                        break;
                    case "noobject_scale":
                        message.noobject_scale = reader.float();
                        break;
                    case "object_scale":
                        message.object_scale = reader.float();
                        break;
                    case "rescore":
                        message.rescore = reader.bool();
                        break;
                    case "constraint":
                        message.constraint = reader.bool();
                        break;
                    case "thresh":
                        message.thresh = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            YoloV2LossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.anchors != null && message.hasOwnProperty("anchors")) {
                    if (!Array.isArray(message.anchors))
                        return "anchors: array expected";
                    for (var i = 0; i < message.anchors.length; ++i)
                        if (typeof message.anchors[i] !== "number")
                            return "anchors: number[] expected";
                }
                if (message.side != null && message.hasOwnProperty("side"))
                    if (!$util.isInteger(message.side))
                        return "side: integer expected";
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    if (!$util.isInteger(message.num_classes))
                        return "num_classes: integer expected";
                if (message.num_object != null && message.hasOwnProperty("num_object"))
                    if (!$util.isInteger(message.num_object))
                        return "num_object: integer expected";
                if (message.box_scale != null && message.hasOwnProperty("box_scale"))
                    if (typeof message.box_scale !== "number")
                        return "box_scale: number expected";
                if (message.class_scale != null && message.hasOwnProperty("class_scale"))
                    if (typeof message.class_scale !== "number")
                        return "class_scale: number expected";
                if (message.noobject_scale != null && message.hasOwnProperty("noobject_scale"))
                    if (typeof message.noobject_scale !== "number")
                        return "noobject_scale: number expected";
                if (message.object_scale != null && message.hasOwnProperty("object_scale"))
                    if (typeof message.object_scale !== "number")
                        return "object_scale: number expected";
                if (message.rescore != null && message.hasOwnProperty("rescore"))
                    if (typeof message.rescore !== "boolean")
                        return "rescore: boolean expected";
                if (message.constraint != null && message.hasOwnProperty("constraint"))
                    if (typeof message.constraint !== "boolean")
                        return "constraint: boolean expected";
                if (message.thresh != null && message.hasOwnProperty("thresh"))
                    if (typeof message.thresh !== "number")
                        return "thresh: number expected";
                return null;
            };
    
            YoloV2LossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.YoloV2LossParameter)
                    return object;
                var message = new $root.caffe.YoloV2LossParameter();
                if (object.anchors) {
                    if (!Array.isArray(object.anchors))
                        throw TypeError(".caffe.YoloV2LossParameter.anchors: array expected");
                    message.anchors = [];
                    for (var i = 0; i < object.anchors.length; ++i)
                        message.anchors[i] = Number(object.anchors[i]);
                }
                if (object.side != null)
                    message.side = object.side | 0;
                if (object.num_classes != null)
                    message.num_classes = object.num_classes | 0;
                if (object.num_object != null)
                    message.num_object = object.num_object | 0;
                if (object.box_scale != null)
                    message.box_scale = Number(object.box_scale);
                if (object.class_scale != null)
                    message.class_scale = Number(object.class_scale);
                if (object.noobject_scale != null)
                    message.noobject_scale = Number(object.noobject_scale);
                if (object.object_scale != null)
                    message.object_scale = Number(object.object_scale);
                if (object.rescore != null)
                    message.rescore = Boolean(object.rescore);
                if (object.constraint != null)
                    message.constraint = Boolean(object.constraint);
                if (object.thresh != null)
                    message.thresh = Number(object.thresh);
                return message;
            };
    
            YoloV2LossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.anchors = [];
                if (options.defaults) {
                    object.side = 0;
                    object.num_classes = 0;
                    object.num_object = 0;
                    object.box_scale = 0.5;
                    object.class_scale = 0.5;
                    object.noobject_scale = 0.5;
                    object.object_scale = 0.5;
                    object.rescore = true;
                    object.constraint = true;
                    object.thresh = 0.7;
                }
                if (message.anchors && message.anchors.length) {
                    object.anchors = [];
                    for (var j = 0; j < message.anchors.length; ++j)
                        object.anchors[j] = options.json && !isFinite(message.anchors[j]) ? String(message.anchors[j]) : message.anchors[j];
                }
                if (message.side != null && message.hasOwnProperty("side"))
                    object.side = message.side;
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    object.num_classes = message.num_classes;
                if (message.num_object != null && message.hasOwnProperty("num_object"))
                    object.num_object = message.num_object;
                if (message.box_scale != null && message.hasOwnProperty("box_scale"))
                    object.box_scale = options.json && !isFinite(message.box_scale) ? String(message.box_scale) : message.box_scale;
                if (message.class_scale != null && message.hasOwnProperty("class_scale"))
                    object.class_scale = options.json && !isFinite(message.class_scale) ? String(message.class_scale) : message.class_scale;
                if (message.noobject_scale != null && message.hasOwnProperty("noobject_scale"))
                    object.noobject_scale = options.json && !isFinite(message.noobject_scale) ? String(message.noobject_scale) : message.noobject_scale;
                if (message.object_scale != null && message.hasOwnProperty("object_scale"))
                    object.object_scale = options.json && !isFinite(message.object_scale) ? String(message.object_scale) : message.object_scale;
                if (message.rescore != null && message.hasOwnProperty("rescore"))
                    object.rescore = message.rescore;
                if (message.constraint != null && message.hasOwnProperty("constraint"))
                    object.constraint = message.constraint;
                if (message.thresh != null && message.hasOwnProperty("thresh"))
                    object.thresh = options.json && !isFinite(message.thresh) ? String(message.thresh) : message.thresh;
                return object;
            };
    
            YoloV2LossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return YoloV2LossParameter;
        })();
    
        caffe.YoloV3LossParameter = (function() {
    
            function YoloV3LossParameter(properties) {
                this.anchors = [];
                this.mask = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            YoloV3LossParameter.prototype.anchors = $util.emptyArray;
            YoloV3LossParameter.prototype.mask = $util.emptyArray;
            YoloV3LossParameter.prototype.side = 0;
            YoloV3LossParameter.prototype.num_classes = 0;
            YoloV3LossParameter.prototype.num_object = 0;
            YoloV3LossParameter.prototype.total_object = 0;
            YoloV3LossParameter.prototype.ignore_thresh = 0.7;
            YoloV3LossParameter.prototype.truth_thresh = 1;
            YoloV3LossParameter.prototype.net_w = 0;
            YoloV3LossParameter.prototype.net_h = 0;
    
            YoloV3LossParameter.create = function create(properties) {
                return new YoloV3LossParameter(properties);
            };
    
            YoloV3LossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.YoloV3LossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.anchors && message.anchors.length))
                            message.anchors = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.anchors.push(reader.int32());
                        } else
                            message.anchors.push(reader.int32());
                        break;
                    case 2:
                        if (!(message.mask && message.mask.length))
                            message.mask = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.mask.push(reader.int32());
                        } else
                            message.mask.push(reader.int32());
                        break;
                    case 3:
                        message.side = reader.int32();
                        break;
                    case 4:
                        message.num_classes = reader.int32();
                        break;
                    case 5:
                        message.num_object = reader.int32();
                        break;
                    case 6:
                        message.total_object = reader.int32();
                        break;
                    case 7:
                        message.ignore_thresh = reader.float();
                        break;
                    case 8:
                        message.truth_thresh = reader.float();
                        break;
                    case 9:
                        message.net_w = reader.int32();
                        break;
                    case 10:
                        message.net_h = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            YoloV3LossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.YoloV3LossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "anchors":
                        if (!(message.anchors && message.anchors.length))
                            message.anchors = [];
                        message.anchors.push(reader.int32());
                        break;
                    case "mask":
                        if (!(message.mask && message.mask.length))
                            message.mask = [];
                        message.mask.push(reader.int32());
                        break;
                    case "side":
                        message.side = reader.int32();
                        break;
                    case "num_classes":
                        message.num_classes = reader.int32();
                        break;
                    case "num_object":
                        message.num_object = reader.int32();
                        break;
                    case "total_object":
                        message.total_object = reader.int32();
                        break;
                    case "ignore_thresh":
                        message.ignore_thresh = reader.float();
                        break;
                    case "truth_thresh":
                        message.truth_thresh = reader.float();
                        break;
                    case "net_w":
                        message.net_w = reader.int32();
                        break;
                    case "net_h":
                        message.net_h = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            YoloV3LossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.anchors != null && message.hasOwnProperty("anchors")) {
                    if (!Array.isArray(message.anchors))
                        return "anchors: array expected";
                    for (var i = 0; i < message.anchors.length; ++i)
                        if (!$util.isInteger(message.anchors[i]))
                            return "anchors: integer[] expected";
                }
                if (message.mask != null && message.hasOwnProperty("mask")) {
                    if (!Array.isArray(message.mask))
                        return "mask: array expected";
                    for (var i = 0; i < message.mask.length; ++i)
                        if (!$util.isInteger(message.mask[i]))
                            return "mask: integer[] expected";
                }
                if (message.side != null && message.hasOwnProperty("side"))
                    if (!$util.isInteger(message.side))
                        return "side: integer expected";
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    if (!$util.isInteger(message.num_classes))
                        return "num_classes: integer expected";
                if (message.num_object != null && message.hasOwnProperty("num_object"))
                    if (!$util.isInteger(message.num_object))
                        return "num_object: integer expected";
                if (message.total_object != null && message.hasOwnProperty("total_object"))
                    if (!$util.isInteger(message.total_object))
                        return "total_object: integer expected";
                if (message.ignore_thresh != null && message.hasOwnProperty("ignore_thresh"))
                    if (typeof message.ignore_thresh !== "number")
                        return "ignore_thresh: number expected";
                if (message.truth_thresh != null && message.hasOwnProperty("truth_thresh"))
                    if (typeof message.truth_thresh !== "number")
                        return "truth_thresh: number expected";
                if (message.net_w != null && message.hasOwnProperty("net_w"))
                    if (!$util.isInteger(message.net_w))
                        return "net_w: integer expected";
                if (message.net_h != null && message.hasOwnProperty("net_h"))
                    if (!$util.isInteger(message.net_h))
                        return "net_h: integer expected";
                return null;
            };
    
            YoloV3LossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.YoloV3LossParameter)
                    return object;
                var message = new $root.caffe.YoloV3LossParameter();
                if (object.anchors) {
                    if (!Array.isArray(object.anchors))
                        throw TypeError(".caffe.YoloV3LossParameter.anchors: array expected");
                    message.anchors = [];
                    for (var i = 0; i < object.anchors.length; ++i)
                        message.anchors[i] = object.anchors[i] | 0;
                }
                if (object.mask) {
                    if (!Array.isArray(object.mask))
                        throw TypeError(".caffe.YoloV3LossParameter.mask: array expected");
                    message.mask = [];
                    for (var i = 0; i < object.mask.length; ++i)
                        message.mask[i] = object.mask[i] | 0;
                }
                if (object.side != null)
                    message.side = object.side | 0;
                if (object.num_classes != null)
                    message.num_classes = object.num_classes | 0;
                if (object.num_object != null)
                    message.num_object = object.num_object | 0;
                if (object.total_object != null)
                    message.total_object = object.total_object | 0;
                if (object.ignore_thresh != null)
                    message.ignore_thresh = Number(object.ignore_thresh);
                if (object.truth_thresh != null)
                    message.truth_thresh = Number(object.truth_thresh);
                if (object.net_w != null)
                    message.net_w = object.net_w | 0;
                if (object.net_h != null)
                    message.net_h = object.net_h | 0;
                return message;
            };
    
            YoloV3LossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.anchors = [];
                    object.mask = [];
                }
                if (options.defaults) {
                    object.side = 0;
                    object.num_classes = 0;
                    object.num_object = 0;
                    object.total_object = 0;
                    object.ignore_thresh = 0.7;
                    object.truth_thresh = 1;
                    object.net_w = 0;
                    object.net_h = 0;
                }
                if (message.anchors && message.anchors.length) {
                    object.anchors = [];
                    for (var j = 0; j < message.anchors.length; ++j)
                        object.anchors[j] = message.anchors[j];
                }
                if (message.mask && message.mask.length) {
                    object.mask = [];
                    for (var j = 0; j < message.mask.length; ++j)
                        object.mask[j] = message.mask[j];
                }
                if (message.side != null && message.hasOwnProperty("side"))
                    object.side = message.side;
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    object.num_classes = message.num_classes;
                if (message.num_object != null && message.hasOwnProperty("num_object"))
                    object.num_object = message.num_object;
                if (message.total_object != null && message.hasOwnProperty("total_object"))
                    object.total_object = message.total_object;
                if (message.ignore_thresh != null && message.hasOwnProperty("ignore_thresh"))
                    object.ignore_thresh = options.json && !isFinite(message.ignore_thresh) ? String(message.ignore_thresh) : message.ignore_thresh;
                if (message.truth_thresh != null && message.hasOwnProperty("truth_thresh"))
                    object.truth_thresh = options.json && !isFinite(message.truth_thresh) ? String(message.truth_thresh) : message.truth_thresh;
                if (message.net_w != null && message.hasOwnProperty("net_w"))
                    object.net_w = message.net_w;
                if (message.net_h != null && message.hasOwnProperty("net_h"))
                    object.net_h = message.net_h;
                return object;
            };
    
            YoloV3LossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return YoloV3LossParameter;
        })();
    
        caffe.RandomGeneratorParameter = (function() {
    
            function RandomGeneratorParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            RandomGeneratorParameter.prototype.rand_type = "uniform";
            RandomGeneratorParameter.prototype.exp = false;
            RandomGeneratorParameter.prototype.mean = 0;
            RandomGeneratorParameter.prototype.spread = 0;
            RandomGeneratorParameter.prototype.prob = 1;
            RandomGeneratorParameter.prototype.apply_schedule = true;
            RandomGeneratorParameter.prototype.discretize = false;
            RandomGeneratorParameter.prototype.multiplier = 1;
    
            RandomGeneratorParameter.create = function create(properties) {
                return new RandomGeneratorParameter(properties);
            };
    
            RandomGeneratorParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.RandomGeneratorParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rand_type = reader.string();
                        break;
                    case 2:
                        message.exp = reader.bool();
                        break;
                    case 4:
                        message.mean = reader.float();
                        break;
                    case 5:
                        message.spread = reader.float();
                        break;
                    case 6:
                        message.prob = reader.float();
                        break;
                    case 7:
                        message.apply_schedule = reader.bool();
                        break;
                    case 8:
                        message.discretize = reader.bool();
                        break;
                    case 9:
                        message.multiplier = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            RandomGeneratorParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.RandomGeneratorParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "rand_type":
                        message.rand_type = reader.string();
                        break;
                    case "exp":
                        message.exp = reader.bool();
                        break;
                    case "mean":
                        message.mean = reader.float();
                        break;
                    case "spread":
                        message.spread = reader.float();
                        break;
                    case "prob":
                        message.prob = reader.float();
                        break;
                    case "apply_schedule":
                        message.apply_schedule = reader.bool();
                        break;
                    case "discretize":
                        message.discretize = reader.bool();
                        break;
                    case "multiplier":
                        message.multiplier = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            RandomGeneratorParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rand_type != null && message.hasOwnProperty("rand_type"))
                    if (!$util.isString(message.rand_type))
                        return "rand_type: string expected";
                if (message.exp != null && message.hasOwnProperty("exp"))
                    if (typeof message.exp !== "boolean")
                        return "exp: boolean expected";
                if (message.mean != null && message.hasOwnProperty("mean"))
                    if (typeof message.mean !== "number")
                        return "mean: number expected";
                if (message.spread != null && message.hasOwnProperty("spread"))
                    if (typeof message.spread !== "number")
                        return "spread: number expected";
                if (message.prob != null && message.hasOwnProperty("prob"))
                    if (typeof message.prob !== "number")
                        return "prob: number expected";
                if (message.apply_schedule != null && message.hasOwnProperty("apply_schedule"))
                    if (typeof message.apply_schedule !== "boolean")
                        return "apply_schedule: boolean expected";
                if (message.discretize != null && message.hasOwnProperty("discretize"))
                    if (typeof message.discretize !== "boolean")
                        return "discretize: boolean expected";
                if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                    if (typeof message.multiplier !== "number")
                        return "multiplier: number expected";
                return null;
            };
    
            RandomGeneratorParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.RandomGeneratorParameter)
                    return object;
                var message = new $root.caffe.RandomGeneratorParameter();
                if (object.rand_type != null)
                    message.rand_type = String(object.rand_type);
                if (object.exp != null)
                    message.exp = Boolean(object.exp);
                if (object.mean != null)
                    message.mean = Number(object.mean);
                if (object.spread != null)
                    message.spread = Number(object.spread);
                if (object.prob != null)
                    message.prob = Number(object.prob);
                if (object.apply_schedule != null)
                    message.apply_schedule = Boolean(object.apply_schedule);
                if (object.discretize != null)
                    message.discretize = Boolean(object.discretize);
                if (object.multiplier != null)
                    message.multiplier = Number(object.multiplier);
                return message;
            };
    
            RandomGeneratorParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rand_type = "uniform";
                    object.exp = false;
                    object.mean = 0;
                    object.spread = 0;
                    object.prob = 1;
                    object.apply_schedule = true;
                    object.discretize = false;
                    object.multiplier = 1;
                }
                if (message.rand_type != null && message.hasOwnProperty("rand_type"))
                    object.rand_type = message.rand_type;
                if (message.exp != null && message.hasOwnProperty("exp"))
                    object.exp = message.exp;
                if (message.mean != null && message.hasOwnProperty("mean"))
                    object.mean = options.json && !isFinite(message.mean) ? String(message.mean) : message.mean;
                if (message.spread != null && message.hasOwnProperty("spread"))
                    object.spread = options.json && !isFinite(message.spread) ? String(message.spread) : message.spread;
                if (message.prob != null && message.hasOwnProperty("prob"))
                    object.prob = options.json && !isFinite(message.prob) ? String(message.prob) : message.prob;
                if (message.apply_schedule != null && message.hasOwnProperty("apply_schedule"))
                    object.apply_schedule = message.apply_schedule;
                if (message.discretize != null && message.hasOwnProperty("discretize"))
                    object.discretize = message.discretize;
                if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                    object.multiplier = options.json && !isFinite(message.multiplier) ? String(message.multiplier) : message.multiplier;
                return object;
            };
    
            RandomGeneratorParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RandomGeneratorParameter;
        })();
    
        caffe.RingPadParameter = (function() {
    
            function RingPadParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            RingPadParameter.prototype.axis = 1;
            RingPadParameter.prototype.pad = 1;
    
            RingPadParameter.create = function create(properties) {
                return new RingPadParameter(properties);
            };
    
            RingPadParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.RingPadParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.axis = reader.int32();
                        break;
                    case 2:
                        message.pad = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            RingPadParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.RingPadParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "pad":
                        message.pad = reader.int32();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            RingPadParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.pad != null && message.hasOwnProperty("pad"))
                    if (!$util.isInteger(message.pad))
                        return "pad: integer expected";
                return null;
            };
    
            RingPadParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.RingPadParameter)
                    return object;
                var message = new $root.caffe.RingPadParameter();
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.pad != null)
                    message.pad = object.pad | 0;
                return message;
            };
    
            RingPadParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.axis = 1;
                    object.pad = 1;
                }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.pad != null && message.hasOwnProperty("pad"))
                    object.pad = message.pad;
                return object;
            };
    
            RingPadParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RingPadParameter;
        })();
    
        caffe.BoxOutputParameter = (function() {
    
            function BoxOutputParameter(properties) {
                this.field_h = [];
                this.field_w = [];
                this.downsample_rate = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            BoxOutputParameter.prototype.fg_thr = 0;
            BoxOutputParameter.prototype.iou_thr = 0.5;
            BoxOutputParameter.prototype.nms_type = "IOU";
            BoxOutputParameter.prototype.field_h = $util.emptyArray;
            BoxOutputParameter.prototype.field_w = $util.emptyArray;
            BoxOutputParameter.prototype.downsample_rate = $util.emptyArray;
            BoxOutputParameter.prototype.field_whr = 2;
            BoxOutputParameter.prototype.field_xyr = 2;
            BoxOutputParameter.prototype.max_nms_num = 0;
            BoxOutputParameter.prototype.max_post_nms_num = 0;
            BoxOutputParameter.prototype.min_size = 15;
            BoxOutputParameter.prototype.num_param_set = 1;
            BoxOutputParameter.prototype.ringpad = false;
    
            BoxOutputParameter.create = function create(properties) {
                return new BoxOutputParameter(properties);
            };
    
            BoxOutputParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.BoxOutputParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.fg_thr = reader.float();
                        break;
                    case 2:
                        message.iou_thr = reader.float();
                        break;
                    case 3:
                        message.nms_type = reader.string();
                        break;
                    case 4:
                        if (!(message.field_h && message.field_h.length))
                            message.field_h = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.field_h.push(reader.uint32());
                        } else
                            message.field_h.push(reader.uint32());
                        break;
                    case 5:
                        if (!(message.field_w && message.field_w.length))
                            message.field_w = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.field_w.push(reader.uint32());
                        } else
                            message.field_w.push(reader.uint32());
                        break;
                    case 6:
                        if (!(message.downsample_rate && message.downsample_rate.length))
                            message.downsample_rate = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.downsample_rate.push(reader.uint32());
                        } else
                            message.downsample_rate.push(reader.uint32());
                        break;
                    case 7:
                        message.field_whr = reader.float();
                        break;
                    case 8:
                        message.field_xyr = reader.float();
                        break;
                    case 9:
                        message.max_nms_num = reader.uint32();
                        break;
                    case 10:
                        message.max_post_nms_num = reader.uint32();
                        break;
                    case 11:
                        message.min_size = reader.float();
                        break;
                    case 12:
                        message.num_param_set = reader.uint32();
                        break;
                    case 13:
                        message.ringpad = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            BoxOutputParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.BoxOutputParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "fg_thr":
                        message.fg_thr = reader.float();
                        break;
                    case "iou_thr":
                        message.iou_thr = reader.float();
                        break;
                    case "nms_type":
                        message.nms_type = reader.string();
                        break;
                    case "field_h":
                        if (!(message.field_h && message.field_h.length))
                            message.field_h = [];
                        message.field_h.push(reader.uint32());
                        break;
                    case "field_w":
                        if (!(message.field_w && message.field_w.length))
                            message.field_w = [];
                        message.field_w.push(reader.uint32());
                        break;
                    case "downsample_rate":
                        if (!(message.downsample_rate && message.downsample_rate.length))
                            message.downsample_rate = [];
                        message.downsample_rate.push(reader.uint32());
                        break;
                    case "field_whr":
                        message.field_whr = reader.float();
                        break;
                    case "field_xyr":
                        message.field_xyr = reader.float();
                        break;
                    case "max_nms_num":
                        message.max_nms_num = reader.uint32();
                        break;
                    case "max_post_nms_num":
                        message.max_post_nms_num = reader.uint32();
                        break;
                    case "min_size":
                        message.min_size = reader.float();
                        break;
                    case "num_param_set":
                        message.num_param_set = reader.uint32();
                        break;
                    case "ringpad":
                        message.ringpad = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            BoxOutputParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.fg_thr != null && message.hasOwnProperty("fg_thr"))
                    if (typeof message.fg_thr !== "number")
                        return "fg_thr: number expected";
                if (message.iou_thr != null && message.hasOwnProperty("iou_thr"))
                    if (typeof message.iou_thr !== "number")
                        return "iou_thr: number expected";
                if (message.nms_type != null && message.hasOwnProperty("nms_type"))
                    if (!$util.isString(message.nms_type))
                        return "nms_type: string expected";
                if (message.field_h != null && message.hasOwnProperty("field_h")) {
                    if (!Array.isArray(message.field_h))
                        return "field_h: array expected";
                    for (var i = 0; i < message.field_h.length; ++i)
                        if (!$util.isInteger(message.field_h[i]))
                            return "field_h: integer[] expected";
                }
                if (message.field_w != null && message.hasOwnProperty("field_w")) {
                    if (!Array.isArray(message.field_w))
                        return "field_w: array expected";
                    for (var i = 0; i < message.field_w.length; ++i)
                        if (!$util.isInteger(message.field_w[i]))
                            return "field_w: integer[] expected";
                }
                if (message.downsample_rate != null && message.hasOwnProperty("downsample_rate")) {
                    if (!Array.isArray(message.downsample_rate))
                        return "downsample_rate: array expected";
                    for (var i = 0; i < message.downsample_rate.length; ++i)
                        if (!$util.isInteger(message.downsample_rate[i]))
                            return "downsample_rate: integer[] expected";
                }
                if (message.field_whr != null && message.hasOwnProperty("field_whr"))
                    if (typeof message.field_whr !== "number")
                        return "field_whr: number expected";
                if (message.field_xyr != null && message.hasOwnProperty("field_xyr"))
                    if (typeof message.field_xyr !== "number")
                        return "field_xyr: number expected";
                if (message.max_nms_num != null && message.hasOwnProperty("max_nms_num"))
                    if (!$util.isInteger(message.max_nms_num))
                        return "max_nms_num: integer expected";
                if (message.max_post_nms_num != null && message.hasOwnProperty("max_post_nms_num"))
                    if (!$util.isInteger(message.max_post_nms_num))
                        return "max_post_nms_num: integer expected";
                if (message.min_size != null && message.hasOwnProperty("min_size"))
                    if (typeof message.min_size !== "number")
                        return "min_size: number expected";
                if (message.num_param_set != null && message.hasOwnProperty("num_param_set"))
                    if (!$util.isInteger(message.num_param_set))
                        return "num_param_set: integer expected";
                if (message.ringpad != null && message.hasOwnProperty("ringpad"))
                    if (typeof message.ringpad !== "boolean")
                        return "ringpad: boolean expected";
                return null;
            };
    
            BoxOutputParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.BoxOutputParameter)
                    return object;
                var message = new $root.caffe.BoxOutputParameter();
                if (object.fg_thr != null)
                    message.fg_thr = Number(object.fg_thr);
                if (object.iou_thr != null)
                    message.iou_thr = Number(object.iou_thr);
                if (object.nms_type != null)
                    message.nms_type = String(object.nms_type);
                if (object.field_h) {
                    if (!Array.isArray(object.field_h))
                        throw TypeError(".caffe.BoxOutputParameter.field_h: array expected");
                    message.field_h = [];
                    for (var i = 0; i < object.field_h.length; ++i)
                        message.field_h[i] = object.field_h[i] >>> 0;
                }
                if (object.field_w) {
                    if (!Array.isArray(object.field_w))
                        throw TypeError(".caffe.BoxOutputParameter.field_w: array expected");
                    message.field_w = [];
                    for (var i = 0; i < object.field_w.length; ++i)
                        message.field_w[i] = object.field_w[i] >>> 0;
                }
                if (object.downsample_rate) {
                    if (!Array.isArray(object.downsample_rate))
                        throw TypeError(".caffe.BoxOutputParameter.downsample_rate: array expected");
                    message.downsample_rate = [];
                    for (var i = 0; i < object.downsample_rate.length; ++i)
                        message.downsample_rate[i] = object.downsample_rate[i] >>> 0;
                }
                if (object.field_whr != null)
                    message.field_whr = Number(object.field_whr);
                if (object.field_xyr != null)
                    message.field_xyr = Number(object.field_xyr);
                if (object.max_nms_num != null)
                    message.max_nms_num = object.max_nms_num >>> 0;
                if (object.max_post_nms_num != null)
                    message.max_post_nms_num = object.max_post_nms_num >>> 0;
                if (object.min_size != null)
                    message.min_size = Number(object.min_size);
                if (object.num_param_set != null)
                    message.num_param_set = object.num_param_set >>> 0;
                if (object.ringpad != null)
                    message.ringpad = Boolean(object.ringpad);
                return message;
            };
    
            BoxOutputParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.field_h = [];
                    object.field_w = [];
                    object.downsample_rate = [];
                }
                if (options.defaults) {
                    object.fg_thr = 0;
                    object.iou_thr = 0.5;
                    object.nms_type = "IOU";
                    object.field_whr = 2;
                    object.field_xyr = 2;
                    object.max_nms_num = 0;
                    object.max_post_nms_num = 0;
                    object.min_size = 15;
                    object.num_param_set = 1;
                    object.ringpad = false;
                }
                if (message.fg_thr != null && message.hasOwnProperty("fg_thr"))
                    object.fg_thr = options.json && !isFinite(message.fg_thr) ? String(message.fg_thr) : message.fg_thr;
                if (message.iou_thr != null && message.hasOwnProperty("iou_thr"))
                    object.iou_thr = options.json && !isFinite(message.iou_thr) ? String(message.iou_thr) : message.iou_thr;
                if (message.nms_type != null && message.hasOwnProperty("nms_type"))
                    object.nms_type = message.nms_type;
                if (message.field_h && message.field_h.length) {
                    object.field_h = [];
                    for (var j = 0; j < message.field_h.length; ++j)
                        object.field_h[j] = message.field_h[j];
                }
                if (message.field_w && message.field_w.length) {
                    object.field_w = [];
                    for (var j = 0; j < message.field_w.length; ++j)
                        object.field_w[j] = message.field_w[j];
                }
                if (message.downsample_rate && message.downsample_rate.length) {
                    object.downsample_rate = [];
                    for (var j = 0; j < message.downsample_rate.length; ++j)
                        object.downsample_rate[j] = message.downsample_rate[j];
                }
                if (message.field_whr != null && message.hasOwnProperty("field_whr"))
                    object.field_whr = options.json && !isFinite(message.field_whr) ? String(message.field_whr) : message.field_whr;
                if (message.field_xyr != null && message.hasOwnProperty("field_xyr"))
                    object.field_xyr = options.json && !isFinite(message.field_xyr) ? String(message.field_xyr) : message.field_xyr;
                if (message.max_nms_num != null && message.hasOwnProperty("max_nms_num"))
                    object.max_nms_num = message.max_nms_num;
                if (message.max_post_nms_num != null && message.hasOwnProperty("max_post_nms_num"))
                    object.max_post_nms_num = message.max_post_nms_num;
                if (message.min_size != null && message.hasOwnProperty("min_size"))
                    object.min_size = options.json && !isFinite(message.min_size) ? String(message.min_size) : message.min_size;
                if (message.num_param_set != null && message.hasOwnProperty("num_param_set"))
                    object.num_param_set = message.num_param_set;
                if (message.ringpad != null && message.hasOwnProperty("ringpad"))
                    object.ringpad = message.ringpad;
                return object;
            };
    
            BoxOutputParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return BoxOutputParameter;
        })();
    
        caffe.YoloDetectionOutputParameter = (function() {
    
            function YoloDetectionOutputParameter(properties) {
                this.biases = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            YoloDetectionOutputParameter.prototype.side = 13;
            YoloDetectionOutputParameter.prototype.num_classes = 20;
            YoloDetectionOutputParameter.prototype.num_box = 5;
            YoloDetectionOutputParameter.prototype.coords = 4;
            YoloDetectionOutputParameter.prototype.confidence_threshold = 0.01;
            YoloDetectionOutputParameter.prototype.nms_threshold = 0.45;
            YoloDetectionOutputParameter.prototype.biases = $util.emptyArray;
            YoloDetectionOutputParameter.prototype.label_map_file = "";
    
            YoloDetectionOutputParameter.create = function create(properties) {
                return new YoloDetectionOutputParameter(properties);
            };
    
            YoloDetectionOutputParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.YoloDetectionOutputParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.side = reader.uint32();
                        break;
                    case 2:
                        message.num_classes = reader.uint32();
                        break;
                    case 3:
                        message.num_box = reader.uint32();
                        break;
                    case 4:
                        message.coords = reader.uint32();
                        break;
                    case 5:
                        message.confidence_threshold = reader.float();
                        break;
                    case 6:
                        message.nms_threshold = reader.float();
                        break;
                    case 7:
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.biases.push(reader.float());
                        } else
                            message.biases.push(reader.float());
                        break;
                    case 8:
                        message.label_map_file = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            YoloDetectionOutputParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.YoloDetectionOutputParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "side":
                        message.side = reader.uint32();
                        break;
                    case "num_classes":
                        message.num_classes = reader.uint32();
                        break;
                    case "num_box":
                        message.num_box = reader.uint32();
                        break;
                    case "coords":
                        message.coords = reader.uint32();
                        break;
                    case "confidence_threshold":
                        message.confidence_threshold = reader.float();
                        break;
                    case "nms_threshold":
                        message.nms_threshold = reader.float();
                        break;
                    case "biases":
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        message.biases.push(reader.float());
                        break;
                    case "label_map_file":
                        message.label_map_file = reader.string();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            YoloDetectionOutputParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.side != null && message.hasOwnProperty("side"))
                    if (!$util.isInteger(message.side))
                        return "side: integer expected";
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    if (!$util.isInteger(message.num_classes))
                        return "num_classes: integer expected";
                if (message.num_box != null && message.hasOwnProperty("num_box"))
                    if (!$util.isInteger(message.num_box))
                        return "num_box: integer expected";
                if (message.coords != null && message.hasOwnProperty("coords"))
                    if (!$util.isInteger(message.coords))
                        return "coords: integer expected";
                if (message.confidence_threshold != null && message.hasOwnProperty("confidence_threshold"))
                    if (typeof message.confidence_threshold !== "number")
                        return "confidence_threshold: number expected";
                if (message.nms_threshold != null && message.hasOwnProperty("nms_threshold"))
                    if (typeof message.nms_threshold !== "number")
                        return "nms_threshold: number expected";
                if (message.biases != null && message.hasOwnProperty("biases")) {
                    if (!Array.isArray(message.biases))
                        return "biases: array expected";
                    for (var i = 0; i < message.biases.length; ++i)
                        if (typeof message.biases[i] !== "number")
                            return "biases: number[] expected";
                }
                if (message.label_map_file != null && message.hasOwnProperty("label_map_file"))
                    if (!$util.isString(message.label_map_file))
                        return "label_map_file: string expected";
                return null;
            };
    
            YoloDetectionOutputParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.YoloDetectionOutputParameter)
                    return object;
                var message = new $root.caffe.YoloDetectionOutputParameter();
                if (object.side != null)
                    message.side = object.side >>> 0;
                if (object.num_classes != null)
                    message.num_classes = object.num_classes >>> 0;
                if (object.num_box != null)
                    message.num_box = object.num_box >>> 0;
                if (object.coords != null)
                    message.coords = object.coords >>> 0;
                if (object.confidence_threshold != null)
                    message.confidence_threshold = Number(object.confidence_threshold);
                if (object.nms_threshold != null)
                    message.nms_threshold = Number(object.nms_threshold);
                if (object.biases) {
                    if (!Array.isArray(object.biases))
                        throw TypeError(".caffe.YoloDetectionOutputParameter.biases: array expected");
                    message.biases = [];
                    for (var i = 0; i < object.biases.length; ++i)
                        message.biases[i] = Number(object.biases[i]);
                }
                if (object.label_map_file != null)
                    message.label_map_file = String(object.label_map_file);
                return message;
            };
    
            YoloDetectionOutputParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.biases = [];
                if (options.defaults) {
                    object.side = 13;
                    object.num_classes = 20;
                    object.num_box = 5;
                    object.coords = 4;
                    object.confidence_threshold = 0.01;
                    object.nms_threshold = 0.45;
                    object.label_map_file = "";
                }
                if (message.side != null && message.hasOwnProperty("side"))
                    object.side = message.side;
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    object.num_classes = message.num_classes;
                if (message.num_box != null && message.hasOwnProperty("num_box"))
                    object.num_box = message.num_box;
                if (message.coords != null && message.hasOwnProperty("coords"))
                    object.coords = message.coords;
                if (message.confidence_threshold != null && message.hasOwnProperty("confidence_threshold"))
                    object.confidence_threshold = options.json && !isFinite(message.confidence_threshold) ? String(message.confidence_threshold) : message.confidence_threshold;
                if (message.nms_threshold != null && message.hasOwnProperty("nms_threshold"))
                    object.nms_threshold = options.json && !isFinite(message.nms_threshold) ? String(message.nms_threshold) : message.nms_threshold;
                if (message.biases && message.biases.length) {
                    object.biases = [];
                    for (var j = 0; j < message.biases.length; ++j)
                        object.biases[j] = options.json && !isFinite(message.biases[j]) ? String(message.biases[j]) : message.biases[j];
                }
                if (message.label_map_file != null && message.hasOwnProperty("label_map_file"))
                    object.label_map_file = message.label_map_file;
                return object;
            };
    
            YoloDetectionOutputParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return YoloDetectionOutputParameter;
        })();
    
        caffe.Yolov3DetectionOutputParameter = (function() {
    
            function Yolov3DetectionOutputParameter(properties) {
                this.biases = [];
                this.anchors_scale = [];
                this.mask = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            Yolov3DetectionOutputParameter.prototype.num_classes = 20;
            Yolov3DetectionOutputParameter.prototype.num_box = 3;
            Yolov3DetectionOutputParameter.prototype.confidence_threshold = 0.01;
            Yolov3DetectionOutputParameter.prototype.nms_threshold = 0.45;
            Yolov3DetectionOutputParameter.prototype.biases = $util.emptyArray;
            Yolov3DetectionOutputParameter.prototype.anchors_scale = $util.emptyArray;
            Yolov3DetectionOutputParameter.prototype.mask_group_num = 2;
            Yolov3DetectionOutputParameter.prototype.mask = $util.emptyArray;
    
            Yolov3DetectionOutputParameter.create = function create(properties) {
                return new Yolov3DetectionOutputParameter(properties);
            };
    
            Yolov3DetectionOutputParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.Yolov3DetectionOutputParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_classes = reader.uint32();
                        break;
                    case 2:
                        message.num_box = reader.uint32();
                        break;
                    case 3:
                        message.confidence_threshold = reader.float();
                        break;
                    case 4:
                        message.nms_threshold = reader.float();
                        break;
                    case 5:
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.biases.push(reader.float());
                        } else
                            message.biases.push(reader.float());
                        break;
                    case 6:
                        if (!(message.anchors_scale && message.anchors_scale.length))
                            message.anchors_scale = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.anchors_scale.push(reader.uint32());
                        } else
                            message.anchors_scale.push(reader.uint32());
                        break;
                    case 7:
                        message.mask_group_num = reader.uint32();
                        break;
                    case 8:
                        if (!(message.mask && message.mask.length))
                            message.mask = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.mask.push(reader.uint32());
                        } else
                            message.mask.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            Yolov3DetectionOutputParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.Yolov3DetectionOutputParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_classes":
                        message.num_classes = reader.uint32();
                        break;
                    case "num_box":
                        message.num_box = reader.uint32();
                        break;
                    case "confidence_threshold":
                        message.confidence_threshold = reader.float();
                        break;
                    case "nms_threshold":
                        message.nms_threshold = reader.float();
                        break;
                    case "biases":
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        message.biases.push(reader.float());
                        break;
                    case "anchors_scale":
                        if (!(message.anchors_scale && message.anchors_scale.length))
                            message.anchors_scale = [];
                        message.anchors_scale.push(reader.uint32());
                        break;
                    case "mask_group_num":
                        message.mask_group_num = reader.uint32();
                        break;
                    case "mask":
                        if (!(message.mask && message.mask.length))
                            message.mask = [];
                        message.mask.push(reader.uint32());
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            Yolov3DetectionOutputParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    if (!$util.isInteger(message.num_classes))
                        return "num_classes: integer expected";
                if (message.num_box != null && message.hasOwnProperty("num_box"))
                    if (!$util.isInteger(message.num_box))
                        return "num_box: integer expected";
                if (message.confidence_threshold != null && message.hasOwnProperty("confidence_threshold"))
                    if (typeof message.confidence_threshold !== "number")
                        return "confidence_threshold: number expected";
                if (message.nms_threshold != null && message.hasOwnProperty("nms_threshold"))
                    if (typeof message.nms_threshold !== "number")
                        return "nms_threshold: number expected";
                if (message.biases != null && message.hasOwnProperty("biases")) {
                    if (!Array.isArray(message.biases))
                        return "biases: array expected";
                    for (var i = 0; i < message.biases.length; ++i)
                        if (typeof message.biases[i] !== "number")
                            return "biases: number[] expected";
                }
                if (message.anchors_scale != null && message.hasOwnProperty("anchors_scale")) {
                    if (!Array.isArray(message.anchors_scale))
                        return "anchors_scale: array expected";
                    for (var i = 0; i < message.anchors_scale.length; ++i)
                        if (!$util.isInteger(message.anchors_scale[i]))
                            return "anchors_scale: integer[] expected";
                }
                if (message.mask_group_num != null && message.hasOwnProperty("mask_group_num"))
                    if (!$util.isInteger(message.mask_group_num))
                        return "mask_group_num: integer expected";
                if (message.mask != null && message.hasOwnProperty("mask")) {
                    if (!Array.isArray(message.mask))
                        return "mask: array expected";
                    for (var i = 0; i < message.mask.length; ++i)
                        if (!$util.isInteger(message.mask[i]))
                            return "mask: integer[] expected";
                }
                return null;
            };
    
            Yolov3DetectionOutputParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.Yolov3DetectionOutputParameter)
                    return object;
                var message = new $root.caffe.Yolov3DetectionOutputParameter();
                if (object.num_classes != null)
                    message.num_classes = object.num_classes >>> 0;
                if (object.num_box != null)
                    message.num_box = object.num_box >>> 0;
                if (object.confidence_threshold != null)
                    message.confidence_threshold = Number(object.confidence_threshold);
                if (object.nms_threshold != null)
                    message.nms_threshold = Number(object.nms_threshold);
                if (object.biases) {
                    if (!Array.isArray(object.biases))
                        throw TypeError(".caffe.Yolov3DetectionOutputParameter.biases: array expected");
                    message.biases = [];
                    for (var i = 0; i < object.biases.length; ++i)
                        message.biases[i] = Number(object.biases[i]);
                }
                if (object.anchors_scale) {
                    if (!Array.isArray(object.anchors_scale))
                        throw TypeError(".caffe.Yolov3DetectionOutputParameter.anchors_scale: array expected");
                    message.anchors_scale = [];
                    for (var i = 0; i < object.anchors_scale.length; ++i)
                        message.anchors_scale[i] = object.anchors_scale[i] >>> 0;
                }
                if (object.mask_group_num != null)
                    message.mask_group_num = object.mask_group_num >>> 0;
                if (object.mask) {
                    if (!Array.isArray(object.mask))
                        throw TypeError(".caffe.Yolov3DetectionOutputParameter.mask: array expected");
                    message.mask = [];
                    for (var i = 0; i < object.mask.length; ++i)
                        message.mask[i] = object.mask[i] >>> 0;
                }
                return message;
            };
    
            Yolov3DetectionOutputParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.biases = [];
                    object.anchors_scale = [];
                    object.mask = [];
                }
                if (options.defaults) {
                    object.num_classes = 20;
                    object.num_box = 3;
                    object.confidence_threshold = 0.01;
                    object.nms_threshold = 0.45;
                    object.mask_group_num = 2;
                }
                if (message.num_classes != null && message.hasOwnProperty("num_classes"))
                    object.num_classes = message.num_classes;
                if (message.num_box != null && message.hasOwnProperty("num_box"))
                    object.num_box = message.num_box;
                if (message.confidence_threshold != null && message.hasOwnProperty("confidence_threshold"))
                    object.confidence_threshold = options.json && !isFinite(message.confidence_threshold) ? String(message.confidence_threshold) : message.confidence_threshold;
                if (message.nms_threshold != null && message.hasOwnProperty("nms_threshold"))
                    object.nms_threshold = options.json && !isFinite(message.nms_threshold) ? String(message.nms_threshold) : message.nms_threshold;
                if (message.biases && message.biases.length) {
                    object.biases = [];
                    for (var j = 0; j < message.biases.length; ++j)
                        object.biases[j] = options.json && !isFinite(message.biases[j]) ? String(message.biases[j]) : message.biases[j];
                }
                if (message.anchors_scale && message.anchors_scale.length) {
                    object.anchors_scale = [];
                    for (var j = 0; j < message.anchors_scale.length; ++j)
                        object.anchors_scale[j] = message.anchors_scale[j];
                }
                if (message.mask_group_num != null && message.hasOwnProperty("mask_group_num"))
                    object.mask_group_num = message.mask_group_num;
                if (message.mask && message.mask.length) {
                    object.mask = [];
                    for (var j = 0; j < message.mask.length; ++j)
                        object.mask[j] = message.mask[j];
                }
                return object;
            };
    
            Yolov3DetectionOutputParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Yolov3DetectionOutputParameter;
        })();
    
        caffe.Yolov3Parameter = (function() {
    
            function Yolov3Parameter(properties) {
                this.biases = [];
                this.mask = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            Yolov3Parameter.prototype.side = 13;
            Yolov3Parameter.prototype.num_class = 20;
            Yolov3Parameter.prototype.num = 5;
            Yolov3Parameter.prototype.object_scale = 1;
            Yolov3Parameter.prototype.class_scale = 1;
            Yolov3Parameter.prototype.noobject_scale = 0.5;
            Yolov3Parameter.prototype.coord_scale = 5;
            Yolov3Parameter.prototype.thresh = 0.2;
            Yolov3Parameter.prototype.anchors_scale = 32;
            Yolov3Parameter.prototype.biases = $util.emptyArray;
            Yolov3Parameter.prototype.mask = $util.emptyArray;
            Yolov3Parameter.prototype.use_logic_gradient = false;
    
            Yolov3Parameter.create = function create(properties) {
                return new Yolov3Parameter(properties);
            };
    
            Yolov3Parameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.Yolov3Parameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.side = reader.uint32();
                        break;
                    case 2:
                        message.num_class = reader.uint32();
                        break;
                    case 3:
                        message.num = reader.uint32();
                        break;
                    case 4:
                        message.object_scale = reader.float();
                        break;
                    case 5:
                        message.class_scale = reader.float();
                        break;
                    case 6:
                        message.noobject_scale = reader.float();
                        break;
                    case 7:
                        message.coord_scale = reader.float();
                        break;
                    case 8:
                        message.thresh = reader.float();
                        break;
                    case 10:
                        message.anchors_scale = reader.uint32();
                        break;
                    case 11:
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.biases.push(reader.float());
                        } else
                            message.biases.push(reader.float());
                        break;
                    case 12:
                        if (!(message.mask && message.mask.length))
                            message.mask = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.mask.push(reader.uint32());
                        } else
                            message.mask.push(reader.uint32());
                        break;
                    case 13:
                        message.use_logic_gradient = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            Yolov3Parameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.Yolov3Parameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "side":
                        message.side = reader.uint32();
                        break;
                    case "num_class":
                        message.num_class = reader.uint32();
                        break;
                    case "num":
                        message.num = reader.uint32();
                        break;
                    case "object_scale":
                        message.object_scale = reader.float();
                        break;
                    case "class_scale":
                        message.class_scale = reader.float();
                        break;
                    case "noobject_scale":
                        message.noobject_scale = reader.float();
                        break;
                    case "coord_scale":
                        message.coord_scale = reader.float();
                        break;
                    case "thresh":
                        message.thresh = reader.float();
                        break;
                    case "anchors_scale":
                        message.anchors_scale = reader.uint32();
                        break;
                    case "biases":
                        if (!(message.biases && message.biases.length))
                            message.biases = [];
                        message.biases.push(reader.float());
                        break;
                    case "mask":
                        if (!(message.mask && message.mask.length))
                            message.mask = [];
                        message.mask.push(reader.uint32());
                        break;
                    case "use_logic_gradient":
                        message.use_logic_gradient = reader.bool();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            Yolov3Parameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.side != null && message.hasOwnProperty("side"))
                    if (!$util.isInteger(message.side))
                        return "side: integer expected";
                if (message.num_class != null && message.hasOwnProperty("num_class"))
                    if (!$util.isInteger(message.num_class))
                        return "num_class: integer expected";
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.object_scale != null && message.hasOwnProperty("object_scale"))
                    if (typeof message.object_scale !== "number")
                        return "object_scale: number expected";
                if (message.class_scale != null && message.hasOwnProperty("class_scale"))
                    if (typeof message.class_scale !== "number")
                        return "class_scale: number expected";
                if (message.noobject_scale != null && message.hasOwnProperty("noobject_scale"))
                    if (typeof message.noobject_scale !== "number")
                        return "noobject_scale: number expected";
                if (message.coord_scale != null && message.hasOwnProperty("coord_scale"))
                    if (typeof message.coord_scale !== "number")
                        return "coord_scale: number expected";
                if (message.thresh != null && message.hasOwnProperty("thresh"))
                    if (typeof message.thresh !== "number")
                        return "thresh: number expected";
                if (message.anchors_scale != null && message.hasOwnProperty("anchors_scale"))
                    if (!$util.isInteger(message.anchors_scale))
                        return "anchors_scale: integer expected";
                if (message.biases != null && message.hasOwnProperty("biases")) {
                    if (!Array.isArray(message.biases))
                        return "biases: array expected";
                    for (var i = 0; i < message.biases.length; ++i)
                        if (typeof message.biases[i] !== "number")
                            return "biases: number[] expected";
                }
                if (message.mask != null && message.hasOwnProperty("mask")) {
                    if (!Array.isArray(message.mask))
                        return "mask: array expected";
                    for (var i = 0; i < message.mask.length; ++i)
                        if (!$util.isInteger(message.mask[i]))
                            return "mask: integer[] expected";
                }
                if (message.use_logic_gradient != null && message.hasOwnProperty("use_logic_gradient"))
                    if (typeof message.use_logic_gradient !== "boolean")
                        return "use_logic_gradient: boolean expected";
                return null;
            };
    
            Yolov3Parameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.Yolov3Parameter)
                    return object;
                var message = new $root.caffe.Yolov3Parameter();
                if (object.side != null)
                    message.side = object.side >>> 0;
                if (object.num_class != null)
                    message.num_class = object.num_class >>> 0;
                if (object.num != null)
                    message.num = object.num >>> 0;
                if (object.object_scale != null)
                    message.object_scale = Number(object.object_scale);
                if (object.class_scale != null)
                    message.class_scale = Number(object.class_scale);
                if (object.noobject_scale != null)
                    message.noobject_scale = Number(object.noobject_scale);
                if (object.coord_scale != null)
                    message.coord_scale = Number(object.coord_scale);
                if (object.thresh != null)
                    message.thresh = Number(object.thresh);
                if (object.anchors_scale != null)
                    message.anchors_scale = object.anchors_scale >>> 0;
                if (object.biases) {
                    if (!Array.isArray(object.biases))
                        throw TypeError(".caffe.Yolov3Parameter.biases: array expected");
                    message.biases = [];
                    for (var i = 0; i < object.biases.length; ++i)
                        message.biases[i] = Number(object.biases[i]);
                }
                if (object.mask) {
                    if (!Array.isArray(object.mask))
                        throw TypeError(".caffe.Yolov3Parameter.mask: array expected");
                    message.mask = [];
                    for (var i = 0; i < object.mask.length; ++i)
                        message.mask[i] = object.mask[i] >>> 0;
                }
                if (object.use_logic_gradient != null)
                    message.use_logic_gradient = Boolean(object.use_logic_gradient);
                return message;
            };
    
            Yolov3Parameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.biases = [];
                    object.mask = [];
                }
                if (options.defaults) {
                    object.side = 13;
                    object.num_class = 20;
                    object.num = 5;
                    object.object_scale = 1;
                    object.class_scale = 1;
                    object.noobject_scale = 0.5;
                    object.coord_scale = 5;
                    object.thresh = 0.2;
                    object.anchors_scale = 32;
                    object.use_logic_gradient = false;
                }
                if (message.side != null && message.hasOwnProperty("side"))
                    object.side = message.side;
                if (message.num_class != null && message.hasOwnProperty("num_class"))
                    object.num_class = message.num_class;
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.object_scale != null && message.hasOwnProperty("object_scale"))
                    object.object_scale = options.json && !isFinite(message.object_scale) ? String(message.object_scale) : message.object_scale;
                if (message.class_scale != null && message.hasOwnProperty("class_scale"))
                    object.class_scale = options.json && !isFinite(message.class_scale) ? String(message.class_scale) : message.class_scale;
                if (message.noobject_scale != null && message.hasOwnProperty("noobject_scale"))
                    object.noobject_scale = options.json && !isFinite(message.noobject_scale) ? String(message.noobject_scale) : message.noobject_scale;
                if (message.coord_scale != null && message.hasOwnProperty("coord_scale"))
                    object.coord_scale = options.json && !isFinite(message.coord_scale) ? String(message.coord_scale) : message.coord_scale;
                if (message.thresh != null && message.hasOwnProperty("thresh"))
                    object.thresh = options.json && !isFinite(message.thresh) ? String(message.thresh) : message.thresh;
                if (message.anchors_scale != null && message.hasOwnProperty("anchors_scale"))
                    object.anchors_scale = message.anchors_scale;
                if (message.biases && message.biases.length) {
                    object.biases = [];
                    for (var j = 0; j < message.biases.length; ++j)
                        object.biases[j] = options.json && !isFinite(message.biases[j]) ? String(message.biases[j]) : message.biases[j];
                }
                if (message.mask && message.mask.length) {
                    object.mask = [];
                    for (var j = 0; j < message.mask.length; ++j)
                        object.mask[j] = message.mask[j];
                }
                if (message.use_logic_gradient != null && message.hasOwnProperty("use_logic_gradient"))
                    object.use_logic_gradient = message.use_logic_gradient;
                return object;
            };
    
            Yolov3Parameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Yolov3Parameter;
        })();
    
        caffe.SqueezeConvolutionParameter = (function() {
    
            function SqueezeConvolutionParameter(properties) {
                this.pad = [];
                this.kernel_size = [];
                this.stride = [];
                this.dilation = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SqueezeConvolutionParameter.prototype.num_output = 0;
            SqueezeConvolutionParameter.prototype.bias_term = true;
            SqueezeConvolutionParameter.prototype.pad = $util.emptyArray;
            SqueezeConvolutionParameter.prototype.kernel_size = $util.emptyArray;
            SqueezeConvolutionParameter.prototype.stride = $util.emptyArray;
            SqueezeConvolutionParameter.prototype.dilation = $util.emptyArray;
            SqueezeConvolutionParameter.prototype.pad_h = 0;
            SqueezeConvolutionParameter.prototype.pad_w = 0;
            SqueezeConvolutionParameter.prototype.pad_type = 0;
            SqueezeConvolutionParameter.prototype.pad_l = 0;
            SqueezeConvolutionParameter.prototype.pad_r = 0;
            SqueezeConvolutionParameter.prototype.pad_t = 0;
            SqueezeConvolutionParameter.prototype.pad_b = 0;
            SqueezeConvolutionParameter.prototype.kernel_h = 0;
            SqueezeConvolutionParameter.prototype.kernel_w = 0;
            SqueezeConvolutionParameter.prototype.stride_h = 0;
            SqueezeConvolutionParameter.prototype.stride_w = 0;
            SqueezeConvolutionParameter.prototype.input_scale = 1;
            SqueezeConvolutionParameter.prototype.output_scale = 1;
            SqueezeConvolutionParameter.prototype.signed_saturate = false;
            SqueezeConvolutionParameter.prototype.group = 1;
            SqueezeConvolutionParameter.prototype.weight_filler = null;
            SqueezeConvolutionParameter.prototype.bias_filler = null;
            SqueezeConvolutionParameter.prototype.engine = 0;
            SqueezeConvolutionParameter.prototype.axis = 1;
            SqueezeConvolutionParameter.prototype.force_nd_im2col = false;
            SqueezeConvolutionParameter.prototype.gamma = 0.001;
            SqueezeConvolutionParameter.prototype.power = 1;
            SqueezeConvolutionParameter.prototype.iter_stop = 10000;
            SqueezeConvolutionParameter.prototype.c_rate = 3;
            SqueezeConvolutionParameter.prototype.weight_mask_filler = null;
            SqueezeConvolutionParameter.prototype.bias_mask_filler = null;
            SqueezeConvolutionParameter.prototype.dynamicsplicing = false;
            SqueezeConvolutionParameter.prototype.splicing_rate = 0.0001;
    
            SqueezeConvolutionParameter.create = function create(properties) {
                return new SqueezeConvolutionParameter(properties);
            };
    
            SqueezeConvolutionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SqueezeConvolutionParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_output = reader.uint32();
                        break;
                    case 2:
                        message.bias_term = reader.bool();
                        break;
                    case 3:
                        if (!(message.pad && message.pad.length))
                            message.pad = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.pad.push(reader.uint32());
                        } else
                            message.pad.push(reader.uint32());
                        break;
                    case 4:
                        if (!(message.kernel_size && message.kernel_size.length))
                            message.kernel_size = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.kernel_size.push(reader.uint32());
                        } else
                            message.kernel_size.push(reader.uint32());
                        break;
                    case 6:
                        if (!(message.stride && message.stride.length))
                            message.stride = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.stride.push(reader.uint32());
                        } else
                            message.stride.push(reader.uint32());
                        break;
                    case 24:
                        if (!(message.dilation && message.dilation.length))
                            message.dilation = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.dilation.push(reader.uint32());
                        } else
                            message.dilation.push(reader.uint32());
                        break;
                    case 9:
                        message.pad_h = reader.uint32();
                        break;
                    case 10:
                        message.pad_w = reader.uint32();
                        break;
                    case 29:
                        message.pad_type = reader.uint32();
                        break;
                    case 36:
                        message.pad_l = reader.uint32();
                        break;
                    case 37:
                        message.pad_r = reader.uint32();
                        break;
                    case 38:
                        message.pad_t = reader.uint32();
                        break;
                    case 39:
                        message.pad_b = reader.uint32();
                        break;
                    case 11:
                        message.kernel_h = reader.uint32();
                        break;
                    case 12:
                        message.kernel_w = reader.uint32();
                        break;
                    case 13:
                        message.stride_h = reader.uint32();
                        break;
                    case 14:
                        message.stride_w = reader.uint32();
                        break;
                    case 46:
                        message.input_scale = reader.double();
                        break;
                    case 47:
                        message.output_scale = reader.double();
                        break;
                    case 48:
                        message.signed_saturate = reader.bool();
                        break;
                    case 5:
                        message.group = reader.uint32();
                        break;
                    case 7:
                        message.weight_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.bias_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.engine = reader.int32();
                        break;
                    case 16:
                        message.axis = reader.int32();
                        break;
                    case 17:
                        message.force_nd_im2col = reader.bool();
                        break;
                    case 18:
                        message.gamma = reader.float();
                        break;
                    case 19:
                        message.power = reader.float();
                        break;
                    case 20:
                        message.iter_stop = reader.float();
                        break;
                    case 21:
                        message.c_rate = reader.float();
                        break;
                    case 22:
                        message.weight_mask_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 23:
                        message.bias_mask_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 25:
                        message.dynamicsplicing = reader.bool();
                        break;
                    case 26:
                        message.splicing_rate = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SqueezeConvolutionParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SqueezeConvolutionParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_output":
                        message.num_output = reader.uint32();
                        break;
                    case "bias_term":
                        message.bias_term = reader.bool();
                        break;
                    case "pad":
                        if (!(message.pad && message.pad.length))
                            message.pad = [];
                        message.pad.push(reader.uint32());
                        break;
                    case "kernel_size":
                        if (!(message.kernel_size && message.kernel_size.length))
                            message.kernel_size = [];
                        message.kernel_size.push(reader.uint32());
                        break;
                    case "stride":
                        if (!(message.stride && message.stride.length))
                            message.stride = [];
                        message.stride.push(reader.uint32());
                        break;
                    case "dilation":
                        if (!(message.dilation && message.dilation.length))
                            message.dilation = [];
                        message.dilation.push(reader.uint32());
                        break;
                    case "pad_h":
                        message.pad_h = reader.uint32();
                        break;
                    case "pad_w":
                        message.pad_w = reader.uint32();
                        break;
                    case "pad_type":
                        message.pad_type = reader.uint32();
                        break;
                    case "pad_l":
                        message.pad_l = reader.uint32();
                        break;
                    case "pad_r":
                        message.pad_r = reader.uint32();
                        break;
                    case "pad_t":
                        message.pad_t = reader.uint32();
                        break;
                    case "pad_b":
                        message.pad_b = reader.uint32();
                        break;
                    case "kernel_h":
                        message.kernel_h = reader.uint32();
                        break;
                    case "kernel_w":
                        message.kernel_w = reader.uint32();
                        break;
                    case "stride_h":
                        message.stride_h = reader.uint32();
                        break;
                    case "stride_w":
                        message.stride_w = reader.uint32();
                        break;
                    case "input_scale":
                        message.input_scale = reader.double();
                        break;
                    case "output_scale":
                        message.output_scale = reader.double();
                        break;
                    case "signed_saturate":
                        message.signed_saturate = reader.bool();
                        break;
                    case "group":
                        message.group = reader.uint32();
                        break;
                    case "weight_filler":
                        message.weight_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_filler":
                        message.bias_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "engine":
                        message.engine = reader.enum($root.caffe.SqueezeConvolutionParameter.Engine);
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "force_nd_im2col":
                        message.force_nd_im2col = reader.bool();
                        break;
                    case "gamma":
                        message.gamma = reader.float();
                        break;
                    case "power":
                        message.power = reader.float();
                        break;
                    case "iter_stop":
                        message.iter_stop = reader.float();
                        break;
                    case "c_rate":
                        message.c_rate = reader.float();
                        break;
                    case "weight_mask_filler":
                        message.weight_mask_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_mask_filler":
                        message.bias_mask_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "dynamicsplicing":
                        message.dynamicsplicing = reader.bool();
                        break;
                    case "splicing_rate":
                        message.splicing_rate = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SqueezeConvolutionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    if (!$util.isInteger(message.num_output))
                        return "num_output: integer expected";
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    if (typeof message.bias_term !== "boolean")
                        return "bias_term: boolean expected";
                if (message.pad != null && message.hasOwnProperty("pad")) {
                    if (!Array.isArray(message.pad))
                        return "pad: array expected";
                    for (var i = 0; i < message.pad.length; ++i)
                        if (!$util.isInteger(message.pad[i]))
                            return "pad: integer[] expected";
                }
                if (message.kernel_size != null && message.hasOwnProperty("kernel_size")) {
                    if (!Array.isArray(message.kernel_size))
                        return "kernel_size: array expected";
                    for (var i = 0; i < message.kernel_size.length; ++i)
                        if (!$util.isInteger(message.kernel_size[i]))
                            return "kernel_size: integer[] expected";
                }
                if (message.stride != null && message.hasOwnProperty("stride")) {
                    if (!Array.isArray(message.stride))
                        return "stride: array expected";
                    for (var i = 0; i < message.stride.length; ++i)
                        if (!$util.isInteger(message.stride[i]))
                            return "stride: integer[] expected";
                }
                if (message.dilation != null && message.hasOwnProperty("dilation")) {
                    if (!Array.isArray(message.dilation))
                        return "dilation: array expected";
                    for (var i = 0; i < message.dilation.length; ++i)
                        if (!$util.isInteger(message.dilation[i]))
                            return "dilation: integer[] expected";
                }
                if (message.pad_h != null && message.hasOwnProperty("pad_h"))
                    if (!$util.isInteger(message.pad_h))
                        return "pad_h: integer expected";
                if (message.pad_w != null && message.hasOwnProperty("pad_w"))
                    if (!$util.isInteger(message.pad_w))
                        return "pad_w: integer expected";
                if (message.pad_type != null && message.hasOwnProperty("pad_type"))
                    if (!$util.isInteger(message.pad_type))
                        return "pad_type: integer expected";
                if (message.pad_l != null && message.hasOwnProperty("pad_l"))
                    if (!$util.isInteger(message.pad_l))
                        return "pad_l: integer expected";
                if (message.pad_r != null && message.hasOwnProperty("pad_r"))
                    if (!$util.isInteger(message.pad_r))
                        return "pad_r: integer expected";
                if (message.pad_t != null && message.hasOwnProperty("pad_t"))
                    if (!$util.isInteger(message.pad_t))
                        return "pad_t: integer expected";
                if (message.pad_b != null && message.hasOwnProperty("pad_b"))
                    if (!$util.isInteger(message.pad_b))
                        return "pad_b: integer expected";
                if (message.kernel_h != null && message.hasOwnProperty("kernel_h"))
                    if (!$util.isInteger(message.kernel_h))
                        return "kernel_h: integer expected";
                if (message.kernel_w != null && message.hasOwnProperty("kernel_w"))
                    if (!$util.isInteger(message.kernel_w))
                        return "kernel_w: integer expected";
                if (message.stride_h != null && message.hasOwnProperty("stride_h"))
                    if (!$util.isInteger(message.stride_h))
                        return "stride_h: integer expected";
                if (message.stride_w != null && message.hasOwnProperty("stride_w"))
                    if (!$util.isInteger(message.stride_w))
                        return "stride_w: integer expected";
                if (message.input_scale != null && message.hasOwnProperty("input_scale"))
                    if (typeof message.input_scale !== "number")
                        return "input_scale: number expected";
                if (message.output_scale != null && message.hasOwnProperty("output_scale"))
                    if (typeof message.output_scale !== "number")
                        return "output_scale: number expected";
                if (message.signed_saturate != null && message.hasOwnProperty("signed_saturate"))
                    if (typeof message.signed_saturate !== "boolean")
                        return "signed_saturate: boolean expected";
                if (message.group != null && message.hasOwnProperty("group"))
                    if (!$util.isInteger(message.group))
                        return "group: integer expected";
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.weight_filler);
                    if (error)
                        return "weight_filler." + error;
                }
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_filler);
                    if (error)
                        return "bias_filler." + error;
                }
                if (message.engine != null && message.hasOwnProperty("engine"))
                    switch (message.engine) {
                    default:
                        return "engine: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.force_nd_im2col != null && message.hasOwnProperty("force_nd_im2col"))
                    if (typeof message.force_nd_im2col !== "boolean")
                        return "force_nd_im2col: boolean expected";
                if (message.gamma != null && message.hasOwnProperty("gamma"))
                    if (typeof message.gamma !== "number")
                        return "gamma: number expected";
                if (message.power != null && message.hasOwnProperty("power"))
                    if (typeof message.power !== "number")
                        return "power: number expected";
                if (message.iter_stop != null && message.hasOwnProperty("iter_stop"))
                    if (typeof message.iter_stop !== "number")
                        return "iter_stop: number expected";
                if (message.c_rate != null && message.hasOwnProperty("c_rate"))
                    if (typeof message.c_rate !== "number")
                        return "c_rate: number expected";
                if (message.weight_mask_filler != null && message.hasOwnProperty("weight_mask_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.weight_mask_filler);
                    if (error)
                        return "weight_mask_filler." + error;
                }
                if (message.bias_mask_filler != null && message.hasOwnProperty("bias_mask_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_mask_filler);
                    if (error)
                        return "bias_mask_filler." + error;
                }
                if (message.dynamicsplicing != null && message.hasOwnProperty("dynamicsplicing"))
                    if (typeof message.dynamicsplicing !== "boolean")
                        return "dynamicsplicing: boolean expected";
                if (message.splicing_rate != null && message.hasOwnProperty("splicing_rate"))
                    if (typeof message.splicing_rate !== "number")
                        return "splicing_rate: number expected";
                return null;
            };
    
            SqueezeConvolutionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SqueezeConvolutionParameter)
                    return object;
                var message = new $root.caffe.SqueezeConvolutionParameter();
                if (object.num_output != null)
                    message.num_output = object.num_output >>> 0;
                if (object.bias_term != null)
                    message.bias_term = Boolean(object.bias_term);
                if (object.pad) {
                    if (!Array.isArray(object.pad))
                        throw TypeError(".caffe.SqueezeConvolutionParameter.pad: array expected");
                    message.pad = [];
                    for (var i = 0; i < object.pad.length; ++i)
                        message.pad[i] = object.pad[i] >>> 0;
                }
                if (object.kernel_size) {
                    if (!Array.isArray(object.kernel_size))
                        throw TypeError(".caffe.SqueezeConvolutionParameter.kernel_size: array expected");
                    message.kernel_size = [];
                    for (var i = 0; i < object.kernel_size.length; ++i)
                        message.kernel_size[i] = object.kernel_size[i] >>> 0;
                }
                if (object.stride) {
                    if (!Array.isArray(object.stride))
                        throw TypeError(".caffe.SqueezeConvolutionParameter.stride: array expected");
                    message.stride = [];
                    for (var i = 0; i < object.stride.length; ++i)
                        message.stride[i] = object.stride[i] >>> 0;
                }
                if (object.dilation) {
                    if (!Array.isArray(object.dilation))
                        throw TypeError(".caffe.SqueezeConvolutionParameter.dilation: array expected");
                    message.dilation = [];
                    for (var i = 0; i < object.dilation.length; ++i)
                        message.dilation[i] = object.dilation[i] >>> 0;
                }
                if (object.pad_h != null)
                    message.pad_h = object.pad_h >>> 0;
                if (object.pad_w != null)
                    message.pad_w = object.pad_w >>> 0;
                if (object.pad_type != null)
                    message.pad_type = object.pad_type >>> 0;
                if (object.pad_l != null)
                    message.pad_l = object.pad_l >>> 0;
                if (object.pad_r != null)
                    message.pad_r = object.pad_r >>> 0;
                if (object.pad_t != null)
                    message.pad_t = object.pad_t >>> 0;
                if (object.pad_b != null)
                    message.pad_b = object.pad_b >>> 0;
                if (object.kernel_h != null)
                    message.kernel_h = object.kernel_h >>> 0;
                if (object.kernel_w != null)
                    message.kernel_w = object.kernel_w >>> 0;
                if (object.stride_h != null)
                    message.stride_h = object.stride_h >>> 0;
                if (object.stride_w != null)
                    message.stride_w = object.stride_w >>> 0;
                if (object.input_scale != null)
                    message.input_scale = Number(object.input_scale);
                if (object.output_scale != null)
                    message.output_scale = Number(object.output_scale);
                if (object.signed_saturate != null)
                    message.signed_saturate = Boolean(object.signed_saturate);
                if (object.group != null)
                    message.group = object.group >>> 0;
                if (object.weight_filler != null) {
                    if (typeof object.weight_filler !== "object")
                        throw TypeError(".caffe.SqueezeConvolutionParameter.weight_filler: object expected");
                    message.weight_filler = $root.caffe.FillerParameter.fromObject(object.weight_filler);
                }
                if (object.bias_filler != null) {
                    if (typeof object.bias_filler !== "object")
                        throw TypeError(".caffe.SqueezeConvolutionParameter.bias_filler: object expected");
                    message.bias_filler = $root.caffe.FillerParameter.fromObject(object.bias_filler);
                }
                switch (object.engine) {
                case "DEFAULT":
                case 0:
                    message.engine = 0;
                    break;
                case "CAFFE":
                case 1:
                    message.engine = 1;
                    break;
                case "CUDNN":
                case 2:
                    message.engine = 2;
                    break;
                }
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.force_nd_im2col != null)
                    message.force_nd_im2col = Boolean(object.force_nd_im2col);
                if (object.gamma != null)
                    message.gamma = Number(object.gamma);
                if (object.power != null)
                    message.power = Number(object.power);
                if (object.iter_stop != null)
                    message.iter_stop = Number(object.iter_stop);
                if (object.c_rate != null)
                    message.c_rate = Number(object.c_rate);
                if (object.weight_mask_filler != null) {
                    if (typeof object.weight_mask_filler !== "object")
                        throw TypeError(".caffe.SqueezeConvolutionParameter.weight_mask_filler: object expected");
                    message.weight_mask_filler = $root.caffe.FillerParameter.fromObject(object.weight_mask_filler);
                }
                if (object.bias_mask_filler != null) {
                    if (typeof object.bias_mask_filler !== "object")
                        throw TypeError(".caffe.SqueezeConvolutionParameter.bias_mask_filler: object expected");
                    message.bias_mask_filler = $root.caffe.FillerParameter.fromObject(object.bias_mask_filler);
                }
                if (object.dynamicsplicing != null)
                    message.dynamicsplicing = Boolean(object.dynamicsplicing);
                if (object.splicing_rate != null)
                    message.splicing_rate = Number(object.splicing_rate);
                return message;
            };
    
            SqueezeConvolutionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.pad = [];
                    object.kernel_size = [];
                    object.stride = [];
                    object.dilation = [];
                }
                if (options.defaults) {
                    object.num_output = 0;
                    object.bias_term = true;
                    object.group = 1;
                    object.weight_filler = null;
                    object.bias_filler = null;
                    object.pad_h = 0;
                    object.pad_w = 0;
                    object.kernel_h = 0;
                    object.kernel_w = 0;
                    object.stride_h = 0;
                    object.stride_w = 0;
                    object.engine = options.enums === String ? "DEFAULT" : 0;
                    object.axis = 1;
                    object.force_nd_im2col = false;
                    object.gamma = 0.001;
                    object.power = 1;
                    object.iter_stop = 10000;
                    object.c_rate = 3;
                    object.weight_mask_filler = null;
                    object.bias_mask_filler = null;
                    object.dynamicsplicing = false;
                    object.splicing_rate = 0.0001;
                    object.pad_type = 0;
                    object.pad_l = 0;
                    object.pad_r = 0;
                    object.pad_t = 0;
                    object.pad_b = 0;
                    object.input_scale = 1;
                    object.output_scale = 1;
                    object.signed_saturate = false;
                }
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    object.num_output = message.num_output;
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    object.bias_term = message.bias_term;
                if (message.pad && message.pad.length) {
                    object.pad = [];
                    for (var j = 0; j < message.pad.length; ++j)
                        object.pad[j] = message.pad[j];
                }
                if (message.kernel_size && message.kernel_size.length) {
                    object.kernel_size = [];
                    for (var j = 0; j < message.kernel_size.length; ++j)
                        object.kernel_size[j] = message.kernel_size[j];
                }
                if (message.group != null && message.hasOwnProperty("group"))
                    object.group = message.group;
                if (message.stride && message.stride.length) {
                    object.stride = [];
                    for (var j = 0; j < message.stride.length; ++j)
                        object.stride[j] = message.stride[j];
                }
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler"))
                    object.weight_filler = $root.caffe.FillerParameter.toObject(message.weight_filler, options);
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler"))
                    object.bias_filler = $root.caffe.FillerParameter.toObject(message.bias_filler, options);
                if (message.pad_h != null && message.hasOwnProperty("pad_h"))
                    object.pad_h = message.pad_h;
                if (message.pad_w != null && message.hasOwnProperty("pad_w"))
                    object.pad_w = message.pad_w;
                if (message.kernel_h != null && message.hasOwnProperty("kernel_h"))
                    object.kernel_h = message.kernel_h;
                if (message.kernel_w != null && message.hasOwnProperty("kernel_w"))
                    object.kernel_w = message.kernel_w;
                if (message.stride_h != null && message.hasOwnProperty("stride_h"))
                    object.stride_h = message.stride_h;
                if (message.stride_w != null && message.hasOwnProperty("stride_w"))
                    object.stride_w = message.stride_w;
                if (message.engine != null && message.hasOwnProperty("engine"))
                    object.engine = options.enums === String ? $root.caffe.SqueezeConvolutionParameter.Engine[message.engine] : message.engine;
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.force_nd_im2col != null && message.hasOwnProperty("force_nd_im2col"))
                    object.force_nd_im2col = message.force_nd_im2col;
                if (message.gamma != null && message.hasOwnProperty("gamma"))
                    object.gamma = options.json && !isFinite(message.gamma) ? String(message.gamma) : message.gamma;
                if (message.power != null && message.hasOwnProperty("power"))
                    object.power = options.json && !isFinite(message.power) ? String(message.power) : message.power;
                if (message.iter_stop != null && message.hasOwnProperty("iter_stop"))
                    object.iter_stop = options.json && !isFinite(message.iter_stop) ? String(message.iter_stop) : message.iter_stop;
                if (message.c_rate != null && message.hasOwnProperty("c_rate"))
                    object.c_rate = options.json && !isFinite(message.c_rate) ? String(message.c_rate) : message.c_rate;
                if (message.weight_mask_filler != null && message.hasOwnProperty("weight_mask_filler"))
                    object.weight_mask_filler = $root.caffe.FillerParameter.toObject(message.weight_mask_filler, options);
                if (message.bias_mask_filler != null && message.hasOwnProperty("bias_mask_filler"))
                    object.bias_mask_filler = $root.caffe.FillerParameter.toObject(message.bias_mask_filler, options);
                if (message.dilation && message.dilation.length) {
                    object.dilation = [];
                    for (var j = 0; j < message.dilation.length; ++j)
                        object.dilation[j] = message.dilation[j];
                }
                if (message.dynamicsplicing != null && message.hasOwnProperty("dynamicsplicing"))
                    object.dynamicsplicing = message.dynamicsplicing;
                if (message.splicing_rate != null && message.hasOwnProperty("splicing_rate"))
                    object.splicing_rate = options.json && !isFinite(message.splicing_rate) ? String(message.splicing_rate) : message.splicing_rate;
                if (message.pad_type != null && message.hasOwnProperty("pad_type"))
                    object.pad_type = message.pad_type;
                if (message.pad_l != null && message.hasOwnProperty("pad_l"))
                    object.pad_l = message.pad_l;
                if (message.pad_r != null && message.hasOwnProperty("pad_r"))
                    object.pad_r = message.pad_r;
                if (message.pad_t != null && message.hasOwnProperty("pad_t"))
                    object.pad_t = message.pad_t;
                if (message.pad_b != null && message.hasOwnProperty("pad_b"))
                    object.pad_b = message.pad_b;
                if (message.input_scale != null && message.hasOwnProperty("input_scale"))
                    object.input_scale = options.json && !isFinite(message.input_scale) ? String(message.input_scale) : message.input_scale;
                if (message.output_scale != null && message.hasOwnProperty("output_scale"))
                    object.output_scale = options.json && !isFinite(message.output_scale) ? String(message.output_scale) : message.output_scale;
                if (message.signed_saturate != null && message.hasOwnProperty("signed_saturate"))
                    object.signed_saturate = message.signed_saturate;
                return object;
            };
    
            SqueezeConvolutionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            SqueezeConvolutionParameter.Engine = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "CAFFE"] = 1;
                values[valuesById[2] = "CUDNN"] = 2;
                return values;
            })();
    
            return SqueezeConvolutionParameter;
        })();
    
        caffe.SqueezeInnerProductParameter = (function() {
    
            function SqueezeInnerProductParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SqueezeInnerProductParameter.prototype.num_output = 0;
            SqueezeInnerProductParameter.prototype.bias_term = true;
            SqueezeInnerProductParameter.prototype.weight_filler = null;
            SqueezeInnerProductParameter.prototype.bias_filler = null;
            SqueezeInnerProductParameter.prototype.axis = 1;
            SqueezeInnerProductParameter.prototype.transpose = false;
            SqueezeInnerProductParameter.prototype.gamma = 0.001;
            SqueezeInnerProductParameter.prototype.power = 1;
            SqueezeInnerProductParameter.prototype.iter_stop = 8000;
            SqueezeInnerProductParameter.prototype.c_rate = 3;
            SqueezeInnerProductParameter.prototype.weight_mask_filler = null;
            SqueezeInnerProductParameter.prototype.bias_mask_filler = null;
            SqueezeInnerProductParameter.prototype.dynamicsplicing = false;
            SqueezeInnerProductParameter.prototype.splicing_rate = 0.001;
    
            SqueezeInnerProductParameter.create = function create(properties) {
                return new SqueezeInnerProductParameter(properties);
            };
    
            SqueezeInnerProductParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SqueezeInnerProductParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.num_output = reader.uint32();
                        break;
                    case 2:
                        message.bias_term = reader.bool();
                        break;
                    case 3:
                        message.weight_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.bias_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.axis = reader.int32();
                        break;
                    case 6:
                        message.transpose = reader.bool();
                        break;
                    case 7:
                        message.gamma = reader.float();
                        break;
                    case 8:
                        message.power = reader.float();
                        break;
                    case 9:
                        message.iter_stop = reader.float();
                        break;
                    case 10:
                        message.c_rate = reader.float();
                        break;
                    case 11:
                        message.weight_mask_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.bias_mask_filler = $root.caffe.FillerParameter.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.dynamicsplicing = reader.bool();
                        break;
                    case 14:
                        message.splicing_rate = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SqueezeInnerProductParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SqueezeInnerProductParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "num_output":
                        message.num_output = reader.uint32();
                        break;
                    case "bias_term":
                        message.bias_term = reader.bool();
                        break;
                    case "weight_filler":
                        message.weight_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_filler":
                        message.bias_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "axis":
                        message.axis = reader.int32();
                        break;
                    case "transpose":
                        message.transpose = reader.bool();
                        break;
                    case "gamma":
                        message.gamma = reader.float();
                        break;
                    case "power":
                        message.power = reader.float();
                        break;
                    case "iter_stop":
                        message.iter_stop = reader.float();
                        break;
                    case "c_rate":
                        message.c_rate = reader.float();
                        break;
                    case "weight_mask_filler":
                        message.weight_mask_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "bias_mask_filler":
                        message.bias_mask_filler = $root.caffe.FillerParameter.decodeText(reader, true);
                        break;
                    case "dynamicsplicing":
                        message.dynamicsplicing = reader.bool();
                        break;
                    case "splicing_rate":
                        message.splicing_rate = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SqueezeInnerProductParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    if (!$util.isInteger(message.num_output))
                        return "num_output: integer expected";
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    if (typeof message.bias_term !== "boolean")
                        return "bias_term: boolean expected";
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.weight_filler);
                    if (error)
                        return "weight_filler." + error;
                }
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_filler);
                    if (error)
                        return "bias_filler." + error;
                }
                if (message.axis != null && message.hasOwnProperty("axis"))
                    if (!$util.isInteger(message.axis))
                        return "axis: integer expected";
                if (message.transpose != null && message.hasOwnProperty("transpose"))
                    if (typeof message.transpose !== "boolean")
                        return "transpose: boolean expected";
                if (message.gamma != null && message.hasOwnProperty("gamma"))
                    if (typeof message.gamma !== "number")
                        return "gamma: number expected";
                if (message.power != null && message.hasOwnProperty("power"))
                    if (typeof message.power !== "number")
                        return "power: number expected";
                if (message.iter_stop != null && message.hasOwnProperty("iter_stop"))
                    if (typeof message.iter_stop !== "number")
                        return "iter_stop: number expected";
                if (message.c_rate != null && message.hasOwnProperty("c_rate"))
                    if (typeof message.c_rate !== "number")
                        return "c_rate: number expected";
                if (message.weight_mask_filler != null && message.hasOwnProperty("weight_mask_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.weight_mask_filler);
                    if (error)
                        return "weight_mask_filler." + error;
                }
                if (message.bias_mask_filler != null && message.hasOwnProperty("bias_mask_filler")) {
                    var error = $root.caffe.FillerParameter.verify(message.bias_mask_filler);
                    if (error)
                        return "bias_mask_filler." + error;
                }
                if (message.dynamicsplicing != null && message.hasOwnProperty("dynamicsplicing"))
                    if (typeof message.dynamicsplicing !== "boolean")
                        return "dynamicsplicing: boolean expected";
                if (message.splicing_rate != null && message.hasOwnProperty("splicing_rate"))
                    if (typeof message.splicing_rate !== "number")
                        return "splicing_rate: number expected";
                return null;
            };
    
            SqueezeInnerProductParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SqueezeInnerProductParameter)
                    return object;
                var message = new $root.caffe.SqueezeInnerProductParameter();
                if (object.num_output != null)
                    message.num_output = object.num_output >>> 0;
                if (object.bias_term != null)
                    message.bias_term = Boolean(object.bias_term);
                if (object.weight_filler != null) {
                    if (typeof object.weight_filler !== "object")
                        throw TypeError(".caffe.SqueezeInnerProductParameter.weight_filler: object expected");
                    message.weight_filler = $root.caffe.FillerParameter.fromObject(object.weight_filler);
                }
                if (object.bias_filler != null) {
                    if (typeof object.bias_filler !== "object")
                        throw TypeError(".caffe.SqueezeInnerProductParameter.bias_filler: object expected");
                    message.bias_filler = $root.caffe.FillerParameter.fromObject(object.bias_filler);
                }
                if (object.axis != null)
                    message.axis = object.axis | 0;
                if (object.transpose != null)
                    message.transpose = Boolean(object.transpose);
                if (object.gamma != null)
                    message.gamma = Number(object.gamma);
                if (object.power != null)
                    message.power = Number(object.power);
                if (object.iter_stop != null)
                    message.iter_stop = Number(object.iter_stop);
                if (object.c_rate != null)
                    message.c_rate = Number(object.c_rate);
                if (object.weight_mask_filler != null) {
                    if (typeof object.weight_mask_filler !== "object")
                        throw TypeError(".caffe.SqueezeInnerProductParameter.weight_mask_filler: object expected");
                    message.weight_mask_filler = $root.caffe.FillerParameter.fromObject(object.weight_mask_filler);
                }
                if (object.bias_mask_filler != null) {
                    if (typeof object.bias_mask_filler !== "object")
                        throw TypeError(".caffe.SqueezeInnerProductParameter.bias_mask_filler: object expected");
                    message.bias_mask_filler = $root.caffe.FillerParameter.fromObject(object.bias_mask_filler);
                }
                if (object.dynamicsplicing != null)
                    message.dynamicsplicing = Boolean(object.dynamicsplicing);
                if (object.splicing_rate != null)
                    message.splicing_rate = Number(object.splicing_rate);
                return message;
            };
    
            SqueezeInnerProductParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.num_output = 0;
                    object.bias_term = true;
                    object.weight_filler = null;
                    object.bias_filler = null;
                    object.axis = 1;
                    object.transpose = false;
                    object.gamma = 0.001;
                    object.power = 1;
                    object.iter_stop = 8000;
                    object.c_rate = 3;
                    object.weight_mask_filler = null;
                    object.bias_mask_filler = null;
                    object.dynamicsplicing = false;
                    object.splicing_rate = 0.001;
                }
                if (message.num_output != null && message.hasOwnProperty("num_output"))
                    object.num_output = message.num_output;
                if (message.bias_term != null && message.hasOwnProperty("bias_term"))
                    object.bias_term = message.bias_term;
                if (message.weight_filler != null && message.hasOwnProperty("weight_filler"))
                    object.weight_filler = $root.caffe.FillerParameter.toObject(message.weight_filler, options);
                if (message.bias_filler != null && message.hasOwnProperty("bias_filler"))
                    object.bias_filler = $root.caffe.FillerParameter.toObject(message.bias_filler, options);
                if (message.axis != null && message.hasOwnProperty("axis"))
                    object.axis = message.axis;
                if (message.transpose != null && message.hasOwnProperty("transpose"))
                    object.transpose = message.transpose;
                if (message.gamma != null && message.hasOwnProperty("gamma"))
                    object.gamma = options.json && !isFinite(message.gamma) ? String(message.gamma) : message.gamma;
                if (message.power != null && message.hasOwnProperty("power"))
                    object.power = options.json && !isFinite(message.power) ? String(message.power) : message.power;
                if (message.iter_stop != null && message.hasOwnProperty("iter_stop"))
                    object.iter_stop = options.json && !isFinite(message.iter_stop) ? String(message.iter_stop) : message.iter_stop;
                if (message.c_rate != null && message.hasOwnProperty("c_rate"))
                    object.c_rate = options.json && !isFinite(message.c_rate) ? String(message.c_rate) : message.c_rate;
                if (message.weight_mask_filler != null && message.hasOwnProperty("weight_mask_filler"))
                    object.weight_mask_filler = $root.caffe.FillerParameter.toObject(message.weight_mask_filler, options);
                if (message.bias_mask_filler != null && message.hasOwnProperty("bias_mask_filler"))
                    object.bias_mask_filler = $root.caffe.FillerParameter.toObject(message.bias_mask_filler, options);
                if (message.dynamicsplicing != null && message.hasOwnProperty("dynamicsplicing"))
                    object.dynamicsplicing = message.dynamicsplicing;
                if (message.splicing_rate != null && message.hasOwnProperty("splicing_rate"))
                    object.splicing_rate = options.json && !isFinite(message.splicing_rate) ? String(message.splicing_rate) : message.splicing_rate;
                return object;
            };
    
            SqueezeInnerProductParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SqueezeInnerProductParameter;
        })();
    
        caffe.SmoothL1LossParameter = (function() {
    
            function SmoothL1LossParameter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            SmoothL1LossParameter.prototype.sigma = 1;
    
            SmoothL1LossParameter.create = function create(properties) {
                return new SmoothL1LossParameter(properties);
            };
    
            SmoothL1LossParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.caffe.SmoothL1LossParameter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sigma = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            SmoothL1LossParameter.decodeText = function decodeText(reader, block) {
                if (!(reader instanceof $TextReader))
                    reader = $TextReader.create(reader);
                var message = new $root.caffe.SmoothL1LossParameter();
                reader.start(block);
                while (!reader.end(block)) {
                    var tag = reader.tag();
                    switch (tag) {
                    case "sigma":
                        message.sigma = reader.float();
                        break;
                    default:
                        reader.handle(tag);
                        break;
                    }
                }
                return message;
            };
    
            SmoothL1LossParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sigma != null && message.hasOwnProperty("sigma"))
                    if (typeof message.sigma !== "number")
                        return "sigma: number expected";
                return null;
            };
    
            SmoothL1LossParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.caffe.SmoothL1LossParameter)
                    return object;
                var message = new $root.caffe.SmoothL1LossParameter();
                if (object.sigma != null)
                    message.sigma = Number(object.sigma);
                return message;
            };
    
            SmoothL1LossParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.sigma = 1;
                if (message.sigma != null && message.hasOwnProperty("sigma"))
                    object.sigma = options.json && !isFinite(message.sigma) ? String(message.sigma) : message.sigma;
                return object;
            };
    
            SmoothL1LossParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SmoothL1LossParameter;
        })();
    
        return caffe;
    })();

    return $root;
})(protobuf);

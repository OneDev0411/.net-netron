[
  {
    "name": "ATen",
    "schema": {
      "description": "Experimental allowing ATen operations to be accessed directly from Caffe2\nto allow for quick prototyping when ONNX is missing standard versions of\nand op",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Arbitrary input",
          "name": "input",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 2147483647,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Arbitrary output",
          "name": "output",
          "option": "variadic",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to bool, int32, int64, float16, float, double tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Abs",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Absolute takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the absolute is, y = abs(x), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Abs',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.abs(x)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_abs')",
          "summary": "abs"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Abs",
    "schema": {
      "description": "Absolute takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the absolute is, y = abs(x), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Abs',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.abs(x)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_abs')",
          "summary": "abs"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to all numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Acos",
    "schema": {
      "description": "Calculates the arccosine (inverse of cosine) of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Acos',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-0.5, 0, 0.5]).astype(np.float32)\ny = np.arccos(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_acos_example')\n\nx = np.random.rand(3, 4, 5).astype(np.float32)\ny = np.arccos(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_acos')",
          "summary": "acos"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The arccosine of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Acosh",
    "schema": {
      "description": "Calculates the hyperbolic arccosine of the given input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Acosh',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([10, np.e, 1]).astype(np.float32)\ny = np.arccosh(x)  # expected output [2.99322295,  1.65745449,  0.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_acosh_example')\n\nx = np.random.uniform(1.0, 10.0, (3, 4, 5)).astype(np.float32)\ny = np.arccosh(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_acosh')",
          "summary": "acosh"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The hyperbolic arccosine values of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Add",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        },
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Performs element-wise binary addition (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of element size 1 (including a scalar tensor and any\ntensor with rank equal to or smaller than the first tensor), or having its\nshape as a contiguous subset of the first tensor's shape. The starting of the\nmutually equal shape is specified by the argument \"axis\", and if it is not set,\nsuffix matching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Add',\n    inputs=['x', 'y'],\n    outputs=['sum'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[x + y],\n       name='test_add')",
          "summary": "add"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Add',\n    inputs=['x', 'y'],\n    outputs=['sum'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[x + y],\n       name='test_add_bcast')",
          "summary": "add_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Add",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Performs element-wise binary addition (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of element size 1 (including a scalar tensor and any\ntensor with rank equal to or smaller than the first tensor), or having its\nshape as a contiguous subset of the first tensor's shape. The starting of the\nmutually equal shape is specified by the argument \"axis\", and if it is not set,\nsuffix matching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Add',\n    inputs=['x', 'y'],\n    outputs=['sum'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[x + y],\n       name='test_add')",
          "summary": "add"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Add',\n    inputs=['x', 'y'],\n    outputs=['sum'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[x + y],\n       name='test_add_bcast')",
          "summary": "add_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Add",
    "schema": {
      "description": "Performs element-wise binary addition (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Add',\n    inputs=['x', 'y'],\n    outputs=['sum'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[x + y],\n       name='test_add')",
          "summary": "add"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Add',\n    inputs=['x', 'y'],\n    outputs=['sum'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[x + y],\n       name='test_add_bcast')",
          "summary": "add_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same element type as two inputs",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Affine",
    "schema": {
      "attributes": [
        {
          "default": 1.0,
          "description": "Value of alpha",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "Value of beta",
          "name": "beta",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Affine takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the affine function, y = alpha * x + beta,\nis applied to the tensor elementwise.\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "1D input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "1D output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "And",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `and` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'And',\n    inputs=['x', 'y'],\n    outputs=['and'],\n)\n\n# 2d\nx = (np.random.randn(3, 4) > 0).astype(np.bool)\ny = (np.random.randn(3, 4) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and2d')\n\n# 3d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and3d')\n\n# 4d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and4d')",
          "summary": "and"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'And',\n    inputs=['x', 'y'],\n    outputs=['and'],\n)\n\n# 3d vs 1d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(5) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast3v1d')\n\n# 3d vs 2d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(4, 5) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast3v2d')\n\n# 4d vs 2d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(5, 6) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast4v2d')\n\n# 4d vs 3d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(4, 5, 6) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast4v3d')\n\n# 4d vs 4d\nx = (np.random.randn(1, 4, 1, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 1, 5, 6) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast4v4d')",
          "summary": "and_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input to boolean tensor.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "And",
    "schema": {
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `and` logical operation\nelementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'And',\n    inputs=['x', 'y'],\n    outputs=['and'],\n)\n\n# 2d\nx = (np.random.randn(3, 4) > 0).astype(np.bool)\ny = (np.random.randn(3, 4) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and2d')\n\n# 3d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and3d')\n\n# 4d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and4d')",
          "summary": "and"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'And',\n    inputs=['x', 'y'],\n    outputs=['and'],\n)\n\n# 3d vs 1d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(5) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast3v1d')\n\n# 3d vs 2d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(4, 5) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast3v2d')\n\n# 4d vs 2d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(5, 6) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast4v2d')\n\n# 4d vs 3d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(4, 5, 6) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast4v3d')\n\n# 4d vs 4d\nx = (np.random.randn(1, 4, 1, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 1, 5, 6) > 0).astype(np.bool)\nz = np.logical_and(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_and_bcast4v4d')",
          "summary": "and_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First input operand for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second input operand for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input to boolean tensor.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "ArgMax",
    "schema": {
      "attributes": [
        {
          "description": "The axis in which to compute the arg indices.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the indices of the max elements of the input tensor's element along the \nprovided axis. The resulted tensor has the same rank as the input if keepdims equal 1.\nIf keepdims equal 0, then the resulted tensor have the reduced dimension pruned. \nThe type of the output tensor is integer.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data = np.array([[2, 1], [3, 10]], dtype=np.float32)\nkeepdims = 1\nnode = onnx.helper.make_node(\n    'ArgMax',\n    inputs=['data'],\n    outputs=['result'],\n    keepdims=keepdims)\n\n# result: [[1], [1]]\nresult = argmax_use_numpy(data, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmax_default_axis_example')\n\ndata = np.random.uniform(-10, 10, [2, 3, 4]).astype(np.float32)\n# result's shape: [1, 3, 4]\nresult = argmax_use_numpy(data, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmax_default_axis_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "data = np.array([[2, 1], [3, 10]], dtype=np.float32)\naxis = 1\nkeepdims = 1\nnode = onnx.helper.make_node(\n    'ArgMax',\n    inputs=['data'],\n    outputs=['result'],\n    axis=axis,\n    keepdims=keepdims)\n# result: [[0], [1]]\nresult = argmax_use_numpy(data, axis=axis, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmax_keepdims_example')\n\ndata = np.random.uniform(-10, 10, [2, 3, 4]).astype(np.float32)\n# result's shape: [2, 1, 4]\nresult = argmax_use_numpy(data, axis=axis, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmax_keepdims_random')",
          "summary": "keepdims"
        },
        {
          "code": "data = np.array([[2, 1], [3, 10]], dtype=np.float32)\naxis = 1\nkeepdims = 0\nnode = onnx.helper.make_node(\n    'ArgMax',\n    inputs=['data'],\n    outputs=['result'],\n    axis=axis,\n    keepdims=keepdims)\n# result: [[0, 1]]\nresult = argmax_use_numpy(data, axis=axis, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmax_no_keepdims_example')\n\ndata = np.random.uniform(-10, 10, [2, 3, 4]).astype(np.float32)\n# result's shape: [2, 4]\nresult = argmax_use_numpy(data, axis=axis, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmax_no_keepdims_random')",
          "summary": "no_keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor with integer data type.",
          "name": "reduced",
          "type": "tensor(int64)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to all numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ArgMin",
    "schema": {
      "attributes": [
        {
          "description": "The axis in which to compute the arg indices.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the indices of the min elements of the input tensor's element along the \nprovided axis. The resulted tensor has the same rank as the input if keepdims equal 1.\nIf keepdims equal 0, then the resulted tensor have the reduced dimension pruned. \nThe type of the output tensor is integer.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data = np.array([[2, 1], [3, 10]], dtype=np.float32)\nkeepdims = 1\nnode = onnx.helper.make_node(\n    'ArgMin',\n    inputs=['data'],\n    outputs=['result'],\n    keepdims=keepdims)\n\n# result: [[0], [0]]\nresult = argmin_use_numpy(data, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmin_default_axis_example')\n\ndata = np.random.uniform(-10, 10, [2, 3, 4]).astype(np.float32)\n# result's shape: [1, 3, 4]\nresult = argmin_use_numpy(data, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmin_default_axis_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "data = np.array([[2, 1], [3, 10]], dtype=np.float32)\naxis = 1\nkeepdims = 1\nnode = onnx.helper.make_node(\n    'ArgMin',\n    inputs=['data'],\n    outputs=['result'],\n    axis=axis,\n    keepdims=keepdims)\n# result: [[1], [0]]\nresult = argmin_use_numpy(data, axis=axis, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmin_keepdims_example')\n\ndata = np.random.uniform(-10, 10, [2, 3, 4]).astype(np.float32)\n# result's shape: [2, 1, 4]\nresult = argmin_use_numpy(data, axis=axis, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmin_keepdims_random')",
          "summary": "keepdims"
        },
        {
          "code": "data = np.array([[2, 1], [3, 10]], dtype=np.float32)\naxis = 1\nkeepdims = 0\nnode = onnx.helper.make_node(\n    'ArgMin',\n    inputs=['data'],\n    outputs=['result'],\n    axis=axis,\n    keepdims=keepdims)\n# result: [[1, 0]]\nresult = argmin_use_numpy(data, axis=axis, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmin_no_keepdims_example')\n\ndata = np.random.uniform(-10, 10, [2, 3, 4]).astype(np.float32)\n# result's shape: [2, 4]\nresult = argmin_use_numpy(data, axis=axis, keepdims=keepdims)\nexpect(node, inputs=[data], outputs=[result], name='test_argmin_no_keepdims_random')",
          "summary": "no_keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor with integer data type.",
          "name": "reduced",
          "type": "tensor(int64)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to all numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ArrayFeatureExtractor",
    "schema": {
      "description": "Select elements of the input tensor based on the indices passed.<br>\n    The indices are applied to the last axes of the tensor.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be selected",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The indices, based on 0 as the first index of any dimension.",
          "name": "Y",
          "type": "tensor(int64)"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Selected output data as an array",
          "name": "Z",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)",
            "tensor(string)"
          ],
          "description": "The input must be a tensor of a numeric type or string. The output will be of the same tensor type.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Asin",
    "schema": {
      "description": "Calculates the arcsine (inverse of sine) of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Asin',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-0.5, 0, 0.5]).astype(np.float32)\ny = np.arcsin(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_asin_example')\n\nx = np.random.rand(3, 4, 5).astype(np.float32)\ny = np.arcsin(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_asin')",
          "summary": "asin"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The arcsine of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Asinh",
    "schema": {
      "description": "Calculates the hyperbolic arcsine of the given input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Asinh',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.arcsinh(x)  # expected output [-0.88137358,  0.,  0.88137358]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_asinh_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.arcsinh(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_asinh')",
          "summary": "asinh"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The hyperbolic arcsine values of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Atan",
    "schema": {
      "description": "Calculates the arctangent (inverse of tangent) of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Atan',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.arctan(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_atan_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.arctan(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_atan')",
          "summary": "atan"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The arctangent of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Atanh",
    "schema": {
      "description": "Calculates the hyperbolic arctangent of the given input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Atanh',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-0.5, 0, 0.5]).astype(np.float32)\ny = np.arctanh(x)  # expected output [-0.54930615,  0.,  0.54930615]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_atanh_example')\n\nx = np.random.uniform(0.0, 1.0, (3, 4, 5)).astype(np.float32)\ny = np.arctanh(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_atanh')",
          "summary": "atanh"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The hyperbolic arctangent values of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "AveragePool",
    "schema": {
      "attributes": [
        {
          "default": "NOTSET",
          "description": "auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that the output size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the beginning for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": true,
          "type": "int[]"
        },
        {
          "description": "Padding for the beginning and ending along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each axis.",
          "name": "pads",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Pool",
      "description": "AveragePool consumes an input tensor X and applies average pooling across\n the tensor according to kernel sizes, stride sizes, and pad lengths.\n average pooling consisting of computing the average on all values of a\n subset of the input tensor according to the kernel size and downsampling the\n data into the output tensor Y for further processing. The output spatial shape will be following:\n ```\n output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - kernel_spatial_shape[i]) / strides_spatial_shape[i] + 1)\n\n * pad_shape[i] is sum of pads along axis i\n ```\n\n `auto_pad` is a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following:\n ```\n VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - kernel_spatial_shape[i] + 1) / strides_spatial_shape[i])\n SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides_spatial_shape[i])\n ```\n And pad shape will be following if `SAME_UPPER` or `SAME_LOWER`:\n ```\n pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + kernel_spatial_shape[i] - input_spatial_shape[i]\n ```\n The output of each pooling window is divided by the number of elements exclude pad.\n ",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32]\noutput_shape: [1, 3, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2],\n)\nx = np.random.randn(1, 3, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = [2]\nstrides = [1]\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, [0], 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_1d_default')",
          "summary": "averagepool_1d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 31, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, (0, 0), 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_default')",
          "summary": "averagepool_2d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 28, 28]\noutput_shape: [1, 3, 30, 30]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    pads=[2, 2, 2, 2]\n)\nx = np.random.randn(1, 3, 28, 28).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (3, 3)\nstrides = (1, 1)\npad_bottom = 2\npad_top = 2\npad_right = 2\npad_left = 2\npad_shape = [pad_top + pad_bottom, pad_left + pad_right]\nout_shape = get_output_shape('VALID', np.add(x_shape[2:], pad_shape), kernel_shape, strides)\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_pads')",
          "summary": "averagepool_2d_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 28, 28]\noutput_shape: [1, 3, 30, 30]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    pads=[2, 2, 2, 2],\n    count_include_pad=1,\n)\nx = np.random.randn(1, 3, 28, 28).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (3, 3)\nstrides = (1, 1)\npad_bottom = 2\npad_top = 2\npad_right = 2\npad_left = 2\npad_shape = [pad_top + pad_bottom, pad_left + pad_right]\nout_shape = get_output_shape('VALID', np.add(x_shape[2:], pad_shape), kernel_shape, strides)\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=0)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'AVG', count_include_pad=1)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_pads_count_include_pad')",
          "summary": "averagepool_2d_pads_count_include_pad"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 5, 5]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    pads=[2, 2, 2, 2]\n\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[7, 7.5, 8, 8.5, 9],\n                [9.5, 10, 10.5, 11, 11.5],\n                [12, 12.5, 13, 13.5, 14],\n                [14.5, 15, 15.5, 16, 16.5],\n                [17, 17.5, 18, 18.5, 19]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_precomputed_pads')",
          "summary": "averagepool_2d_precomputed_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 5, 5]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    pads=[2, 2, 2, 2],\n    count_include_pad=1\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[2.5200, 3.6000, 4.8000, 4.0800, 3.2400],\n                [4.5600, 6.4000, 8.4000, 7.0400, 5.5200],\n                [7.2000, 10.0000, 13.0000, 10.8000, 8.4000],\n                [6.9600, 9.6000, 12.4000, 10.2400, 7.9200],\n                [6.1200, 8.4000, 10.8000, 8.8800, 6.8400]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_precomputed_pads_count_include_pad')",
          "summary": "averagepool_2d_precomputed_pads_count_include_pad"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 3, 3]\npad_shape: [2, 2] -> [1, 1, 1, 1] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    strides=[2, 2],\n    auto_pad='SAME_UPPER'\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[4, 5.5, 7],\n                [11.5, 13, 14.5],\n                [19, 20.5, 22]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_precomputed_same_upper')",
          "summary": "averagepool_2d_precomputed_same_upper"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 2, 2]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    strides=[2, 2]\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[4, 6],\n                [14, 16]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_precomputed_strides')",
          "summary": "averagepool_2d_precomputed_strides"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 32, 32]\npad_shape: [1, 1] -> [1, 0, 1, 0] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    auto_pad='SAME_LOWER'\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('SAME_LOWER', x_shape[2:], kernel_shape, strides)\npad_shape = get_pad_shape('SAME_LOWER', x_shape[2:], kernel_shape, strides, out_shape)\npad_bottom = pad_shape[0] // 2\npad_top = pad_shape[0] - pad_bottom\npad_right = pad_shape[1] // 2\npad_left = pad_shape[1] - pad_right\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_same_lower')",
          "summary": "averagepool_2d_same_lower"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 32, 32]\npad_shape: [1, 1] -> [0, 1, 0, 1] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    auto_pad='SAME_UPPER'\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('SAME_UPPER', x_shape[2:], kernel_shape, strides)\npad_shape = get_pad_shape('SAME_UPPER', x_shape[2:], kernel_shape, strides, out_shape)\npad_top = pad_shape[0] // 2\npad_bottom = pad_shape[0] - pad_top\npad_left = pad_shape[1] // 2\npad_right = pad_shape[1] - pad_left\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_same_upper')",
          "summary": "averagepool_2d_same_upper"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 10, 10]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    strides=[3, 3]\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (5, 5)\nstrides = (3, 3)\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, (0, 0), 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_strides')",
          "summary": "averagepool_2d_strides"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32, 32]\noutput_shape: [1, 3, 31, 31, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2, 2],\n)\nx = np.random.randn(1, 3, 32, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = [2, 2, 2]\nstrides = [1, 1, 1]\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, [0, 0, 0], 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_3d_default')",
          "summary": "averagepool_3d_default"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes. Floor value of the dimension is used",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "AveragePool",
    "schema": {
      "attributes": [
        {
          "default": "NOTSET",
          "description": "auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that the output size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the beginning for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "Whether include pad pixels when calculating values for the edges. Default is 0, doesn't count include pad.",
          "name": "count_include_pad",
          "required": false,
          "type": "int"
        },
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": true,
          "type": "int[]"
        },
        {
          "description": "Padding for the beginning and ending along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each axis.",
          "name": "pads",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Pool",
      "description": "AveragePool consumes an input tensor X and applies average pooling across\n the tensor according to kernel sizes, stride sizes, and pad lengths.\n average pooling consisting of computing the average on all values of a\n subset of the input tensor according to the kernel size and downsampling the\n data into the output tensor Y for further processing. The output spatial shape will be following:\n ```\n output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - kernel_spatial_shape[i]) / strides_spatial_shape[i] + 1)\n\n * pad_shape[i] is sum of pads along axis i\n ```\n\n `auto_pad` is a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following:\n ```\n VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - kernel_spatial_shape[i] + 1) / strides_spatial_shape[i])\n SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides_spatial_shape[i])\n ```\n And pad shape will be following if `SAME_UPPER` or `SAME_LOWER`:\n ```\n pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + kernel_spatial_shape[i] - input_spatial_shape[i]\n ```\n The output of each pooling window is divided by the number of elements (exclude pad when attribute count_include_pad is zero).\n ",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32]\noutput_shape: [1, 3, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2],\n)\nx = np.random.randn(1, 3, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = [2]\nstrides = [1]\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, [0], 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_1d_default')",
          "summary": "averagepool_1d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 31, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, (0, 0), 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_default')",
          "summary": "averagepool_2d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 28, 28]\noutput_shape: [1, 3, 30, 30]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    pads=[2, 2, 2, 2]\n)\nx = np.random.randn(1, 3, 28, 28).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (3, 3)\nstrides = (1, 1)\npad_bottom = 2\npad_top = 2\npad_right = 2\npad_left = 2\npad_shape = [pad_top + pad_bottom, pad_left + pad_right]\nout_shape = get_output_shape('VALID', np.add(x_shape[2:], pad_shape), kernel_shape, strides)\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_pads')",
          "summary": "averagepool_2d_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 28, 28]\noutput_shape: [1, 3, 30, 30]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    pads=[2, 2, 2, 2],\n    count_include_pad=1,\n)\nx = np.random.randn(1, 3, 28, 28).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (3, 3)\nstrides = (1, 1)\npad_bottom = 2\npad_top = 2\npad_right = 2\npad_left = 2\npad_shape = [pad_top + pad_bottom, pad_left + pad_right]\nout_shape = get_output_shape('VALID', np.add(x_shape[2:], pad_shape), kernel_shape, strides)\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=0)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'AVG', count_include_pad=1)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_pads_count_include_pad')",
          "summary": "averagepool_2d_pads_count_include_pad"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 5, 5]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    pads=[2, 2, 2, 2]\n\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[7, 7.5, 8, 8.5, 9],\n                [9.5, 10, 10.5, 11, 11.5],\n                [12, 12.5, 13, 13.5, 14],\n                [14.5, 15, 15.5, 16, 16.5],\n                [17, 17.5, 18, 18.5, 19]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_precomputed_pads')",
          "summary": "averagepool_2d_precomputed_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 5, 5]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    pads=[2, 2, 2, 2],\n    count_include_pad=1\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[2.5200, 3.6000, 4.8000, 4.0800, 3.2400],\n                [4.5600, 6.4000, 8.4000, 7.0400, 5.5200],\n                [7.2000, 10.0000, 13.0000, 10.8000, 8.4000],\n                [6.9600, 9.6000, 12.4000, 10.2400, 7.9200],\n                [6.1200, 8.4000, 10.8000, 8.8800, 6.8400]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_precomputed_pads_count_include_pad')",
          "summary": "averagepool_2d_precomputed_pads_count_include_pad"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 3, 3]\npad_shape: [2, 2] -> [1, 1, 1, 1] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    strides=[2, 2],\n    auto_pad='SAME_UPPER'\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[4, 5.5, 7],\n                [11.5, 13, 14.5],\n                [19, 20.5, 22]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_precomputed_same_upper')",
          "summary": "averagepool_2d_precomputed_same_upper"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 2, 2]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    strides=[2, 2]\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[4, 6],\n                [14, 16]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_precomputed_strides')",
          "summary": "averagepool_2d_precomputed_strides"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 32, 32]\npad_shape: [1, 1] -> [1, 0, 1, 0] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    auto_pad='SAME_LOWER'\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('SAME_LOWER', x_shape[2:], kernel_shape, strides)\npad_shape = get_pad_shape('SAME_LOWER', x_shape[2:], kernel_shape, strides, out_shape)\npad_bottom = pad_shape[0] // 2\npad_top = pad_shape[0] - pad_bottom\npad_right = pad_shape[1] // 2\npad_left = pad_shape[1] - pad_right\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_same_lower')",
          "summary": "averagepool_2d_same_lower"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 32, 32]\npad_shape: [1, 1] -> [0, 1, 0, 1] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    auto_pad='SAME_UPPER'\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('SAME_UPPER', x_shape[2:], kernel_shape, strides)\npad_shape = get_pad_shape('SAME_UPPER', x_shape[2:], kernel_shape, strides, out_shape)\npad_top = pad_shape[0] // 2\npad_bottom = pad_shape[0] - pad_top\npad_left = pad_shape[1] // 2\npad_right = pad_shape[1] - pad_left\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_same_upper')",
          "summary": "averagepool_2d_same_upper"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 10, 10]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    strides=[3, 3]\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (5, 5)\nstrides = (3, 3)\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, (0, 0), 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_2d_strides')",
          "summary": "averagepool_2d_strides"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32, 32]\noutput_shape: [1, 3, 31, 31, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'AveragePool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2, 2],\n)\nx = np.random.randn(1, 3, 32, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = [2, 2, 2]\nstrides = [1, 1, 1]\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, [0, 0, 0], 'AVG')\n\nexpect(node, inputs=[x], outputs=[y], name='test_averagepool_3d_default')",
          "summary": "averagepool_3d_default"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes. Floor value of the dimension is used",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "BatchNormalization",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": true,
          "type": "int[]"
        },
        {
          "default": 9.999999747378752e-06,
          "description": "The epsilon value to use to avoid division by zero, default is 1e-5f.",
          "name": "epsilon",
          "required": false,
          "type": "float"
        },
        {
          "description": "If set to nonzero, run spatial batch normalization in test mode, default is 0.",
          "name": "is_test",
          "required": false,
          "type": "int"
        },
        {
          "default": 0.8999999761581421,
          "description": "Factor used in computing the running mean and variance.e.g., running_mean = running_mean * momentum + mean * (1 - momentum), default is 0.9f.",
          "name": "momentum",
          "required": false,
          "type": "float"
        },
        {
          "default": 1,
          "description": "If true, compute the mean and variance across all spatial elements If false, compute the mean and variance across per feature.Default is 1.",
          "name": "spatial",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Normalization",
      "description": "Carries out batch normalization as described in the paper\nhttps://arxiv.org/abs/1502.03167. Depending on the mode it is being run,\nthere are multiple cases for the number of outputs, which we list below:\n\nOutput case #1: Y, mean, var, saved_mean, saved_var (training mode)\nOutput case #2: Y (test mode)\n    ",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "def _batchnorm_test_mode(x, s, bias, mean, var, epsilon=1e-5):  # type: ignore\n    dims_x = len(x.shape)\n    dim_ones = (1,) * (dims_x - 2)\n    s = s.reshape(-1, *dim_ones)\n    bias = bias.reshape(-1, *dim_ones)\n    mean = mean.reshape(-1, *dim_ones)\n    var = var.reshape(-1, *dim_ones)\n    return s * (x - mean) / np.sqrt(var + epsilon) + bias\n\n# input size: (1, 2, 1, 3)\nx = np.array([[[[-1, 0, 1]], [[2, 3, 4]]]]).astype(np.float32)\ns = np.array([1.0, 1.5]).astype(np.float32)\nbias = np.array([0, 1]).astype(np.float32)\nmean = np.array([0, 3]).astype(np.float32)\nvar = np.array([1, 1.5]).astype(np.float32)\ny = _batchnorm_test_mode(x, s, bias, mean, var).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'BatchNormalization',\n    inputs=['x', 's', 'bias', 'mean', 'var'],\n    outputs=['y'],\n)\n\n# output size: (1, 2, 1, 3)\nexpect(node, inputs=[x, s, bias, mean, var], outputs=[y],\n       name='test_batchnorm_example')\n\n# input size: (2, 3, 4, 5)\nx = np.random.randn(2, 3, 4, 5).astype(np.float32)\ns = np.random.randn(3).astype(np.float32)\nbias = np.random.randn(3).astype(np.float32)\nmean = np.random.randn(3).astype(np.float32)\nvar = np.random.rand(3).astype(np.float32)\nepsilon = 1e-2\ny = _batchnorm_test_mode(x, s, bias, mean, var, epsilon).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'BatchNormalization',\n    inputs=['x', 's', 'bias', 'mean', 'var'],\n    outputs=['y'],\n    epsilon=epsilon,\n)\n\n# output size: (2, 3, 4, 5)\nexpect(node, inputs=[x, s, bias, mean, var], outputs=[y],\n       name='test_batchnorm_epsilon')",
          "summary": "batchnormalization"
        }
      ],
      "inputs": [
        {
          "description": "The input 4-dimensional tensor of shape NCHW.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The scale as a 1-dimensional tensor of size C to be applied to the output.",
          "name": "scale",
          "type": "T"
        },
        {
          "description": "The bias as a 1-dimensional tensor of size C to be applied to the output.",
          "name": "B",
          "type": "T"
        },
        {
          "description": "The running mean (training) or the estimated mean (testing) as a 1-dimensional tensor of size C.",
          "name": "mean",
          "type": "T"
        },
        {
          "description": "The running variance (training) or the estimated variance (testing) as a 1-dimensional tensor of size C.",
          "name": "var",
          "type": "T"
        }
      ],
      "max_input": 5,
      "max_output": 5,
      "min_input": 5,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output 4-dimensional tensor of the same shape as X.",
          "name": "Y",
          "type": "T"
        },
        {
          "description": "The running mean after the BatchNormalization operator. Must be in-place with the input mean. Should not be used for testing.",
          "name": "mean",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The running variance after the BatchNormalization operator. Must be in-place with the input var. Should not be used for testing.",
          "name": "var",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Saved mean used during training to speed up gradient computation. Should not be used for testing.",
          "name": "saved_mean",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Saved variance used during training to speed up gradient computation. Should not be used for testing.",
          "name": "saved_var",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "BatchNormalization",
    "schema": {
      "attributes": [
        {
          "default": 9.999999747378752e-06,
          "description": "The epsilon value to use to avoid division by zero, default is 1e-5f.",
          "name": "epsilon",
          "required": false,
          "type": "float"
        },
        {
          "description": "If set to nonzero, run spatial batch normalization in test mode, default is 0.",
          "name": "is_test",
          "required": false,
          "type": "int"
        },
        {
          "default": 0.8999999761581421,
          "description": "Factor used in computing the running mean and variance.e.g., running_mean = running_mean * momentum + mean * (1 - momentum), default is 0.9f.",
          "name": "momentum",
          "required": false,
          "type": "float"
        },
        {
          "default": 1,
          "description": "If true, compute the mean and variance across all spatial elements If false, compute the mean and variance across per feature.Default is 1.",
          "name": "spatial",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Normalization",
      "description": "Carries out batch normalization as described in the paper\nhttps://arxiv.org/abs/1502.03167. Depending on the mode it is being run,\nthere are multiple cases for the number of outputs, which we list below:\n\nOutput case #1: Y, mean, var, saved_mean, saved_var (training mode)\nOutput case #2: Y (test mode)\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "def _batchnorm_test_mode(x, s, bias, mean, var, epsilon=1e-5):  # type: ignore\n    dims_x = len(x.shape)\n    dim_ones = (1,) * (dims_x - 2)\n    s = s.reshape(-1, *dim_ones)\n    bias = bias.reshape(-1, *dim_ones)\n    mean = mean.reshape(-1, *dim_ones)\n    var = var.reshape(-1, *dim_ones)\n    return s * (x - mean) / np.sqrt(var + epsilon) + bias\n\n# input size: (1, 2, 1, 3)\nx = np.array([[[[-1, 0, 1]], [[2, 3, 4]]]]).astype(np.float32)\ns = np.array([1.0, 1.5]).astype(np.float32)\nbias = np.array([0, 1]).astype(np.float32)\nmean = np.array([0, 3]).astype(np.float32)\nvar = np.array([1, 1.5]).astype(np.float32)\ny = _batchnorm_test_mode(x, s, bias, mean, var).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'BatchNormalization',\n    inputs=['x', 's', 'bias', 'mean', 'var'],\n    outputs=['y'],\n)\n\n# output size: (1, 2, 1, 3)\nexpect(node, inputs=[x, s, bias, mean, var], outputs=[y],\n       name='test_batchnorm_example')\n\n# input size: (2, 3, 4, 5)\nx = np.random.randn(2, 3, 4, 5).astype(np.float32)\ns = np.random.randn(3).astype(np.float32)\nbias = np.random.randn(3).astype(np.float32)\nmean = np.random.randn(3).astype(np.float32)\nvar = np.random.rand(3).astype(np.float32)\nepsilon = 1e-2\ny = _batchnorm_test_mode(x, s, bias, mean, var, epsilon).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'BatchNormalization',\n    inputs=['x', 's', 'bias', 'mean', 'var'],\n    outputs=['y'],\n    epsilon=epsilon,\n)\n\n# output size: (2, 3, 4, 5)\nexpect(node, inputs=[x, s, bias, mean, var], outputs=[y],\n       name='test_batchnorm_epsilon')",
          "summary": "batchnormalization"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The scale as a 1-dimensional tensor of size C to be applied to the output.",
          "name": "scale",
          "type": "T"
        },
        {
          "description": "The bias as a 1-dimensional tensor of size C to be applied to the output.",
          "name": "B",
          "type": "T"
        },
        {
          "description": "The running mean (training) or the estimated mean (testing) as a 1-dimensional tensor of size C.",
          "name": "mean",
          "type": "T"
        },
        {
          "description": "The running variance (training) or the estimated variance (testing) as a 1-dimensional tensor of size C.",
          "name": "var",
          "type": "T"
        }
      ],
      "max_input": 5,
      "max_output": 5,
      "min_input": 5,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output tensor of the same shape as X.",
          "name": "Y",
          "type": "T"
        },
        {
          "description": "The running mean after the BatchNormalization operator. Must be in-place with the input mean. Should not be used for testing.",
          "name": "mean",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The running variance after the BatchNormalization operator. Must be in-place with the input var. Should not be used for testing.",
          "name": "var",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Saved mean used during training to speed up gradient computation. Should not be used for testing.",
          "name": "saved_mean",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Saved variance used during training to speed up gradient computation. Should not be used for testing.",
          "name": "saved_var",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "BatchNormalization",
    "schema": {
      "attributes": [
        {
          "default": 9.999999747378752e-06,
          "description": "The epsilon value to use to avoid division by zero.",
          "name": "epsilon",
          "required": false,
          "type": "float"
        },
        {
          "default": 0.8999999761581421,
          "description": "Factor used in computing the running mean and variance.e.g., running_mean = running_mean * momentum + mean * (1 - momentum).",
          "name": "momentum",
          "required": false,
          "type": "float"
        },
        {
          "default": 1,
          "description": "If true, compute the mean and variance across per activation. If false, compute the mean and variance across per feature over each mini-batch.",
          "name": "spatial",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Normalization",
      "description": "Carries out batch normalization as described in the paper\nhttps://arxiv.org/abs/1502.03167. Depending on the mode it is being run,\nthere are multiple cases for the number of outputs, which we list below:\n\nOutput case #1: Y, mean, var, saved_mean, saved_var (training mode)\nOutput case #2: Y (test mode)\n    This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "def _batchnorm_test_mode(x, s, bias, mean, var, epsilon=1e-5):  # type: ignore\n    dims_x = len(x.shape)\n    dim_ones = (1,) * (dims_x - 2)\n    s = s.reshape(-1, *dim_ones)\n    bias = bias.reshape(-1, *dim_ones)\n    mean = mean.reshape(-1, *dim_ones)\n    var = var.reshape(-1, *dim_ones)\n    return s * (x - mean) / np.sqrt(var + epsilon) + bias\n\n# input size: (1, 2, 1, 3)\nx = np.array([[[[-1, 0, 1]], [[2, 3, 4]]]]).astype(np.float32)\ns = np.array([1.0, 1.5]).astype(np.float32)\nbias = np.array([0, 1]).astype(np.float32)\nmean = np.array([0, 3]).astype(np.float32)\nvar = np.array([1, 1.5]).astype(np.float32)\ny = _batchnorm_test_mode(x, s, bias, mean, var).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'BatchNormalization',\n    inputs=['x', 's', 'bias', 'mean', 'var'],\n    outputs=['y'],\n)\n\n# output size: (1, 2, 1, 3)\nexpect(node, inputs=[x, s, bias, mean, var], outputs=[y],\n       name='test_batchnorm_example')\n\n# input size: (2, 3, 4, 5)\nx = np.random.randn(2, 3, 4, 5).astype(np.float32)\ns = np.random.randn(3).astype(np.float32)\nbias = np.random.randn(3).astype(np.float32)\nmean = np.random.randn(3).astype(np.float32)\nvar = np.random.rand(3).astype(np.float32)\nepsilon = 1e-2\ny = _batchnorm_test_mode(x, s, bias, mean, var, epsilon).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'BatchNormalization',\n    inputs=['x', 's', 'bias', 'mean', 'var'],\n    outputs=['y'],\n    epsilon=epsilon,\n)\n\n# output size: (2, 3, 4, 5)\nexpect(node, inputs=[x, s, bias, mean, var], outputs=[y],\n       name='test_batchnorm_epsilon')",
          "summary": "batchnormalization"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "If spatial is true, the dimension of scale is (C). If spatial is false, the dimensions of scale are (C x D1 x ... x Dn)",
          "name": "scale",
          "type": "T"
        },
        {
          "description": "If spatial is true, the dimension of bias is (C). If spatial is false, the dimensions of bias are (C x D1 x ... x Dn)",
          "name": "B",
          "type": "T"
        },
        {
          "description": "If spatial is true, the dimension of the running mean (training) or the estimated mean (testing) is (C). If spatial is false, the dimensions of the running mean (training) or the estimated mean (testing) are (C x D1 x ... x Dn).",
          "name": "mean",
          "type": "T"
        },
        {
          "description": "If spatial is true, the dimension of the running variance(training) or the estimated variance (testing) is (C). If spatial is false, the dimensions of the running variance(training) or the estimated variance (testing) are (C x D1 x ... x Dn).",
          "name": "var",
          "type": "T"
        }
      ],
      "max_input": 5,
      "max_output": 5,
      "min_input": 5,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output tensor of the same shape as X",
          "name": "Y",
          "type": "T"
        },
        {
          "description": "The running mean after the BatchNormalization operator.",
          "name": "mean",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The running variance after the BatchNormalization operator.",
          "name": "var",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Saved mean used during training to speed up gradient computation.",
          "name": "saved_mean",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Saved variance used during training to speed up gradient computation.",
          "name": "saved_var",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Binarizer",
    "schema": {
      "attributes": [
        {
          "description": "Values greater than this are mapped to 1, others to 0.",
          "name": "threshold",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Maps the values of the input tensor to either 0 or 1, element-wise, based on the outcome of a comparison against a threshold value.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be binarized",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Binarized output data",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input must be a tensor of a numeric type. The output will be of the same tensor type.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Cast",
    "schema": {
      "attributes": [
        {
          "description": "The data type to which the elements of the input tensor are cast.Strictly must be one of the types from DataType enum in TensorProto",
          "name": "to",
          "required": true,
          "type": "string"
        }
      ],
      "description": "The operator casts the elements of a given input tensor to a data type\nspecified by the 'to' argument and returns an output tensor of the same size in\nthe converted type. The 'to' argument must be one of the data types specified\nin the 'DataType' enum field in the TensorProto message.\nNOTE: Casting to and from strings is not supported yet.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = (3, 4)\ntest_cases = [\n    ('FLOAT', 'FLOAT16'),\n    ('FLOAT', 'DOUBLE'),\n    ('FLOAT16', 'FLOAT'),\n    ('FLOAT16', 'DOUBLE'),\n    ('DOUBLE', 'FLOAT'),\n    ('DOUBLE', 'FLOAT16'),\n]\n\nfor from_type, to_type in test_cases:\n    input = np.random.random_sample(shape).astype(\n        TENSOR_TYPE_TO_NP_TYPE[getattr(TensorProto, from_type)])\n    node = onnx.helper.make_node(\n        'Cast',\n        inputs=['input'],\n        outputs=['output'],\n        to=getattr(TensorProto, to_type),\n    )\n    output = input.astype(TENSOR_TYPE_TO_NP_TYPE[getattr(TensorProto, to_type)])\n\n    expect(node, inputs=[input], outputs=[output],\n           name='test_cast_' + from_type + '_to_' + to_type)",
          "summary": "cast"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor to be cast.",
          "name": "input",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor with the same shape as input with type specified by the 'to' argument",
          "name": "output",
          "type": "T2"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(bool)"
          ],
          "description": "Constrain input types. Casting from strings and complex are not supported.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(bool)"
          ],
          "description": "Constrain output types. Casting to strings and complex are not supported.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "Cast",
    "schema": {
      "attributes": [
        {
          "description": "The data type to which the elements of the input tensor are cast.Strictly must be one of the types from DataType enum in TensorProto",
          "name": "to",
          "required": true,
          "type": "int"
        }
      ],
      "description": "The operator casts the elements of a given input tensor to a data type\nspecified by the 'to' argument and returns an output tensor of the same size in\nthe converted type. The 'to' argument must be one of the data types specified\nin the 'DataType' enum field in the TensorProto message.\nNOTE: Casting to and from strings is not supported yet.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = (3, 4)\ntest_cases = [\n    ('FLOAT', 'FLOAT16'),\n    ('FLOAT', 'DOUBLE'),\n    ('FLOAT16', 'FLOAT'),\n    ('FLOAT16', 'DOUBLE'),\n    ('DOUBLE', 'FLOAT'),\n    ('DOUBLE', 'FLOAT16'),\n]\n\nfor from_type, to_type in test_cases:\n    input = np.random.random_sample(shape).astype(\n        TENSOR_TYPE_TO_NP_TYPE[getattr(TensorProto, from_type)])\n    node = onnx.helper.make_node(\n        'Cast',\n        inputs=['input'],\n        outputs=['output'],\n        to=getattr(TensorProto, to_type),\n    )\n    output = input.astype(TENSOR_TYPE_TO_NP_TYPE[getattr(TensorProto, to_type)])\n\n    expect(node, inputs=[input], outputs=[output],\n           name='test_cast_' + from_type + '_to_' + to_type)",
          "summary": "cast"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor to be cast.",
          "name": "input",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor with the same shape as input with type specified by the 'to' argument",
          "name": "output",
          "type": "T2"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(bool)"
          ],
          "description": "Constrain input types. Casting from strings and complex are not supported.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(bool)"
          ],
          "description": "Constrain output types. Casting to strings and complex are not supported.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "CastMap",
    "schema": {
      "attributes": [
        {
          "default": "TO_FLOAT",
          "description": "A string indicating the desired element type of the output tensor, one of 'TO_FLOAT', 'TO_STRING', 'TO_INT64'.",
          "name": "cast_to",
          "required": false,
          "type": "string"
        },
        {
          "default": "DENSE",
          "description": "Indicates whether to only output as many values as are in the input (dense), or position the input based on using the key of the map as the index of the output (sparse).<br>One of 'DENSE', 'SPARSE'.",
          "name": "map_form",
          "required": false,
          "type": "string"
        },
        {
          "default": 1,
          "description": "If the value of map_form is 'SPARSE,' this attribute indicates the total length of the output tensor.",
          "name": "max_map",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Converts a map to a tensor.<br>The map key must be an int64 and the values will be ordered\n    in ascending order based on this key.<br>The operator supports dense packing or sparse packing.\n    If using sparse packing, the key cannot exceed the max_map-1 value.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "The input map that is to be cast to a tensor",
          "name": "X",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "A tensor representing the same data as the input map, ordered by their keys",
          "name": "Y",
          "type": "T2"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "map(int64, string)",
            "map(int64, float)"
          ],
          "description": "The input must be an integer map to either string or float.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(float)",
            "tensor(int64)"
          ],
          "description": "The output is a 1-D tensor of string, float, or integer.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "CategoryMapper",
    "schema": {
      "attributes": [
        {
          "description": "The integers of the map. This sequence must be the same length as the 'cats_strings' sequence.",
          "name": "cats_int64s",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The strings of the map. This sequence must be the same length as the 'cats_int64s' sequence",
          "name": "cats_strings",
          "required": false,
          "type": "string[]"
        },
        {
          "default": -1,
          "description": "An integer to use when an input string value is not found in the map.<br>One and only one of the 'default_*' attributes must be defined.",
          "name": "default_int64",
          "required": false,
          "type": "int"
        },
        {
          "default": "_Unused",
          "description": "A string to use when an input integer value is not found in the map.<br>One and only one of the 'default_*' attributes must be defined.",
          "name": "default_string",
          "required": false,
          "type": "string"
        }
      ],
      "description": "Converts strings to integers and vice versa.<br>\n    Two sequences of equal length are used to map between integers and strings,\n    with strings and integers at the same index detailing the mapping.<br>\n    Each operator converts either integers to strings or strings to integers, depending \n    on which default value attribute is provided. Only one default value attribute\n    should be defined.<br>\n    If the string default value is set, it will convert integers to strings.\n    If the int default value is set, it will convert strings to integers.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Input data",
          "name": "X",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data. If strings are input, the output values are integers, and vice versa.",
          "name": "Y",
          "type": "T2"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)"
          ],
          "description": "The input must be a tensor of strings or integers, either [N,C] or [C].",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)"
          ],
          "description": "The output is a tensor of strings or integers. Its shape will be the same as the input shape.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "Ceil",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Ceil takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the ceil is, y = ceil(x), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Ceil',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1.5, 1.2]).astype(np.float32)\ny = np.ceil(x)  # expected output [-1., 2.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_ceil_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.ceil(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_ceil')",
          "summary": "ceil"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Ceil",
    "schema": {
      "description": "Ceil takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the ceil is, y = ceil(x), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Ceil',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1.5, 1.2]).astype(np.float32)\ny = np.ceil(x)  # expected output [-1., 2.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_ceil_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.ceil(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_ceil')",
          "summary": "ceil"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Clip",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Maximum value, above which element is replaced by max",
          "name": "max",
          "required": false,
          "type": "float"
        },
        {
          "description": "Minimum value, under which element is replaced by min",
          "name": "min",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Clip operator limits the given input within an interval. The interval is\nspecified with arguments 'min' and 'max'. They default to\nnumeric_limits::lowest() and numeric_limits::max() respectively.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n    min=-1.0,\n    max=1.0\n)\n\nx = np.array([-2, 0, 2]).astype(np.float32)\ny = np.clip(x, -1, 1)  # expected output [-1., 0., 1.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, -1.0, 1.0)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip')\nnode = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n    min=-5.0,\n    max=5.0,\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.array([-1, 0, 1]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_inbounds')\n\nx = np.array([-6, 0, 6]).astype(np.float32)\ny = np.array([-5, 0, 5]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_outbounds')\n\nx = np.array([-1, 0, 6]).astype(np.float32)\ny = np.array([-1, 0, 5]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_splitbounds')",
          "summary": "clip"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n    min=0.0\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0.0, np.inf)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_default_min')\n\nnode = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n    max=0.0\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, -np.inf, 0.0)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_default_max')\nnode = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.array([-1, 0, 1]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_default_inbounds')",
          "summary": "clip_default"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor whose elements to be clipped",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor with clipped input elements",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Clip",
    "schema": {
      "attributes": [
        {
          "default": 3.4028234663852886e+38,
          "description": "Maximum value, above which element is replaced by max",
          "name": "max",
          "required": false,
          "type": "float"
        },
        {
          "default": -3.4028234663852886e+38,
          "description": "Minimum value, under which element is replaced by min",
          "name": "min",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Clip operator limits the given input within an interval. The interval is\nspecified with arguments 'min' and 'max'. They default to\nnumeric_limits::lowest() and numeric_limits::max() respectively.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n    min=-1.0,\n    max=1.0\n)\n\nx = np.array([-2, 0, 2]).astype(np.float32)\ny = np.clip(x, -1, 1)  # expected output [-1., 0., 1.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, -1.0, 1.0)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip')\nnode = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n    min=-5.0,\n    max=5.0,\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.array([-1, 0, 1]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_inbounds')\n\nx = np.array([-6, 0, 6]).astype(np.float32)\ny = np.array([-5, 0, 5]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_outbounds')\n\nx = np.array([-1, 0, 6]).astype(np.float32)\ny = np.array([-1, 0, 5]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_splitbounds')",
          "summary": "clip"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n    min=0.0\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0.0, np.inf)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_default_min')\n\nnode = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n    max=0.0\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, -np.inf, 0.0)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_default_max')\nnode = onnx.helper.make_node(\n    'Clip',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.array([-1, 0, 1]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_clip_default_inbounds')",
          "summary": "clip_default"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor whose elements to be clipped",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor with clipped input elements",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Compress",
    "schema": {
      "attributes": [
        {
          "description": "(Optional) Axis along which to take slices. If not specified, input is flattened before elements being selected.",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Selects slices from an input tensor along a given axis where condition evaluates to True for each axis index.\n    In case axis is not provided, input is flattened before elements are selected.\n    Compress behaves like numpy.compress: https://docs.scipy.org/doc/numpy/reference/generated/numpy.compress.html\n    ",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Compress',\n    inputs=['input', 'condition'],\n    outputs=['output'],\n    axis=0,\n)\ninput = np.array([[1, 2], [3, 4], [5, 6]]).astype(np.float32)\ncondition = np.array([0, 1, 1])\noutput = np.compress(condition, input, axis=0)\n#print(output)\n#[[ 3.  4.]\n# [ 5.  6.]]\n\nexpect(node, inputs=[input, condition.astype(np.bool)], outputs=[output],\n       name='test_compress_0')",
          "summary": "compress_0"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Compress',\n    inputs=['input', 'condition'],\n    outputs=['output'],\n    axis=1,\n)\ninput = np.array([[1, 2], [3, 4], [5, 6]]).astype(np.float32)\ncondition = np.array([0, 1])\noutput = np.compress(condition, input, axis=1)\n#print(output)\n#[[ 2.]\n# [ 4.]\n# [ 6.]]\n\nexpect(node, inputs=[input, condition.astype(np.bool)], outputs=[output],\n       name='test_compress_1')",
          "summary": "compress_1"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Compress',\n    inputs=['input', 'condition'],\n    outputs=['output'],\n)\ninput = np.array([[1, 2], [3, 4], [5, 6]]).astype(np.float32)\ncondition = np.array([0, 1, 0, 0, 1])\noutput = np.compress(condition, input)\n#print(output)\n#[ 2., 5.]\n\nexpect(node, inputs=[input, condition.astype(np.bool)], outputs=[output],\n       name='test_compress_default_axis')",
          "summary": "compress_default_axis"
        }
      ],
      "inputs": [
        {
          "description": "Tensor of rank r >= 1.",
          "name": "input",
          "type": "T"
        },
        {
          "description": "Rank 1 tensor of booleans to indicate which slices or data elements to be selected. Its length can be less than the input length alone the axis or the flattened input size if axis is not specified. In such cases data slices or elements exceeding the condition length are discarded.",
          "name": "condition",
          "type": "T1"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor of rank r if axis is specified. Otherwise output is a Tensor of rank 1.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains to boolean tensors.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Concat",
    "schema": {
      "attributes": [
        {
          "description": "Which axis to concat on.  Default value is 1.",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Tensor",
      "description": "Concatenate a list of tensors into a single tensor",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "test_cases = {\n    '1d': ([1, 2],\n           [3, 4]),\n    '2d': ([[1, 2], [3, 4]],\n           [[5, 6], [7, 8]]),\n    '3d': ([[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n           [[[9, 10], [11, 12]], [[13, 14], [15, 16]]])\n}  # type: Dict[Text, Sequence[Any]]\n\nfor test_case, values_ in test_cases.items():\n    values = [np.asarray(v, dtype=np.float32) for v in values_]\n    for i in range(len(values[0].shape)):\n        in_args = ['value' + str(k) for k in range(len(values))]\n        node = onnx.helper.make_node(\n            'Concat',\n            inputs=[s for s in in_args],\n            outputs=['output'],\n            axis=i\n        )\n        output = np.concatenate(values, i)\n        expect(node, inputs=[v for v in values], outputs=[output],\n               name='test_concat_' + test_case + '_axis_' + str(i))",
          "summary": "concat"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for concatenation",
          "name": "inputs",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Concatenated tensor",
          "name": "concat_result",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Concat",
    "schema": {
      "attributes": [
        {
          "description": "Which axis to concat on",
          "name": "axis",
          "required": true,
          "type": "int"
        }
      ],
      "category": "Tensor",
      "description": "Concatenate a list of tensors into a single tensor",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "test_cases = {\n    '1d': ([1, 2],\n           [3, 4]),\n    '2d': ([[1, 2], [3, 4]],\n           [[5, 6], [7, 8]]),\n    '3d': ([[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n           [[[9, 10], [11, 12]], [[13, 14], [15, 16]]])\n}  # type: Dict[Text, Sequence[Any]]\n\nfor test_case, values_ in test_cases.items():\n    values = [np.asarray(v, dtype=np.float32) for v in values_]\n    for i in range(len(values[0].shape)):\n        in_args = ['value' + str(k) for k in range(len(values))]\n        node = onnx.helper.make_node(\n            'Concat',\n            inputs=[s for s in in_args],\n            outputs=['output'],\n            axis=i\n        )\n        output = np.concatenate(values, i)\n        expect(node, inputs=[v for v in values], outputs=[output],\n               name='test_concat_' + test_case + '_axis_' + str(i))",
          "summary": "concat"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for concatenation",
          "name": "inputs",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Concatenated tensor",
          "name": "concat_result",
          "type": "T"
        }
      ],
      "since_version": 4,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain output types to any tensor type.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Constant",
    "schema": {
      "attributes": [
        {
          "description": "The value for the elements of the output tensor.",
          "name": "value",
          "required": true,
          "type": "tensor"
        }
      ],
      "category": "Constant",
      "description": "A constant tensor.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "values = np.random.randn(5, 5).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Constant',\n    inputs=[],\n    outputs=['values'],\n    value=onnx.helper.make_tensor(\n        name='const_tensor',\n        data_type=onnx.TensorProto.FLOAT,\n        dims=values.shape,\n        vals=values.flatten().astype(float),\n    ),\n)\n\nexpect(node, inputs=[], outputs=[values],\n       name='test_constant')",
          "summary": "constant"
        }
      ],
      "max_input": 0,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor containing the same value of the provided tensor.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Constant",
    "schema": {
      "attributes": [
        {
          "description": "The value for the elements of the output tensor.",
          "name": "value",
          "required": true,
          "type": "tensor"
        }
      ],
      "category": "Constant",
      "description": "A constant tensor.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "values = np.random.randn(5, 5).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Constant',\n    inputs=[],\n    outputs=['values'],\n    value=onnx.helper.make_tensor(\n        name='const_tensor',\n        data_type=onnx.TensorProto.FLOAT,\n        dims=values.shape,\n        vals=values.flatten().astype(float),\n    ),\n)\n\nexpect(node, inputs=[], outputs=[values],\n       name='test_constant')",
          "summary": "constant"
        }
      ],
      "max_input": 0,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor containing the same value of the provided tensor.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ConstantFill",
    "schema": {
      "attributes": [
        {
          "default": 1,
          "description": "The data type for the elements of the output tensor.Strictly must be one of the types from DataType enum in TensorProto.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "description": "The additional dimensions appended at the end of the shape indicatedby the input blob.Cannot set the extra_shape argument when there is no input blob.",
          "name": "extra_shape",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "1D tensor containing the desired output shape.  First input must be in CPU context.",
          "name": "input_as_shape",
          "required": false,
          "type": "int"
        },
        {
          "description": "The shape of the output tensor. Cannot set the shape argument and pass in an input at the same time.",
          "name": "shape",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The value for the elements of the output tensor.",
          "name": "value",
          "required": false,
          "type": "float"
        }
      ],
      "description": "The operator fills the elements of the output tensor with a constant value\nspecified by the 'value' attribute.\n\nThe data type is specified by the 'dtype' attribute. The 'dtype' attribute must\nbe one of the data types specified in the 'DataType' enum field in the\nTensorProto message. If the 'dtype' attribute is not provided, the data type of\n'value' is used.\n\nThe output tensor shape is specified by the 'shape' attribute. If the number of\ninput is 1, the shape will be identical to that of the input at run time with\noptional additional dimensions appended at the end as specified by 'extra_shape'\nattribute. In that case the 'shape' attribute should not be set.\n\nIf input_as_shape is set to true, then the input should be a 1D tensor\ncontaining the desired output shape (the dimensions specified in extra_shape\nwill also be appended)\n\nNOTE: Currently, it supports data type of float, int32, int64, and bool.\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input tensor (optional) to provide shape information.",
          "name": "input",
          "option": "optional",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of constant values specified by 'value'argument and its type is specified by the 'dtype' argument",
          "name": "output",
          "type": "T2"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(bool)"
          ],
          "description": "Constrain input types to float, int32, int64, bool tensors.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(bool)"
          ],
          "description": "Constrain output types to float, int32, int64, bool tensors.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "ConstantOfShape",
    "schema": {
      "attributes": [
        {
          "description": "(Optional) The value of the output elements.Should be a one-element tensor. If not specified, it defaults to a tensor of value 0 and datatype float32",
          "name": "value",
          "required": false,
          "type": "tensor"
        }
      ],
      "description": "Generate a tensor with given value and shape.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "x = np.array([4, 3, 2])\ntensor_value = onnx.helper.make_tensor(\"value\", onnx.TensorProto.FLOAT,\n                                       [1], [1])\nnode = onnx.helper.make_node(\n    'ConstantOfShape',\n    inputs=['x'],\n    outputs=['y'],\n    value=tensor_value,\n)\n\ny = np.ones(x, dtype=np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_constantofshape_float_ones')",
          "summary": "float_ones"
        },
        {
          "code": "x = np.array([10, 6])\ntensor_value = onnx.helper.make_tensor(\"value\", onnx.TensorProto.INT32,\n                                       [1], [1])\nnode = onnx.helper.make_node(\n    'ConstantOfShape',\n    inputs=['x'],\n    outputs=['y'],\n    value=tensor_value,\n)\ny = np.zeros(x, dtype=np.int32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_constantofshape_int_zeros')",
          "summary": "int_zeros"
        }
      ],
      "inputs": [
        {
          "description": "1D tensor. The shape of the expected output tensor. If empty tensor is given, the output would be a scalar.",
          "name": "input",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of shape specified by 'input'.If attribute 'value' is specified, the value and datatype of the output tensor is taken from 'value'.If attribute 'value' is not specified, the value in the output defaults to 0, and the datatype defaults to float32.",
          "name": "output",
          "type": "T2"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrain input types. Shape must be unsigned integers.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(bool)"
          ],
          "description": "Constrain output types to be numerics.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "Conv",
    "schema": {
      "attributes": [
        {
          "default": "NOTSET",
          "description": "auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that the output size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the beginning for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "dilation value along each axis of the filter.",
          "name": "dilations",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "number of groups input channels and output channels are divided into.",
          "name": "group",
          "required": false,
          "type": "int"
        },
        {
          "description": "The shape of the convolution kernel. If not present, should be inferred from input W.",
          "name": "kernel_shape",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Padding for the beginning and ending along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each axis.",
          "name": "pads",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Layer",
      "description": "The convolution operator consumes an input tensor and a filter, and\ncomputes the output.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "\nx = np.array([[[[0., 1., 2., 3., 4.],  # (1, 1, 5, 5) input tensor\n                [5., 6., 7., 8., 9.],\n                [10., 11., 12., 13., 14.],\n                [15., 16., 17., 18., 19.],\n                [20., 21., 22., 23., 24.]]]]).astype(np.float32)\nW = np.array([[[[1., 1., 1.],  # (1, 1, 3, 3) tensor for convolution weights\n                [1., 1., 1.],\n                [1., 1., 1.]]]]).astype(np.float32)\n\n# Convolution with padding\nnode_with_padding = onnx.helper.make_node(\n    'Conv',\n    inputs=['x', 'W'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    # Default values for other attributes: strides=[1, 1], dilations=[1, 1], groups=1\n    pads=[1, 1, 1, 1],\n)\ny_with_padding = np.array([[[[12., 21., 27., 33., 24.],  # (1, 1, 5, 5) output tensor\n                             [33., 54., 63., 72., 51.],\n                             [63., 99., 108., 117., 81.],\n                             [93., 144., 153., 162., 111.],\n                             [72., 111., 117., 123., 84.]]]]).astype(np.float32)\nexpect(node_with_padding, inputs=[x, W], outputs=[y_with_padding],\n       name='test_basic_conv_with_padding')\n\n# Convolution without padding\nnode_without_padding = onnx.helper.make_node(\n    'Conv',\n    inputs=['x', 'W'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    # Default values for other attributes: strides=[1, 1], dilations=[1, 1], groups=1\n    pads=[0, 0, 0, 0],\n)\ny_without_padding = np.array([[[[54., 63., 72.],  # (1, 1, 3, 3) output tensor\n                                [99., 108., 117.],\n                                [144., 153., 162.]]]]).astype(np.float32)\nexpect(node_without_padding, inputs=[x, W], outputs=[y_without_padding],\n       name='test_basic_conv_without_padding')",
          "summary": "conv"
        },
        {
          "code": "\nx = np.array([[[[0., 1., 2., 3., 4.],  # (1, 1, 7, 5) input tensor\n                [5., 6., 7., 8., 9.],\n                [10., 11., 12., 13., 14.],\n                [15., 16., 17., 18., 19.],\n                [20., 21., 22., 23., 24.],\n                [25., 26., 27., 28., 29.],\n                [30., 31., 32., 33., 34.]]]]).astype(np.float32)\nW = np.array([[[[1., 1., 1.],  # (1, 1, 3, 3) tensor for convolution weights\n                [1., 1., 1.],\n                [1., 1., 1.]]]]).astype(np.float32)\n\n# Convolution with strides=2 and padding\nnode_with_padding = onnx.helper.make_node(\n    'Conv',\n    inputs=['x', 'W'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    pads=[1, 1, 1, 1],\n    strides=[2, 2],  # Default values for other attributes: dilations=[1, 1], groups=1\n)\ny_with_padding = np.array([[[[12., 27., 24.],  # (1, 1, 4, 3) output tensor\n                             [63., 108., 81.],\n                             [123., 198., 141.],\n                             [112., 177., 124.]]]]).astype(np.float32)\nexpect(node_with_padding, inputs=[x, W], outputs=[y_with_padding],\n       name='test_conv_with_strides_padding')\n\n# Convolution with strides=2 and no padding\nnode_without_padding = onnx.helper.make_node(\n    'Conv',\n    inputs=['x', 'W'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    pads=[0, 0, 0, 0],\n    strides=[2, 2],  # Default values for other attributes: dilations=[1, 1], groups=1\n)\ny_without_padding = np.array([[[[54., 72.],  # (1, 1, 3, 2) output tensor\n                                [144., 162.],\n                                [234., 252.]]]]).astype(np.float32)\nexpect(node_without_padding, inputs=[x, W], outputs=[y_without_padding],\n       name='test_conv_with_strides_no_padding')\n\n# Convolution with strides=2 and padding only along one dimension (the H dimension in NxCxHxW tensor)\nnode_with_asymmetric_padding = onnx.helper.make_node(\n    'Conv',\n    inputs=['x', 'W'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    pads=[1, 0, 1, 0],\n    strides=[2, 2],  # Default values for other attributes: dilations=[1, 1], groups=1\n)\ny_with_asymmetric_padding = np.array([[[[21., 33.],  # (1, 1, 4, 2) output tensor\n                                        [99., 117.],\n                                        [189., 207.],\n                                        [171., 183.]]]]).astype(np.float32)\nexpect(node_with_asymmetric_padding, inputs=[x, W], outputs=[y_with_asymmetric_padding],\n       name='test_conv_with_strides_and_asymmetric_padding')",
          "summary": "conv_with_strides"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 ... x Dn). Optionally, if dimension denotation is in effect, the operation expects input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The weight tensor that will be used in the convolutions; has size (M x C/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the kernel shape will be (M x C/group x k1 x k2 x ... x kn), where (k1 x k2 x ... kn) is the dimension of the kernel. Optionally, if dimension denotation is in effect, the operation expects the weight tensor to arrive with the dimension denotation of [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, FILTER_SPATIAL, FILTER_SPATIAL ...]. X.shape[1] == (W.shape[1] * group) == C (assuming zero based indices for the shape array). Or in other words FILTER_IN_CHANNEL should be equal to DATA_CHANNEL. ",
          "name": "W",
          "type": "T"
        },
        {
          "description": "Optional 1D bias to be added to the convolution, has size of M.",
          "name": "B",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, and pad lengths.",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ConvTranspose",
    "schema": {
      "attributes": [
        {
          "default": "NOTSET",
          "description": "auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that the output size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the beginning for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "dilation value along each axis of the filter.",
          "name": "dilations",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "number of groups input channels and output channels are divided into.",
          "name": "group",
          "required": false,
          "type": "int"
        },
        {
          "description": "The shape of the convolution kernel. If not present, should be inferred from input W.",
          "name": "kernel_shape",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The zero-padding added to one side of the output. This is also called adjs/adjustment in some frameworks.",
          "name": "output_padding",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The shape of the output can be explicitly set which will cause pads values to be auto generated. If output_shape is specified pads values are ignored. See doc for details for equations to generate pads",
          "name": "output_shape",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Padding for the beginning and ending along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each axis.",
          "name": "pads",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Layer",
      "description": "The convolution transpose operator consumes an input tensor and a filter,\nand computes the output.\n\nIf the pads parameter is provided the shape of the output is calculated via the following equation:\n\n  output_shape[i] = stride[i] * (input_size[i] - 1) + output_padding[i] + kernel_shape[i] - pads[start_i] - pads[end_i]\n\noutput_shape can also be explicitly specified in which case pads values are auto generated using these equations:\n\n  total_padding[i] = stride[i] * (input_size[i] - 1) + output_padding[i] + kernel_shape[i] - output_shape[i]\n  If (auto_pads != SAME_UPPER): pads[start_i] = total_padding[i]/2; pads[end_i] = total_padding[i] - (total_padding[i]/2)\n  Else: pads[start_i] = total_padding[i] - (total_padding[i]/2); pads[end_i] = (total_padding[i]/2).\n\n    ",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "x = np.array([[[[0., 1., 2.],  # (1, 1, 3, 3)\n                [3., 4., 5.],\n                [6., 7., 8.]]]]).astype(np.float32)\n\nW = np.array([[[[1., 1., 1.],  # (1, 2, 3, 3)\n                [1., 1., 1.],\n                [1., 1., 1.]],\n               [[1., 1., 1.],\n                [1., 1., 1.],\n                [1., 1., 1.]]]]).astype(np.float32)\n\nnode = onnx.helper.make_node(\"ConvTranspose\", [\"X\", \"W\"], [\"Y\"])\n\ny = np.array([[[[0., 1., 3., 3., 2.],  # (1, 2, 5, 5)\n                [3., 8., 15., 12., 7.],\n                [9., 21., 36., 27., 15.],\n                [9., 20., 33., 24., 13.],\n                [6., 13., 21., 15., 8.]],\n\n               [[0., 1., 3., 3., 2.],\n                [3., 8., 15., 12., 7.],\n                [9., 21., 36., 27., 15.],\n                [9., 20., 33., 24., 13.],\n                [6., 13., 21., 15., 8.]]]]).astype(np.float32)\n\nexpect(node, inputs=[x, W], outputs=[y], name='test_convtranspose')",
          "summary": "convtranspose"
        },
        {
          "code": "x = np.array([[[0., 1., 2.]]]).astype(np.float32)  # (1, 1, 3)\n\nW = np.array([[[1., 1., 1.],  # (1, 2, 3)\n               [1., 1., 1.]]]).astype(np.float32)\n\nnode = onnx.helper.make_node(\"ConvTranspose\", [\"X\", \"W\"], [\"Y\"])\n\ny = np.array([[[0., 1., 3., 3., 2.],  # (1, 2, 5)\n               [0., 1., 3., 3., 2.]]]).astype(np.float32)\n\nexpect(node, inputs=[x, W], outputs=[y], name='test_convtranspose_1d')",
          "summary": "convtranspose_1d"
        },
        {
          "code": "x = np.array([[[[[0., 1., 2., 3., 4.],  # (1, 1, 3, 4, 5)\n                 [5., 6., 7., 8., 9.],\n                 [10., 11., 12., 13., 14.],\n                 [15., 16., 17., 18., 19.]],\n                [[20., 21., 22., 23., 24.],\n                 [25., 26., 27., 28., 29.],\n                 [30., 31., 32., 33., 34.],\n                 [35., 36., 37., 38., 39.]],\n                [[40., 41., 42., 43., 44.],\n                 [45., 46., 47., 48., 49.],\n                 [50., 51., 52., 53., 54.],\n                 [55., 56., 57., 58., 59.]]]]]).astype(np.float32)\n\nW = np.array([[[[[1., 1., 1.],  # (1, 2, 3, 3, 3)\n                 [1., 1., 1.],\n                 [1., 1., 1.]],\n                [[1., 1., 1.],\n                 [1., 1., 1.],\n                 [1., 1., 1.]],\n                [[1., 1., 1.],\n                 [1., 1., 1.],\n                 [1., 1., 1.]]],\n               [[[1., 1., 1.],\n                 [1., 1., 1.],\n                 [1., 1., 1.]],\n                [[1., 1., 1.],\n                 [1., 1., 1.],\n                 [1., 1., 1.]],\n                [[1., 1., 1.],\n                 [1., 1., 1.],\n                 [1., 1., 1.]]]]]).astype(np.float32)\n\nnode = onnx.helper.make_node(\"ConvTranspose\", [\"X\", \"W\"], [\"Y\"])\n\ny = np.array([[[[[0., 1., 3., 6., 9., 7., 4.],  # (1, 2, 5, 6, 7)\n                 [5., 12., 21., 27., 33., 24., 13.],\n                 [15., 33., 54., 63., 72., 51., 27.],\n                 [30., 63., 99., 108., 117., 81., 42.],\n                 [25., 52., 81., 87., 93., 64., 33.],\n                 [15., 31., 48., 51., 54., 37., 19.]],\n\n                [[20., 42., 66., 72., 78., 54., 28.],\n                 [50., 104., 162., 174., 186., 128., 66.],\n                 [90., 186., 288., 306., 324., 222., 114.],\n                 [120., 246., 378., 396., 414., 282., 144.],\n                 [90., 184., 282., 294., 306., 208., 106.],\n                 [50., 102., 156., 162., 168., 114., 58.]],\n\n                [[60., 123., 189., 198., 207., 141., 72.],\n                 [135., 276., 423., 441., 459., 312., 159.],\n                 [225., 459., 702., 729., 756., 513., 261.],\n                 [270., 549., 837., 864., 891., 603., 306.],\n                 [195., 396., 603., 621., 639., 432., 219.],\n                 [105., 213., 324., 333., 342., 231., 117.]],\n\n                [[60., 122., 186., 192., 198., 134., 68.],\n                 [130., 264., 402., 414., 426., 288., 146.],\n                 [210., 426., 648., 666., 684., 462., 234.],\n                 [240., 486., 738., 756., 774., 522., 264.],\n                 [170., 344., 522., 534., 546., 368., 186.],\n                 [90., 182., 276., 282., 288., 194., 98.]],\n\n                [[40., 81., 123., 126., 129., 87., 44.],\n                 [85., 172., 261., 267., 273., 184., 93.],\n                 [135., 273., 414., 423., 432., 291., 147.],\n                 [150., 303., 459., 468., 477., 321., 162.],\n                 [105., 212., 321., 327., 333., 224., 113.],\n                 [55., 111., 168., 171., 174., 117., 59.]]],\n\n               [[[0., 1., 3., 6., 9., 7., 4.],\n                 [5., 12., 21., 27., 33., 24., 13.],\n                 [15., 33., 54., 63., 72., 51., 27.],\n                 [30., 63., 99., 108., 117., 81., 42.],\n                 [25., 52., 81., 87., 93., 64., 33.],\n                 [15., 31., 48., 51., 54., 37., 19.]],\n\n                [[20., 42., 66., 72., 78., 54., 28.],\n                 [50., 104., 162., 174., 186., 128., 66.],\n                 [90., 186., 288., 306., 324., 222., 114.],\n                 [120., 246., 378., 396., 414., 282., 144.],\n                 [90., 184., 282., 294., 306., 208., 106.],\n                 [50., 102., 156., 162., 168., 114., 58.]],\n\n                [[60., 123., 189., 198., 207., 141., 72.],\n                 [135., 276., 423., 441., 459., 312., 159.],\n                 [225., 459., 702., 729., 756., 513., 261.],\n                 [270., 549., 837., 864., 891., 603., 306.],\n                 [195., 396., 603., 621., 639., 432., 219.],\n                 [105., 213., 324., 333., 342., 231., 117.]],\n\n                [[60., 122., 186., 192., 198., 134., 68.],\n                 [130., 264., 402., 414., 426., 288., 146.],\n                 [210., 426., 648., 666., 684., 462., 234.],\n                 [240., 486., 738., 756., 774., 522., 264.],\n                 [170., 344., 522., 534., 546., 368., 186.],\n                 [90., 182., 276., 282., 288., 194., 98.]],\n\n                [[40., 81., 123., 126., 129., 87., 44.],\n                 [85., 172., 261., 267., 273., 184., 93.],\n                 [135., 273., 414., 423., 432., 291., 147.],\n                 [150., 303., 459., 468., 477., 321., 162.],\n                 [105., 212., 321., 327., 333., 224., 113.],\n                 [55., 111., 168., 171., 174., 117., 59.]]]]]).astype(np.float32)\n\nexpect(node, inputs=[x, W], outputs=[y], name='test_convtranspose_3d')",
          "summary": "convtranspose_3d"
        },
        {
          "code": "x = np.array([[[[0., 1., 2.],  # (1, 1, 3, 3)\n                [3., 4., 5.],\n                [6., 7., 8.]]]]).astype(np.float32)\n\nW = np.array([[[[1., 1., 1.],  # (1, 2, 3, 3)\n                [1., 1., 1.],\n                [1., 1., 1.]],\n               [[1., 1., 1.],\n                [1., 1., 1.],\n                [1., 1., 1.]]]]).astype(np.float32)\n\ny = np.array([[[[0., 0., 1., 1., 3., 2., 2., 0.],  # (1, 2, 10, 8)\n                [0., 0., 1., 1., 3., 2., 2., 0.],\n                [0., 0., 1., 1., 3., 2., 2., 0.],\n                [3., 3., 7., 4., 9., 5., 5., 0.],\n                [3., 3., 7., 4., 9., 5., 5., 0.],\n                [3., 3., 7., 4., 9., 5., 5., 0.],\n                [6., 6., 13., 7., 15., 8., 8., 0.],\n                [6., 6., 13., 7., 15., 8., 8., 0.],\n                [6., 6., 13., 7., 15., 8., 8., 0.],\n                [0., 0., 0., 0., 0., 0., 0., 0.]],\n\n               [[0., 0., 1., 1., 3., 2., 2., 0.],\n                [0., 0., 1., 1., 3., 2., 2., 0.],\n                [0., 0., 1., 1., 3., 2., 2., 0.],\n                [3., 3., 7., 4., 9., 5., 5., 0.],\n                [3., 3., 7., 4., 9., 5., 5., 0.],\n                [3., 3., 7., 4., 9., 5., 5., 0.],\n                [6., 6., 13., 7., 15., 8., 8., 0.],\n                [6., 6., 13., 7., 15., 8., 8., 0.],\n                [6., 6., 13., 7., 15., 8., 8., 0.],\n                [0., 0., 0., 0., 0., 0., 0., 0.]]]]).astype(np.float32)\n\nnode = onnx.helper.make_node(\"ConvTranspose\", [\"X\", \"W\"], [\"Y\"],\n                             strides=[3, 2],\n                             output_shape=[10, 8])\nexpect(node, inputs=[x, W], outputs=[y], name='test_convtranspose_output_shape')\n\nnode = onnx.helper.make_node(\"ConvTranspose\", [\"X\", \"W\"], [\"Y\"],\n                             strides=[3, 2],\n                             output_padding=[1, 1])\nexpect(node, inputs=[x, W], outputs=[y], name='test_convtranspose_pad')\n\nnode = onnx.helper.make_node(\n    'ConvTranspose', ['X', 'W'], ['Y'],\n    name='test',\n    strides=[3, 2],\n    output_shape=[10, 8],\n    kernel_shape=[3, 3],\n    output_padding=[1, 1]\n)\nexpect(node, inputs=[x, W], outputs=[y],\n       name='test_convtranspose_kernel_shape')",
          "summary": "convtranspose_attributes"
        },
        {
          "code": "x = np.array([[[[0., 1., 2.],  # (1, 1, 3, 3)\n                [3., 4., 5.],\n                [6., 7., 8.]]]]).astype(np.float32)\n\nW = np.array([[[[1., 1., 1.],  # (1, 2, 3, 3)\n                [1., 1., 1.],\n                [1., 1., 1.]],\n               [[1., 1., 1.],\n                [1., 1., 1.],\n                [1., 1., 1.]]]]).astype(np.float32)\n\nnode = onnx.helper.make_node(\"ConvTranspose\", [\"X\", \"W\"], [\"Y\"],\n                             strides=[3, 2],\n                             pads=[1, 2, 1, 2])\n\ny = np.array([[[[1., 1., 3.],  # (1, 2, 7, 3)\n                [1., 1., 3.],\n                [7., 4., 9.],\n                [7., 4., 9.],\n                [7., 4., 9.],\n                [13., 7., 15.],\n                [13., 7., 15.]],\n\n               [[1., 1., 3.],\n                [1., 1., 3.],\n                [7., 4., 9.],\n                [7., 4., 9.],\n                [7., 4., 9.],\n                [13., 7., 15.],\n                [13., 7., 15.]]]]).astype(np.float32)\n\nexpect(node, inputs=[x, W], outputs=[y], name='test_convtranspose_pads')",
          "summary": "convtranspose_pads"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 ... x Dn)",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The weight tensor that will be used in the convolutions; has size (C x M/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the weight shape will be (C x M/group x k1 x k2 x ... x kn), where (k1 x k2 x ... x kn) is the dimension of the kernel. The number of channels in the output should be equal to W.shape[1] * group (assuming zero based indices of the shape array)",
          "name": "W",
          "type": "T"
        },
        {
          "description": "Optional 1D bias to be added to the convolution, has size of M.",
          "name": "B",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, pad lengths and group count. The number of channels in the output should be equal to W.shape[1] * group (assuming zero based indices of the shape array)",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Cos",
    "schema": {
      "description": "Calculates the cosine of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Cos',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.cos(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_cos_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.cos(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_cos')",
          "summary": "cos"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The cosine of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Cosh",
    "schema": {
      "description": "Calculates the hyperbolic cosine of the given input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Cosh',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.cosh(x)  # expected output [1.54308069,  1.,  1.54308069]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_cosh_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.cosh(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_cosh')",
          "summary": "cosh"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The hyperbolic cosine values of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Crop",
    "schema": {
      "attributes": [
        {
          "description": "A 1-D values of (leftBorder, topBorder, rightBorder, bottomBorder).",
          "name": "border",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "A 1-D values of (height, width).",
          "name": "scale",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Data",
      "description": "Crop and image to the specified spatial dimensions. If scale is given,\nthen optionally start the crop offset by the left/top border amounts.\nIf scale is not provided, crop the borders as provided.",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input tensor of shape [N,C,H,W]",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same type as input, with H and W dimensions reduced.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "DepthToSpace",
    "schema": {
      "attributes": [
        {
          "description": "Blocks of [blocksize, blocksize] are moved.",
          "name": "blocksize",
          "required": true,
          "type": "int"
        }
      ],
      "description": "DepthToSpace rearranges (permutes) data from depth into blocks of spatial data.\nThis is the reverse transformation of SpaceToDepth. More specifically, this op outputs a copy of\nthe input tensor where values from the depth dimension are moved in spatial blocks to the height\nand width dimensions.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "b, c, h, w = shape = (2, 8, 3, 3)\nblocksize = 2\nnode = onnx.helper.make_node(\n    'DepthToSpace',\n    inputs=['x'],\n    outputs=['y'],\n    blocksize=blocksize,\n)\nx = np.random.random_sample(shape).astype(np.float32)\ntmp = np.reshape(x, [b, blocksize, blocksize, c // (blocksize**2), h, w])\ntmp = np.transpose(tmp, [0, 3, 4, 1, 5, 2])\ny = np.reshape(tmp, [b, c // (blocksize**2), h * blocksize, w * blocksize])\nexpect(node, inputs=[x], outputs=[y],\n       name='test_depthtospace')",
          "summary": "depthtospace"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'DepthToSpace',\n    inputs=['x'],\n    outputs=['y'],\n    blocksize=2,\n)\n\n# (1, 4, 2, 3) input tensor\nx = np.array([[[[0, 1, 2],\n                [3, 4, 5]],\n               [[6, 7, 8],\n                [9, 10, 11]],\n               [[12, 13, 14],\n                [15, 16, 17]],\n               [[18, 19, 20],\n                [21, 22, 23]]]]).astype(np.float32)\n\n# (1, 1, 4, 6) output tensor\ny = np.array([[[[0, 6, 1, 7, 2, 8],\n                [12, 18, 13, 19, 14, 20],\n                [3, 9, 4, 10, 5, 11],\n                [15, 21, 16, 22, 17, 23]]]]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_depthtospace_example')",
          "summary": "example"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor of [N,C,H,W], where N is the batch axis, C is the channel or depth, H is the height and W is the width.",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of [N, C/(blocksize * blocksize), H * blocksize, W * blocksize].",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "DictVectorizer",
    "schema": {
      "attributes": [
        {
          "description": "An integer vocabulary array.<br>One and only one of the vocabularies must be defined.",
          "name": "int64_vocabulary",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "A string vocabulary array.<br>One and only one of the vocabularies must be defined.",
          "name": "string_vocabulary",
          "required": false,
          "type": "string[]"
        }
      ],
      "description": "Uses an index mapping to convert a dictionary to an array.<br>\n    Given a dictionary, each key is looked up in the vocabulary attribute corresponding to\n    the key type. The index into the vocabulary array at which the key is found is then\n    used to index the output 1-D tensor 'Y' and insert into it the value found in the dictionary 'X'.<br>\n    The key type of the input map must correspond to the element type of the defined vocabulary attribute.\n    Therefore, the output array will be equal in length to the index mapping vector parameter.\n    All keys in the input dictionary must be present in the index mapping vector.\n    For each item in the input dictionary, insert its value in the output array.\n    Any keys not present in the input dictionary, will be zero in the output array.<br>\n    For example: if the ``string_vocabulary`` parameter is set to ``[\"a\", \"c\", \"b\", \"z\"]``,\n    then an input of ``{\"a\": 4, \"c\": 8}`` will produce an output of ``[4, 8, 0, 0]``.\n    ",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "A dictionary.",
          "name": "X",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "A 1-D tensor holding values from the input dictionary.",
          "name": "Y",
          "type": "T2"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "map(string, int64)",
            "map(int64, string)",
            "map(int64, float)",
            "map(int64, double)",
            "map(string, float)",
            "map(string, double)"
          ],
          "description": "The input must be a map from strings or integers to either strings or a numeric type. The key and value types cannot be the same.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(int64)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)"
          ],
          "description": "The output will be a tensor of the value type of the input map. It's shape will be [1,C], where C is the length of the input dictionary.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "Div",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        },
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Performs element-wise binary division (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of element size 1 (including a scalar tensor and any\ntensor with rank equal to or smaller than the first tensor), or having its\nshape as a contiguous subset of the first tensor's shape. The starting of the\nmutually equal shape is specified by the argument \"axis\", and if it is not set,\nsuffix matching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Div',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([3, 4]).astype(np.float32)\ny = np.array([1, 2]).astype(np.float32)\nz = x / y  # expected output [3., 2.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_div_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.rand(3, 4, 5).astype(np.float32) + 1.0\nz = x / y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_div')",
          "summary": "div"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Div',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.rand(5).astype(np.float32) + 1.0\nz = x / y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_div_bcast')",
          "summary": "div_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Div",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Performs element-wise binary division (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of element size 1 (including a scalar tensor and any\ntensor with rank equal to or smaller than the first tensor), or having its\nshape as a contiguous subset of the first tensor's shape. The starting of the\nmutually equal shape is specified by the argument \"axis\", and if it is not set,\nsuffix matching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Div',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([3, 4]).astype(np.float32)\ny = np.array([1, 2]).astype(np.float32)\nz = x / y  # expected output [3., 2.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_div_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.rand(3, 4, 5).astype(np.float32) + 1.0\nz = x / y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_div')",
          "summary": "div"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Div',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.rand(5).astype(np.float32) + 1.0\nz = x / y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_div_bcast')",
          "summary": "div_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Div",
    "schema": {
      "description": "Performs element-wise binary division (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Div',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([3, 4]).astype(np.float32)\ny = np.array([1, 2]).astype(np.float32)\nz = x / y  # expected output [3., 2.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_div_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.rand(3, 4, 5).astype(np.float32) + 1.0\nz = x / y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_div')",
          "summary": "div"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Div',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.rand(5).astype(np.float32) + 1.0\nz = x / y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_div_bcast')",
          "summary": "div_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same element type as two inputs",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Dropout",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "(int, default 0) if nonzero, run dropout in test mode where the output is simply Y = X.",
          "name": "is_test",
          "required": false,
          "type": "int"
        },
        {
          "default": 0.5,
          "description": "(float, default 0.5) the ratio of random dropout",
          "name": "ratio",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Dropout",
      "description": "Dropout takes one input data (Tensor<float>) and produces two Tensor outputs,\noutput (Tensor<float>) and mask (Tensor<bool>). Depending on whether it is in\ntest mode or not, the output Y will either be a random dropout, or a simple\ncopy of the input. Note that our implementation of Dropout does scaling in\nthe training phase, so during testing nothing needs to be done.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Dropout',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = x\nexpect(node, inputs=[x], outputs=[y],\n       name='test_dropout_default')",
          "summary": "default"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Dropout',\n    inputs=['x'],\n    outputs=['y'],\n    ratio=.2,\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = x\nexpect(node, inputs=[x], outputs=[y],\n       name='test_dropout_random')",
          "summary": "random"
        }
      ],
      "inputs": [
        {
          "description": "The input data as Tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 2,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output.",
          "name": "output",
          "type": "T"
        },
        {
          "description": "The output mask. If is_test is nonzero, this output is not filled.",
          "name": "mask",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Dropout",
    "schema": {
      "attributes": [
        {
          "description": "(int, default 0) if nonzero, run dropout in test mode where the output is simply Y = X.",
          "name": "is_test",
          "required": false,
          "type": "int"
        },
        {
          "default": 0.5,
          "description": "(float, default 0.5) the ratio of random dropout",
          "name": "ratio",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Dropout",
      "description": "Dropout takes one input data (Tensor<float>) and produces two Tensor outputs,\noutput (Tensor<float>) and mask (Tensor<bool>). Depending on whether it is in\ntest mode or not, the output Y will either be a random dropout, or a simple\ncopy of the input. Note that our implementation of Dropout does scaling in\nthe training phase, so during testing nothing needs to be done.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Dropout',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = x\nexpect(node, inputs=[x], outputs=[y],\n       name='test_dropout_default')",
          "summary": "default"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Dropout',\n    inputs=['x'],\n    outputs=['y'],\n    ratio=.2,\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = x\nexpect(node, inputs=[x], outputs=[y],\n       name='test_dropout_random')",
          "summary": "random"
        }
      ],
      "inputs": [
        {
          "description": "The input data as Tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 2,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output.",
          "name": "output",
          "type": "T"
        },
        {
          "description": "The output mask. If is_test is nonzero, this output is not filled.",
          "name": "mask",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Dropout",
    "schema": {
      "attributes": [
        {
          "default": 0.5,
          "description": "The ratio of random dropout",
          "name": "ratio",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Dropout",
      "description": "Dropout takes one input data (Tensor<float>) and produces two Tensor outputs,\noutput (Tensor<float>) and mask (Tensor<bool>). Depending on whether it is in\ntest mode or not, the output Y will either be a random dropout, or a simple\ncopy of the input. Note that our implementation of Dropout does scaling in\nthe training phase, so during testing nothing needs to be done.\nThis operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Dropout',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = x\nexpect(node, inputs=[x], outputs=[y],\n       name='test_dropout_default')",
          "summary": "default"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Dropout',\n    inputs=['x'],\n    outputs=['y'],\n    ratio=.2,\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = x\nexpect(node, inputs=[x], outputs=[y],\n       name='test_dropout_random')",
          "summary": "random"
        }
      ],
      "inputs": [
        {
          "description": "The input data as Tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 2,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output.",
          "name": "output",
          "type": "T"
        },
        {
          "description": "The output mask.",
          "name": "mask",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "DynamicSlice",
    "schema": {
      "description": "Produces a slice of the input tensor along multiple axes. Similar to numpy:\nhttps://docs.scipy.org/doc/numpy/reference/arrays.indexing.html\nSlices uses `axes`, `starts` and `ends` inputs to specify the start and end\ndimension for each axis in the list of axes, it uses this information to\nslice the input `data` tensor. If a negative value is passed for any of the\nstart or end indices, it represent number of elements before the end of that\ndimension. If the value passed to start or end is larger than the `n` (the\nnumber of elements in this dimension), it represents `n`. For slicing to the\nend of a dimension with unknown size, it is recommended to pass in `INT_MAX`.\nIf `axes` are omitted, they are set to `[0, ..., ndim-1]`.\nExample 1:\n  data = [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n  ]\n  axes = [0, 1]\n  starts = [1, 0]\n  ends = [2, 3]\n  result = [\n      [5, 6, 7],\n  ]\nExample 2:\n  data = [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n  ]\n  starts = [0, 1]\n  ends = [-1, 1000]\n  result = [\n      [2, 3, 4],\n  ]\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'DynamicSlice',\n    inputs=['x', 'starts', 'ends', 'axes'],\n    outputs=['y'],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\ny = x[0:3, 0:10]\nstarts = np.array([0, 0], dtype=np.int64)\nends = np.array([3, 10], dtype=np.int64)\naxes = np.array([0, 1], dtype=np.int64)\n\nexpect(node, inputs=[x, starts, ends, axes], outputs=[y],\n       name='test_dynamic_slice')",
          "summary": "dynamic_slice"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'DynamicSlice',\n    inputs=['x', 'starts', 'ends'],\n    outputs=['y'],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\nstarts = np.array([0, 0, 3], dtype=np.int64)\nends = np.array([20, 10, 4], dtype=np.int64)\ny = x[:, :, 3:4]\n\nexpect(node, inputs=[x, starts, ends], outputs=[y],\n       name='test_dynamic_slice_default_axes')",
          "summary": "dynamic_slice_default_axes"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'DynamicSlice',\n    inputs=['x', 'starts', 'ends', 'axes'],\n    outputs=['y'],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\nstarts = np.array([1], dtype=np.int64)\nends = np.array([1000], dtype=np.int64)\naxes = np.array([1], dtype=np.int64)\ny = x[:, 1:1000]\n\nexpect(node, inputs=[x, starts, ends, axes], outputs=[y],\n       name='test_dynamic_slice_end_out_of_bounds')",
          "summary": "dynamic_slice_end_out_of_bounds"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'DynamicSlice',\n    inputs=['x', 'starts', 'ends', 'axes'],\n    outputs=['y'],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\nstarts = np.array([0], dtype=np.int64)\nends = np.array([-1], dtype=np.int64)\naxes = np.array([1], dtype=np.int64)\ny = x[:, 0:-1]\n\nexpect(node, inputs=[x, starts, ends, axes], outputs=[y],\n       name='test_dynamic_slice_neg')",
          "summary": "dynamic_slice_neg"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'DynamicSlice',\n    inputs=['x', 'starts', 'ends', 'axes'],\n    outputs=['y'],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\nstarts = np.array([1000], dtype=np.int64)\nends = np.array([1000], dtype=np.int64)\naxes = np.array([1], dtype=np.int64)\ny = x[:, 1000:1000]\n\nexpect(node, inputs=[x, starts, ends, axes], outputs=[y],\n       name='test_dynamic_slice_start_out_of_bounds')",
          "summary": "dynamic_slice_start_out_of_bounds"
        }
      ],
      "inputs": [
        {
          "description": "Tensor of data to extract slices from.",
          "name": "data",
          "type": "T"
        },
        {
          "description": "1-D tensor of starting indices of corresponding axis in `axes`",
          "name": "starts",
          "type": "Tind"
        },
        {
          "description": "1-D tensor of ending indices (exclusive) of corresponding axis in axes",
          "name": "ends",
          "type": "Tind"
        },
        {
          "description": "1-D tensor of axes that `starts` and `ends` apply to.",
          "name": "axes",
          "option": "optional",
          "type": "Tind"
        }
      ],
      "max_input": 4,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Sliced data tensor.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrain indices to integer types",
          "type_param_str": "Tind"
        }
      ]
    }
  },
  {
    "name": "Elu",
    "schema": {
      "attributes": [
        {
          "default": 1.0,
          "description": "Coefficient of ELU default to 1.0.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Activation",
      "description": "Elu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the function `f(x) = alpha * (exp(x) - 1.) for x <\n0`, `f(x) = x for x >= 0`., is applied to the tensor elementwise.\n\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Elu',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=2.0\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\n# expected output [-1.2642411, 0., 1.]\ny = np.clip(x, 0, np.inf) + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0\nexpect(node, inputs=[x], outputs=[y],\n       name='test_elu_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0\nexpect(node, inputs=[x], outputs=[y],\n       name='test_elu')",
          "summary": "elu"
        },
        {
          "code": "default_alpha = 1.0\nnode = onnx.helper.make_node(\n    'Elu',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + (np.exp(np.clip(x, -np.inf, 0)) - 1) * default_alpha\nexpect(node, inputs=[x], outputs=[y],\n       name='test_elu_default')",
          "summary": "elu_default"
        }
      ],
      "inputs": [
        {
          "description": "1D input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "1D input tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Elu",
    "schema": {
      "attributes": [
        {
          "default": 1.0,
          "description": "Coefficient of ELU.",
          "name": "alpha",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Activation",
      "description": "Elu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the function `f(x) = alpha * (exp(x) - 1.) for x <\n0`, `f(x) = x for x >= 0`., is applied to the tensor elementwise.\n\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Elu',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=2.0\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\n# expected output [-1.2642411, 0., 1.]\ny = np.clip(x, 0, np.inf) + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0\nexpect(node, inputs=[x], outputs=[y],\n       name='test_elu_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0\nexpect(node, inputs=[x], outputs=[y],\n       name='test_elu')",
          "summary": "elu"
        },
        {
          "code": "default_alpha = 1.0\nnode = onnx.helper.make_node(\n    'Elu',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + (np.exp(np.clip(x, -np.inf, 0)) - 1) * default_alpha\nexpect(node, inputs=[x], outputs=[y],\n       name='test_elu_default')",
          "summary": "elu_default"
        }
      ],
      "inputs": [
        {
          "description": "1D input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "1D input tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Equal",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `equal` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Equal',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = (np.random.randn(3, 4, 5) * 10).astype(np.int32)\ny = (np.random.randn(3, 4, 5) * 10).astype(np.int32)\nz = np.equal(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_equal')",
          "summary": "equal"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Equal',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = (np.random.randn(3, 4, 5) * 10).astype(np.int32)\ny = (np.random.randn(5) * 10).astype(np.int32)\nz = np.equal(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_equal_bcast')",
          "summary": "equal_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)",
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrains input to integral tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Equal",
    "schema": {
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `equal` logical operation\nelementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Equal',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = (np.random.randn(3, 4, 5) * 10).astype(np.int32)\ny = (np.random.randn(3, 4, 5) * 10).astype(np.int32)\nz = np.equal(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_equal')",
          "summary": "equal"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Equal',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = (np.random.randn(3, 4, 5) * 10).astype(np.int32)\ny = (np.random.randn(5) * 10).astype(np.int32)\nz = np.equal(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_equal_bcast')",
          "summary": "equal_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First input operand for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second input operand for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)",
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrains input to integral tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Erf",
    "schema": {
      "description": "Computes the error function of the given input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Erf',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\ny = np.vectorize(math.erf)(x).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_erf')",
          "summary": "erf"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The error function of the input tensor computed element-wise. It has the same shape and type of the input.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to all numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Exp",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Calculates the exponential of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Exp',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.exp(x)  # expected output [0.36787945, 1., 2.71828175]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_exp_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.exp(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_exp')",
          "summary": "exp"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The exponential of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Exp",
    "schema": {
      "description": "Calculates the exponential of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Exp',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.exp(x)  # expected output [0.36787945, 1., 2.71828175]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_exp_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.exp(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_exp')",
          "summary": "exp"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The exponential of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Expand",
    "schema": {
      "description": "Broadcast the input tensor following the given shape and the broadcast rule.\nThe broadcast rule is similar to numpy.array(input) * numpy.ones(shape):\nDimensions are right alignment;\nTwo corresponding dimension must have the same value, or one of them is equal to 1.\nAlso, this operator is similar to numpy.broadcast_to(input, shape),\nbut the major difference is numpy.broadcast_to() does not allow shape to be smaller than input.size().\nIt is possible that the output.shape is not equal to shape, when some dimensions in shape is equal to 1,\nor the shape.ndim < input.shape.ndim.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Expand',\n    inputs=['data', 'new_shape'],\n    outputs=['expanded'],\n)\nshape = [3, 1]\ndata = np.reshape(np.arange(1, np.prod(shape) + 1, dtype=np.float32), shape)\n#print(data)\n#[[1.], [2.], [3.]]\nnew_shape = [2, 1, 6]\nexpanded = data * np.ones(new_shape, dtype=np.float32)\n#print(expanded)\n#[[[1., 1., 1., 1., 1., 1.],\n#  [2., 2., 2., 2., 2., 2.],\n#  [3., 3., 3., 3., 3., 3.]],\n#\n# [[1., 1., 1., 1., 1., 1.],\n#  [2., 2., 2., 2., 2., 2.],\n#  [3., 3., 3., 3., 3., 3.]]]\nnew_shape = np.array(new_shape, dtype=np.int64)\nexpect(node, inputs=[data, new_shape], outputs=[expanded],\n       name='test_expand_dim_changed')",
          "summary": "dim_changed"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Expand',\n    inputs=['data', 'new_shape'],\n    outputs=['expanded'],\n)\nshape = [3, 1]\nnew_shape = [3, 4]\ndata = np.reshape(np.arange(1, np.prod(shape) + 1, dtype=np.float32), shape)\n#print(data)\n#[[1.], [2.], [3.]]\nexpanded = np.tile(data, 4)\n#print(expanded)\n#[[1., 1., 1., 1.],\n# [2., 2., 2., 2.],\n# [3., 3., 3., 3.]]\nnew_shape = np.array(new_shape, dtype=np.int64)\nexpect(node, inputs=[data, new_shape], outputs=[expanded],\n       name='test_expand_dim_unchanged')",
          "summary": "dim_unchanged"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        },
        {
          "description": "A 1-D tensor indicates the shape you want to expand to, following the broadcast rule",
          "name": "shape",
          "type": "tensor(int64)"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 8,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "EyeLike",
    "schema": {
      "attributes": [
        {
          "description": "(Optional) The data type for the elements of the output tensor. If not specified,the data type of the input tensor T1 is used. If input tensor T1 is also notspecified, then type defaults to 'float'.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "description": "(Optional) Index of the diagonal to be populated with ones. Default is 0. If T2 is the output, this op sets T2[i, i+k] = 1. k = 0 populates the main diagonal, k > 0 populates an upper diagonal,  and k < 0 populates a lower diagonal.",
          "name": "k",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Generate a 2D tensor (matrix) with ones on the diagonal and zeros everywhere else. Only 2D\ntensors are supported, i.e. input T1 must be of rank 2. The shape of the output tensor is the\nsame as the input tensor. The data type can be specified by the 'dtype' argument. If\n'dtype' is not specified, then the type of input tensor is used. By default, the main diagonal\nis populated with ones, but attribute 'k' can be used to populate upper or lower diagonals.\nThe 'dtype' argument must be one of the data types specified in the 'DataType' enum field in the\nTensorProto message and be valid as an output type.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = (4, 5)\noff_diagonal_offset = 1\nnode = onnx.helper.make_node(\n    'EyeLike',\n    inputs=['x'],\n    outputs=['y'],\n    k=off_diagonal_offset,\n    dtype=onnx.TensorProto.FLOAT,\n)\n\nx = np.random.randint(0, 100, size=shape, dtype=np.int32)\ny = np.eye(shape[0], shape[1], k=off_diagonal_offset, dtype=np.float32)\nexpect(node, inputs=[x], outputs=[y], name='test_eyelike_populate_off_main_diagonal')",
          "summary": "populate_off_main_diagonal"
        },
        {
          "code": "shape = (3, 4)\nnode = onnx.helper.make_node(\n    'EyeLike',\n    inputs=['x'],\n    outputs=['y'],\n    dtype=onnx.TensorProto.DOUBLE,\n)\n\nx = np.random.randint(0, 100, size=shape, dtype=np.int32)\ny = np.eye(shape[0], shape[1], dtype=np.float64)\nexpect(node, inputs=[x], outputs=[y], name='test_eyelike_with_dtype')",
          "summary": "with_dtype"
        },
        {
          "code": "shape = (4, 4)\nnode = onnx.helper.make_node(\n    'EyeLike',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.random.randint(0, 100, size=shape, dtype=np.int32)\ny = np.eye(shape[0], shape[1], dtype=np.int32)\nexpect(node, inputs=[x], outputs=[y], name='test_eyelike_without_dtype')",
          "summary": "without_dtype"
        }
      ],
      "inputs": [
        {
          "description": "2D input tensor to copy shape, and optionally, type information from.",
          "name": "input",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor, same shape as input tensor T1.",
          "name": "output",
          "type": "T2"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(bool)"
          ],
          "description": "Constrain input types. Strings and complex are not supported.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(bool)"
          ],
          "description": "Constrain output types. Strings and complex are not supported.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "FeatureVectorizer",
    "schema": {
      "attributes": [
        {
          "description": "The size of each input in the input list",
          "name": "inputdimensions",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Concatenates input tensors into one continuous output.<br>\n    All input shapes are 2-D and are concatenated along the second dimention. 1-D tensors are treated as [1,C].\n    Inputs are copied to the output maintaining the order of the input arguments.<br>\n    All inputs must be integers or floats, while the output will be all floating point values.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "An ordered collection of tensors, all with the same element type.",
          "name": "X",
          "option": "variadic",
          "type": "T1"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output array, elements ordered as the inputs.",
          "name": "Y",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "The input type must be a tensor of a numeric type.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Flatten",
    "schema": {
      "attributes": [
        {
          "default": 1,
          "description": "Indicate up to which input dimensions (exclusive) should be flattened to the outer dimension of the output. The value for axis must be in the range [0, R], where R is the rank of the input tensor. When axis = 0, the shape of the output tensor is (1, (d_0 X d_1 ... d_n), where the shape of the input tensor is (d_0, d_1, ... d_n). ",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Shape",
      "description": "Flattens the input tensor into a 2D matrix. If input tensor has shape\n(d_0, d_1, ... d_n) then the output will have shape\n(d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = (2, 3, 4, 5)\na = np.random.random_sample(shape).astype(np.float32)\n\nfor i in range(len(shape)):\n    node = onnx.helper.make_node(\n        'Flatten',\n        inputs=['a'],\n        outputs=['b'],\n        axis=i,\n    )\n\n    new_shape = (1, -1) if i == 0 else (np.prod(shape[0:i]).astype(int), -1)\n    b = np.reshape(a, new_shape)\n    expect(node, inputs=[a], outputs=[b],\n           name='test_flatten_axis' + str(i))",
          "summary": "flatten"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Flatten',\n    inputs=['a'],\n    outputs=['b'],  # Default value for axis: axis=1\n)\n\nshape = (5, 4, 3, 2)\na = np.random.random_sample(shape).astype(np.float32)\nnew_shape = (5, 24)\nb = np.reshape(a, new_shape)\nexpect(node, inputs=[a], outputs=[b],\n       name='test_flatten_default_axis')",
          "summary": "flatten_with_default_axis"
        }
      ],
      "inputs": [
        {
          "description": "A tensor of rank >= axis.",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "A 2D tensor with the contents of the input tensor, with input dimensions up to axis flattened to the outer dimension of the output and remaining input dimensions flattened into the inner dimension of the output.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Flatten",
    "schema": {
      "attributes": [
        {
          "default": 1,
          "description": "Indicate up to which input dimensions (exclusive) should be flattened to the outer dimension of the output. The value for axis must be in the range [0, R], where R is the rank of the input tensor. When axis = 0, the shape of the output tensor is (1, (d_0 X d_1 ... d_n), where the shape of the input tensor is (d_0, d_1, ... d_n). ",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Shape",
      "description": "Flattens the input tensor into a 2D matrix. If input tensor has shape\n(d_0, d_1, ... d_n) then the output will have shape\n(d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = (2, 3, 4, 5)\na = np.random.random_sample(shape).astype(np.float32)\n\nfor i in range(len(shape)):\n    node = onnx.helper.make_node(\n        'Flatten',\n        inputs=['a'],\n        outputs=['b'],\n        axis=i,\n    )\n\n    new_shape = (1, -1) if i == 0 else (np.prod(shape[0:i]).astype(int), -1)\n    b = np.reshape(a, new_shape)\n    expect(node, inputs=[a], outputs=[b],\n           name='test_flatten_axis' + str(i))",
          "summary": "flatten"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Flatten',\n    inputs=['a'],\n    outputs=['b'],  # Default value for axis: axis=1\n)\n\nshape = (5, 4, 3, 2)\na = np.random.random_sample(shape).astype(np.float32)\nnew_shape = (5, 24)\nb = np.reshape(a, new_shape)\nexpect(node, inputs=[a], outputs=[b],\n       name='test_flatten_default_axis')",
          "summary": "flatten_with_default_axis"
        }
      ],
      "inputs": [
        {
          "description": "A tensor of rank >= axis.",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "A 2D tensor with the contents of the input tensor, with input dimensions up to axis flattened to the outer dimension of the output and remaining input dimensions flattened into the inner dimension of the output.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Floor",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Floor takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the floor is, y = floor(x), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Floor',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1.5, 1.2, 2]).astype(np.float32)\ny = np.floor(x)  # expected output [-2., 1., 2.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_floor_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.floor(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_floor')",
          "summary": "floor"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Floor",
    "schema": {
      "description": "Floor takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the floor is, y = floor(x), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Floor',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1.5, 1.2, 2]).astype(np.float32)\ny = np.floor(x)  # expected output [-2., 1., 2.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_floor_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.floor(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_floor')",
          "summary": "floor"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "GRU",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM.",
          "name": "activation_alpha",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM.",
          "name": "activation_beta",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "A list of 2 (or 4 if bidirectional) activation functions for update, reset, and hidden gates. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.",
          "name": "activations",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "default": "foward",
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "The sequence output for the hidden is optional if 0. Default 0.",
          "name": "output_sequence",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "Computes an one-layer GRU. This operator is usually supported via some custom\nimplementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`z` - update gate\n\n`r` - reset gate\n\n`h` - hidden gate\n\n`t` - time step (t-1 means previous time step)\n\n`W[zrh]` - W parameter weight matrix for update, reset, and hidden gates\n\n`R[zrh]` - R recurrence weight matrix for update, reset, and hidden gates\n\n`Wb[zrh]` - W bias vectors for update, reset, and hidden gates\n\n`Rb[zrh]` - R bias vectors for update, reset, and hidden gates\n\n`WB[zrh]` - W parameter weight matrix for backward update, reset, and hidden gates\n\n`RB[zrh]` - R recurrence weight matrix for backward update, reset, and hidden gates\n\n`WBb[zrh]` - W bias vectors for backward update, reset, and hidden gates\n\n`RBb[zrh]` - R bias vectors for backward update, reset, and hidden gates\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  Relu(x)                - max(0, x)\n\n  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  Sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  Affine(x)              - alpha*x + beta\n\n  LeakyRelu(x)           - x if x >= 0 else alpha * x\n\n  ThresholdedRelu(x)     - x if x >= alpha else 0\n\n  ScaledTanh(x)          - alpha*Tanh(beta*x)\n\n  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\n\n  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  Softsign(x)            - x/(1 + |x|)\n\n  Softplus(x)            - log(1 + e^x)\n\nEquations (Default: f=Sigmoid, g=Tanh):\n\n  - zt = f(Xt*(Wz^T) + Ht-1*Rz + Wbz + Rbz)\n\n  - rt = f(Xt*(Wr^T) + Ht-1*Rr + Wbr + Rbr)\n\n  - ht = g(Xt*(Wh^T) + (rt (.) Ht-1)*Rh + Rbh + Wbh) # default, when linear_before_reset = 0\n\n  - ht = g(Xt*(Wh^T) + (rt (.) (Ht-1*Rh + Rbh) + Wbh) # when linear_before_reset != 0\n\n  - Ht = (1 - zt) (.) ht + zt (.) Ht-1\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "input = np.array([[[1., 2.], [3., 4.], [5., 6.]]]).astype(np.float32)\n\ninput_size = 2\nhidden_size = 5\nweight_scale = 0.1\nnumber_of_gates = 3\n\nnode = onnx.helper.make_node(\n    'GRU',\n    inputs=['X', 'W', 'R'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\ngru = GRU_Helper(X=input, W=W, R=R)\n_, Y_h = gru.step()\nexpect(node, inputs=[input, W, R], outputs=[Y_h.astype(np.float32)], name='test_gru_defaults')",
          "summary": "defaults"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 3\nweight_scale = 0.1\ncustom_bias = 0.1\nnumber_of_gates = 3\n\nnode = onnx.helper.make_node(\n    'GRU',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\n# Adding custom bias\nW_B = custom_bias * np.ones((1, number_of_gates * hidden_size)).astype(np.float32)\nR_B = np.zeros((1, number_of_gates * hidden_size)).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\ngru = GRU_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = gru.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_gru_with_initial_bias')",
          "summary": "initial_bias"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]],\n                  [[10., 11., 12.], [13., 14., 15.], [16., 17., 18.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 5\nnumber_of_gates = 3\n\nnode = onnx.helper.make_node(\n    'GRU',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = np.random.randn(1, number_of_gates * hidden_size, input_size).astype(np.float32)\nR = np.random.randn(1, number_of_gates * hidden_size, hidden_size).astype(np.float32)\n\n# Adding custom bias\nW_B = np.random.randn(1, number_of_gates * hidden_size).astype(np.float32)\nR_B = np.random.randn(1, number_of_gates * hidden_size).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\ngru = GRU_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = gru.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_gru_seq_length')",
          "summary": "seq_length"
        }
      ],
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The weight tensor for the gates. Concatenation of `W[zrh]` and `WB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, input_size]`.",
          "name": "W",
          "type": "T"
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `R[zrh]` and `RB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, hidden_size]`.",
          "name": "R",
          "type": "T"
        },
        {
          "description": "The bias tensor for the gates. Concatenation of `[Wb[zrh], Rb[zrh]]` and `[WBb[zrh], RBb[zrh]]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 6*hidden_size]`. Optional: If not specified - assumed to be 0",
          "name": "B",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "option": "optional",
          "type": "T1"
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 6,
      "max_output": 2,
      "min_input": 3,
      "min_output": 2,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. It is optional if `output_sequence` is 0.",
          "name": "Y",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "GRU",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.",
          "name": "activation_alpha",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.",
          "name": "activation_beta",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "A list of 2 (or 4 if bidirectional) activation functions for update, reset, and hidden gates. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.",
          "name": "activations",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "default": "forward",
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "When computing the output of the hidden gate, apply the linear transformation before multiplying by the output of the reset gate.",
          "name": "linear_before_reset",
          "required": false,
          "type": "int"
        },
        {
          "description": "The sequence output for the hidden is optional if 0. Default 0.",
          "name": "output_sequence",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "Computes an one-layer GRU. This operator is usually supported via some custom\nimplementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`z` - update gate\n\n`r` - reset gate\n\n`h` - hidden gate\n\n`t` - time step (t-1 means previous time step)\n\n`W[zrh]` - W parameter weight matrix for update, reset, and hidden gates\n\n`R[zrh]` - R recurrence weight matrix for update, reset, and hidden gates\n\n`Wb[zrh]` - W bias vectors for update, reset, and hidden gates\n\n`Rb[zrh]` - R bias vectors for update, reset, and hidden gates\n\n`WB[zrh]` - W parameter weight matrix for backward update, reset, and hidden gates\n\n`RB[zrh]` - R recurrence weight matrix for backward update, reset, and hidden gates\n\n`WBb[zrh]` - W bias vectors for backward update, reset, and hidden gates\n\n`RBb[zrh]` - R bias vectors for backward update, reset, and hidden gates\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  Relu(x)                - max(0, x)\n\n  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  Sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  Affine(x)              - alpha*x + beta\n\n  LeakyRelu(x)           - x if x >= 0 else alpha * x\n\n  ThresholdedRelu(x)     - x if x >= alpha else 0\n\n  ScaledTanh(x)          - alpha*Tanh(beta*x)\n\n  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\n\n  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  Softsign(x)            - x/(1 + |x|)\n\n  Softplus(x)            - log(1 + e^x)\n\nEquations (Default: f=Sigmoid, g=Tanh):\n\n  - zt = f(Xt*(Wz^T) + Ht-1*Rz + Wbz + Rbz)\n\n  - rt = f(Xt*(Wr^T) + Ht-1*Rr + Wbr + Rbr)\n\n  - ht = g(Xt*(Wh^T) + (rt (.) Ht-1)*Rh + Rbh + Wbh) # default, when linear_before_reset = 0\n\n  - ht = g(Xt*(Wh^T) + (rt (.) (Ht-1*Rh + Rbh) + Wbh) # when linear_before_reset != 0\n\n  - Ht = (1 - zt) (.) ht + zt (.) Ht-1\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "input = np.array([[[1., 2.], [3., 4.], [5., 6.]]]).astype(np.float32)\n\ninput_size = 2\nhidden_size = 5\nweight_scale = 0.1\nnumber_of_gates = 3\n\nnode = onnx.helper.make_node(\n    'GRU',\n    inputs=['X', 'W', 'R'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\ngru = GRU_Helper(X=input, W=W, R=R)\n_, Y_h = gru.step()\nexpect(node, inputs=[input, W, R], outputs=[Y_h.astype(np.float32)], name='test_gru_defaults')",
          "summary": "defaults"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 3\nweight_scale = 0.1\ncustom_bias = 0.1\nnumber_of_gates = 3\n\nnode = onnx.helper.make_node(\n    'GRU',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\n# Adding custom bias\nW_B = custom_bias * np.ones((1, number_of_gates * hidden_size)).astype(np.float32)\nR_B = np.zeros((1, number_of_gates * hidden_size)).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\ngru = GRU_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = gru.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_gru_with_initial_bias')",
          "summary": "initial_bias"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]],\n                  [[10., 11., 12.], [13., 14., 15.], [16., 17., 18.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 5\nnumber_of_gates = 3\n\nnode = onnx.helper.make_node(\n    'GRU',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = np.random.randn(1, number_of_gates * hidden_size, input_size).astype(np.float32)\nR = np.random.randn(1, number_of_gates * hidden_size, hidden_size).astype(np.float32)\n\n# Adding custom bias\nW_B = np.random.randn(1, number_of_gates * hidden_size).astype(np.float32)\nR_B = np.random.randn(1, number_of_gates * hidden_size).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\ngru = GRU_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = gru.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_gru_seq_length')",
          "summary": "seq_length"
        }
      ],
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The weight tensor for the gates. Concatenation of `W[zrh]` and `WB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, input_size]`.",
          "name": "W",
          "type": "T"
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `R[zrh]` and `RB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, hidden_size]`.",
          "name": "R",
          "type": "T"
        },
        {
          "description": "The bias tensor for the gates. Concatenation of `[Wb[zrh], Rb[zrh]]` and `[WBb[zrh], RBb[zrh]]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 6*hidden_size]`. Optional: If not specified - assumed to be 0",
          "name": "B",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "option": "optional",
          "type": "T1"
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 6,
      "max_output": 2,
      "min_input": 3,
      "min_output": 0,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. It is optional if `output_sequence` is 0.",
          "name": "Y",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 3,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "GRU",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.",
          "name": "activation_alpha",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.",
          "name": "activation_beta",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "A list of 2 (or 4 if bidirectional) activation functions for update, reset, and hidden gates. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.",
          "name": "activations",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "default": "forward",
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "When computing the output of the hidden gate, apply the linear transformation before multiplying by the output of the reset gate.",
          "name": "linear_before_reset",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "Computes an one-layer GRU. This operator is usually supported via some custom\nimplementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`z` - update gate\n\n`r` - reset gate\n\n`h` - hidden gate\n\n`t` - time step (t-1 means previous time step)\n\n`W[zrh]` - W parameter weight matrix for update, reset, and hidden gates\n\n`R[zrh]` - R recurrence weight matrix for update, reset, and hidden gates\n\n`Wb[zrh]` - W bias vectors for update, reset, and hidden gates\n\n`Rb[zrh]` - R bias vectors for update, reset, and hidden gates\n\n`WB[zrh]` - W parameter weight matrix for backward update, reset, and hidden gates\n\n`RB[zrh]` - R recurrence weight matrix for backward update, reset, and hidden gates\n\n`WBb[zrh]` - W bias vectors for backward update, reset, and hidden gates\n\n`RBb[zrh]` - R bias vectors for backward update, reset, and hidden gates\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  Relu(x)                - max(0, x)\n\n  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  Sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  Affine(x)              - alpha*x + beta\n\n  LeakyRelu(x)           - x if x >= 0 else alpha * x\n\n  ThresholdedRelu(x)     - x if x >= alpha else 0\n\n  ScaledTanh(x)          - alpha*Tanh(beta*x)\n\n  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\n\n  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  Softsign(x)            - x/(1 + |x|)\n\n  Softplus(x)            - log(1 + e^x)\n\nEquations (Default: f=Sigmoid, g=Tanh):\n\n  - zt = f(Xt*(Wz^T) + Ht-1*(Rz^T) + Wbz + Rbz)\n\n  - rt = f(Xt*(Wr^T) + Ht-1*(Rr^T) + Wbr + Rbr)\n\n  - ht = g(Xt*(Wh^T) + (rt (.) Ht-1)*(Rh^T) + Rbh + Wbh) # default, when linear_before_reset = 0\n\n  - ht = g(Xt*(Wh^T) + (rt (.) (Ht-1*(Rh^T) + Rbh)) + Wbh) # when linear_before_reset != 0\n\n  - Ht = (1 - zt) (.) ht + zt (.) Ht-1\nThis operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "input = np.array([[[1., 2.], [3., 4.], [5., 6.]]]).astype(np.float32)\n\ninput_size = 2\nhidden_size = 5\nweight_scale = 0.1\nnumber_of_gates = 3\n\nnode = onnx.helper.make_node(\n    'GRU',\n    inputs=['X', 'W', 'R'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\ngru = GRU_Helper(X=input, W=W, R=R)\n_, Y_h = gru.step()\nexpect(node, inputs=[input, W, R], outputs=[Y_h.astype(np.float32)], name='test_gru_defaults')",
          "summary": "defaults"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 3\nweight_scale = 0.1\ncustom_bias = 0.1\nnumber_of_gates = 3\n\nnode = onnx.helper.make_node(\n    'GRU',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\n# Adding custom bias\nW_B = custom_bias * np.ones((1, number_of_gates * hidden_size)).astype(np.float32)\nR_B = np.zeros((1, number_of_gates * hidden_size)).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\ngru = GRU_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = gru.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_gru_with_initial_bias')",
          "summary": "initial_bias"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]],\n                  [[10., 11., 12.], [13., 14., 15.], [16., 17., 18.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 5\nnumber_of_gates = 3\n\nnode = onnx.helper.make_node(\n    'GRU',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = np.random.randn(1, number_of_gates * hidden_size, input_size).astype(np.float32)\nR = np.random.randn(1, number_of_gates * hidden_size, hidden_size).astype(np.float32)\n\n# Adding custom bias\nW_B = np.random.randn(1, number_of_gates * hidden_size).astype(np.float32)\nR_B = np.random.randn(1, number_of_gates * hidden_size).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\ngru = GRU_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = gru.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_gru_seq_length')",
          "summary": "seq_length"
        }
      ],
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The weight tensor for the gates. Concatenation of `W[zrh]` and `WB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, input_size]`.",
          "name": "W",
          "type": "T"
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `R[zrh]` and `RB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, hidden_size]`.",
          "name": "R",
          "type": "T"
        },
        {
          "description": "The bias tensor for the gates. Concatenation of `[Wb[zrh], Rb[zrh]]` and `[WBb[zrh], RBb[zrh]]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 6*hidden_size]`. Optional: If not specified - assumed to be 0",
          "name": "B",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "option": "optional",
          "type": "T1"
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 6,
      "max_output": 2,
      "min_input": 3,
      "min_output": 0,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. ",
          "name": "Y",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "GRUUnit",
    "schema": {
      "attributes": [
        {
          "description": "Bool to determine if hidden state is zeroes or passed along for timesteps past the given sequence_length.",
          "name": "drop_states",
          "required": false,
          "type": "int"
        }
      ],
      "description": "GRUUnit computes the activations of a standard GRU,\nin a sequence-length aware fashion.\nConcretely, given the (fused) inputs X (TxNxD), the previous hidden\nstate (NxD), and the sequence lengths (N), computes the GRU\nactivations, avoiding computation if the input is invalid (as in, the\nvalue at X[t][n] >= seqLengths[n].\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "The previous GRU hidden state.",
          "name": "hidden_prev",
          "type": "T"
        },
        {
          "description": "Unactivated gate outputs from forget, update, and output gates, pre-activation.",
          "name": "gates",
          "type": "T"
        },
        {
          "description": "Array of sequence lengths.  len(seq_lengths) should equal batch size N.",
          "name": "seq_lengths",
          "type": "T"
        },
        {
          "description": "The timestep for this operation.",
          "name": "t",
          "type": "T"
        }
      ],
      "max_input": 4,
      "max_output": 1,
      "min_input": 4,
      "min_output": 1,
      "outputs": [
        {
          "description": "The new GRU hidden state calculated by this op.",
          "name": "hidden",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Gather",
    "schema": {
      "attributes": [
        {
          "description": "Which axis to gather on. Negative value means counting dimensions from the back. Accepted range in [-r, r-1]",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Transform",
      "description": "Given `data` tensor of rank r >= 1, and `indices` tensor of rank q, gather\nentries of the axis dimension of `data` (by default outer-most one as axis=0) indexed by `indices`, and concatenates\nthem in an output tensor of rank q + (r - 1).\nExample 1:\n  data = [\n      [1.0, 1.2],\n      [2.3, 3.4],\n      [4.5, 5.7],\n  ]\n  indices = [\n      [0, 1],\n      [1, 2],\n  ]\n  output = [\n      [\n          [1.0, 1.2],\n          [2.3, 3.4],\n      ],\n      [\n          [2.3, 3.4],\n          [4.5, 5.7],\n      ],\n  ]\nExample 2:\n  data = [\n      [1.0, 1.2, 1.9],\n      [2.3, 3.4, 3.9],\n      [4.5, 5.7, 5.9],\n  ]\n  indices = [\n      [0, 2],\n  ]\n  axis = 1,\n  output = [\n      [\n          [1.0, 1.9],\n          [2.3, 3.9],\n          [4.5, 5.9],\n      ],\n  ]\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Gather',\n    inputs=['data', 'indices'],\n    outputs=['y'],\n    axis=0,\n)\ndata = np.random.randn(5, 4, 3, 2).astype(np.float32)\nindices = np.array([0, 1, 3])\ny = np.take(data, indices, axis=0)\n\nexpect(node, inputs=[data, indices.astype(np.int64)], outputs=[y],\n       name='test_gather_0')",
          "summary": "gather_0"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Gather',\n    inputs=['data', 'indices'],\n    outputs=['y'],\n    axis=1,\n)\ndata = np.random.randn(5, 4, 3, 2).astype(np.float32)\nindices = np.array([0, 1, 3])\ny = np.take(data, indices, axis=1)\n\nexpect(node, inputs=[data, indices.astype(np.int64)], outputs=[y],\n       name='test_gather_1')",
          "summary": "gather_1"
        }
      ],
      "inputs": [
        {
          "description": "Tensor of rank r >= 1.",
          "name": "data",
          "type": "T"
        },
        {
          "description": "Tensor of int32/int64 indices, of any rank q.",
          "name": "indices",
          "type": "Tind"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor of rank q + (r - 1).",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to any tensor type.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrain indices to integer types",
          "type_param_str": "Tind"
        }
      ]
    }
  },
  {
    "name": "Gemm",
    "schema": {
      "attributes": [
        {
          "default": 1.0,
          "description": "Scalar multiplier for the product of input tensors A * B, the default value is 1.0.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "default": 1.0,
          "description": "Scalar multiplier for input tensor C, the default value is 1.0.",
          "name": "beta",
          "required": false,
          "type": "float"
        },
        {
          "description": "Whether C should be broadcasted",
          "name": "broadcast",
          "required": false,
          "type": "int"
        },
        {
          "description": "Whether A should be transposed",
          "name": "transA",
          "required": false,
          "type": "int"
        },
        {
          "description": "Whether B should be transposed",
          "name": "transB",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "General Matrix multiplication:\nhttps://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3\nCompute Y = alpha * A * B + beta * C, where input tensor A has\ndimension (M X K), input tensor B has dimension (K X N), input tensor C and\noutput tensor Y have dimension (M X N).\nIf attribute broadcast is non-zero, input tensor C will be broadcasted to match\nthe dimension requirement. A will be transposed before doing the computation\nif attribute transA is non-zero, same for B and transB.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Gemm',\n    inputs=['a', 'b', 'c'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.5\n)\na = np.random.ranf([3, 6]).astype(np.float32)\nb = np.random.ranf([6, 4]).astype(np.float32)\nc = np.random.ranf([3, 4]).astype(np.float32)\ny = 0.5 * np.dot(a, b) + 0.5 * c\nexpect(node, inputs=[a, b, c], outputs=[y],\n       name='test_gemm_nobroadcast')",
          "summary": "notranspose"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Gemm',\n    inputs=['a', 'b', 'c'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.5,\n    transA=1,\n    transB=1\n)\na = np.random.ranf([6, 3]).astype(np.float32)\nb = np.random.ranf([4, 6]).astype(np.float32)\nc = np.random.ranf([1, 1]).astype(np.float32)\ny = 0.5 * np.dot(a.T, b.T) + 0.5 * c\nexpect(node, inputs=[a, b, c], outputs=[y],\n       name='test_gemm_broadcast')",
          "summary": "transpose"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor A",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Input tensor B",
          "name": "B",
          "type": "T"
        },
        {
          "description": "Input tensor C, can be inplace.",
          "name": "C",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor.",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Gemm",
    "schema": {
      "attributes": [
        {
          "default": 1.0,
          "description": "Scalar multiplier for the product of input tensors A * B, the default value is 1.0.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "default": 1.0,
          "description": "Scalar multiplier for input tensor C, the default value is 1.0.",
          "name": "beta",
          "required": false,
          "type": "float"
        },
        {
          "description": "Whether C should be broadcasted",
          "name": "broadcast",
          "required": false,
          "type": "int"
        },
        {
          "description": "Whether A should be transposed",
          "name": "transA",
          "required": false,
          "type": "int"
        },
        {
          "description": "Whether B should be transposed",
          "name": "transB",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "General Matrix multiplication:\nhttps://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3\nCompute Y = alpha * A * B + beta * C, where input tensor A has\ndimension (M X K), input tensor B has dimension (K X N), input tensor C and\noutput tensor Y have dimension (M X N).\nIf attribute broadcast is non-zero, input tensor C will be broadcasted to match\nthe dimension requirement. A will be transposed before doing the computation\nif attribute transA is non-zero, same for B and transB.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Gemm',\n    inputs=['a', 'b', 'c'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.5\n)\na = np.random.ranf([3, 6]).astype(np.float32)\nb = np.random.ranf([6, 4]).astype(np.float32)\nc = np.random.ranf([3, 4]).astype(np.float32)\ny = 0.5 * np.dot(a, b) + 0.5 * c\nexpect(node, inputs=[a, b, c], outputs=[y],\n       name='test_gemm_nobroadcast')",
          "summary": "notranspose"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Gemm',\n    inputs=['a', 'b', 'c'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.5,\n    transA=1,\n    transB=1\n)\na = np.random.ranf([6, 3]).astype(np.float32)\nb = np.random.ranf([4, 6]).astype(np.float32)\nc = np.random.ranf([1, 1]).astype(np.float32)\ny = 0.5 * np.dot(a.T, b.T) + 0.5 * c\nexpect(node, inputs=[a, b, c], outputs=[y],\n       name='test_gemm_broadcast')",
          "summary": "transpose"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor A",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Input tensor B",
          "name": "B",
          "type": "T"
        },
        {
          "description": "Input tensor C",
          "name": "C",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor.",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Gemm",
    "schema": {
      "attributes": [
        {
          "default": 1.0,
          "description": "Scalar multiplier for the product of input tensors A * B.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "default": 1.0,
          "description": "Scalar multiplier for input tensor C.",
          "name": "beta",
          "required": false,
          "type": "float"
        },
        {
          "description": "Whether A should be transposed",
          "name": "transA",
          "required": false,
          "type": "int"
        },
        {
          "description": "Whether B should be transposed",
          "name": "transB",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "General Matrix multiplication:\nhttps://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3\n\nA' = transpose(A) if transA else A\n\nB' = transpose(B) if transB else B\n\nCompute Y = alpha * A' * B' + beta * C, where input tensor A has shape (M, K) or (K, M),\ninput tensor B has shape (K, N) or (N, K), input tensor C is broadcastable to shape (M, N),\nand output tensor Y has shape (M, N). A will be transposed before doing the\ncomputation if attribute transA is non-zero, same for B and transB.\nThis operator supports **unidirectional broadcasting** (tensor C should be unidirectional broadcastable to tensor A * B); for more details please check [the doc](Broadcasting.md).",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Gemm',\n    inputs=['a', 'b', 'c'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.5\n)\na = np.random.ranf([3, 6]).astype(np.float32)\nb = np.random.ranf([6, 4]).astype(np.float32)\nc = np.random.ranf([3, 4]).astype(np.float32)\ny = 0.5 * np.dot(a, b) + 0.5 * c\nexpect(node, inputs=[a, b, c], outputs=[y],\n       name='test_gemm_nobroadcast')",
          "summary": "notranspose"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Gemm',\n    inputs=['a', 'b', 'c'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.5,\n    transA=1,\n    transB=1\n)\na = np.random.ranf([6, 3]).astype(np.float32)\nb = np.random.ranf([4, 6]).astype(np.float32)\nc = np.random.ranf([1, 1]).astype(np.float32)\ny = 0.5 * np.dot(a.T, b.T) + 0.5 * c\nexpect(node, inputs=[a, b, c], outputs=[y],\n       name='test_gemm_broadcast')",
          "summary": "transpose"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor A. The shape of A should be (M, K) if transA is 0, or (K, M) if transA is non-zero.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Input tensor B. The shape of B should be (K, N) if transB is 0, or (N, K) if transB is non-zero.",
          "name": "B",
          "type": "T"
        },
        {
          "description": "Input tensor C. The shape of C should be unidirectional broadcastable to (M, N).",
          "name": "C",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of shape (M, N).",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Gemm",
    "schema": {
      "attributes": [
        {
          "default": 1.0,
          "description": "Scalar multiplier for the product of input tensors A * B.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "default": 1.0,
          "description": "Scalar multiplier for input tensor C.",
          "name": "beta",
          "required": false,
          "type": "float"
        },
        {
          "description": "Whether A should be transposed",
          "name": "transA",
          "required": false,
          "type": "int"
        },
        {
          "description": "Whether B should be transposed",
          "name": "transB",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "General Matrix multiplication:\nhttps://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3\n\nA' = transpose(A) if transA else A\n\nB' = transpose(B) if transB else B\n\nCompute Y = alpha * A' * B' + beta * C, where input tensor A has shape (M, K) or (K, M),\ninput tensor B has shape (K, N) or (N, K), input tensor C is broadcastable to shape (M, N),\nand output tensor Y has shape (M, N). A will be transposed before doing the\ncomputation if attribute transA is non-zero, same for B and transB.\nThis operator supports **unidirectional broadcasting** (tensor C should be unidirectional broadcastable to tensor A * B); for more details please check [the doc](Broadcasting.md).",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Gemm',\n    inputs=['a', 'b', 'c'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.5\n)\na = np.random.ranf([3, 6]).astype(np.float32)\nb = np.random.ranf([6, 4]).astype(np.float32)\nc = np.random.ranf([3, 4]).astype(np.float32)\ny = 0.5 * np.dot(a, b) + 0.5 * c\nexpect(node, inputs=[a, b, c], outputs=[y],\n       name='test_gemm_nobroadcast')",
          "summary": "notranspose"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Gemm',\n    inputs=['a', 'b', 'c'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.5,\n    transA=1,\n    transB=1\n)\na = np.random.ranf([6, 3]).astype(np.float32)\nb = np.random.ranf([4, 6]).astype(np.float32)\nc = np.random.ranf([1, 1]).astype(np.float32)\ny = 0.5 * np.dot(a.T, b.T) + 0.5 * c\nexpect(node, inputs=[a, b, c], outputs=[y],\n       name='test_gemm_broadcast')",
          "summary": "transpose"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor A. The shape of A should be (M, K) if transA is 0, or (K, M) if transA is non-zero.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Input tensor B. The shape of B should be (K, N) if transB is 0, or (N, K) if transB is non-zero.",
          "name": "B",
          "type": "T"
        },
        {
          "description": "Input tensor C. The shape of C should be unidirectional broadcastable to (M, N).",
          "name": "C",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of shape (M, N).",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrain input and output types to float/int tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "GivenTensorFill",
    "schema": {
      "attributes": [
        {
          "description": "",
          "name": "extra_shape",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "",
          "name": "input_as_shape",
          "required": false,
          "type": "int"
        },
        {
          "description": "",
          "name": "shape",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "",
          "name": "values",
          "required": false,
          "type": "float[]"
        }
      ],
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "The shape of filled tensor",
          "name": "shape",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "The filled tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "GlobalAveragePool",
    "schema": {
      "category": "Pool",
      "description": "GlobalAveragePool consumes an input tensor X and applies average pooling across\n the values in the same channel. This is equivalent to AveragePool with kernel size\n equal to the spatial dimension of input tensor.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'GlobalAveragePool',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(1, 3, 5, 5).astype(np.float32)\nspatial_shape = np.ndim(x) - 2\ny = np.average(x, axis=tuple(range(spatial_shape, spatial_shape + 2)))\nfor _ in range(spatial_shape):\n    y = np.expand_dims(y, -1)\nexpect(node, inputs=[x], outputs=[y], name='test_globalaveragepool')",
          "summary": "globalaveragepool"
        },
        {
          "code": "\nnode = onnx.helper.make_node(\n    'GlobalAveragePool',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.array([[[\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]]]).astype(np.float32)\ny = np.array([[[[5]]]]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y], name='test_globalaveragepool_precomputed')",
          "summary": "globalaveragepool_precomputed"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from pooling across the input tensor. Dimensions will be N x C x 1 x 1",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "GlobalLpPool",
    "schema": {
      "attributes": [
        {
          "default": 2.0,
          "description": "p value of the Lp norm used to pool over the input data, default is 2.0.",
          "name": "p",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Pool",
      "description": "GlobalLpPool consumes an input tensor X and applies lp pool pooling across the\n the values in the same channel. This is equivalent to LpPool with kernel size\n equal to the spatial dimension of input tensor.",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimension are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from pooling across the input tensor. Dimensions will be N x C x 1 x 1",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "GlobalLpPool",
    "schema": {
      "attributes": [
        {
          "default": 2,
          "description": "p value of the Lp norm used to pool over the input data.",
          "name": "p",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Pool",
      "description": "GlobalLpPool consumes an input tensor X and applies lp pool pooling across\n the values in the same channel. This is equivalent to LpPool with kernel size\n equal to the spatial dimension of input tensor.",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from pooling across the input tensor. Dimensions will be N x C x 1 x 1",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 2,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "GlobalMaxPool",
    "schema": {
      "category": "Pool",
      "description": "GlobalMaxPool consumes an input tensor X and applies max pooling across\n the values in the same channel. This is equivalent to MaxPool with kernel size\n equal to the spatial dimension of input tensor.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "\nnode = onnx.helper.make_node(\n    'GlobalMaxPool',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(1, 3, 5, 5).astype(np.float32)\nspatial_shape = np.ndim(x) - 2\ny = np.max(x, axis=tuple(range(spatial_shape, spatial_shape + 2)))\nfor _ in range(spatial_shape):\n    y = np.expand_dims(y, -1)\nexpect(node, inputs=[x], outputs=[y], name='test_globalmaxpool')",
          "summary": "globalmaxpool"
        },
        {
          "code": "\nnode = onnx.helper.make_node(\n    'GlobalMaxPool',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.array([[[\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]]]).astype(np.float32)\ny = np.array([[[[9]]]]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y], name='test_globalmaxpool_precomputed')",
          "summary": "globalmaxpool_precomputed"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from pooling across the input tensor. Dimensions will be N x C x 1 x 1",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Greater",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `greater` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Greater',\n    inputs=['x', 'y'],\n    outputs=['greater'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = np.greater(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_greater')",
          "summary": "greater"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Greater',\n    inputs=['x', 'y'],\n    outputs=['greater'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = np.greater(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_greater_bcast')",
          "summary": "greater_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Greater",
    "schema": {
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `greater` logical operation\nelementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Greater',\n    inputs=['x', 'y'],\n    outputs=['greater'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = np.greater(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_greater')",
          "summary": "greater"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Greater',\n    inputs=['x', 'y'],\n    outputs=['greater'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = np.greater(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_greater_bcast')",
          "summary": "greater_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First input operand for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second input operand for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Greater",
    "schema": {
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `greater` logical operation\nelementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Greater',\n    inputs=['x', 'y'],\n    outputs=['greater'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = np.greater(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_greater')",
          "summary": "greater"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Greater',\n    inputs=['x', 'y'],\n    outputs=['greater'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = np.greater(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_greater_bcast')",
          "summary": "greater_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First input operand for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second input operand for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "HardSigmoid",
    "schema": {
      "attributes": [
        {
          "default": 0.20000000298023224,
          "description": "Value of alpha default to 0.2",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "default": 0.5,
          "description": "Value of beta default to 0.5",
          "name": "beta",
          "required": false,
          "type": "float"
        },
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Activation",
      "description": "HardSigmoid takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the HardSigmoid function, y = max(0, min(1, alpha * x + beta)),\nis applied to the tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'HardSigmoid',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.6\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.clip(x * 0.5 + 0.6, 0, 1)  # expected output [0.1, 0.6, 1.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardsigmoid_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x * 0.5 + 0.6, 0, 1)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardsigmoid')",
          "summary": "hardsigmoid"
        },
        {
          "code": "default_alpha = 0.2\ndefault_beta = 0.5\nnode = onnx.helper.make_node(\n    'HardSigmoid',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x * default_alpha + default_beta, 0, 1)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardsigmoid_default')",
          "summary": "hardsigmoid_default"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "HardSigmoid",
    "schema": {
      "attributes": [
        {
          "default": 0.20000000298023224,
          "description": "Value of alpha.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "default": 0.5,
          "description": "Value of beta.",
          "name": "beta",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Activation",
      "description": "HardSigmoid takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the HardSigmoid function, y = max(0, min(1, alpha * x + beta)),\nis applied to the tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'HardSigmoid',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=0.5,\n    beta=0.6\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.clip(x * 0.5 + 0.6, 0, 1)  # expected output [0.1, 0.6, 1.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardsigmoid_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x * 0.5 + 0.6, 0, 1)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardsigmoid')",
          "summary": "hardsigmoid"
        },
        {
          "code": "default_alpha = 0.2\ndefault_beta = 0.5\nnode = onnx.helper.make_node(\n    'HardSigmoid',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x * default_alpha + default_beta, 0, 1)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardsigmoid_default')",
          "summary": "hardsigmoid_default"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Hardmax",
    "schema": {
      "attributes": [
        {
          "default": 1,
          "description": "Describes the axis of the inputs when coerced to 2D; defaults to one because the 0th axis most likely describes the batch_size",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "description": "The operator computes the hardmax (1 for the first maximum value, and 0 for all others) values for each layer in the batch\n of the given input. The input is a 2-D tensor (Tensor<float>) of size\n(batch_size x input_feature_dimensions). The output tensor has the same shape\nand contains the hardmax values of the corresponding input.\n\nInput does not need to explicitly be a 2D vector; rather, it will be\ncoerced into one. For an arbitrary n-dimensional tensor\ninput \\in [a_0, a_1, ..., a_{k-1}, a_k, ..., a_{n-1}] and k is\nthe axis provided, then input will be coerced into a 2-dimensional tensor with\ndimensions [a_0 * ... * a_{k-1}, a_k * ... * a_{n-1}]. For the default\ncase where axis=1, this means the input tensor will be coerced into a 2D tensor\nof dimensions [a_0, a_1 * ... * a_{n-1}], where a_0 is often the batch size.\nIn this situation, we must have a_0 = N and a_1 * ... * a_{n-1} = D.\nEach of these dimensions must be matched correctly, or else the operator\nwill throw errors.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Hardmax',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([[3, 0, 1, 2], [2, 5, 1, 0], [0, 1, 3, 2], [0, 1, 2, 3]]).astype(np.float32)\ny = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardmax_example')\n\n# For multiple occurrances of the maximal values, the first occurrence is selected for one-hot output\nx = np.array([[3, 3, 3, 1]]).astype(np.float32)\ny = np.array([[1, 0, 0, 0]]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardmax_one_hot')",
          "summary": "hardmax"
        },
        {
          "code": "def hardmax_2d(x):  # type: (np.ndarray) -> np.ndarray\n    return np.eye(x.shape[1], dtype=x.dtype)[np.argmax(x, axis=1)]\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Hardmax',\n    inputs=['x'],\n    outputs=['y'],\n    axis=0,\n)\ny = hardmax_2d(x.reshape(1, 60)).reshape(3, 4, 5)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardmax_axis_0')\n\nnode = onnx.helper.make_node(\n    'Hardmax',\n    inputs=['x'],\n    outputs=['y'],\n    axis=1,\n)\ny = hardmax_2d(x.reshape(3, 20)).reshape(3, 4, 5)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardmax_axis_1')\n\n# default axis is 1\nnode = onnx.helper.make_node(\n    'Hardmax',\n    inputs=['x'],\n    outputs=['y'],\n)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardmax_default_axis')\n\nnode = onnx.helper.make_node(\n    'Hardmax',\n    inputs=['x'],\n    outputs=['y'],\n    axis=2,\n)\ny = hardmax_2d(x.reshape(12, 5)).reshape(3, 4, 5)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_hardmax_axis_2')",
          "summary": "hardmax_axis"
        }
      ],
      "inputs": [
        {
          "description": "The input tensor that's coerced into a 2D matrix of size (NxD) as described above.",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output values with the same shape as input tensor (the original size without coercion).",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Identity",
    "schema": {
      "description": "Identity operator",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Identity',\n    inputs=['x'],\n    outputs=['y'],\n)\n\ndata = np.array([[[\n    [1, 2],\n    [3, 4],\n]]], dtype=np.float32)\n\nexpect(node, inputs=[data], outputs=[data],\n       name='test_identity')",
          "summary": "identity"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor to copy input into.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "If",
    "schema": {
      "attributes": [
        {
          "description": "Graph to run if condition is false. Has N outputs: values you wish to be live-out to the enclosing scope. The number of outputs must match the number of outputs in the then_branch.",
          "name": "else_branch",
          "required": true,
          "type": "graph"
        },
        {
          "description": "Graph to run if condition is true. Has N outputs: values you wish to be live-out to the enclosing scope. The number of outputs must match the number of outputs in the else_branch.",
          "name": "then_branch",
          "required": true,
          "type": "graph"
        }
      ],
      "description": "If conditional",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Condition for the if",
          "name": "cond",
          "type": "B"
        }
      ],
      "max_input": 1,
      "max_output": 2147483647,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Values that are live-out to the enclosing scope. The return values in the `then_branch` and `else_branch` must be of the same shape and same data type.",
          "name": "outputs",
          "option": "variadic",
          "type": "V"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "All Tensor types",
          "type_param_str": "V"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Only bool",
          "type_param_str": "B"
        }
      ]
    }
  },
  {
    "name": "ImageScaler",
    "schema": {
      "attributes": [
        {
          "description": "Bias applied to each channel, same size as C.",
          "name": "bias",
          "required": false,
          "type": "float[]"
        },
        {
          "default": 1.0,
          "description": "The scale to apply.",
          "name": "scale",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Data",
      "description": "Scale and bias the input image. Bias values are stored in\nthe same ordering as the image pixel format.",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input tensor of shape [N,C,H,W]",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same shape and type as input",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Imputer",
    "schema": {
      "attributes": [
        {
          "description": "Value(s) to change to",
          "name": "imputed_value_floats",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Value(s) to change to.",
          "name": "imputed_value_int64s",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "A value that needs replacing.",
          "name": "replaced_value_float",
          "required": false,
          "type": "float"
        },
        {
          "description": "A value that needs replacing.",
          "name": "replaced_value_int64",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Replaces inputs that equal one value with another, leaving all other elements alone.<br>\n    This operator is typically used to replace missing values in situations where they have a canonical\n    representation, such as -1, 0, NaN, or some extreme value.<br>\n    One and only one of imputed_value_floats or imputed_value_int64s should be defined -- floats if the input tensor\n    holds floats, integers if the input tensor holds integers. The imputed values must all fit within the\n    width of the tensor element type. One and only one of the replaced_value_float or replaced_value_int64 should be defined,\n    which one depends on whether floats or integers are being processed.<br>\n    The imputed_value attribute length can be 1 element, or it can have one element per input feature.<br>In other words, if the input tensor has the shape [*,F], then the length of the attribute array may be 1 or F. If it is 1, then it is broadcast along the last dimension and applied to each feature.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be processed.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Imputed output data",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input type must be a tensor of a numeric type, either [N,C] or [C]. The output type will be of the same tensor type and shape.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "InstanceNormalization",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 9.999999747378752e-06,
          "description": "The epsilon value to use to avoid division by zero, default is 1e-5f.",
          "name": "epsilon",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Normalization",
      "description": "Carries out instance normalization as described in the paper\nhttps://arxiv.org/abs/1607.08022.\n\ny = scale * (x - mean) / sqrt(variance + epsilon) + B,\nwhere mean and variance are computed per instance per channel.\n\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "def _instancenorm_test_mode(x, s, bias, epsilon=1e-5):  # type: ignore\n    dims_x = len(x.shape)\n    axis = tuple(range(2, dims_x))\n    mean = np.mean(x, axis=axis, keepdims=True)\n    var = np.var(x, axis=axis, keepdims=True)\n    dim_ones = (1,) * (dims_x - 2)\n    s = s.reshape(-1, *dim_ones)\n    bias = bias.reshape(-1, *dim_ones)\n    return s * (x - mean) / np.sqrt(var + epsilon) + bias\n\n# input size: (1, 2, 1, 3)\nx = np.array([[[[-1, 0, 1]], [[2, 3, 4]]]]).astype(np.float32)\ns = np.array([1.0, 1.5]).astype(np.float32)\nbias = np.array([0, 1]).astype(np.float32)\ny = _instancenorm_test_mode(x, s, bias).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'InstanceNormalization',\n    inputs=['x', 's', 'bias'],\n    outputs=['y'],\n)\n\n# output size: (1, 2, 1, 3)\nexpect(node, inputs=[x, s, bias], outputs=[y],\n       name='test_instancenorm_example')\n\n# input size: (2, 3, 4, 5)\nx = np.random.randn(2, 3, 4, 5).astype(np.float32)\ns = np.random.randn(3).astype(np.float32)\nbias = np.random.randn(3).astype(np.float32)\nepsilon = 1e-2\ny = _instancenorm_test_mode(x, s, bias, epsilon).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'InstanceNormalization',\n    inputs=['x', 's', 'bias'],\n    outputs=['y'],\n    epsilon=epsilon,\n)\n\n# output size: (2, 3, 4, 5)\nexpect(node, inputs=[x, s, bias], outputs=[y],\n       name='test_instancenorm_epsilon')",
          "summary": "instancenormalization"
        }
      ],
      "inputs": [
        {
          "description": "The input 4-dimensional tensor of shape NCHW.",
          "name": "input",
          "type": "T"
        },
        {
          "description": "The input 1-dimensional scale tensor of size C.",
          "name": "scale",
          "type": "T"
        },
        {
          "description": "The input 1-dimensional bias tensor of size C.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output 4-dimensional tensor of the same shape as input.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "InstanceNormalization",
    "schema": {
      "attributes": [
        {
          "default": 9.999999747378752e-06,
          "description": "The epsilon value to use to avoid division by zero.",
          "name": "epsilon",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Normalization",
      "description": "Carries out instance normalization as described in the paper\nhttps://arxiv.org/abs/1607.08022.\n\ny = scale * (x - mean) / sqrt(variance + epsilon) + B,\nwhere mean and variance are computed per instance per channel.\n\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "def _instancenorm_test_mode(x, s, bias, epsilon=1e-5):  # type: ignore\n    dims_x = len(x.shape)\n    axis = tuple(range(2, dims_x))\n    mean = np.mean(x, axis=axis, keepdims=True)\n    var = np.var(x, axis=axis, keepdims=True)\n    dim_ones = (1,) * (dims_x - 2)\n    s = s.reshape(-1, *dim_ones)\n    bias = bias.reshape(-1, *dim_ones)\n    return s * (x - mean) / np.sqrt(var + epsilon) + bias\n\n# input size: (1, 2, 1, 3)\nx = np.array([[[[-1, 0, 1]], [[2, 3, 4]]]]).astype(np.float32)\ns = np.array([1.0, 1.5]).astype(np.float32)\nbias = np.array([0, 1]).astype(np.float32)\ny = _instancenorm_test_mode(x, s, bias).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'InstanceNormalization',\n    inputs=['x', 's', 'bias'],\n    outputs=['y'],\n)\n\n# output size: (1, 2, 1, 3)\nexpect(node, inputs=[x, s, bias], outputs=[y],\n       name='test_instancenorm_example')\n\n# input size: (2, 3, 4, 5)\nx = np.random.randn(2, 3, 4, 5).astype(np.float32)\ns = np.random.randn(3).astype(np.float32)\nbias = np.random.randn(3).astype(np.float32)\nepsilon = 1e-2\ny = _instancenorm_test_mode(x, s, bias, epsilon).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'InstanceNormalization',\n    inputs=['x', 's', 'bias'],\n    outputs=['y'],\n    epsilon=epsilon,\n)\n\n# output size: (2, 3, 4, 5)\nexpect(node, inputs=[x, s, bias], outputs=[y],\n       name='test_instancenorm_epsilon')",
          "summary": "instancenormalization"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "input",
          "type": "T"
        },
        {
          "description": "The input 1-dimensional scale tensor of size C.",
          "name": "scale",
          "type": "T"
        },
        {
          "description": "The input 1-dimensional bias tensor of size C.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output tensor of the same shape as input.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "IsNaN",
    "schema": {
      "description": "Returns which elements of the input are NaN.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'IsNaN',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([3.0, np.nan, 4.0, np.nan], dtype=np.float32)\ny = np.isnan(x)\nexpect(node, inputs=[x], outputs=[y], name='test_isnan')",
          "summary": "isnan"
        }
      ],
      "inputs": [
        {
          "description": "input",
          "name": "X",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "output",
          "name": "Y",
          "type": "T2"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input types to float tensors.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrain output types to boolean tensors.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "LRN",
    "schema": {
      "attributes": [
        {
          "default": 9.999999747378752e-05,
          "description": "Scaling parameter.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "default": 0.75,
          "description": "The exponent.",
          "name": "beta",
          "required": false,
          "type": "float"
        },
        {
          "default": 1.0,
          "description": "",
          "name": "bias",
          "required": false,
          "type": "float"
        },
        {
          "description": "The number of channels to sum over",
          "name": "size",
          "required": true,
          "type": "int"
        }
      ],
      "category": "Normalization",
      "description": "Local Response Normalization proposed in the [AlexNet paper](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf).\nIt normalizes over local input regions.\nThe local region is defined across the channels. For an element X[n, c, d1, ..., dk] in a tensor\nof shape (N x C x D1 x D2, ..., Dk), its region is\n{X[n, i, d1, ..., dk] | max(0, c - floor((size - 1) / 2)) <= i <= min(C - 1, c + ceil((size - 1) / 2))}.\n\nsquare_sum[n, c, d1, ..., dk] = sum(X[n, i, d1, ..., dk] ^ 2),\nwhere max(0, c - floor((size - 1) / 2)) <= i <= min(C - 1, c + ceil((size - 1) / 2)).\n\nY[n, c, d1, ..., dk] = X[n, c, d1, ..., dk] / (bias + alpha / size * square_sum[n, c, d1, ..., dk] ) ^ beta\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "alpha = 0.0001\nbeta = 0.75\nbias = 1.0\nnsize = 3\nnode = onnx.helper.make_node(\n    'LRN',\n    inputs=['x'],\n    outputs=['y'],\n    size=3\n)\nx = np.random.randn(5, 5, 5, 5).astype(np.float32)\nsquare_sum = np.zeros((5, 5, 5, 5)).astype(np.float32)\nfor n, c, h, w in np.ndindex(x.shape):\n    square_sum[n, c, h, w] = sum(x[n,\n                                   max(0, c - int(math.floor((nsize - 1) / 2))):min(5, c + int(math.ceil((nsize - 1) / 2)) + 1),\n                                   h,\n                                   w] ** 2)\ny = x / ((bias + (alpha / nsize) * square_sum) ** beta)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_lrn_default')",
          "summary": "default"
        },
        {
          "code": "alpha = 0.0002\nbeta = 0.5\nbias = 2.0\nnsize = 3\nnode = onnx.helper.make_node(\n    'LRN',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=alpha,\n    beta=beta,\n    bias=bias,\n    size=nsize\n)\nx = np.random.randn(5, 5, 5, 5).astype(np.float32)\nsquare_sum = np.zeros((5, 5, 5, 5)).astype(np.float32)\nfor n, c, h, w in np.ndindex(x.shape):\n    square_sum[n, c, h, w] = sum(x[n,\n                                   max(0, c - int(math.floor((nsize - 1) / 2))):min(5, c + int(math.ceil((nsize - 1) / 2)) + 1),\n                                   h,\n                                   w] ** 2)\ny = x / ((bias + (alpha / nsize) * square_sum) ** beta)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_lrn')",
          "summary": "lrn"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor, which has the shape and type as input tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output  types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "LSTM",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.",
          "name": "activation_alpha",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.",
          "name": "activation_beta",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "A list of 3 (or 6 if bidirectional) activation functions for input, output, forget, cell, and hidden. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.",
          "name": "activations",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "default": "forward",
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "Couple the input and forget gates if 1, default 0.",
          "name": "input_forget",
          "required": false,
          "type": "int"
        },
        {
          "description": "The sequence output for the hidden is optional if 0. Default 0.",
          "name": "output_sequence",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "Computes an one-layer LSTM. This operator is usually supported via some\ncustom implementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`i` - input gate\n\n`o` - output gate\n\n`f` - forget gate\n\n`c` - cell gate\n\n`t` - time step (t-1 means previous time step)\n\n`W[iofc]` - W parameter weight matrix for input, output, forget, and cell gates\n\n`R[iofc]` - R recurrence weight matrix for input, output, forget, and cell gates\n\n`Wb[iofc]` - W bias vectors for input, output, forget, and cell gates\n\n`Rb[iofc]` - R bias vectors for input, output, forget, and cell gates\n\n`P[iof]`  - P peephole weight vector for input, output, and forget gates\n\n`WB[iofc]` - W parameter weight matrix for backward input, output, forget, and cell gates\n\n`RB[iofc]` - R recurrence weight matrix for backward input, output, forget, and cell gates\n\n`WBb[iofc]` - W bias vectors for backward input, output, forget, and cell gates\n\n`RBb[iofc]` - R bias vectors for backward input, output, forget, and cell gates\n\n`PB[iof]`  - P peephole weight vector for backward input, output, and forget gates\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  Relu(x)                - max(0, x)\n\n  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  Sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  Affine(x)              - alpha*x + beta\n\n  LeakyRelu(x)           - x if x >= 0 else alpha * x\n\n  ThresholdedRelu(x)     - x if x >= alpha else 0\n\n  ScaledTanh(x)          - alpha*Tanh(beta*x)\n\n  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\n\n  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  Softsign(x)            - x/(1 + |x|)\n\n  Softplus(x)            - log(1 + e^x)\n\nEquations (Default: f=Sigmoid, g=Tanh, h=Tanh):\n\n  - it = f(Xt*(Wi^T) + Ht-1*Ri + Pi (.) Ct-1 + Wbi + Rbi)\n\n  - ft = f(Xt*(Wf^T) + Ht-1*Rf + Pf (.) Ct-1 + Wbf + Rbf)\n\n  - ct = g(Xt*(Wc^T) + Ht-1*Rc + Wbc + Rbc)\n\n  - Ct = ft (.) Ct-1 + it (.) ct\n\n  - ot = f(Xt*(Wo^T) + Ht-1*Ro + Po (.) Ct + Wbo + Rbo)\n\n  - Ht = ot (.) h(Ct)\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "input = np.array([[[1., 2.], [3., 4.], [5., 6.]]]).astype(np.float32)\n\ninput_size = 2\nhidden_size = 3\nweight_scale = 0.1\nnumber_of_gates = 4\n\nnode = onnx.helper.make_node(\n    'LSTM',\n    inputs=['X', 'W', 'R'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\nlstm = LSTM_Helper(X=input, W=W, R=R)\n_, Y_h = lstm.step()\nexpect(node, inputs=[input, W, R], outputs=[Y_h.astype(np.float32)], name='test_lstm_defaults')",
          "summary": "defaults"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 4\nweight_scale = 0.1\ncustom_bias = 0.1\nnumber_of_gates = 4\n\nnode = onnx.helper.make_node(\n    'LSTM',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\n# Adding custom bias\nW_B = custom_bias * np.ones((1, number_of_gates * hidden_size)).astype(np.float32)\nR_B = np.zeros((1, number_of_gates * hidden_size)).astype(np.float32)\nB = np.concatenate((W_B, R_B), 1)\n\nlstm = LSTM_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = lstm.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_lstm_with_initial_bias')",
          "summary": "initial_bias"
        },
        {
          "code": "input = np.array([[[1., 2., 3., 4.], [5., 6., 7., 8.]]]).astype(np.float32)\n\ninput_size = 4\nhidden_size = 3\nweight_scale = 0.1\nnumber_of_gates = 4\nnumber_of_peepholes = 3\n\nnode = onnx.helper.make_node(\n    'LSTM',\n    inputs=['X', 'W', 'R', 'B', 'sequence_lens', 'initial_h', 'initial_c', 'P'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\n# Initializing Inputs\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\nB = np.zeros((1, 2 * number_of_gates * hidden_size)).astype(np.float32)\nseq_lens = np.repeat(input.shape[0], input.shape[1]).astype(np.int32)\ninit_h = np.zeros((1, input.shape[1], hidden_size)).astype(np.float32)\ninit_c = np.zeros((1, input.shape[1], hidden_size)).astype(np.float32)\nP = weight_scale * np.ones((1, number_of_peepholes * hidden_size)).astype(np.float32)\n\nlstm = LSTM_Helper(X=input, W=W, R=R, B=B, P=P, initial_c=init_c, initial_h=init_h)\n_, Y_h = lstm.step()\nexpect(node, inputs=[input, W, R, B, seq_lens, init_h, init_c, P], outputs=[Y_h.astype(np.float32)],\n       name='test_lstm_with_peepholes')",
          "summary": "peepholes"
        }
      ],
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The weight tensor for the gates. Concatenation of `W[iofc]` and `WB[iofc]` (if bidirectional) along dimension 0. The tensor has shape `[num_directions, 4*hidden_size, input_size]`.",
          "name": "W",
          "type": "T"
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `R[iofc]` and `RB[iofc]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 4*hidden_size, hidden_size]`.",
          "name": "R",
          "type": "T"
        },
        {
          "description": "The bias tensor for input gate. Concatenation of `[Wb[iofc], Rb[iofc]]`, and `[WBb[iofc], RBb[iofc]]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 8*hidden_size]`. Optional: If not specified - assumed to be 0.",
          "name": "B",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "option": "optional",
          "type": "T1"
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Optional initial value of the cell. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_c",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The weight tensor for peepholes. Concatenation of `P[iof]` and `PB[iof]` (if bidirectional) along dimension 0. It has shape `[num_directions, 3*hidde_size]`. Optional: If not specified - assumed to be 0.",
          "name": "P",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 8,
      "max_output": 3,
      "min_input": 3,
      "min_output": 0,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. It is optional if `output_sequence` is 0.",
          "name": "Y",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The last output value of the cell. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_c",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "LSTM",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.",
          "name": "activation_alpha",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.",
          "name": "activation_beta",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "A list of 3 (or 6 if bidirectional) activation functions for input, output, forget, cell, and hidden. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.",
          "name": "activations",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "default": "forward",
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "Couple the input and forget gates if 1.",
          "name": "input_forget",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "Computes an one-layer LSTM. This operator is usually supported via some\ncustom implementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`i` - input gate\n\n`o` - output gate\n\n`f` - forget gate\n\n`c` - cell gate\n\n`t` - time step (t-1 means previous time step)\n\n`W[iofc]` - W parameter weight matrix for input, output, forget, and cell gates\n\n`R[iofc]` - R recurrence weight matrix for input, output, forget, and cell gates\n\n`Wb[iofc]` - W bias vectors for input, output, forget, and cell gates\n\n`Rb[iofc]` - R bias vectors for input, output, forget, and cell gates\n\n`P[iof]`  - P peephole weight vector for input, output, and forget gates\n\n`WB[iofc]` - W parameter weight matrix for backward input, output, forget, and cell gates\n\n`RB[iofc]` - R recurrence weight matrix for backward input, output, forget, and cell gates\n\n`WBb[iofc]` - W bias vectors for backward input, output, forget, and cell gates\n\n`RBb[iofc]` - R bias vectors for backward input, output, forget, and cell gates\n\n`PB[iof]`  - P peephole weight vector for backward input, output, and forget gates\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  Relu(x)                - max(0, x)\n\n  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  Sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  Affine(x)              - alpha*x + beta\n\n  LeakyRelu(x)           - x if x >= 0 else alpha * x\n\n  ThresholdedRelu(x)     - x if x >= alpha else 0\n\n  ScaledTanh(x)          - alpha*Tanh(beta*x)\n\n  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\n\n  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  Softsign(x)            - x/(1 + |x|)\n\n  Softplus(x)            - log(1 + e^x)\n\nEquations (Default: f=Sigmoid, g=Tanh, h=Tanh):\n\n  - it = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Pi (.) Ct-1 + Wbi + Rbi)\n\n  - ft = f(Xt*(Wf^T) + Ht-1*(Rf^T) + Pf (.) Ct-1 + Wbf + Rbf)\n\n  - ct = g(Xt*(Wc^T) + Ht-1*(Rc^T) + Wbc + Rbc)\n\n  - Ct = ft (.) Ct-1 + it (.) ct\n\n  - ot = f(Xt*(Wo^T) + Ht-1*(Ro^T) + Po (.) Ct + Wbo + Rbo)\n\n  - Ht = ot (.) h(Ct)\nThis operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "input = np.array([[[1., 2.], [3., 4.], [5., 6.]]]).astype(np.float32)\n\ninput_size = 2\nhidden_size = 3\nweight_scale = 0.1\nnumber_of_gates = 4\n\nnode = onnx.helper.make_node(\n    'LSTM',\n    inputs=['X', 'W', 'R'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\nlstm = LSTM_Helper(X=input, W=W, R=R)\n_, Y_h = lstm.step()\nexpect(node, inputs=[input, W, R], outputs=[Y_h.astype(np.float32)], name='test_lstm_defaults')",
          "summary": "defaults"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 4\nweight_scale = 0.1\ncustom_bias = 0.1\nnumber_of_gates = 4\n\nnode = onnx.helper.make_node(\n    'LSTM',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\n\n# Adding custom bias\nW_B = custom_bias * np.ones((1, number_of_gates * hidden_size)).astype(np.float32)\nR_B = np.zeros((1, number_of_gates * hidden_size)).astype(np.float32)\nB = np.concatenate((W_B, R_B), 1)\n\nlstm = LSTM_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = lstm.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_lstm_with_initial_bias')",
          "summary": "initial_bias"
        },
        {
          "code": "input = np.array([[[1., 2., 3., 4.], [5., 6., 7., 8.]]]).astype(np.float32)\n\ninput_size = 4\nhidden_size = 3\nweight_scale = 0.1\nnumber_of_gates = 4\nnumber_of_peepholes = 3\n\nnode = onnx.helper.make_node(\n    'LSTM',\n    inputs=['X', 'W', 'R', 'B', 'sequence_lens', 'initial_h', 'initial_c', 'P'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\n# Initializing Inputs\nW = weight_scale * np.ones((1, number_of_gates * hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, number_of_gates * hidden_size, hidden_size)).astype(np.float32)\nB = np.zeros((1, 2 * number_of_gates * hidden_size)).astype(np.float32)\nseq_lens = np.repeat(input.shape[0], input.shape[1]).astype(np.int32)\ninit_h = np.zeros((1, input.shape[1], hidden_size)).astype(np.float32)\ninit_c = np.zeros((1, input.shape[1], hidden_size)).astype(np.float32)\nP = weight_scale * np.ones((1, number_of_peepholes * hidden_size)).astype(np.float32)\n\nlstm = LSTM_Helper(X=input, W=W, R=R, B=B, P=P, initial_c=init_c, initial_h=init_h)\n_, Y_h = lstm.step()\nexpect(node, inputs=[input, W, R, B, seq_lens, init_h, init_c, P], outputs=[Y_h.astype(np.float32)],\n       name='test_lstm_with_peepholes')",
          "summary": "peepholes"
        }
      ],
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The weight tensor for the gates. Concatenation of `W[iofc]` and `WB[iofc]` (if bidirectional) along dimension 0. The tensor has shape `[num_directions, 4*hidden_size, input_size]`.",
          "name": "W",
          "type": "T"
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `R[iofc]` and `RB[iofc]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 4*hidden_size, hidden_size]`.",
          "name": "R",
          "type": "T"
        },
        {
          "description": "The bias tensor for input gate. Concatenation of `[Wb[iofc], Rb[iofc]]`, and `[WBb[iofc], RBb[iofc]]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 8*hidden_size]`. Optional: If not specified - assumed to be 0.",
          "name": "B",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "option": "optional",
          "type": "T1"
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Optional initial value of the cell. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_c",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The weight tensor for peepholes. Concatenation of `P[iof]` and `PB[iof]` (if bidirectional) along dimension 0. It has shape `[num_directions, 3*hidde_size]`. Optional: If not specified - assumed to be 0.",
          "name": "P",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 8,
      "max_output": 3,
      "min_input": 3,
      "min_output": 0,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. ",
          "name": "Y",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The last output value of the cell. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_c",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "LabelEncoder",
    "schema": {
      "attributes": [
        {
          "description": "A list of labels.",
          "name": "classes_strings",
          "required": false,
          "type": "string[]"
        },
        {
          "default": -1,
          "description": "An integer to use when an input string value is not found in the map.<br>One and only one of the 'default_*' attributes must be defined.",
          "name": "default_int64",
          "required": false,
          "type": "int"
        },
        {
          "default": "_Unused",
          "description": "A string to use when an input integer value is not found in the map.<br>One and only one of the 'default_*' attributes must be defined.",
          "name": "default_string",
          "required": false,
          "type": "string"
        }
      ],
      "description": "Converts strings to integers and vice versa.<br>\n    If the string default value is set, it will convert integers to strings.\n    If the int default value is set, it will convert strings to integers.<br>\n    Each operator converts either integers to strings or strings to integers, depending \n    on which default value attribute is provided. Only one default value attribute\n    should be defined.<br>\n    When converting from integers to strings, the string is fetched from the\n    'classes_strings' list, by simple indexing.<br>\n    When converting from strings to integers, the string is looked up in the list\n    and the index at which it is found is used as the converted value.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Input data.",
          "name": "X",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data. If strings are input, the output values are integers, and vice versa.",
          "name": "Y",
          "type": "T2"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)"
          ],
          "description": "The input type must be a tensor of integers or strings, of any shape.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)"
          ],
          "description": "The output type will be a tensor of strings or integers, and will have the same shape as the input.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "LabelEncoder",
    "schema": {
      "attributes": [
        {
          "description": "A float.",
          "name": "default_float",
          "required": false,
          "type": "float"
        },
        {
          "default": -1,
          "description": "An integer.",
          "name": "default_int64",
          "required": false,
          "type": "int"
        },
        {
          "default": "_Unused",
          "description": "A string.",
          "name": "default_string",
          "required": false,
          "type": "string"
        },
        {
          "description": "A list of floats.",
          "name": "keys_floats",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "A list of ints.",
          "name": "keys_int64s",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "A list of strings. One and only one of 'keys_*'s should be set.",
          "name": "keys_strings",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "A list of floats.",
          "name": "values_floats",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "A list of ints.",
          "name": "values_int64s",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "A list of strings. One and only one of 'value_*'s should be set.",
          "name": "values_strings",
          "required": false,
          "type": "string[]"
        }
      ],
      "description": "Maps each element in the input tensor to another value.<br>\n    The mapping is determined by the two parallel attributes, 'keys_*' and\n    'values_*' attribute. The i-th value in the specified 'keys_*' attribute\n    would be mapped to the i-th value in the specified 'values_*' attribute. It\n    implies that input's element type and the element type of the specified\n    'keys_*' should be identical while the output type is identical to the\n    specified 'values_*' attribute. If an input element can not be found in the\n    specified 'keys_*' attribute, the 'default_*' that matches the specified\n    'values_*' attribute may be used as its output value.<br>\n    Let's consider an example which maps a string tensor to an integer tensor.\n    Assume and 'keys_strings' is [\"Amy\", \"Sally\"], 'values_int64s' is [5, 6],\n    and 'default_int64' is '-1'.  The input [\"Dori\", \"Amy\", \"Amy\", \"Sally\",\n    \"Sally\"] would be mapped to [-1, 5, 5, 6, 6].<br>\n    Since this operator is an one-to-one mapping, its input and output shapes\n    are the same. Notice that only one of 'keys_*'/'values_*' can be set.<br>\n    For key look-up, bit-wise comparison is used so even a float NaN can be\n    mapped to a value in 'values_*' attribute.<br>\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Input data. It can be either tensor or scalar.",
          "name": "X",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data.",
          "name": "Y",
          "type": "T2"
        }
      ],
      "since_version": 2,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)",
            "tensor(float)"
          ],
          "description": "The input type is a tensor of any shape.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)",
            "tensor(float)"
          ],
          "description": "Output type is determined by the specified 'values_*' attribute.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "LeakyRelu",
    "schema": {
      "attributes": [
        {
          "default": 0.009999999776482582,
          "description": "Coefficient of leakage default to 0.01.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Activation",
      "description": "LeakyRelu takes input data (Tensor<T>) and an argument alpha, and produces one\noutput data (Tensor<T>) where the function `f(x) = alpha * x for x < 0`,\n`f(x) = x for x >= 0`, is applied to the data tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'LeakyRelu',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=0.1\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\n# expected output [-0.1, 0., 1.]\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * 0.1\nexpect(node, inputs=[x], outputs=[y],\n       name='test_leakyrelu_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * 0.1\nexpect(node, inputs=[x], outputs=[y],\n       name='test_leakyrelu')",
          "summary": "leakyrelu"
        },
        {
          "code": "default_alpha = 0.01\nnode = onnx.helper.make_node(\n    'LeakyRelu',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * default_alpha\nexpect(node, inputs=[x], outputs=[y],\n       name='test_leakyrelu_default')",
          "summary": "leakyrelu_default"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "LeakyRelu",
    "schema": {
      "attributes": [
        {
          "default": 0.009999999776482582,
          "description": "Coefficient of leakage.",
          "name": "alpha",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Activation",
      "description": "LeakyRelu takes input data (Tensor<T>) and an argument alpha, and produces one\noutput data (Tensor<T>) where the function `f(x) = alpha * x for x < 0`,\n`f(x) = x for x >= 0`, is applied to the data tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'LeakyRelu',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=0.1\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\n# expected output [-0.1, 0., 1.]\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * 0.1\nexpect(node, inputs=[x], outputs=[y],\n       name='test_leakyrelu_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * 0.1\nexpect(node, inputs=[x], outputs=[y],\n       name='test_leakyrelu')",
          "summary": "leakyrelu"
        },
        {
          "code": "default_alpha = 0.01\nnode = onnx.helper.make_node(\n    'LeakyRelu',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * default_alpha\nexpect(node, inputs=[x], outputs=[y],\n       name='test_leakyrelu_default')",
          "summary": "leakyrelu_default"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Less",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `less` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Less',\n    inputs=['x', 'y'],\n    outputs=['less'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = np.less(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_less')",
          "summary": "less"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Less',\n    inputs=['x', 'y'],\n    outputs=['less'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = np.less(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_less_bcast')",
          "summary": "less_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Less",
    "schema": {
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `less` logical operation\nelementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Less',\n    inputs=['x', 'y'],\n    outputs=['less'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = np.less(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_less')",
          "summary": "less"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Less',\n    inputs=['x', 'y'],\n    outputs=['less'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = np.less(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_less_bcast')",
          "summary": "less_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First input operand for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second input operand for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Less",
    "schema": {
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `less` logical operation\nelementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Less',\n    inputs=['x', 'y'],\n    outputs=['less'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = np.less(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_less')",
          "summary": "less"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Less',\n    inputs=['x', 'y'],\n    outputs=['less'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = np.less(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_less_bcast')",
          "summary": "less_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First input operand for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second input operand for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "LinearClassifier",
    "schema": {
      "attributes": [
        {
          "description": "Class labels when using integer labels. One and only one 'classlabels' attribute must be defined.",
          "name": "classlabels_ints",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Class labels when using string labels. One and only one 'classlabels' attribute must be defined.",
          "name": "classlabels_strings",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "A collection of weights of the model(s).",
          "name": "coefficients",
          "required": true,
          "type": "float[]"
        },
        {
          "description": "A collection of intercepts.",
          "name": "intercepts",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Indicates whether to do OvR or multinomial (0=OvR is the default).",
          "name": "multi_class",
          "required": false,
          "type": "int"
        },
        {
          "default": "NONE",
          "description": "Indicates the transform to apply to the scores vector.<br>One of 'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'",
          "name": "post_transform",
          "required": false,
          "type": "string"
        }
      ],
      "description": "Linear classifier\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be classified.",
          "name": "X",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 2,
      "min_input": 1,
      "min_output": 2,
      "outputs": [
        {
          "description": "Classification outputs (one class per example).",
          "name": "Y",
          "type": "T2"
        },
        {
          "description": "Classification scores ([N,E] - one score for each class and example",
          "name": "Z",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input must be a tensor of a numeric type, and of of shape [N,C] or [C]. In the latter case, it will be treated as [1,C]",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)"
          ],
          "description": "The output will be a tensor of strings or integers.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "LinearRegressor",
    "schema": {
      "attributes": [
        {
          "description": "Weights of the model(s).",
          "name": "coefficients",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Weights of the intercepts, if used.",
          "name": "intercepts",
          "required": false,
          "type": "float[]"
        },
        {
          "default": "NONE",
          "description": "Indicates the transform to apply to the regression output vector.<br>One of 'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'",
          "name": "post_transform",
          "required": false,
          "type": "string"
        },
        {
          "default": 1,
          "description": "The total number of regression targets, 1 if not defined.",
          "name": "targets",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Generalized linear regression evaluation.<br>\n    If targets is set to 1 (default) then univariate regression is performed.<br>\n    If targets is set to M then M sets of coefficients must be passed in as a sequence\n    and M results will be output for each input n in N.<br>\n    The coefficients array is of length n, and the coefficients for each target are contiguous.\n    Intercepts are optional but if provided must match the number of targets.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be regressed.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Regression outputs (one per target, per example).",
          "name": "Y",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input must be a tensor of a numeric type.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Log",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Calculates the natural log of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Log',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([1, 10]).astype(np.float32)\ny = np.log(x)  # expected output [0., 2.30258512]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_log_example')\n\nx = np.exp(np.random.randn(3, 4, 5).astype(np.float32))\ny = np.log(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_log')",
          "summary": "log"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The natural log of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Log",
    "schema": {
      "description": "Calculates the natural log of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Log',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([1, 10]).astype(np.float32)\ny = np.log(x)  # expected output [0., 2.30258512]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_log_example')\n\nx = np.exp(np.random.randn(3, 4, 5).astype(np.float32))\ny = np.log(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_log')",
          "summary": "log"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The natural log of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "LogSoftmax",
    "schema": {
      "attributes": [
        {
          "default": 1,
          "description": "Describes the axis of the inputs when coerced to 2D; defaults to one because the 0th axis most likely describes the batch_size",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Activation",
      "description": "The operator computes the logsoftmax (log of softmax) values for each layer in the batch\n of the given input. The input is a 2-D tensor (Tensor<float>) of size\n(batch_size x input_feature_dimensions). The output tensor has the same shape\nand contains the logsoftmax values of the corresponding input.\n\nInput does not need to explicitly be a 2D vector; rather, it will be\ncoerced into one. For an arbitrary n-dimensional tensor\ninput \\in [a_0, a_1, ..., a_{k-1}, a_k, ..., a_{n-1}] and k is\nthe axis provided, then input will be coerced into a 2-dimensional tensor with\ndimensions [a_0 * ... * a_{k-1}, a_k * ... * a_{n-1}]. For the default\ncase where axis=1, this means the input tensor will be coerced into a 2D tensor\nof dimensions [a_0, a_1 * ... * a_{n-1}], where a_0 is often the batch size.\nIn this situation, we must have a_0 = N and a_1 * ... * a_{n-1} = D.\nEach of these dimensions must be matched correctly, or else the operator\nwill throw errors.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'LogSoftmax',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.array([[-1, 0, 1]]).astype(np.float32)\n# expected output [[-2.40760589, -1.40760589, -0.40760589]]\ny = x - np.log(np.sum(np.exp(x), axis=1))\nexpect(node, inputs=[x], outputs=[y],\n       name='test_logsoftmax_example_1')",
          "summary": "logsoftmax"
        },
        {
          "code": "def logsoftmax_2d(x):  # type: (np.ndarray) -> np.ndarray\n    max_x = np.max(x, axis=1).reshape((-1, 1))\n    exp_x = np.exp(x - max_x)\n    return x - max_x - np.log(np.sum(exp_x, axis=1).reshape((-1, 1)))\n\nx = np.array([[0, 1, 2, 3], [10000, 10001, 10002, 10003]]).astype(np.float32)\n# expected output [[-3.4401896, -2.4401896, -1.44018972, -0.44018969],\n#                 [-3.4401896, -2.4401896, -1.44018972, -0.44018969]]\ny = logsoftmax_2d(x)\n\nnode = onnx.helper.make_node(\n    'LogSoftmax',\n    inputs=['x'],\n    outputs=['y'],\n)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_logsoftmax_large_number')\n\nx = np.abs(np.random.randn(3, 4, 5).astype(np.float32))\nnode = onnx.helper.make_node(\n    'LogSoftmax',\n    inputs=['x'],\n    outputs=['y'],\n    axis=0,\n)\ny = logsoftmax_2d(x.reshape(1, 60)).reshape(3, 4, 5)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_logsoftmax_axis_0')\n\nnode = onnx.helper.make_node(\n    'LogSoftmax',\n    inputs=['x'],\n    outputs=['y'],\n    axis=1,\n)\ny = logsoftmax_2d(x.reshape(3, 20)).reshape(3, 4, 5)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_logsoftmax_axis_1')\n\n# default axis is 1\nnode = onnx.helper.make_node(\n    'LogSoftmax',\n    inputs=['x'],\n    outputs=['y'],\n)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_logsoftmax_default_axis')\n\nnode = onnx.helper.make_node(\n    'LogSoftmax',\n    inputs=['x'],\n    outputs=['y'],\n    axis=2,\n)\ny = logsoftmax_2d(x.reshape(12, 5)).reshape(3, 4, 5)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_logsoftmax_axis_2')",
          "summary": "logsoftmax_axis"
        }
      ],
      "inputs": [
        {
          "description": "The input tensor that's coerced into a 2D matrix of size (NxD) as described above.",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output values with the same shape as input tensor (the original size without coercion).",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Loop",
    "schema": {
      "attributes": [
        {
          "description": "The graph run each iteration. It has 2+N inputs: (iteration_num, condition, loop carried dependencies...). It has 1+N+K outputs: (condition, loop carried dependencies..., scan_outputs...). Each scan_output is created by concatenating the value of the specified output value at the end of each iteration of the loop. It is an error if the dimensions or data type of these scan_outputs change across loop iterations.",
          "name": "body",
          "required": true,
          "type": "graph"
        }
      ],
      "description": "Generic Looping construct. This loop has multiple termination conditions:\n\n1) Trip count. Iteration count specified at runtime. Set by\n   specifying the input M. Optional. Set to empty string to omit.\n   Note that a static trip count (specified at graph construction time) can be\n   specified by passing in a constant node for input M.\n2) Loop termination condition. This is an input to the op that determines\n   whether to run the first iteration and also a loop-carried dependency for\n   the body graph. The body graph must yield a value for the condition variable,\n   whether this input is provided or not.\n\nThis table summarizes the operating modes of this operator with equivalent\nC-style code:\n\n    Operator inputs defined as (max_trip_count, condition_var).\n\n    input (\"\", \"\"):\n        for (int i=0; ; ++i) {\n          cond = ... // Note this value is ignored, but is required in the body\n        }\n\n    input (\"\", cond) // Note this is analogous to a while loop\n        bool cond = ...;\n        for (int i=0; cond; ++i) {\n          cond = ...;\n        }\n\n    input (\"\", 1) // Note this is analogous to a do-while loop\n        bool cond = true\n        for (int i=0; cond; ++i) {\n          cond = ...;\n        }\n\n    input (trip_count, \"\") // Note this is analogous to a for loop\n        int trip_count = ...\n        for (int i=0; i < trip_count; ++i) {\n          cond = ...; // ignored\n        }\n\n    input (trip_count, cond)\n        int trip_count = ...;\n        bool cond = ...;\n        for (int i=0; i < trip_count && cond; ++i) {\n          cond = ...;\n        }\n\n\n*Sample usage - cond as well as trip count*\n\n    graph predict-net {\n      %a = Constant[value = <Scalar Tensor [3]>]()\n      %b = Constant[value = <Scalar Tensor [6]>]()\n      %keepgoing = Constant[value = <Scalar Tensor [1]>]()\n      %max_trip_count = Constant[value = <Scalar Tensor [10]>]()\n      %keepgoing_out, %b_out, %user_defined_vals = Loop[body = <graph body-net>](%max_trip_count, %keepgoing, %b)\n      return\n    }\n\n    graph body-net (\n      %i[INT32, scalar]\n      %keepgoing[BOOL, scalar]\n      %b[INT32, scalar]\n    ) {\n      %my_local = Add(%a, %b)\n      %b_out = Sub(%a, %b)\n      %keepgoing_out = Greater(%my_local, %b_out)\n      %user_defined_vals = Add(%b, %b)\n      return %keepgoing_out, %b_out, %user_defined_vals\n    }\n\n*Sample equivalent C code*\n\n    {\n      /* User-defined code (enclosing scope) */\n      int a = 3, b = 6;\n      bool keepgoing = true; // Analogous to input cond\n      /* End user-defined code */\n\n      /* Implicitly-defined code */\n      const int max_trip_count = 10; // Analogous to input M\n      int user_defined_vals[]; // Imagine this is resizable\n      /* End implicitly-defined code */\n      for (int i=0; i < max_trip_count && keepgoing; ++i) {\n        /* User-defined code (loop body) */\n        int my_local = a + b; // Reading values in the enclosing scope is fine\n        b = a - b; // writes fine if we specify b as a loop-carried dependency\n        keepgoing = my_local > b; // keepgoing is a loop-carried dependency\n        user_defined_vals[i] = b + b;\n        /* End user-defined code */\n      }\n      // my_local = 123; // Can't do this. my_local was defined in the the body\n\n      // These below values are live-out from the loop and therefore accessible\n      b_out; user_defined_vals; keepgoing_out;\n    }\n\nThere are several things of note in this code snippet:\n\n1) Values from the enclosing scope (i.e. variable a here) are in scope and can\n   be referenced in the inputs of the loop.\n2) Any variables which you wish to make available in the enclosing scope (i.e.\n   the variables b and keepgoing) must be declared as either loop-carried\n   dependencies (both at the op inputs and output and at the body net input and\n   output) or scan_outputs.\n3) Values created in the body cannot be accessed in the enclosing scope.\n\nNote that the semantics of this op support \"diagonal\" or \"wavefront\" execution.\n(See Step 3 here for an example:\nhttps://devblogs.nvidia.com/optimizing-recurrent-neural-networks-cudnn-5/).\nFrontends should emit multi-layer RNNs as a series of While operators (with\ntime being the inner looping dimension), with each successive layer consuming\nthe scan_outputs from the previous layer, possibly going through several\npoint-wise operators (e.g. dropout, residual connections, linear layer).\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "A maximum trip-count for the loop specified at runtime. Optional. Pass empty string to skip.",
          "name": "M",
          "option": "optional",
          "type": "I"
        },
        {
          "description": "A boolean termination condition. Optional. Pass empty string to skip.",
          "name": "cond",
          "option": "optional",
          "type": "B"
        },
        {
          "description": "The initial values of any loop-carried dependencies (values that change across loop iterations)",
          "name": "v_initial",
          "option": "variadic",
          "type": "V"
        }
      ],
      "max_input": 2147483647,
      "max_output": 2147483647,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Final N loop carried dependency values then K scan_outputs",
          "name": "v_final_and_scan_outputs",
          "option": "variadic",
          "type": "V"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "All Tensor types",
          "type_param_str": "V"
        },
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "tensor of int64, which should be a scalar.",
          "type_param_str": "I"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "tensor of bool, which should be a scalar.",
          "type_param_str": "B"
        }
      ]
    }
  },
  {
    "name": "LpNormalization",
    "schema": {
      "attributes": [
        {
          "default": -1,
          "description": "The axis on which to apply normalization, -1 mean last axis.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "default": 2,
          "description": "The order of the normalization, only 1 or 2 are supported.",
          "name": "p",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Normalization",
      "description": "Given a matrix, apply Lp-normalization along the provided axis.\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input matrix",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Matrix after normalization",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "LpPool",
    "schema": {
      "attributes": [
        {
          "default": "NOTSET",
          "description": "auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that the output size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the beginning for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 2.0,
          "description": "p value of the Lp norm used to pool over the input data, default is 2.0.",
          "name": "p",
          "required": false,
          "type": "float"
        },
        {
          "description": "Padding for the beginning and ending along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute.",
          "name": "pads",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Pool",
      "description": "LpPool consumes an input tensor X and applies Lp pooling across the\n the tensor according to kernel sizes, stride sizes, and pad lengths.\n Lp pooling consisting of computing the Lp norm on all values of a subset\n of the input tensor according to the kernel size and downsampling the\n data into the output tensor Y for further processing.",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimension are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from Lp pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes.",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "LpPool",
    "schema": {
      "attributes": [
        {
          "default": "NOTSET",
          "description": "auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that the output size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the beginning for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": true,
          "type": "int[]"
        },
        {
          "default": 2,
          "description": "p value of the Lp norm used to pool over the input data.",
          "name": "p",
          "required": false,
          "type": "int"
        },
        {
          "description": "Padding for the beginning and ending along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each axis.",
          "name": "pads",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Pool",
      "description": "LpPool consumes an input tensor X and applies Lp pooling across\n the tensor according to kernel sizes, stride sizes, and pad lengths.\n Lp pooling consisting of computing the Lp norm on all values of a subset\n of the input tensor according to the kernel size and downsampling the\n data into the output tensor Y for further processing.",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from Lp pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes.",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 2,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "MatMul",
    "schema": {
      "description": "Matrix product that behaves like numpy.matmul: https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.matmul.html\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'MatMul',\n    inputs=['a', 'b'],\n    outputs=['c'],\n)\n\n# 2d\na = np.random.randn(3, 4).astype(np.float32)\nb = np.random.randn(4, 3).astype(np.float32)\nc = np.matmul(a, b)\nexpect(node, inputs=[a, b], outputs=[c],\n       name='test_matmul_2d')\n\n# 3d\na = np.random.randn(2, 3, 4).astype(np.float32)\nb = np.random.randn(2, 4, 3).astype(np.float32)\nc = np.matmul(a, b)\nexpect(node, inputs=[a, b], outputs=[c],\n       name='test_matmul_3d')\n\n# 4d\na = np.random.randn(1, 2, 3, 4).astype(np.float32)\nb = np.random.randn(1, 2, 4, 3).astype(np.float32)\nc = np.matmul(a, b)\nexpect(node, inputs=[a, b], outputs=[c],\n       name='test_matmul_4d')",
          "summary": "matmul"
        }
      ],
      "inputs": [
        {
          "description": "N-dimensional matrix A",
          "name": "A",
          "type": "T"
        },
        {
          "description": "N-dimensional matrix B",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Matrix multiply results from A * B",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "MatMul",
    "schema": {
      "description": "Matrix product that behaves like numpy.matmul: https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.matmul.html\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'MatMul',\n    inputs=['a', 'b'],\n    outputs=['c'],\n)\n\n# 2d\na = np.random.randn(3, 4).astype(np.float32)\nb = np.random.randn(4, 3).astype(np.float32)\nc = np.matmul(a, b)\nexpect(node, inputs=[a, b], outputs=[c],\n       name='test_matmul_2d')\n\n# 3d\na = np.random.randn(2, 3, 4).astype(np.float32)\nb = np.random.randn(2, 4, 3).astype(np.float32)\nc = np.matmul(a, b)\nexpect(node, inputs=[a, b], outputs=[c],\n       name='test_matmul_3d')\n\n# 4d\na = np.random.randn(1, 2, 3, 4).astype(np.float32)\nb = np.random.randn(1, 2, 4, 3).astype(np.float32)\nc = np.matmul(a, b)\nexpect(node, inputs=[a, b], outputs=[c],\n       name='test_matmul_4d')",
          "summary": "matmul"
        }
      ],
      "inputs": [
        {
          "description": "N-dimensional matrix A",
          "name": "A",
          "type": "T"
        },
        {
          "description": "N-dimensional matrix B",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Matrix multiply results from A * B",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrain input and output types to float/int tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Max",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Element-wise max of each of the input tensors. All inputs and outputs must\nhave the same shape and data type.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 2, 1]).astype(np.float32)\ndata_1 = np.array([1, 4, 4]).astype(np.float32)\ndata_2 = np.array([2, 5, 3]).astype(np.float32)\nresult = np.array([3, 5, 4]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Max',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_max_example')\n\nnode = onnx.helper.make_node(\n    'Max',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_max_one_input')\n\nresult = np.maximum(data_0, data_1)\nnode = onnx.helper.make_node(\n    'Max',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_max_two_inputs')",
          "summary": "max"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for Max.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "max",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Max",
    "schema": {
      "description": "Element-wise max of each of the input tensors. All inputs and outputs must\nhave the same shape and data type.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 2, 1]).astype(np.float32)\ndata_1 = np.array([1, 4, 4]).astype(np.float32)\ndata_2 = np.array([2, 5, 3]).astype(np.float32)\nresult = np.array([3, 5, 4]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Max',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_max_example')\n\nnode = onnx.helper.make_node(\n    'Max',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_max_one_input')\n\nresult = np.maximum(data_0, data_1)\nnode = onnx.helper.make_node(\n    'Max',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_max_two_inputs')",
          "summary": "max"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for Max.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "max",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Max",
    "schema": {
      "description": "Element-wise max of each of the input tensors (with Numpy-style broadcasting support).\nAll inputs and outputs must have the same data type.\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 2, 1]).astype(np.float32)\ndata_1 = np.array([1, 4, 4]).astype(np.float32)\ndata_2 = np.array([2, 5, 3]).astype(np.float32)\nresult = np.array([3, 5, 4]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Max',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_max_example')\n\nnode = onnx.helper.make_node(\n    'Max',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_max_one_input')\n\nresult = np.maximum(data_0, data_1)\nnode = onnx.helper.make_node(\n    'Max',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_max_two_inputs')",
          "summary": "max"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for max.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor.",
          "name": "max",
          "type": "T"
        }
      ],
      "since_version": 8,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "MaxPool",
    "schema": {
      "attributes": [
        {
          "default": "NOTSET",
          "description": "auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that the output size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the beginning for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": true,
          "type": "int[]"
        },
        {
          "description": "Padding for the beginning and ending along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each axis.",
          "name": "pads",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Pool",
      "description": "MaxPool consumes an input tensor X and applies max pooling across\n the tensor according to kernel sizes, stride sizes, and pad lengths.\n max pooling consisting of computing the max on all values of a\n subset of the input tensor according to the kernel size and downsampling the\n data into the output tensor Y for further processing. The output spatial shape will be following:\n ```\n output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - kernel_spatial_shape[i]) / strides_spatial_shape[i] + 1)\n\n * pad_shape[i] is sum of pads along axis i\n ```\n\n `auto_pad` is a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following:\n ```\n VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - kernel_spatial_shape[i] + 1) / strides_spatial_shape[i])\n SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides_spatial_shape[i])\n ```\n And pad shape will be following if `SAME_UPPER` or `SAME_LOWER`:\n ```\n pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + kernel_spatial_shape[i] - input_spatial_shape[i]\n ```\n The output of each pooling window is maximum number of elements exclude pad.\n ",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32]\noutput_shape: [1, 3, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2],\n)\nx = np.random.randn(1, 3, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = [2]\nstrides = [1]\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, [0], 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_1d_default')",
          "summary": "maxpool_1d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 31, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, (0, 0), 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_default')",
          "summary": "maxpool_2d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 28, 28]\noutput_shape: [1, 3, 30, 30]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    pads=[2, 2, 2, 2]\n)\nx = np.random.randn(1, 3, 28, 28).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (3, 3)\nstrides = (1, 1)\npad_bottom = pad_top = pad_right = pad_left = 2\npad_shape = [pad_top + pad_bottom, pad_left + pad_right]\nout_shape = get_output_shape('VALID', np.add(x_shape[2:], pad_shape), kernel_shape, strides)\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_pads')",
          "summary": "maxpool_2d_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 5, 5]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    pads=[2, 2, 2, 2]\n\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[\n    [13, 14, 15, 15, 15],\n    [18, 19, 20, 20, 20],\n    [23, 24, 25, 25, 25],\n    [23, 24, 25, 25, 25],\n    [23, 24, 25, 25, 25]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_precomputed_pads')",
          "summary": "maxpool_2d_precomputed_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 3, 3]\npad_shape: [2, 2] -> [1, 1, 1, 1] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    strides=[2, 2],\n    auto_pad='SAME_UPPER'\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[7, 9, 10],\n                [17, 19, 20],\n                [22, 24, 25]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_precomputed_same_upper')",
          "summary": "maxpool_2d_precomputed_same_upper"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 2, 2]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    strides=[2, 2]\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[7, 9],\n                [17, 19]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_precomputed_strides')",
          "summary": "maxpool_2d_precomputed_strides"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 32, 32]\npad_shape: [1, 1] -> [1, 0, 1, 0] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    auto_pad='SAME_LOWER'\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('SAME_LOWER', x_shape[2:], kernel_shape, strides)\npad_shape = get_pad_shape('SAME_LOWER', x_shape[2:], kernel_shape, strides, out_shape)\npad_bottom = pad_shape[0] // 2\npad_top = pad_shape[0] - pad_bottom\npad_right = pad_shape[1] // 2\npad_left = pad_shape[1] - pad_right\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_same_lower')",
          "summary": "maxpool_2d_same_lower"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 32, 32]\npad_shape: [1, 1] -> [0, 1, 0, 1] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    auto_pad='SAME_UPPER'\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('SAME_UPPER', x_shape[2:], kernel_shape, strides)\npad_shape = get_pad_shape('SAME_UPPER', x_shape[2:], kernel_shape, strides, out_shape)\npad_top = pad_shape[0] // 2\npad_bottom = pad_shape[0] - pad_top\npad_left = pad_shape[1] // 2\npad_right = pad_shape[1] - pad_left\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_same_upper')",
          "summary": "maxpool_2d_same_upper"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 10, 10]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    strides=[3, 3]\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (5, 5)\nstrides = (3, 3)\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, (0, 0), 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_strides')",
          "summary": "maxpool_2d_strides"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32, 32]\noutput_shape: [1, 3, 31, 31, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2, 2],\n)\nx = np.random.randn(1, 3, 32, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = [2, 2, 2]\nstrides = [1, 1, 1]\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, [0, 0, 0], 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_3d_default')",
          "summary": "maxpool_3d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 5, 5]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y', 'z'],\n    kernel_shape=[5, 5],\n    pads=[2, 2, 2, 2]\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[\n    [13, 14, 15, 15, 15],\n    [18, 19, 20, 20, 20],\n    [23, 24, 25, 25, 25],\n    [23, 24, 25, 25, 25],\n    [23, 24, 25, 25, 25]]]]).astype(np.float32)\nz = np.array([[[\n    [12, 13, 14, 14, 14],\n    [17, 18, 19, 19, 19],\n    [22, 23, 24, 24, 24],\n    [22, 23, 24, 24, 24],\n    [22, 23, 24, 24, 24]]]]).astype(np.int64)\n\nexpect(node, inputs=[x], outputs=[y, z], name='test_maxpool_with_argmax_2d_precomputed_pads')",
          "summary": "maxpool_with_argmax_2d_precomputed_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 2, 2]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y', 'z'],\n    kernel_shape=[2, 2],\n    strides=[2, 2],\n    storage_order=1\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[7, 9],\n                [17, 19]]]]).astype(np.float32)\nz = np.array([[[[6, 16],\n                [8, 18]]]]).astype(np.int64)\n\nexpect(node, inputs=[x], outputs=[y, z], name='test_maxpool_with_argmax_2d_precomputed_strides')",
          "summary": "maxpool_with_argmax_2d_precomputed_strides"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes. Floor value of the dimension is used",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "MaxPool",
    "schema": {
      "attributes": [
        {
          "default": "NOTSET",
          "description": "auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that the output size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the beginning for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": true,
          "type": "int[]"
        },
        {
          "description": "Padding for the beginning and ending along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each axis.",
          "name": "pads",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The storage order of the tensor. 0 is row major, and 1 is column major.",
          "name": "storage_order",
          "required": false,
          "type": "int"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Pool",
      "description": "MaxPool consumes an input tensor X and applies max pooling across\n the tensor according to kernel sizes, stride sizes, and pad lengths.\n max pooling consisting of computing the max on all values of a\n subset of the input tensor according to the kernel size and downsampling the\n data into the output tensor Y for further processing. The output spatial shape will be following:\n ```\n output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - kernel_spatial_shape[i]) / strides_spatial_shape[i] + 1)\n\n * pad_shape[i] is sum of pads along axis i\n ```\n\n `auto_pad` is a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following:\n ```\n VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - kernel_spatial_shape[i] + 1) / strides_spatial_shape[i])\n SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides_spatial_shape[i])\n ```\n And pad shape will be following if `SAME_UPPER` or `SAME_LOWER`:\n ```\n pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + kernel_spatial_shape[i] - input_spatial_shape[i]\n ```\n The output of each pooling window is maximum number of elements exclude pad.\n ",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32]\noutput_shape: [1, 3, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2],\n)\nx = np.random.randn(1, 3, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = [2]\nstrides = [1]\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, [0], 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_1d_default')",
          "summary": "maxpool_1d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 31, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, (0, 0), 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_default')",
          "summary": "maxpool_2d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 28, 28]\noutput_shape: [1, 3, 30, 30]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    pads=[2, 2, 2, 2]\n)\nx = np.random.randn(1, 3, 28, 28).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (3, 3)\nstrides = (1, 1)\npad_bottom = pad_top = pad_right = pad_left = 2\npad_shape = [pad_top + pad_bottom, pad_left + pad_right]\nout_shape = get_output_shape('VALID', np.add(x_shape[2:], pad_shape), kernel_shape, strides)\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_pads')",
          "summary": "maxpool_2d_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 5, 5]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    pads=[2, 2, 2, 2]\n\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[\n    [13, 14, 15, 15, 15],\n    [18, 19, 20, 20, 20],\n    [23, 24, 25, 25, 25],\n    [23, 24, 25, 25, 25],\n    [23, 24, 25, 25, 25]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_precomputed_pads')",
          "summary": "maxpool_2d_precomputed_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 3, 3]\npad_shape: [2, 2] -> [1, 1, 1, 1] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[3, 3],\n    strides=[2, 2],\n    auto_pad='SAME_UPPER'\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[7, 9, 10],\n                [17, 19, 20],\n                [22, 24, 25]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_precomputed_same_upper')",
          "summary": "maxpool_2d_precomputed_same_upper"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 2, 2]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    strides=[2, 2]\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[7, 9],\n                [17, 19]]]]).astype(np.float32)\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_precomputed_strides')",
          "summary": "maxpool_2d_precomputed_strides"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 32, 32]\npad_shape: [1, 1] -> [1, 0, 1, 0] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    auto_pad='SAME_LOWER'\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('SAME_LOWER', x_shape[2:], kernel_shape, strides)\npad_shape = get_pad_shape('SAME_LOWER', x_shape[2:], kernel_shape, strides, out_shape)\npad_bottom = pad_shape[0] // 2\npad_top = pad_shape[0] - pad_bottom\npad_right = pad_shape[1] // 2\npad_left = pad_shape[1] - pad_right\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_same_lower')",
          "summary": "maxpool_2d_same_lower"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 32, 32]\npad_shape: [1, 1] -> [0, 1, 0, 1] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    auto_pad='SAME_UPPER'\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (2, 2)\nstrides = (1, 1)\nout_shape = get_output_shape('SAME_UPPER', x_shape[2:], kernel_shape, strides)\npad_shape = get_pad_shape('SAME_UPPER', x_shape[2:], kernel_shape, strides, out_shape)\npad_top = pad_shape[0] // 2\npad_bottom = pad_shape[0] - pad_top\npad_left = pad_shape[1] // 2\npad_right = pad_shape[1] - pad_left\npadded = np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant',\n                constant_values=np.nan)\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, pad_shape, 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_same_upper')",
          "summary": "maxpool_2d_same_upper"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32]\noutput_shape: [1, 3, 10, 10]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[5, 5],\n    strides=[3, 3]\n)\nx = np.random.randn(1, 3, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = (5, 5)\nstrides = (3, 3)\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, (0, 0), 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_2d_strides')",
          "summary": "maxpool_2d_strides"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 3, 32, 32, 32]\noutput_shape: [1, 3, 31, 31, 31]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y'],\n    kernel_shape=[2, 2, 2],\n)\nx = np.random.randn(1, 3, 32, 32, 32).astype(np.float32)\nx_shape = np.shape(x)\nkernel_shape = [2, 2, 2]\nstrides = [1, 1, 1]\nout_shape = get_output_shape('VALID', x_shape[2:], kernel_shape, strides)\npadded = x\ny = pool(padded, x_shape, kernel_shape, strides, out_shape, [0, 0, 0], 'MAX')\n\nexpect(node, inputs=[x], outputs=[y], name='test_maxpool_3d_default')",
          "summary": "maxpool_3d_default"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 5, 5]\npad_shape: [4, 4] -> [2, 2, 2, 2] by axis\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y', 'z'],\n    kernel_shape=[5, 5],\n    pads=[2, 2, 2, 2]\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[\n    [13, 14, 15, 15, 15],\n    [18, 19, 20, 20, 20],\n    [23, 24, 25, 25, 25],\n    [23, 24, 25, 25, 25],\n    [23, 24, 25, 25, 25]]]]).astype(np.float32)\nz = np.array([[[\n    [12, 13, 14, 14, 14],\n    [17, 18, 19, 19, 19],\n    [22, 23, 24, 24, 24],\n    [22, 23, 24, 24, 24],\n    [22, 23, 24, 24, 24]]]]).astype(np.int64)\n\nexpect(node, inputs=[x], outputs=[y, z], name='test_maxpool_with_argmax_2d_precomputed_pads')",
          "summary": "maxpool_with_argmax_2d_precomputed_pads"
        },
        {
          "code": "\"\"\"\ninput_shape: [1, 1, 5, 5]\noutput_shape: [1, 1, 2, 2]\n\"\"\"\nnode = onnx.helper.make_node(\n    'MaxPool',\n    inputs=['x'],\n    outputs=['y', 'z'],\n    kernel_shape=[2, 2],\n    strides=[2, 2],\n    storage_order=1\n)\nx = np.array([[[\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n]]]).astype(np.float32)\ny = np.array([[[[7, 9],\n                [17, 19]]]]).astype(np.float32)\nz = np.array([[[[6, 16],\n                [8, 18]]]]).astype(np.int64)\n\nexpect(node, inputs=[x], outputs=[y, z], name='test_maxpool_with_argmax_2d_precomputed_strides')",
          "summary": "maxpool_with_argmax_2d_precomputed_strides"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 2,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes. Floor value of the dimension is used",
          "name": "Y",
          "type": "T"
        },
        {
          "description": "Indices tensor from max pooling across the input tensor. The dimensions of indices are the same as output tensor. The values in indices of are the indices of the selected values during pooling. The indices are computed as flatten 1-D tensor, and the indices do not consider padding. So the values in indices are in [0, N x C x D1 x ... x Dn).",
          "name": "Indices",
          "option": "optional",
          "type": "I"
        }
      ],
      "since_version": 8,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "Constrain index tensor to int64",
          "type_param_str": "I"
        }
      ]
    }
  },
  {
    "name": "MaxRoiPool",
    "schema": {
      "attributes": [
        {
          "description": "ROI pool output shape (height, width).",
          "name": "pooled_shape",
          "required": true,
          "type": "int[]"
        },
        {
          "default": 1.0,
          "description": "Multiplicative spatial scale factor to translate ROI coordinates from their input scale to the scale used when pooling.",
          "name": "spatial_scale",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Pool",
      "description": "ROI max pool consumes an input tensor X and region of interests (RoIs) to\n apply max pooling across each RoI, to produce output 4-D tensor of shape\n (num_rois, channels, pooled_shape[0], pooled_shape[1]).",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "RoIs (Regions of Interest) to pool over. Should be a 2-D tensor of shape (num_rois, 5) given as [[batch_id, x1, y1, x2, y2], ...].",
          "name": "rois",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "RoI pooled output 4-D tensor of shape (num_rois, channels, pooled_shape[0], pooled_shape[1]).",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "MaxUnpool",
    "schema": {
      "attributes": [
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": true,
          "type": "int[]"
        },
        {
          "description": "Padding for the beginning and ending along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each axis.",
          "name": "pads",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "MaxUnpool essentially computes the partial inverse of the MaxPool op.\n The input information to this op is typically the the output information from a MaxPool op. The first\n input tensor X is the tensor that needs to be unpooled, which is typically the pooled tensor (first output)\n from MaxPool. The second input tensor, I, contains the indices to the (locally maximal) elements corrsponding\n to the elements in the first input tensor X. Input tensor I is typically the second output of the MaxPool op.\n The third (optional) input is a tensor that specifies the output size of the unpooling operation.\n\nMaxUnpool is intended to do 'partial' inverse of the MaxPool op. 'Partial' because all the non-maximal\n values from the original input to MaxPool are set to zero in the output of the MaxUnpool op. Pooling\n the result of an unpooling operation should give back the original input to the unpooling op.\n\nMaxUnpool can produce the same output size for several input sizes, which makes unpooling op ambiguous.\n The third input argument, output_size, is meant to disambiguate the op and produce output tensor of\n known/predictable size.\n\nIn addition to the inputs, MaxUnpool takes three attributes, namely kernel_shape, strides, and pads,\n which define the exact unpooling op. The attributes typically have the same values as the corrsponding\n pooling op that the unpooling op is trying to invert.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'MaxUnpool',\n    inputs=['xT', 'xI', 'output_shape'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    strides=[2, 2]\n)\nxT = np.array([[[[5, 6],\n                 [7, 8]]]], dtype=np.float32)\nxI = np.array([[[[5, 7],\n                 [13, 15]]]], dtype=np.int64)\noutput_shape = np.array((1, 1, 5, 5), dtype=np.int64)\ny = np.array([[[[0, 0, 0, 0, 0],\n                [0, 5, 0, 6, 0],\n                [0, 0, 0, 0, 0],\n                [0, 7, 0, 8, 0],\n                [0, 0, 0, 0, 0]]]], dtype=np.float32)\nexpect(node, inputs=[xT, xI, output_shape], outputs=[y], name='test_maxunpool_export_with_output_shape')",
          "summary": "with_output_shape"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'MaxUnpool',\n    inputs=['xT', 'xI'],\n    outputs=['y'],\n    kernel_shape=[2, 2],\n    strides=[2, 2]\n)\nxT = np.array([[[[1, 2],\n                 [3, 4]]]], dtype=np.float32)\nxI = np.array([[[[5, 7],\n                 [13, 15]]]], dtype=np.int64)\ny = np.array([[[[0, 0, 0, 0],\n                [0, 1, 0, 2],\n                [0, 0, 0, 0],\n                [0, 3, 0, 4]]]], dtype=np.float32)\nexpect(node, inputs=[xT, xI], outputs=[y], name='test_maxunpool_export_without_output_shape')",
          "summary": "without_output_shape"
        }
      ],
      "inputs": [
        {
          "description": "Input data tensor that has to be unpooled. This tensor is typically the first output of the MaxPool op.Dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non-image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].",
          "name": "X",
          "type": "T1"
        },
        {
          "description": "Input data tensor containing the indices corresponding to elements in the first input tensor X.This tensor is typically the second output of the MaxPool op.Dimensions must be the same as input tensor X. The indices are linear, i.e. computed considering the tensor as flattened 1-D tensor, assuming row-major storage. Also, the linear indices should not consider padding. So the values in indices are in the range [0, N x C x D1 x ... x Dn).",
          "name": "I",
          "type": "T2"
        },
        {
          "description": "The shape of the output can be explicitly set which will cause pads values to be auto generated. If 'output_shape' is specified, 'pads' values are ignored.",
          "name": "output_shape",
          "option": "optional",
          "type": "T2"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor that contains the result of the unpooling.",
          "name": "output",
          "type": "T1"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "Constrain index tensor to int64",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "Mean",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Element-wise mean of each of the input tensors. All inputs and outputs must\nhave the same shape and data type.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 0, 2]).astype(np.float32)\ndata_1 = np.array([1, 3, 4]).astype(np.float32)\ndata_2 = np.array([2, 6, 6]).astype(np.float32)\nresult = np.array([2, 3, 4]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Mean',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_mean_example')\n\nnode = onnx.helper.make_node(\n    'Mean',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_mean_one_input')\n\nresult = np.divide(np.add(data_0, data_1), 2.)\nnode = onnx.helper.make_node(\n    'Mean',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_mean_two_inputs')",
          "summary": "mean"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for Mean.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "mean",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Mean",
    "schema": {
      "description": "Element-wise mean of each of the input tensors. All inputs and outputs must\nhave the same shape and data type.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 0, 2]).astype(np.float32)\ndata_1 = np.array([1, 3, 4]).astype(np.float32)\ndata_2 = np.array([2, 6, 6]).astype(np.float32)\nresult = np.array([2, 3, 4]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Mean',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_mean_example')\n\nnode = onnx.helper.make_node(\n    'Mean',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_mean_one_input')\n\nresult = np.divide(np.add(data_0, data_1), 2.)\nnode = onnx.helper.make_node(\n    'Mean',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_mean_two_inputs')",
          "summary": "mean"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for Mean.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "mean",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Mean",
    "schema": {
      "description": "Element-wise mean of each of the input tensors (with Numpy-style broadcasting support).\nAll inputs and outputs must have the same data type.\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 0, 2]).astype(np.float32)\ndata_1 = np.array([1, 3, 4]).astype(np.float32)\ndata_2 = np.array([2, 6, 6]).astype(np.float32)\nresult = np.array([2, 3, 4]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Mean',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_mean_example')\n\nnode = onnx.helper.make_node(\n    'Mean',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_mean_one_input')\n\nresult = np.divide(np.add(data_0, data_1), 2.)\nnode = onnx.helper.make_node(\n    'Mean',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_mean_two_inputs')",
          "summary": "mean"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for mean.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor.",
          "name": "mean",
          "type": "T"
        }
      ],
      "since_version": 8,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Min",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Element-wise min of each of the input tensors. All inputs and outputs must\nhave the same shape and data type.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 2, 1]).astype(np.float32)\ndata_1 = np.array([1, 4, 4]).astype(np.float32)\ndata_2 = np.array([2, 5, 0]).astype(np.float32)\nresult = np.array([1, 2, 0]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Min',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_min_example')\n\nnode = onnx.helper.make_node(\n    'Min',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_min_one_input')\n\nresult = np.minimum(data_0, data_1)\nnode = onnx.helper.make_node(\n    'Min',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_min_two_inputs')",
          "summary": "min"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for Min",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "min",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Min",
    "schema": {
      "description": "Element-wise min of each of the input tensors. All inputs and outputs must\nhave the same shape and data type.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 2, 1]).astype(np.float32)\ndata_1 = np.array([1, 4, 4]).astype(np.float32)\ndata_2 = np.array([2, 5, 0]).astype(np.float32)\nresult = np.array([1, 2, 0]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Min',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_min_example')\n\nnode = onnx.helper.make_node(\n    'Min',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_min_one_input')\n\nresult = np.minimum(data_0, data_1)\nnode = onnx.helper.make_node(\n    'Min',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_min_two_inputs')",
          "summary": "min"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for Min",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "min",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Min",
    "schema": {
      "description": "Element-wise min of each of the input tensors (with Numpy-style broadcasting support).\nAll inputs and outputs must have the same data type.\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 2, 1]).astype(np.float32)\ndata_1 = np.array([1, 4, 4]).astype(np.float32)\ndata_2 = np.array([2, 5, 0]).astype(np.float32)\nresult = np.array([1, 2, 0]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Min',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_min_example')\n\nnode = onnx.helper.make_node(\n    'Min',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_min_one_input')\n\nresult = np.minimum(data_0, data_1)\nnode = onnx.helper.make_node(\n    'Min',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_min_two_inputs')",
          "summary": "min"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for min.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor.",
          "name": "min",
          "type": "T"
        }
      ],
      "since_version": 8,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Mul",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        },
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Performs element-wise binary multiplication (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of element size 1 (including a scalar tensor and any\ntensor with rank equal to or smaller than the first tensor), or having its\nshape as a contiguous subset of the first tensor's shape. The starting of the\nmutually equal shape is specified by the argument \"axis\", and if it is not set,\nsuffix matching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Mul',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array([4, 5, 6]).astype(np.float32)\nz = x * y  # expected output [4., 10., 18.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_mul_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = x * y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_mul')",
          "summary": "mul"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Mul',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = x * y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_mul_bcast')",
          "summary": "mul_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Mul",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Performs element-wise binary multiplication (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of element size 1 (including a scalar tensor and any\ntensor with rank equal to or smaller than the first tensor), or having its\nshape as a contiguous subset of the first tensor's shape. The starting of the\nmutually equal shape is specified by the argument \"axis\", and if it is not set,\nsuffix matching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Mul',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array([4, 5, 6]).astype(np.float32)\nz = x * y  # expected output [4., 10., 18.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_mul_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = x * y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_mul')",
          "summary": "mul"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Mul',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = x * y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_mul_bcast')",
          "summary": "mul_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Mul",
    "schema": {
      "description": "Performs element-wise binary multiplication (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Mul',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array([4, 5, 6]).astype(np.float32)\nz = x * y  # expected output [4., 10., 18.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_mul_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = x * y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_mul')",
          "summary": "mul"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Mul',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = x * y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_mul_bcast')",
          "summary": "mul_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same element type as two inputs",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Multinomial",
    "schema": {
      "attributes": [
        {
          "default": 6,
          "description": "(Optional) The data type for the elements of the output tensor, if not specified, we will use int32.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "default": 1,
          "description": "Number of times to sample.",
          "name": "sample_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "(Optional) Seed to the random generator, if not specified we will auto generate one.",
          "name": "seed",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Generate a tensor of samples from a multinomial distribution according to the probabilities\nof each of the possible outcomes.\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input tensor with shape [batch_size, class_size], where class_size is the number of all possible outcomes. Each value along the axis zero represents the unnormalized log-probability of each corresponding outcome in a batch.",
          "name": "input",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor with shape [batch_size, sample_size], where sample_size is the number of times to sample. Each value along the axis zero represents the outcome of the corresponding sample in a batch.",
          "name": "output",
          "type": "T2"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input types to float tensors.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrain output types to integral tensors.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "Neg",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Neg takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where each element flipped sign, y = -x, is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Neg',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-4, 2]).astype(np.float32)\ny = np.negative(x)  # expected output [4., -2.],\nexpect(node, inputs=[x], outputs=[y],\n       name='test_neg_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.negative(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_neg')",
          "summary": "neg"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Neg",
    "schema": {
      "description": "Neg takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where each element flipped sign, y = -x, is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Neg',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-4, 2]).astype(np.float32)\ny = np.negative(x)  # expected output [4., -2.],\nexpect(node, inputs=[x], outputs=[y],\n       name='test_neg_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.negative(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_neg')",
          "summary": "neg"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(int32)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to signed numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Normalizer",
    "schema": {
      "attributes": [
        {
          "default": "MAX",
          "description": "One of 'MAX,' 'L1,' 'L2'",
          "name": "norm",
          "required": false,
          "type": "string"
        }
      ],
      "description": "Normalize the input.  There are three normalization modes, which have the corresponding formulas,\n    defined using element-wise infix operators '/' and '^' and tensor-wide functions 'max' and 'sum':<br>\n<br>\n    Max: Y = X / max(X)<br>\n    L1:  Y = X / sum(X)<br>\n    L2:  Y = sqrt(X^2 / sum(X^2)}<br>\n    In all modes, if the divisor is zero, Y == X.\n<br>\n    For batches, that is, [N,C] tensors, normalization is done along the C axis. In other words, each row\n    of the batch is normalized independently.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be encoded, a tensor of shape [N,C] or [C]",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Encoded output data",
          "name": "Y",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input must be a tensor of a numeric type.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Not",
    "schema": {
      "category": "Logic",
      "description": "Returns the negation of the input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Not',\n    inputs=['x'],\n    outputs=['not'],\n)\n\n# 2d\nx = (np.random.randn(3, 4) > 0).astype(np.bool)\nexpect(node, inputs=[x], outputs=[np.logical_not(x)],\n       name='test_not_2d')\n\n# 3d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\nexpect(node, inputs=[x], outputs=[np.logical_not(x)],\n       name='test_not_3d')\n\n# 4d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\nexpect(node, inputs=[x], outputs=[np.logical_not(x)],\n       name='test_not_4d')",
          "summary": "not"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input/output to boolean tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "OneHot",
    "schema": {
      "attributes": [
        {
          "default": -1,
          "description": "(Optional) Axis along which one-hot representation in added. Default: axis=-1. axis=-1 means that the additional dimension will be inserted as the innermost/last dimension in the output tensor.",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Produces a one-hot tensor based on inputs.\n    The locations represented by the index values in the 'indices' input tensor will have 'on_value'\n    and the other locations will have 'off_value' in the output tensor, where 'on_value' and 'off_value'\n    are specified as part of required input argument 'values', which is a two-element tensor of format\n    [off_value, on_value]. The rank of the output tensor will be one greater than the rank of the\n    input tensor. The additional dimension is for one-hot representation. The additional dimension will\n    be inserted at the position specified by 'axis'. If 'axis' is not specified then then additional\n    dimension will be inserted as the innermost dimension, i.e. axis=-1. The size of the additional\n    dimension is specified by required scalar input 'depth'. The type of the output tensor is the same\n    as the type of the 'values' input. Any entries in the 'indices' input tensor with values outside\n    the range [0, depth) will result in one-hot representation with all 'off_value' values in the\n    output tensor.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "axisValue = 1\non_value = 3\noff_value = 1\noutput_type = np.float32\nnode = onnx.helper.make_node(\n    'OneHot',\n    inputs=['indices', 'depth', 'values'],\n    outputs=['y'],\n    axis=axisValue\n)\nindices = np.array([[1, 9],\n                    [2, 4]], dtype=np.float32)\ndepth = np.array([10], dtype=np.float32)\nvalues = np.array([off_value, on_value], dtype=output_type)\ny = one_hot(indices, depth, axis=axisValue, dtype=output_type)\ny = y * (on_value - off_value) + off_value\nexpect(node, inputs=[indices, depth, values], outputs=[y], name='test_onehot_with_axis')",
          "summary": "with_axis"
        },
        {
          "code": "on_value = 5\noff_value = 2\noutput_type = np.int32\nnode = onnx.helper.make_node(\n    'OneHot',\n    inputs=['indices', 'depth', 'values'],\n    outputs=['y']\n)\nindices = np.array([0, 7, 8], dtype=np.int64)\ndepth = np.array([12], dtype=np.float32)\nvalues = np.array([off_value, on_value], dtype=output_type)\ny = one_hot(indices, depth, dtype=output_type)\ny = y * (on_value - off_value) + off_value\nexpect(node, inputs=[indices, depth, values], outputs=[y], name='test_onehot_without_axis')",
          "summary": "without_axis"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor containing indices. The values must be non-negative integers. Any entries in the 'indices' input tensor with values outside the range [0, depth) will result in one-hot representation with all 'off_value' values in the output tensor.In case 'indices' is of non-integer type, the values will be casted to int64 before use.",
          "name": "indices",
          "type": "T1"
        },
        {
          "description": "Scalar specifying the number of classes in one-hot tensor. This is also the size of the one-hot dimension (specified by 'axis' attribute) added on in the output tensor and the values in the 'indices' input tensor are expected to be in the range [0, depth). TheIn case 'depth' is of non-integer type, it will be casted to int64 before use.",
          "name": "depth",
          "type": "T2"
        },
        {
          "description": "Rank 1 tensor containing exactly two elements, in the format [off_value, on_value], where 'on_value' is the value used for filling locations specified in 'indices' input tensor, and 'off_value' is the value used for filling locations other than those specified in 'indices' input tensor. ",
          "name": "values",
          "type": "T3"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor of rank one greater than input tensor 'indices', i.e. rank(output) = rank(indices) + 1. The data type for the elements of the output tensor is the same as the type of input 'values' is used.",
          "name": "output",
          "type": "T3"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to only numeric types.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to only numeric types.",
          "type_param_str": "T2"
        },
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain to any tensor type.",
          "type_param_str": "T3"
        }
      ]
    }
  },
  {
    "name": "OneHotEncoder",
    "schema": {
      "attributes": [
        {
          "description": "List of categories, ints.<br>One and only one of the 'cats_*' attributes must be defined.",
          "name": "cats_int64s",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "List of categories, strings.<br>One and only one of the 'cats_*' attributes must be defined.",
          "name": "cats_strings",
          "required": false,
          "type": "string[]"
        },
        {
          "default": 1,
          "description": "If true and category is not present, will return all zeros; if false and a category if not found, the operator will fail.",
          "name": "zeros",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Replace each input element with an array of ones and zeros, where a single\n    one is placed at the index of the category that was passed in. The total category count \n    will determine the size of the extra dimension of the output array Y.<br>\n    For example, if we pass a tensor with a single value of 4, and a category count of 8, \n    the output will be a tensor with ``[0,0,0,0,1,0,0,0]``.<br>\n    This operator assumes every input feature is from the same set of categories.<br>\n    If the input is a tensor of float, int32, or double, the data will be cast\n    to integers and the cats_int64s category list will be used for the lookups.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be encoded.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Encoded output data, having one more dimension than X.",
          "name": "Y",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)",
            "tensor(int32)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "The input must be a tensor of a numeric type.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Or",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `or` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Or',\n    inputs=['x', 'y'],\n    outputs=['or'],\n)\n\n# 2d\nx = (np.random.randn(3, 4) > 0).astype(np.bool)\ny = (np.random.randn(3, 4) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or2d')\n\n# 3d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or3d')\n\n# 4d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or4d')",
          "summary": "or"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Or',\n    inputs=['x', 'y'],\n    outputs=['or'],\n)\n\n# 3d vs 1d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(5) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast3v1d')\n\n# 3d vs 2d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(4, 5) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast3v2d')\n\n# 4d vs 2d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(5, 6) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast4v2d')\n\n# 4d vs 3d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(4, 5, 6) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast4v3d')\n\n# 4d vs 4d\nx = (np.random.randn(1, 4, 1, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 1, 5, 6) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast4v4d')",
          "summary": "or_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input to boolean tensor.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Or",
    "schema": {
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `or` logical operation\nelementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Or',\n    inputs=['x', 'y'],\n    outputs=['or'],\n)\n\n# 2d\nx = (np.random.randn(3, 4) > 0).astype(np.bool)\ny = (np.random.randn(3, 4) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or2d')\n\n# 3d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or3d')\n\n# 4d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or4d')",
          "summary": "or"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Or',\n    inputs=['x', 'y'],\n    outputs=['or'],\n)\n\n# 3d vs 1d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(5) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast3v1d')\n\n# 3d vs 2d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(4, 5) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast3v2d')\n\n# 4d vs 2d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(5, 6) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast4v2d')\n\n# 4d vs 3d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(4, 5, 6) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast4v3d')\n\n# 4d vs 4d\nx = (np.random.randn(1, 4, 1, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 1, 5, 6) > 0).astype(np.bool)\nz = np.logical_or(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_or_bcast4v4d')",
          "summary": "or_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First input operand for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second input operand for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input to boolean tensor.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "PRelu",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Activation",
      "description": "PRelu takes input data (Tensor<T>) and slope tensor as input, and produces one\noutput data (Tensor<T>) where the function `f(x) = slope * x for x < 0`,\n`f(x) = x for x >= 0`., is applied to the data tensor elementwise.\n\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'PRelu',\n    inputs=['x', 'slope'],\n    outputs=['y'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\nslope = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * slope\n\nexpect(node, inputs=[x, slope], outputs=[y],\n       name='test_prelu_example')",
          "summary": "prelu"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'PRelu',\n    inputs=['x', 'slope'],\n    outputs=['y'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\nslope = np.random.randn(5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * slope\n\nexpect(node, inputs=[x, slope], outputs=[y],\n       name='test_prelu_broadcast')",
          "summary": "prelu_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        },
        {
          "description": "Slope tensor. If `Slope` is of size 1, the value is sharedacross different channels",
          "name": "slope",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "PRelu",
    "schema": {
      "category": "Activation",
      "description": "PRelu takes input data (Tensor<T>) and slope tensor as input, and produces one\noutput data (Tensor<T>) where the function `f(x) = slope * x for x < 0`,\n`f(x) = x for x >= 0`., is applied to the data tensor elementwise.\n\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'PRelu',\n    inputs=['x', 'slope'],\n    outputs=['y'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\nslope = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * slope\n\nexpect(node, inputs=[x, slope], outputs=[y],\n       name='test_prelu_example')",
          "summary": "prelu"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'PRelu',\n    inputs=['x', 'slope'],\n    outputs=['y'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\nslope = np.random.randn(5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * slope\n\nexpect(node, inputs=[x, slope], outputs=[y],\n       name='test_prelu_broadcast')",
          "summary": "prelu_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        },
        {
          "description": "Slope tensor. If `Slope` is of size 1, the value is sharedacross different channels",
          "name": "slope",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "PRelu",
    "schema": {
      "category": "Activation",
      "description": "PRelu takes input data (Tensor<T>) and slope tensor as input, and produces one\noutput data (Tensor<T>) where the function `f(x) = slope * x for x < 0`,\n`f(x) = x for x >= 0`., is applied to the data tensor elementwise.\nThis operator supports **unidirectional broadcasting** (tensor slope should be unidirectional broadcastable to input tensor X); for more details please check [the doc](Broadcasting.md).",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'PRelu',\n    inputs=['x', 'slope'],\n    outputs=['y'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\nslope = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * slope\n\nexpect(node, inputs=[x, slope], outputs=[y],\n       name='test_prelu_example')",
          "summary": "prelu"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'PRelu',\n    inputs=['x', 'slope'],\n    outputs=['y'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\nslope = np.random.randn(5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * slope\n\nexpect(node, inputs=[x, slope], outputs=[y],\n       name='test_prelu_broadcast')",
          "summary": "prelu_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        },
        {
          "description": "Slope tensor. The shape of slope can be smaller then first input X; if so, its shape must be unidirectional broadcastable to X",
          "name": "slope",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor (same size as X)",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "PRelu",
    "schema": {
      "category": "Activation",
      "description": "PRelu takes input data (Tensor<T>) and slope tensor as input, and produces one\noutput data (Tensor<T>) where the function `f(x) = slope * x for x < 0`,\n`f(x) = x for x >= 0`., is applied to the data tensor elementwise.\nThis operator supports **unidirectional broadcasting** (tensor slope should be unidirectional broadcastable to input tensor X); for more details please check [the doc](Broadcasting.md).",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'PRelu',\n    inputs=['x', 'slope'],\n    outputs=['y'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\nslope = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * slope\n\nexpect(node, inputs=[x, slope], outputs=[y],\n       name='test_prelu_example')",
          "summary": "prelu"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'PRelu',\n    inputs=['x', 'slope'],\n    outputs=['y'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\nslope = np.random.randn(5).astype(np.float32)\ny = np.clip(x, 0, np.inf) + np.clip(x, -np.inf, 0) * slope\n\nexpect(node, inputs=[x, slope], outputs=[y],\n       name='test_prelu_broadcast')",
          "summary": "prelu_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        },
        {
          "description": "Slope tensor. The shape of slope can be smaller then first input X; if so, its shape must be unidirectional broadcastable to X",
          "name": "slope",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor (same size as X)",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrain input and output types to float/int tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Pad",
    "schema": {
      "attributes": [
        {
          "default": "constant",
          "description": "Three modes: constant(default), reflect, edge",
          "name": "mode",
          "required": false,
          "type": "string"
        },
        {
          "description": "List of integers indicate the padding element count at the beginning and end of each axis, for 2D it is the number of pixel. `paddings` rank should be double of the input's rank. `paddings` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`.",
          "name": "paddings",
          "required": true,
          "type": "int[]"
        },
        {
          "description": "One float, indicates the value to be filled, default is 0",
          "name": "value",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Tensor",
      "description": "Given `data` tensor, paddings, mode, and value.\n\nExample:\n  Insert 0 paddings to the beginning of the second dimension.\n\n  data = [\n      [1.0, 1.2],\n      [2.3, 3.4],\n      [4.5, 5.7],\n  ]\n  paddings = [0, 0, 2, 0]\n\n  output = [\n      [\n          [0.0, 0.0, 1.0, 1.2],\n          [0.0, 0.0, 2.3, 3.4],\n          [0.0, 0.0, 4.5, 5.7],\n      ],\n  ]\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Pad',\n    inputs=['x'],\n    outputs=['y'],\n    mode='constant',\n    value=1.2,\n    pads=[0, 0, 1, 3, 0, 0, 2, 4],\n)\nx = np.random.randn(1, 3, 4, 5).astype(np.float32)\ny = np.pad(\n    x,\n    pad_width=((0, 0), (0, 0), (1, 2), (3, 4)),\n    mode='constant',\n    constant_values=1.2,\n)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_constant_pad')",
          "summary": "constant_pad"
        },
        {
          "code": "for mode in ['edge', 'reflect']:\n    node = onnx.helper.make_node(\n        'Pad',\n        inputs=['x'],\n        outputs=['y'],\n        mode=mode,\n        pads=[0, 0, 1, 1, 0, 0, 1, 1]\n    )\n    x = np.random.randn(1, 3, 4, 5).astype(np.float32)\n    y = np.pad(\n        x,\n        pad_width=((0, 0), (0, 0), (1, 1), (1, 1)),\n        mode=mode,\n    )\n\n    expect(node, inputs=[x], outputs=[y],\n           name='test_{}_pad'.format(mode))",
          "summary": "reflection_and_edge_pad"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor after padding.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Pad",
    "schema": {
      "attributes": [
        {
          "default": "constant",
          "description": "Three modes: constant(default), reflect, edge",
          "name": "mode",
          "required": false,
          "type": "string"
        },
        {
          "description": "List of integers indicating the number of padding elements to add or remove (if negative) at the beginning and end of each axis. For 2D it is the number of pixels. `pads` rank should be double of the input's rank. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`.",
          "name": "pads",
          "required": true,
          "type": "int[]"
        },
        {
          "description": "One float, indicates the value to be filled.",
          "name": "value",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Tensor",
      "description": "Given `data` tensor, pads, mode, and value.\nExample:\n  Insert 0 pads to the beginning of the second dimension.\n  data = [\n      [1.0, 1.2],\n      [2.3, 3.4],\n      [4.5, 5.7],\n  ]\n  pads = [0, 2, 0, 0]\n  output = [\n      [\n          [0.0, 0.0, 1.0, 1.2],\n          [0.0, 0.0, 2.3, 3.4],\n          [0.0, 0.0, 4.5, 5.7],\n      ],\n  ]\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Pad',\n    inputs=['x'],\n    outputs=['y'],\n    mode='constant',\n    value=1.2,\n    pads=[0, 0, 1, 3, 0, 0, 2, 4],\n)\nx = np.random.randn(1, 3, 4, 5).astype(np.float32)\ny = np.pad(\n    x,\n    pad_width=((0, 0), (0, 0), (1, 2), (3, 4)),\n    mode='constant',\n    constant_values=1.2,\n)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_constant_pad')",
          "summary": "constant_pad"
        },
        {
          "code": "for mode in ['edge', 'reflect']:\n    node = onnx.helper.make_node(\n        'Pad',\n        inputs=['x'],\n        outputs=['y'],\n        mode=mode,\n        pads=[0, 0, 1, 1, 0, 0, 1, 1]\n    )\n    x = np.random.randn(1, 3, 4, 5).astype(np.float32)\n    y = np.pad(\n        x,\n        pad_width=((0, 0), (0, 0), (1, 1), (1, 1)),\n        mode=mode,\n    )\n\n    expect(node, inputs=[x], outputs=[y],\n           name='test_{}_pad'.format(mode))",
          "summary": "reflection_and_edge_pad"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor after padding.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 2,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ParametricSoftplus",
    "schema": {
      "attributes": [
        {
          "description": "Value of alpha",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "Value of beta",
          "name": "beta",
          "required": false,
          "type": "float"
        }
      ],
      "description": "ParametricSoftplus takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the softplus function, y = alpha * ln(exp(beta * x) + 1), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "1D input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "1D input tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Pow",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Pow takes input data (Tensor<T>) and exponent Tensor, and\nproduces one output data (Tensor<T>) where the function `f(x) = x^exponent`,\nis applied to the data tensor elementwise.\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of element size 1 (including a scalar tensor and any\ntensor with rank equal to or smaller than the first tensor), or having its\nshape as a contiguous subset of the first tensor's shape. The starting of the\nmutually equal shape is specified by the argument \"axis\", and if it is not set,\nsuffix matching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Pow',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array([4, 5, 6]).astype(np.float32)\nz = np.power(x, y)  # expected output [1., 32., 729.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_pow_example')\n\nx = np.arange(60).reshape(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = np.power(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_pow')",
          "summary": "pow"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Pow',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array(2).astype(np.float32)\nz = np.power(x, y)  # expected output [1., 4., 9.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_pow_bcast_scalar')\n\nnode = onnx.helper.make_node(\n    'Pow',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\nx = np.array([[1, 2, 3], [4, 5, 6]]).astype(np.float32)\ny = np.array([1, 2, 3]).astype(np.float32)\n# expected output [[1, 4, 27], [4, 25, 216]]\nz = np.power(x, y).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_pow_bcast_array')",
          "summary": "pow_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor of any shape, base of the exponent.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "Input tensor of any shape broadcastable to X shape, the exponent component.",
          "name": "Y",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor (same size as X)",
          "name": "Z",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Pow",
    "schema": {
      "description": "Pow takes input data (Tensor<T>) and exponent Tensor, and\nproduces one output data (Tensor<T>) where the function `f(x) = x^exponent`,\nis applied to the data tensor elementwise.\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Pow',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array([4, 5, 6]).astype(np.float32)\nz = np.power(x, y)  # expected output [1., 32., 729.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_pow_example')\n\nx = np.arange(60).reshape(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = np.power(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_pow')",
          "summary": "pow"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Pow',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array(2).astype(np.float32)\nz = np.power(x, y)  # expected output [1., 4., 9.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_pow_bcast_scalar')\n\nnode = onnx.helper.make_node(\n    'Pow',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\nx = np.array([[1, 2, 3], [4, 5, 6]]).astype(np.float32)\ny = np.array([1, 2, 3]).astype(np.float32)\n# expected output [[1, 4, 27], [4, 25, 216]]\nz = np.power(x, y).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_pow_bcast_array')",
          "summary": "pow_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand, base of the exponent.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "Second operand, power of the exponent.",
          "name": "Y",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor (same size as X)",
          "name": "Z",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "RNN",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.",
          "name": "activation_alpha",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.",
          "name": "activation_beta",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "One (or two if bidirectional) activation function for input gate. The activation function must be one of the activation functions specified above. Optional: Default `Tanh` if not specified.",
          "name": "activations",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "default": "forward",
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "The sequence output for the hidden is optional if 0. Default 0.",
          "name": "output_sequence",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "Computes an one-layer simple RNN. This operator is usually supported\nvia some custom implementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`i` - input gate\n\n`t` - time step (t-1 means previous time step)\n\n`Wi` - W parameter weight matrix for input gate\n\n`Ri` - R recurrence weight matrix for input gate\n\n`Wbi` - W parameter bias vector for input gate\n\n`Rbi` - R parameter bias vector for input gate\n\n`WBi` - W parameter weight matrix for backward input gate\n\n`RBi` - R recurrence weight matrix for backward input gate\n\n`WBbi` - WR bias vectors for backward input gate\n\n`RBbi` - RR bias vectors for backward input gate\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  Relu(x)                - max(0, x)\n\n  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  Sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  Affine(x)              - alpha*x + beta\n\n  LeakyRelu(x)           - x if x >= 0 else alpha * x\n\n  ThresholdedRelu(x)     - x if x >= alpha else 0\n\n  ScaledTanh(x)          - alpha*Tanh(beta*x)\n\n  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\n\n  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  Softsign(x)            - x/(1 + |x|)\n\n  Softplus(x)            - log(1 + e^x)\n\nEquations (Default: f=Tanh):\n\n  - Ht = f(Xt*(Wi^T) + Ht-1*Ri + Wbi + Rbi)\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "input = np.array([[[1., 2.], [3., 4.], [5., 6.]]]).astype(np.float32)\n\ninput_size = 2\nhidden_size = 4\nweight_scale = 0.1\n\nnode = onnx.helper.make_node(\n    'RNN',\n    inputs=['X', 'W', 'R'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, hidden_size, hidden_size)).astype(np.float32)\n\nrnn = RNN_Helper(X=input, W=W, R=R)\n_, Y_h = rnn.step()\nexpect(node, inputs=[input, W, R], outputs=[Y_h.astype(np.float32)], name='test_simple_rnn_defaults')",
          "summary": "defaults"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 5\ncustom_bias = 0.1\nweight_scale = 0.1\n\nnode = onnx.helper.make_node(\n    'RNN',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, hidden_size, hidden_size)).astype(np.float32)\n\n# Adding custom bias\nW_B = custom_bias * np.ones((1, hidden_size)).astype(np.float32)\nR_B = np.zeros((1, hidden_size)).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\nrnn = RNN_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = rnn.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)],\n       name='test_simple_rnn_with_initial_bias')",
          "summary": "initial_bias"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]],\n                  [[10., 11., 12.], [13., 14., 15.], [16., 17., 18.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 5\n\nnode = onnx.helper.make_node(\n    'RNN',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = np.random.randn(1, hidden_size, input_size).astype(np.float32)\nR = np.random.randn(1, hidden_size, hidden_size).astype(np.float32)\n\n# Adding custom bias\nW_B = np.random.randn(1, hidden_size).astype(np.float32)\nR_B = np.random.randn(1, hidden_size).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\nrnn = RNN_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = rnn.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_rnn_seq_length')",
          "summary": "seq_length"
        }
      ],
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The weight tensor for input gate. Concatenation of `Wi` and `WBi` (if bidirectional). The tensor has shape `[num_directions, hidden_size, input_size]`.",
          "name": "W",
          "type": "T"
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `Ri` and `RBi` (if bidirectional). The tensor has shape `[num_directions, hidden_size, hidden_size]`.",
          "name": "R",
          "type": "T"
        },
        {
          "description": "The bias tensor for input gate. Concatenation of `[Wbi, Rbi]` and `[WBbi, RBbi]` (if bidirectional). The tensor has shape `[num_directions, 2*hidden_size]`. Optional: If not specified - assumed to be 0.",
          "name": "B",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "option": "optional",
          "type": "T1"
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 6,
      "max_output": 2,
      "min_input": 3,
      "min_output": 0,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. It is optional if `output_sequence` is 0.",
          "name": "Y",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "RNN",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.",
          "name": "activation_alpha",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.",
          "name": "activation_beta",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "One (or two if bidirectional) activation function for input gate. The activation function must be one of the activation functions specified above. Optional: Default `Tanh` if not specified.",
          "name": "activations",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "default": "forward",
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Layer",
      "description": "Computes an one-layer simple RNN. This operator is usually supported\nvia some custom implementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`i` - input gate\n\n`t` - time step (t-1 means previous time step)\n\n`Wi` - W parameter weight matrix for input gate\n\n`Ri` - R recurrence weight matrix for input gate\n\n`Wbi` - W parameter bias vector for input gate\n\n`Rbi` - R parameter bias vector for input gate\n\n`WBi` - W parameter weight matrix for backward input gate\n\n`RBi` - R recurrence weight matrix for backward input gate\n\n`WBbi` - WR bias vectors for backward input gate\n\n`RBbi` - RR bias vectors for backward input gate\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  Relu(x)                - max(0, x)\n\n  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  Sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  Affine(x)              - alpha*x + beta\n\n  LeakyRelu(x)           - x if x >= 0 else alpha * x\n\n  ThresholdedRelu(x)     - x if x >= alpha else 0\n\n  ScaledTanh(x)          - alpha*Tanh(beta*x)\n\n  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\n\n  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  Softsign(x)            - x/(1 + |x|)\n\n  Softplus(x)            - log(1 + e^x)\n\nEquations (Default: f=Tanh):\n\n  - Ht = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Wbi + Rbi)\nThis operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "input = np.array([[[1., 2.], [3., 4.], [5., 6.]]]).astype(np.float32)\n\ninput_size = 2\nhidden_size = 4\nweight_scale = 0.1\n\nnode = onnx.helper.make_node(\n    'RNN',\n    inputs=['X', 'W', 'R'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, hidden_size, hidden_size)).astype(np.float32)\n\nrnn = RNN_Helper(X=input, W=W, R=R)\n_, Y_h = rnn.step()\nexpect(node, inputs=[input, W, R], outputs=[Y_h.astype(np.float32)], name='test_simple_rnn_defaults')",
          "summary": "defaults"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 5\ncustom_bias = 0.1\nweight_scale = 0.1\n\nnode = onnx.helper.make_node(\n    'RNN',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = weight_scale * np.ones((1, hidden_size, input_size)).astype(np.float32)\nR = weight_scale * np.ones((1, hidden_size, hidden_size)).astype(np.float32)\n\n# Adding custom bias\nW_B = custom_bias * np.ones((1, hidden_size)).astype(np.float32)\nR_B = np.zeros((1, hidden_size)).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\nrnn = RNN_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = rnn.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)],\n       name='test_simple_rnn_with_initial_bias')",
          "summary": "initial_bias"
        },
        {
          "code": "input = np.array([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]],\n                  [[10., 11., 12.], [13., 14., 15.], [16., 17., 18.]]]).astype(np.float32)\n\ninput_size = 3\nhidden_size = 5\n\nnode = onnx.helper.make_node(\n    'RNN',\n    inputs=['X', 'W', 'R', 'B'],\n    outputs=['', 'Y'],\n    hidden_size=hidden_size\n)\n\nW = np.random.randn(1, hidden_size, input_size).astype(np.float32)\nR = np.random.randn(1, hidden_size, hidden_size).astype(np.float32)\n\n# Adding custom bias\nW_B = np.random.randn(1, hidden_size).astype(np.float32)\nR_B = np.random.randn(1, hidden_size).astype(np.float32)\nB = np.concatenate((W_B, R_B), axis=1)\n\nrnn = RNN_Helper(X=input, W=W, R=R, B=B)\n_, Y_h = rnn.step()\nexpect(node, inputs=[input, W, R, B], outputs=[Y_h.astype(np.float32)], name='test_rnn_seq_length')",
          "summary": "seq_length"
        }
      ],
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The weight tensor for input gate. Concatenation of `Wi` and `WBi` (if bidirectional). The tensor has shape `[num_directions, hidden_size, input_size]`.",
          "name": "W",
          "type": "T"
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `Ri` and `RBi` (if bidirectional). The tensor has shape `[num_directions, hidden_size, hidden_size]`.",
          "name": "R",
          "type": "T"
        },
        {
          "description": "The bias tensor for input gate. Concatenation of `[Wbi, Rbi]` and `[WBbi, RBbi]` (if bidirectional). The tensor has shape `[num_directions, 2*hidden_size]`. Optional: If not specified - assumed to be 0.",
          "name": "B",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "option": "optional",
          "type": "T1"
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 6,
      "max_output": 2,
      "min_input": 3,
      "min_output": 0,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. ",
          "name": "Y",
          "option": "optional",
          "type": "T"
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "option": "optional",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "RandomNormal",
    "schema": {
      "attributes": [
        {
          "default": 1,
          "description": "The data type for the elements of the output tensor. Default is TensorProto::FLOAT.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "description": "The mean of the normal distribution.",
          "name": "mean",
          "required": false,
          "type": "float"
        },
        {
          "default": 1.0,
          "description": "The standard deviation of the normal distribution.",
          "name": "scale",
          "required": false,
          "type": "float"
        },
        {
          "description": "(Optional) Seed to the random generator, if not specified we will auto generate one.",
          "name": "seed",
          "required": false,
          "type": "float"
        },
        {
          "description": "The shape of the output tensor.",
          "name": "shape",
          "required": true,
          "type": "int[]"
        }
      ],
      "description": "Generate a tensor with random values drawn from a normal distribution. The shape\nof the tensor is specified by the `shape` argument and the parameter of the normal distribution\nspecified by `mean` and `scale`.\n\nThe data type is specified by the 'dtype' argument. The 'dtype' argument must\nbe one of the data types specified in the 'DataType' enum field in the\nTensorProto message.\n",
      "domain": "ai.onnx",
      "max_input": 0,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of random values drawn from normal distribution",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "RandomNormalLike",
    "schema": {
      "attributes": [
        {
          "description": "(Optional) The data type for the elements of the output tensor, if not specified, we will usethe data type of the input tensor.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "description": "The mean of the normal distribution.",
          "name": "mean",
          "required": false,
          "type": "float"
        },
        {
          "default": 1.0,
          "description": "The standard deviation of the normal distribution.",
          "name": "scale",
          "required": false,
          "type": "float"
        },
        {
          "description": "(Optional) Seed to the random generator, if not specified we will auto generate one.",
          "name": "seed",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Generate a tensor with random values drawn from a normal distribution.\nThe shape of the output tensor is copied from the shape of the input tensor,\nand the parameters of the normal distribution are specified by `mean` and `scale`.\n\nThe data type is specified by the 'dtype' argument, or copied from the input tensor if not provided.\nThe 'dtype' argument must be one of the data types specified in the 'DataType' enum field in the\nTensorProto message, and be valid as an output type.\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input tensor to copy shape and optionally type information from.",
          "name": "input",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of random values drawn from normal distribution",
          "name": "output",
          "type": "T2"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain to any tensor type. If the dtype attribute is not provided this must be a valid output type.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to float tensors.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "RandomUniform",
    "schema": {
      "attributes": [
        {
          "default": 1,
          "description": "The data type for the elements of the output tensor. If not specified, default is TensorProto::FLOAT.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "default": 1.0,
          "description": "Upper boundary of the output values.",
          "name": "high",
          "required": false,
          "type": "float"
        },
        {
          "description": "Lower boundary of the output values.",
          "name": "low",
          "required": false,
          "type": "float"
        },
        {
          "description": "(Optional) Seed to the random generator, if not specified we will auto generate one.",
          "name": "seed",
          "required": false,
          "type": "float"
        },
        {
          "description": "The shape of the output tensor.",
          "name": "shape",
          "required": true,
          "type": "int[]"
        }
      ],
      "description": "Generate a tensor with random values drawn from a uniform distribution. The shape\nof the tensor is specified by the `shape` argument and the range by `low` and `high`.\n\nThe data type is specified by the 'dtype' argument. The 'dtype' argument must\nbe one of the data types specified in the 'DataType' enum field in the\nTensorProto message.\n",
      "domain": "ai.onnx",
      "max_input": 0,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of random values drawn from uniform distribution",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "RandomUniformLike",
    "schema": {
      "attributes": [
        {
          "description": "(Optional) The data type for the elements of the output tensor, if not specified, we will usethe data type of the input tensor.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "default": 1.0,
          "description": "Upper boundary of the output values.",
          "name": "high",
          "required": false,
          "type": "float"
        },
        {
          "description": "Lower boundary of the output values.",
          "name": "low",
          "required": false,
          "type": "float"
        },
        {
          "description": "(Optional) Seed to the random generator, if not specified we will auto generate one.",
          "name": "seed",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Generate a tensor with random values drawn from a uniform distribution.\nThe shape of the output tensor is copied from the shape of the input tensor,\nand the parameters of the uniform distribution are specified by `low` and `high`.\n\nThe data type is specified by the 'dtype' argument, or copied from the input tensor if not provided.\nThe 'dtype' argument must be one of the data types specified in the 'DataType' enum field in the\nTensorProto message and be valid as an output type.\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input tensor to copy shape and optionally type information from.",
          "name": "input",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of random values drawn from uniform distribution",
          "name": "output",
          "type": "T2"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain to any tensor type. If the dtype attribute is not provided this must be a valid output type.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to float tensors.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "Reciprocal",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Reciprocal takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the reciprocal is, y = 1/x, is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Reciprocal',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-4, 2]).astype(np.float32)\ny = np.reciprocal(x)  # expected output [-0.25, 0.5],\nexpect(node, inputs=[x], outputs=[y],\n       name='test_reciprocal_example')\n\nx = np.random.rand(3, 4, 5).astype(np.float32) + 0.5\ny = np.reciprocal(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_reciprocal')",
          "summary": "reciprocal"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Reciprocal",
    "schema": {
      "description": "Reciprocal takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the reciprocal is, y = 1/x, is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Reciprocal',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-4, 2]).astype(np.float32)\ny = np.reciprocal(x)  # expected output [-0.25, 0.5],\nexpect(node, inputs=[x], outputs=[y],\n       name='test_reciprocal_example')\n\nx = np.random.rand(3, 4, 5).astype(np.float32) + 0.5\ny = np.reciprocal(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_reciprocal')",
          "summary": "reciprocal"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceL1",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the L1 norm of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = [3, 2, 2]\naxes = None\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceL1',\n    inputs=['data'],\n    outputs=['reduced'],\n    keepdims=keepdims\n)\n\ndata = np.reshape(np.arange(1, np.prod(shape) + 1, dtype=np.float32), shape)\n#print(data)\n#[[[1., 2.], [3., 4.]], [[5., 6.], [7., 8.]], [[9., 10.], [11., 12.]]]\n\nreduced = np.sum(a=np.abs(data), axis=axes, keepdims=keepdims == 1)\n#print(reduced)\n#[[[78.]]]\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l1_default_axes_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sum(a=np.abs(data), axis=axes, keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l1_default_axes_keepdims_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [2]\nkeepdims = 0\n\nnode = onnx.helper.make_node(\n    'ReduceL1',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims\n)\n\ndata = np.reshape(np.arange(1, np.prod(shape) + 1, dtype=np.float32), shape)\n#print(data)\n#[[[1., 2.], [3., 4.]], [[5., 6.], [7., 8.]], [[9., 10.], [11., 12.]]]\n\nreduced = np.sum(a=np.abs(data), axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[3., 7.], [11., 15.], [19., 23.]]\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l1_do_not_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sum(a=np.abs(data), axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l1_do_not_keepdims_random')",
          "summary": "do_not_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [2]\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceL1',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims\n)\n\ndata = np.reshape(np.arange(1, np.prod(shape) + 1, dtype=np.float32), shape)\n#print(data)\n#[[[1., 2.], [3., 4.]], [[5., 6.], [7., 8.]], [[9., 10.], [11., 12.]]]\n\nreduced = np.sum(a=np.abs(data), axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[[3.], [7.]], [[11.], [15.]], [[19.], [23.]]]\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l1_keep_dims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sum(a=np.abs(data), axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l1_keep_dims_random')",
          "summary": "keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceL2",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the L2 norm of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = [3, 2, 2]\naxes = None\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceL2',\n    inputs=['data'],\n    outputs=['reduced'],\n    keepdims=keepdims\n)\n\ndata = np.reshape(np.arange(1, np.prod(shape) + 1, dtype=np.float32), shape)\n#print(data)\n#[[[1., 2.], [3., 4.]], [[5., 6.], [7., 8.]], [[9., 10.], [11., 12.]]]\n\nreduced = np.sqrt(np.sum(\n    a=np.square(data), axis=axes, keepdims=keepdims == 1))\n#print(reduced)\n#[[[25.49509757]]]\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l2_default_axes_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sqrt(np.sum(\n    a=np.square(data), axis=axes, keepdims=keepdims == 1))\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l2_default_axes_keepdims_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [2]\nkeepdims = 0\n\nnode = onnx.helper.make_node(\n    'ReduceL2',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims\n)\n\ndata = np.reshape(np.arange(1, np.prod(shape) + 1, dtype=np.float32), shape)\n#print(data)\n#[[[1., 2.], [3., 4.]], [[5., 6.], [7., 8.]], [[9., 10.], [11., 12.]]]\n\nreduced = np.sqrt(np.sum(\n    a=np.square(data), axis=tuple(axes), keepdims=keepdims == 1))\n#print(reduced)\n#[[2.23606798, 5.],\n# [7.81024968, 10.63014581],\n# [13.45362405, 16.2788206]]\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l2_do_not_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sqrt(np.sum(\n    a=np.square(data), axis=tuple(axes), keepdims=keepdims == 1))\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l2_do_not_keepdims_random')",
          "summary": "do_not_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [2]\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceL2',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims\n)\n\ndata = np.reshape(np.arange(1, np.prod(shape) + 1, dtype=np.float32), shape)\n#print(data)\n#[[[1., 2.], [3., 4.]], [[5., 6.], [7., 8.]], [[9., 10.], [11., 12.]]]\n\nreduced = np.sqrt(np.sum(\n    a=np.square(data), axis=tuple(axes), keepdims=keepdims == 1))\n#print(reduced)\n#[[[2.23606798], [5.]]\n# [[7.81024968], [10.63014581]]\n# [[13.45362405], [16.2788206 ]]]\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_l2_keep_dims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sqrt(np.sum(\n    a=np.square(data), axis=tuple(axes), keepdims=keepdims == 1))\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_l2_keep_dims_random')",
          "summary": "keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceLogSum",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the log sum of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'ReduceLogSum',\n    inputs=['data'],\n    outputs=[\"reduced\"]\n)\ndata = np.random.ranf([3, 4, 5]).astype(np.float32)\nreduced = np.log(np.sum(data, keepdims=True))\nexpect(node, inputs=[data], outputs=[reduced],\n       name='test_reduce_log_sum_default')",
          "summary": "keepdims"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'ReduceLogSum',\n    inputs=['data'],\n    outputs=[\"reduced\"],\n    axes=[2, 1],\n    keepdims=0\n)\ndata = np.random.ranf([3, 4, 5]).astype(np.float32)\nreduced = np.log(np.sum(data, axis=(2, 1), keepdims=False))\nexpect(node, inputs=[data], outputs=[reduced],\n       name='test_reduce_log_sum_desc_axes')\n\nnode = onnx.helper.make_node(\n    'ReduceLogSum',\n    inputs=['data'],\n    outputs=[\"reduced\"],\n    axes=[0, 1],\n    keepdims=0\n)\ndata = np.random.ranf([3, 4, 5]).astype(np.float32)\nreduced = np.log(np.sum(data, axis=(0, 1), keepdims=False))\nexpect(node, inputs=[data], outputs=[reduced],\n       name='test_reduce_log_sum_asc_axes')",
          "summary": "nokeepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceLogSumExp",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the log sum exponent of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = [3, 2, 2]\naxes = None\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceLogSumExp',\n    inputs=['data'],\n    outputs=['reduced'],\n    keepdims=keepdims\n)\n\ndata = np.array(\n    [[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]],\n    dtype=np.float32)\nreduced = np.log(np.sum(np.exp(data),\n                        axis=axes,\n                        keepdims=keepdims == 1))\n# print(reduced)\n# [[[60.00671387]]]\n\nexpect(node, inputs=[data], outputs=[reduced],\n      name='test_reduce_log_sum_exp_default_axes_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.log(np.sum(np.exp(data),\n                        axis=axes,\n                        keepdims=keepdims == 1))\nexpect(node, inputs=[data], outputs=[reduced],\n      name='test_reduce_log_sum_exp_default_axes_keepdims_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 0\nnode = onnx.helper.make_node(\n    'ReduceLogSumExp',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims\n)\n\ndata = np.array(\n    [[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]],\n    dtype=np.float32)\nreduced = np.log(np.sum(\n    np.exp(data), axis=tuple(axes), keepdims=keepdims == 1))\n# print(reduced)\n#[[20., 2.31326175]\n# [40.00004578, 2.31326175]\n# [60.00671387, 2.31326175]]\n\nexpect(node, inputs=[data], outputs=[reduced],\n      name='test_reduce_log_sum_exp_do_not_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.log(np.sum(\n    np.exp(data), axis=tuple(axes), keepdims=keepdims == 1))\n\nexpect(node, inputs=[data], outputs=[reduced],\n    name='test_reduce_log_sum_exp_do_not_keepdims_random')",
          "summary": "do_not_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 1\nnode = onnx.helper.make_node(\n    'ReduceLogSumExp',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims\n)\n\ndata = np.array(\n    [[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]],\n    dtype=np.float32)\nreduced = np.log(np.sum(np.exp(data),\n                        axis=tuple(axes),\n                        keepdims=keepdims == 1))\n# print(reduced)\n# [[[20., 2.31326175]]\n# [[40.00004578, 2.31326175]]\n# [[60.00671387, 2.31326175]]]\n\nexpect(node, inputs=[data], outputs=[reduced],\n      name='test_reduce_log_sum_exp_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.log(np.sum(np.exp(data),\n                        axis=tuple(axes),\n                        keepdims=keepdims == 1))\n\nexpect(node, inputs=[data], outputs=[reduced],\n      name='test_reduce_log_sum_exp_keepdims_random')",
          "summary": "keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceMax",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the max of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = [3, 2, 2]\naxes = None\nkeepdims = 1\nnode = onnx.helper.make_node(\n    'ReduceMax',\n    inputs=['data'],\n    outputs=['reduced'],\n    keepdims=keepdims)\n\ndata = np.array([[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]], dtype=np.float32)\nreduced = np.maximum.reduce(data, axis=axes, keepdims=keepdims == 1)\n#print(reduced)\n[[[60.]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_max_default_axes_keepdim_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.maximum.reduce(data, axis=axes, keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_max_default_axes_keepdims_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 0\n\nnode = onnx.helper.make_node(\n    'ReduceMax',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]], dtype=np.float32)\nreduced = np.maximum.reduce(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[20., 2.]\n# [40., 2.]\n# [60., 2.]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_max_do_not_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.maximum.reduce(data, axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_max_do_not_keepdims_random')",
          "summary": "do_not_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceMax',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]], dtype=np.float32)\nreduced = np.maximum.reduce(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[[20., 2.]]\n# [[40., 2.]]\n# [[60., 2.]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_max_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.maximum.reduce(data, axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_max_keepdims_random')",
          "summary": "keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceMean",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the mean of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = [3, 2, 2]\naxes = None\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceMean',\n    inputs=['data'],\n    outputs=['reduced'],\n    keepdims=keepdims)\n\ndata = np.array([[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]], dtype=np.float32)\nreduced = np.mean(data, axis=axes, keepdims=keepdims == 1)\n#print(reduced)\n#[[[18.25]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_mean_default_axes_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.mean(data, axis=axes, keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_mean_default_axes_keepdims_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 0\n\nnode = onnx.helper.make_node(\n    'ReduceMean',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]], dtype=np.float32)\nreduced = np.mean(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[12.5, 1.5]\n# [35., 1.5]\n# [57.5, 1.5]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_mean_do_not_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.mean(data, axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_mean_do_not_keepdims_random')",
          "summary": "do_not_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceMean',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]], dtype=np.float32)\nreduced = np.mean(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[[12.5, 1.5]]\n# [[35., 1.5]]\n# [[57.5, 1.5]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_mean_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.mean(data, axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_mean_keepdims_random')",
          "summary": "keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceMin",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the min of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = [3, 2, 2]\naxes = None\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceMin',\n    inputs=['data'],\n    outputs=['reduced'],\n    keepdims=keepdims)\n\ndata = np.array([[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]], dtype=np.float32)\nreduced = np.minimum.reduce(data, axis=axes, keepdims=keepdims == 1)\n#print(reduced)\n#[[[1.]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_min_default_axes_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.minimum.reduce(data, axis=axes, keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_min_default_axes_keepdims_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 0\n\nnode = onnx.helper.make_node(\n    'ReduceMin',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]], dtype=np.float32)\nreduced = np.minimum.reduce(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[5., 1.]\n# [30., 1.]\n# [55., 1.]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_min_do_not_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.minimum.reduce(data, axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_min_do_not_keepdims_random')",
          "summary": "do_not_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceMin', inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[5, 1], [20, 2]], [[30, 1], [40, 2]], [[55, 1], [60, 2]]], dtype=np.float32)\nreduced = np.minimum.reduce(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[[5., 1.]]\n# [[30., 1.]]\n# [[55., 1.]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_min_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.minimum.reduce(data, axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_min_keepdims_random')",
          "summary": "keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceProd",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the product of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = [3, 2, 2]\naxes = None\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceProd',\n    inputs=['data'],\n    outputs=['reduced'],\n    keepdims=keepdims)\n\ndata = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], dtype=np.float32)\nreduced = np.prod(data, axis=axes, keepdims=keepdims == 1)\n#print(reduced)\n#[[[4.790016e+08]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_prod_default_axes_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.prod(data, axis=axes, keepdims=keepdims == 1)\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_prod_default_axes_keepdims_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 0\n\nnode = onnx.helper.make_node(\n    'ReduceProd',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], dtype=np.float32)\nreduced = np.prod(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[3., 8.]\n# [35., 48.]\n# [99., 120.]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_prod_do_not_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.prod(data, axis=tuple(axes), keepdims=keepdims == 1)\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_prod_do_not_keepdims_random')",
          "summary": "do_not_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceProd',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], dtype=np.float32)\nreduced = np.prod(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[[3., 8.]]\n# [[35., 48.]]\n# [[99., 120.]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_prod_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.prod(data, axis=tuple(axes), keepdims=keepdims == 1)\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_prod_keepdims_random')",
          "summary": "keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceSum",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the sum of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = [3, 2, 2]\naxes = None\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceSum',\n    inputs=['data'],\n    outputs=['reduced'],\n    keepdims=keepdims)\n\ndata = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], dtype=np.float32)\nreduced = np.sum(data, axis=axes, keepdims=keepdims == 1)\n#print(reduced)\n#[[[78.]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_default_axes_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sum(data, axis=axes, keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_default_axes_keepdims_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 0\n\nnode = onnx.helper.make_node(\n    'ReduceSum',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], dtype=np.float32)\nreduced = np.sum(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[4., 6.]\n# [12., 14.]\n# [20., 22.]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_do_not_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sum(data, axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_do_not_keepdims_random')",
          "summary": "do_not_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceSum',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], dtype=np.float32)\nreduced = np.sum(data, axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[[4., 6.]]\n# [[12., 14.]]\n# [[20., 22.]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sum(data, axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_keepdims_random')",
          "summary": "keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ReduceSumSquare",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1,
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Computes the sum square of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then\nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = [3, 2, 2]\naxes = None\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceSumSquare',\n    inputs=['data'],\n    outputs=['reduced'],\n    keepdims=keepdims)\n\ndata = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], dtype=np.float32)\nreduced = np.sum(np.square(data), axis=axes, keepdims=keepdims == 1)\n#print(reduced)\n#[[[650.]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_square_default_axes_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sum(np.square(data), axis=axes, keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_square_default_axes_keepdims_random')",
          "summary": "default_axes_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 0\n\nnode = onnx.helper.make_node(\n    'ReduceSumSquare',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], dtype=np.float32)\nreduced = np.sum(np.square(data), axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[10., 20.]\n# [74., 100.]\n# [202., 244.]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_square_do_not_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sum(np.square(data), axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_square_do_not_keepdims_random')",
          "summary": "do_not_keepdims"
        },
        {
          "code": "shape = [3, 2, 2]\naxes = [1]\nkeepdims = 1\n\nnode = onnx.helper.make_node(\n    'ReduceSumSquare',\n    inputs=['data'],\n    outputs=['reduced'],\n    axes=axes,\n    keepdims=keepdims)\n\ndata = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], dtype=np.float32)\nreduced = np.sum(np.square(data), axis=tuple(axes), keepdims=keepdims == 1)\n#print(reduced)\n#[[[10., 20.]]\n# [[74., 100.]]\n# [[202., 244.]]]\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_square_keepdims_example')\n\nnp.random.seed(0)\ndata = np.random.uniform(-10, 10, shape).astype(np.float32)\nreduced = np.sum(np.square(data), axis=tuple(axes), keepdims=keepdims == 1)\n\nexpect(node, inputs=[data], outputs=[reduced], name='test_reduce_sum_square_keepdims_random')",
          "summary": "keepdims"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Relu",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Activation",
      "description": "Relu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the rectified linear function, y = max(0, x), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Relu',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_relu')",
          "summary": "relu"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Relu",
    "schema": {
      "category": "Activation",
      "description": "Relu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the rectified linear function, y = max(0, x), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Relu',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_relu')",
          "summary": "relu"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Reshape",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "New shape",
          "name": "shape",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Shape",
      "description": "Reshape the input tensor similar to numpy.reshape.\nIt takes a tensor as input and an argument `shape`. It outputs the reshaped tensor.\nAt most one dimension of the new shape can be -1. In this case, the value is\ninferred from the size of the tensor and the remaining dimensions. A dimension\ncould also be 0, in which case the actual dimension value is unchanged (i.e. taken\nfrom the input tensor).",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "original_shape = [2, 3, 4]\ntest_cases = {\n    'reordered_dims': np.array([4, 2, 3], dtype=np.int64),\n    'reduced_dims': np.array([3, 8], dtype=np.int64),\n    'extended_dims': np.array([3, 2, 2, 2], dtype=np.int64),\n    'one_dim': np.array([24], dtype=np.int64),\n    'negative_dim': np.array([6, -1, 2], dtype=np.int64),\n}\ndata = np.random.random_sample(original_shape).astype(np.float32)\n\nfor test_name, shape in test_cases.items():\n    node = onnx.helper.make_node(\n        'Reshape',\n        inputs=['data', 'shape'],\n        outputs=['reshaped'],\n    )\n\n    reshaped = np.reshape(data, shape)\n    expect(node, inputs=[data, shape], outputs=[reshaped],\n           name='test_reshape_' + test_name)",
          "summary": "reshape"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reshaped data.",
          "name": "reshaped",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Reshape",
    "schema": {
      "category": "Shape",
      "description": "Reshape the input tensor similar to numpy.reshape.\nFirst input is the data tensor, second input is a shape tensor which specifies the output shape. It outputs the reshaped tensor.\nAt most one dimension of the new shape can be -1. In this case, the value is\ninferred from the size of the tensor and the remaining dimensions. A dimension\ncould also be 0, in which case the actual dimension value is unchanged (i.e. taken\nfrom the input tensor).",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "original_shape = [2, 3, 4]\ntest_cases = {\n    'reordered_dims': np.array([4, 2, 3], dtype=np.int64),\n    'reduced_dims': np.array([3, 8], dtype=np.int64),\n    'extended_dims': np.array([3, 2, 2, 2], dtype=np.int64),\n    'one_dim': np.array([24], dtype=np.int64),\n    'negative_dim': np.array([6, -1, 2], dtype=np.int64),\n}\ndata = np.random.random_sample(original_shape).astype(np.float32)\n\nfor test_name, shape in test_cases.items():\n    node = onnx.helper.make_node(\n        'Reshape',\n        inputs=['data', 'shape'],\n        outputs=['reshaped'],\n    )\n\n    reshaped = np.reshape(data, shape)\n    expect(node, inputs=[data, shape], outputs=[reshaped],\n           name='test_reshape_' + test_name)",
          "summary": "reshape"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        },
        {
          "description": "Specified shape for output.",
          "name": "shape",
          "type": "tensor(int64)"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reshaped data.",
          "name": "reshaped",
          "type": "T"
        }
      ],
      "since_version": 5,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "SVMClassifier",
    "schema": {
      "attributes": [
        {
          "description": "Class labels if using integer labels.<br>One and only one of the 'classlabels_*' attributes must be defined.",
          "name": "classlabels_ints",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Class labels if using string labels.<br>One and only one of the 'classlabels_*' attributes must be defined.",
          "name": "classlabels_strings",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "",
          "name": "coefficients",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "List of 3 elements containing gamma, coef0, and degree, in that order. Zero if unused for the kernel.",
          "name": "kernel_params",
          "required": false,
          "type": "float[]"
        },
        {
          "default": "LINEAR",
          "description": "The kernel type, one of 'LINEAR,' 'POLY,' 'RBF,' 'SIGMOID'.",
          "name": "kernel_type",
          "required": false,
          "type": "string"
        },
        {
          "default": "NONE",
          "description": "Indicates the transform to apply to the score. <br>One of 'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'",
          "name": "post_transform",
          "required": false,
          "type": "string"
        },
        {
          "description": "First set of probability coefficients.",
          "name": "prob_a",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Second set of probability coefficients. This array must be same size as prob_a.<br>If these are provided then output Z are probability estimates, otherwise they are raw scores.",
          "name": "prob_b",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "",
          "name": "rho",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "",
          "name": "support_vectors",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "",
          "name": "vectors_per_class",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Support Vector Machine classifier\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be classified.",
          "name": "X",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 2,
      "min_input": 1,
      "min_output": 2,
      "outputs": [
        {
          "description": "Classification outputs (one class per example).",
          "name": "Y",
          "type": "T2"
        },
        {
          "description": "Class scores (one per class per example), if prob_a and prob_b are provided they are probabilities for each class, otherwise they are raw scores.",
          "name": "Z",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input must be a tensor of a numeric type, either [C] or [N,C].",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)"
          ],
          "description": "The output type will be a tensor of strings or integers, depending on which of the the classlabels_* attributes is used. Its size will match the bactch size of the input.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "SVMRegressor",
    "schema": {
      "attributes": [
        {
          "description": "Support vector coefficients.",
          "name": "coefficients",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "List of 3 elements containing gamma, coef0, and degree, in that order. Zero if unused for the kernel.",
          "name": "kernel_params",
          "required": false,
          "type": "float[]"
        },
        {
          "default": "LINEAR",
          "description": "The kernel type, one of 'LINEAR,' 'POLY,' 'RBF,' 'SIGMOID'.",
          "name": "kernel_type",
          "required": false,
          "type": "string"
        },
        {
          "description": "The number of support vectors.",
          "name": "n_supports",
          "required": false,
          "type": "int"
        },
        {
          "description": "Flag indicating whether the regression is a one-class SVM or not.",
          "name": "one_class",
          "required": false,
          "type": "int"
        },
        {
          "default": "NONE",
          "description": "Indicates the transform to apply to the score. <br>One of 'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT.'",
          "name": "post_transform",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "name": "rho",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Chosen support vectors",
          "name": "support_vectors",
          "required": false,
          "type": "float[]"
        }
      ],
      "description": "Support Vector Machine regression prediction and one-class SVM anomaly detection.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be regressed.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Regression outputs (one score per target per example).",
          "name": "Y",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input type must be a tensor of a numeric type, either [C] or [N,C].",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Scale",
    "schema": {
      "attributes": [
        {
          "default": 1.0,
          "description": "The scale to apply.",
          "name": "scale",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Scale takes one input data (Tensor<float>) and produces one output data\n(Tensor<float>) whose value is the input data tensor scaled element-wise.\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input data to be scaled",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data after scaling",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ScaledTanh",
    "schema": {
      "attributes": [
        {
          "description": "Scaling value",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "Scaling value",
          "name": "beta",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Calculates the scaled hyperbolic tangent of the given input tensor element-wise,\nalpha * tanh(beta * x).\n    ",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The scaled hyperbolic tangent values of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Scaler",
    "schema": {
      "attributes": [
        {
          "description": "First, offset by this.<br>Can be length of features in an [N,F] tensor or length 1, in which case it applies to all features, regardless of dimension count.",
          "name": "offset",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Second, multiply by this.<br>Can be length of features in an [N,F] tensor or length 1, in which case it applies to all features, regardless of dimension count.<br>Must be same length as 'offset'",
          "name": "scale",
          "required": false,
          "type": "float[]"
        }
      ],
      "description": "Rescale input data, for example to standardize features by removing the mean and scaling to unit variance.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Data to be scaled.",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Scaled output data.",
          "name": "Y",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input must be a tensor of a numeric type.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Scan",
    "schema": {
      "attributes": [
        {
          "description": "The graph run each iteration. It has N+M inputs: (loop state variables..., scan_input_elts...). It has N+K outputs: (loop state variables..., scan_output_elts...). Each scan_output is created by concatenating the value of the specified scan_output_elt value at the end of each iteration of the loop. It is an error if the dimensions of these values change across loop iterations.",
          "name": "body",
          "required": true,
          "type": "graph"
        },
        {
          "description": "An optional list of M flags. The i-th element of the list specifies the direction to be scanned for the i-th scan_input tensor: 0 indicates forward direction and 1 indicates reverse direction. If omitted, all scan_input tensors will be scanned in the forward direction.",
          "name": "directions",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "An attribute specifying the number of scan_inputs M. ",
          "name": "num_scan_inputs",
          "required": true,
          "type": "int"
        }
      ],
      "description": "Scan can be used to iterate over one or more scan_input tensors,\nconstructing zero or more scan_output tensors. It combines ideas from general recurrences,\nfunctional programming constructs such as scan, fold, map, and zip and is intended to enable\ngeneralizations of RNN-like constructs for sequence-to-sequence processing.\nOther tensors (referred to as state_variables here) can be used to carry a state\nwhen iterating from one element to another (similar to hidden-state in RNNs, also referred\nto as loop-carried dependences in the context of loops). All these tensors are required to\nhave the same shape in each iteration of the loop (a restriction imposed to enable efficient\nmemory allocation). Many common usages involve a single scan_input tensor (where functionality\nsimilar to scan, fold and map can be obtained). When more than one scan_input is used,\na behavior similar to zip is obtained.\n\nThe attribute body must be a graph, specifying the computation to be performed in\nevery iteration. It takes as input the current values of the state_variables and\nthe current iterated element of the scan_inputs. It must return the (updated) values\nof the state_variables and zero or more scan_output_element tensors. The values of the\nscan_output_element tensors are concatenated over all the iterations to produce the\nscan_output values of the scan construct (similar to the concatenated intermediate\nhidden-state values of RNN-like constructs).\n\nThe scan operation returns the final values of the state_variables as well as the\nscan_outputs.\n\nThe operation supports batching, and the batch-axis is required to be 0.\nWhen multiple scan_input tensors are used, they must all have the same batch-size,\nand they must all have the same maximum-sequence-length (the dimensionality of the\nsequence axis or scan axis). The sequence axis or scan axis is required to be 1.\n\nThe operation has an optional sequence_lens input (of shape [BATCH_SIZE]) to\nallow variable length sequences of length <= the maximum-sequence-length. If this\ninput is not specified, all sequences are assumed to be of length equal to\nmaximum-sequence-length. For variable length input sequences, the scan_outputs\nwill consist of a sequence of same length as the input, padded to the\nmaximum-sequence-length.\n\nThe optional attribute directions can be used to scan a sequence in the reverse direction.\nIf this attribute is omitted, all sequences are scanned in the forward direction.\nA bidirectional scan be performed by specifying the same tensor input twice in the\nscan_inputs, once with a forward direction, and once with a backward direction.\n\nNote that because of the ONNX restriction that only the last parameter of an operator can\nbe variadic, the initial-states and scan-inputs are listed together as one input parameter.\nSimilarly, the final-states and scan-outputs are listed together as one output parameter.\nThe attribute num_scan_inputs indicates the number M of scan-inputs.\n\nThe behavior of\n\n    Scan <\n        num_scan_inputs = m,\n        body = loop-body\n    > (sequence_lengths, init_1, ..., init_n, scan_1, ..., scan_m)\n\nis equivalent to the following pseudo-code:\n\n    // T.shape[0] denotes the batch-size of T\n    // The batch-size of scan_1, ..., scan_m are all required to be equal\n    batch_size = scan_1.shape[0];\n\n    // scan_i.shape[1] denotes the (max) sequence-length of scan_i\n    // scan_i.shape[1] is required to be equal to scan_j.shape[1] for all i,j.\n    max_sequence_length = scan_1.shape[1];\n\n    for (int batch = 0; batch < batch_size; ++batch) {\n        // initialize state-variables\n        st_1 = init_1; ... st_n = init_n;\n        // initialize scan-output variables: [] denotes an empty tensor\n        scan_out_1 = []; ...; scan_out_k = [];\n        // identify number of iterations:\n        N = (sequence_lengths specified) ? sequence_lengths[batch] : max_sequence_length;\n\n        // execute loop\n        for (int t = 0; t < N; ++t) {\n            // generate the scan-input elements: the notation T<axis=k>[t] indicates the sub-tensor\n            // of rank one less than T obtained by indexing T at position t along axis k.\n            si_1 = (scan_1<axis=0>[batch])<axis=1>[t];\n            ... ;\n            si_m = (scan_m<axis=0>[batch])<axis=1>[t];\n            // execute loop-body\n            st_1, ..., st_n, so_1, ..., so_k = loop-body(st_1, ..., st_n, si_1, ..., si_m)\n            // accumulate the scan-output elements\n            scan_out_1 = Concat<axis=0>(scan_out_1, so_1); ... ; scan_out_k = Concat<axis=0>(scan_out_k, so_k);\n        }\n        // accumulate the outputs for this batch:\n        bst_1[batch] = st_1; ..., bst_n[batch] = st_n;\n        // Note scan-outputs will have size max_sequence_length, but only first N values will be meaningful.\n        // The remaining values have an undefined value.\n        b_scan_out_1[batch] = scan_out_1; ...; b_scan_out_k[batch] = scan_out_k;\n    }\n    return bst_1, ..., bst_n, b_scan_out_1, ..., b_scan_out_k;\n\n\n\n*Sample usage: Encoding RNN using a Scan*\n\nThe following example shows how a simple RNN over an input tensor %X, with weight tensor %Wi,\nrecurrence weight tensor %Ri, bias tensors %Wbi and %Rbi, and initial hidden-state %H_0 can\nbe encoded as a ScanLoop. Note that the loop-body is a nested graph, and it directly computes\n%Wi, %Ri, %Wbi, and %Rbi (typically constants or initializers in the body graph). If these\nvalues are computed in the outer graph, they need to be passed in as extra state_variables.\n\n    graph rnn-encoding {\n      %H_0 = ... \n      %X = ...\n      %Y_h, %Y = Scan[body = <graph rnn-cell-1>, num_scan_inputs=1](\"\", %H_0, %X)\n      return %Y, %Y_h\n    }\n\n    graph rnn-cell-1 (\n      %H_tminus1[FLOAT, tensor]\n      %X_t[FLOAT, tensor]\n    ) {\n      %Wi = ...\n      %Ri = ...\n      %Wbi = ...\n      %Rbi = ...\n      %t1 = X_t * (Wi^T)\n      %t2 = H_tminus1*(Ri^T)\n      %t3 = Add(%t1, %t2)\n      %t4 = Add(%t3, %Wbi)\n      %t5 = Add(%t4, %Rbi)\n      %Ht = Tanh(%t5)\n      %Accumulate = Identity(%Ht)\n      return %Ht, %Accumulate\n    }\n \n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "# Given an input sequence [x1, ..., xN], sum up its elements using a scan\n# returning the final state (x1+x2+...+xN) as well the scan_output\n# [x1, x1+x2, ..., x1+x2+...+xN]\n#\n# create graph to represent scan body\nsum_in = onnx.helper.make_tensor_value_info('sum_in', onnx.TensorProto.FLOAT, [2])\nnext = onnx.helper.make_tensor_value_info('next', onnx.TensorProto.FLOAT, [2])\nsum_out = onnx.helper.make_tensor_value_info('sum_out', onnx.TensorProto.FLOAT, [2])\nscan_out = onnx.helper.make_tensor_value_info('scan_out', onnx.TensorProto.FLOAT, [2])\nadd_node = onnx.helper.make_node(\n    'Add',\n    inputs=['sum_in', 'next'],\n    outputs=['sum_out']\n)\nid_node = onnx.helper.make_node(\n    'Identity',\n    inputs=['sum_out'],\n    outputs=['scan_out']\n)\nscan_body = onnx.helper.make_graph(\n    [add_node, id_node],\n    'scan_body',\n    [sum_in, next],\n    [sum_out, scan_out]\n)\n# create scan op node\nno_sequence_lens = ''   # optional input, not supplied\nnode = onnx.helper.make_node(\n    'Scan',\n    inputs=[no_sequence_lens, 'initial', 'x'],\n    outputs=['y', 'z'],\n    num_scan_inputs=1,\n    body=scan_body\n)\n# create inputs for batch-size 1, sequence-length 3, inner dimension 2\ninitial = np.array([0, 0]).astype(np.float32).reshape((1, 2))\nx = np.array([1, 2, 3, 4, 5, 6]).astype(np.float32).reshape((1, 3, 2))\n# final state computed = [1 + 3 + 5, 2 + 4 + 6]\ny = np.array([9, 12]).astype(np.float32).reshape((1, 2))\n# scan-output computed\nz = np.array([1, 2, 4, 6, 9, 12]).astype(np.float32).reshape((1, 3, 2))\n\nexpect(node, inputs=[initial, x], outputs=[y, z],\n       name='test_scan_sum', opset_imports=[onnx.helper.make_opsetid(\"\", 8)])",
          "summary": "scan_8"
        },
        {
          "code": "# Given an input sequence [x1, ..., xN], sum up its elements using a scan\n# returning the final state (x1+x2+...+xN) as well the scan_output\n# [x1, x1+x2, ..., x1+x2+...+xN]\n#\n# create graph to represent scan body\nsum_in = onnx.helper.make_tensor_value_info('sum_in', onnx.TensorProto.FLOAT, [2])\nnext = onnx.helper.make_tensor_value_info('next', onnx.TensorProto.FLOAT, [2])\nsum_out = onnx.helper.make_tensor_value_info('sum_out', onnx.TensorProto.FLOAT, [2])\nscan_out = onnx.helper.make_tensor_value_info('scan_out', onnx.TensorProto.FLOAT, [2])\nadd_node = onnx.helper.make_node(\n    'Add',\n    inputs=['sum_in', 'next'],\n    outputs=['sum_out']\n)\nid_node = onnx.helper.make_node(\n    'Identity',\n    inputs=['sum_out'],\n    outputs=['scan_out']\n)\nscan_body = onnx.helper.make_graph(\n    [add_node, id_node],\n    'scan_body',\n    [sum_in, next],\n    [sum_out, scan_out]\n)\n# create scan op node\nnode = onnx.helper.make_node(\n    'Scan',\n    inputs=['initial', 'x'],\n    outputs=['y', 'z'],\n    num_scan_inputs=1,\n    body=scan_body\n)\n# create inputs for sequence-length 3, inner dimension 2\ninitial = np.array([0, 0]).astype(np.float32).reshape((2,))\nx = np.array([1, 2, 3, 4, 5, 6]).astype(np.float32).reshape((3, 2))\n# final state computed = [1 + 3 + 5, 2 + 4 + 6]\ny = np.array([9, 12]).astype(np.float32).reshape((2,))\n# scan-output computed\nz = np.array([1, 2, 4, 6, 9, 12]).astype(np.float32).reshape((3, 2))\n\nexpect(node, inputs=[initial, x], outputs=[y, z],\n       name='test_scan9_sum', opset_imports=[onnx.helper.make_opsetid(\"\", 9)])",
          "summary": "scan_9"
        }
      ],
      "inputs": [
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If this input is not specified, all sequences are assumed to be of the maximum sequence length (the dimension of the sequence axis of the scan_input tensors).",
          "name": "sequence_lens",
          "option": "optional",
          "type": "I"
        },
        {
          "description": "Initial values of the loop's N state variables followed by M scan_inputs",
          "name": "initial_state_and_scan_inputs",
          "option": "variadic",
          "type": "V"
        }
      ],
      "max_input": 2147483647,
      "max_output": 2147483647,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Final values of the loop's N state variables followed by K scan_outputs",
          "name": "final_state_and_scan_outputs",
          "option": "variadic",
          "type": "V"
        }
      ],
      "since_version": 8,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "Int64 tensor",
          "type_param_str": "I"
        },
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "All Tensor types",
          "type_param_str": "V"
        }
      ]
    }
  },
  {
    "name": "Scan",
    "schema": {
      "attributes": [
        {
          "description": "An optional list of M flags. The i-th element of the list specifies the axis to be scanned (the sequence axis) for the i-th scan_input. If omitted, 0 will be used as the scan axis for every scan_input.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The graph run each iteration. It has N+M inputs: (loop state variables..., scan_input_elts...). It has N+K outputs: (loop state variables..., scan_output_elts...). Each scan_output is created by concatenating the value of the specified scan_output_elt value at the end of each iteration of the loop. It is an error if the dimensions of these values change across loop iterations.",
          "name": "body",
          "required": true,
          "type": "graph"
        },
        {
          "description": "An attribute specifying the number of scan_inputs M. ",
          "name": "num_scan_inputs",
          "required": true,
          "type": "int"
        },
        {
          "description": "An optional list of M flags. The i-th element of the list specifies the direction to be scanned for the i-th scan_input tensor: 0 indicates forward direction and 1 indicates reverse direction. If omitted, all scan_input tensors will be scanned in the forward direction.",
          "name": "scan_input_directions",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "An optional list of K flags, one for each scan_output. The i-th element of the list specifies whether the i-th scan_output should be constructed by appending or prepending a new value in each iteration: 0 indicates appending and 1 indicates prepending. If omitted, all scan_output tensors will be produced by appending a value in each iteration.",
          "name": "scan_output_directions",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Scan can be used to iterate over one or more scan_input tensors,\nconstructing zero or more scan_output tensors. It combines ideas from general recurrences,\nfunctional programming constructs such as scan, fold, map, and zip and is intended to enable\ngeneralizations of RNN-like constructs for sequence-to-sequence processing.\nOther tensors (referred to as state_variables here) can be used to carry a state\nwhen iterating from one element to another (similar to hidden-state in RNNs, also referred\nto as loop-carried dependences in the context of loops).\nMany common usages involve a single scan_input tensor (where functionality\nsimilar to scan, fold and map can be obtained). When more than one scan_input is used,\na behavior similar to zip is obtained.\n\nThe attribute body must be a graph, specifying the computation to be performed in\nevery iteration. It takes as input the current values of the state_variables and\nthe current iterated element of the scan_inputs. It must return the (updated) values\nof the state_variables and zero or more scan_output_element tensors. The values of the\nscan_output_element tensors are concatenated over all the iterations to produce the\nscan_output values of the scan construct (similar to the concatenated intermediate\nhidden-state values of RNN-like constructs). All the output tensors (state_variables as\nwell as scan_output_element tensors) are required to have the same shape in each iteration\nof the loop (a restriction imposed to enable efficient memory allocation).\n\nThe scan operation returns the final values of the state_variables as well as the\nscan_outputs.\n\nThe optional attribute scan_input_directions specifies the direction (forward or backward)\nfor each scan input. If this attribute is omitted, all sequences are scanned in the forward\ndirection. A bidirectional scan may be performed by specifying the same tensor input twice\nin the scan_inputs, once with a forward direction, and once with a backward direction.\n\nThe scan_output of the operation is produced by concatenating the scan_output_element\nvalues produced by the body in each iteration.  The optional attribute scan_output_directions\nspecifies the direction in which scan_output is constructed (by appending or prepending the\nscan_output_element to scan_output in each iteration) for each scan_output. If this attribute\nis omitted, the scan_output_element is appended to the scan_output in each iteration.\n\nThe optional attribute axes specifies the axis to be scanned for each scan_input.\nIf omitted, every scan_input will be scanned in axis 0. For example, if axis 0 is the\nbatch axis and axis 1 is the time axis (to be scanned), specify an axis value of 1.\nNote that scanning a non-zero axis may be less efficient than scanning axis zero.\n\nNote that because of the ONNX restriction that only the last parameter of an operator can\nbe variadic, the initial-states and scan-inputs are listed together as one input parameter.\nSimilarly, the final-states and scan-outputs are listed together as one output parameter.\nThe attribute num_scan_inputs indicates the number M of scan-inputs.\n\nThe behavior of\n\n    Scan <\n        num_scan_inputs = m,\n        body = loop-body,\n        axes = [axis_1, ..., axis_m]\n    > (init_1, ..., init_n, scan_1, ..., scan_m)\n\nis equivalent to the following pseudo-code:\n\n    // scan_i.shape[axis_i] denotes the (max) sequence-length of scan_i\n    // scan_i.shape[axis_i] is required to be equal to scan_j.shape[axis_j] for all i,j.\n    sequence_length = scan_1.shape[axis_1];\n\n    // initialize state-variables\n    st_1 = init_1; ... st_n = init_n;\n    // initialize scan-output variables: [] denotes an empty tensor\n    scan_out_1 = []; ...; scan_out_k = [];\n    // identify number of iterations:\n\n    // execute loop\n    for (int t = 0; t < sequence_length; ++t) {\n        // generate the scan-input elements: the notation T<axis=k>[t] indicates the sub-tensor\n        // of rank one less than T obtained by indexing T at position t along axis k.\n        si_1 = scan_1<axis=axis_1>[t];\n        ... ;\n        si_m = scan_m<axis=axis_m>[t];\n        // execute loop-body\n        st_1, ..., st_n, so_1, ..., so_k = loop-body(st_1, ..., st_n, si_1, ..., si_m)\n        // accumulate the scan-output elements\n        scan_out_1 = Concat<axis=0>(scan_out_1, so_1); ... ; scan_out_k = Concat<axis=0>(scan_out_k, so_k);\n    }\n\n    return st_1, ..., st_n, scan_out_1, ..., scan_out_k;\n\n*Sample usage: Encoding RNN using a Scan*\n\nThe following example shows how a simple RNN over an input tensor %X, with weight tensor %Wi,\nrecurrence weight tensor %Ri, bias tensors %Wbi and %Rbi, and initial hidden-state %H_0 can\nbe encoded as a ScanLoop. Note that the loop-body is a nested graph, and it directly computes\n%Wi, %Ri, %Wbi, and %Rbi (typically constants or initializers in the body graph). If these\nvalues are computed in the outer graph, they need to be passed in as extra state_variables.\n\n    graph rnn-encoding {\n      %H_0 = ... \n      %X = ...\n      %Y_h, %Y = Scan[body = <graph rnn-cell-1>, num_scan_inputs=1](%H_0, %X)\n      return %Y, %Y_h\n    }\n\n    graph rnn-cell-1 (\n      %H_tminus1[FLOAT, tensor]\n      %X_t[FLOAT, tensor]\n    ) {\n      %Wi = ...\n      %Ri = ...\n      %Wbi = ...\n      %Rbi = ...\n      %t1 = X_t * (Wi^T)\n      %t2 = H_tminus1*(Ri^T)\n      %t3 = Add(%t1, %t2)\n      %t4 = Add(%t3, %Wbi)\n      %t5 = Add(%t4, %Rbi)\n      %Ht = Tanh(%t5)\n      %Accumulate = Identity(%Ht)\n      return %Ht, %Accumulate\n    }\n\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "# Given an input sequence [x1, ..., xN], sum up its elements using a scan\n# returning the final state (x1+x2+...+xN) as well the scan_output\n# [x1, x1+x2, ..., x1+x2+...+xN]\n#\n# create graph to represent scan body\nsum_in = onnx.helper.make_tensor_value_info('sum_in', onnx.TensorProto.FLOAT, [2])\nnext = onnx.helper.make_tensor_value_info('next', onnx.TensorProto.FLOAT, [2])\nsum_out = onnx.helper.make_tensor_value_info('sum_out', onnx.TensorProto.FLOAT, [2])\nscan_out = onnx.helper.make_tensor_value_info('scan_out', onnx.TensorProto.FLOAT, [2])\nadd_node = onnx.helper.make_node(\n    'Add',\n    inputs=['sum_in', 'next'],\n    outputs=['sum_out']\n)\nid_node = onnx.helper.make_node(\n    'Identity',\n    inputs=['sum_out'],\n    outputs=['scan_out']\n)\nscan_body = onnx.helper.make_graph(\n    [add_node, id_node],\n    'scan_body',\n    [sum_in, next],\n    [sum_out, scan_out]\n)\n# create scan op node\nno_sequence_lens = ''   # optional input, not supplied\nnode = onnx.helper.make_node(\n    'Scan',\n    inputs=[no_sequence_lens, 'initial', 'x'],\n    outputs=['y', 'z'],\n    num_scan_inputs=1,\n    body=scan_body\n)\n# create inputs for batch-size 1, sequence-length 3, inner dimension 2\ninitial = np.array([0, 0]).astype(np.float32).reshape((1, 2))\nx = np.array([1, 2, 3, 4, 5, 6]).astype(np.float32).reshape((1, 3, 2))\n# final state computed = [1 + 3 + 5, 2 + 4 + 6]\ny = np.array([9, 12]).astype(np.float32).reshape((1, 2))\n# scan-output computed\nz = np.array([1, 2, 4, 6, 9, 12]).astype(np.float32).reshape((1, 3, 2))\n\nexpect(node, inputs=[initial, x], outputs=[y, z],\n       name='test_scan_sum', opset_imports=[onnx.helper.make_opsetid(\"\", 8)])",
          "summary": "scan_8"
        },
        {
          "code": "# Given an input sequence [x1, ..., xN], sum up its elements using a scan\n# returning the final state (x1+x2+...+xN) as well the scan_output\n# [x1, x1+x2, ..., x1+x2+...+xN]\n#\n# create graph to represent scan body\nsum_in = onnx.helper.make_tensor_value_info('sum_in', onnx.TensorProto.FLOAT, [2])\nnext = onnx.helper.make_tensor_value_info('next', onnx.TensorProto.FLOAT, [2])\nsum_out = onnx.helper.make_tensor_value_info('sum_out', onnx.TensorProto.FLOAT, [2])\nscan_out = onnx.helper.make_tensor_value_info('scan_out', onnx.TensorProto.FLOAT, [2])\nadd_node = onnx.helper.make_node(\n    'Add',\n    inputs=['sum_in', 'next'],\n    outputs=['sum_out']\n)\nid_node = onnx.helper.make_node(\n    'Identity',\n    inputs=['sum_out'],\n    outputs=['scan_out']\n)\nscan_body = onnx.helper.make_graph(\n    [add_node, id_node],\n    'scan_body',\n    [sum_in, next],\n    [sum_out, scan_out]\n)\n# create scan op node\nnode = onnx.helper.make_node(\n    'Scan',\n    inputs=['initial', 'x'],\n    outputs=['y', 'z'],\n    num_scan_inputs=1,\n    body=scan_body\n)\n# create inputs for sequence-length 3, inner dimension 2\ninitial = np.array([0, 0]).astype(np.float32).reshape((2,))\nx = np.array([1, 2, 3, 4, 5, 6]).astype(np.float32).reshape((3, 2))\n# final state computed = [1 + 3 + 5, 2 + 4 + 6]\ny = np.array([9, 12]).astype(np.float32).reshape((2,))\n# scan-output computed\nz = np.array([1, 2, 4, 6, 9, 12]).astype(np.float32).reshape((3, 2))\n\nexpect(node, inputs=[initial, x], outputs=[y, z],\n       name='test_scan9_sum', opset_imports=[onnx.helper.make_opsetid(\"\", 9)])",
          "summary": "scan_9"
        }
      ],
      "inputs": [
        {
          "description": "Initial values of the loop's N state variables followed by M scan_inputs",
          "name": "initial_state_and_scan_inputs",
          "option": "variadic",
          "type": "V"
        }
      ],
      "max_input": 2147483647,
      "max_output": 2147483647,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Final values of the loop's N state variables followed by K scan_outputs",
          "name": "final_state_and_scan_outputs",
          "option": "variadic",
          "type": "V"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "Int64 tensor",
          "type_param_str": "I"
        },
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "All Tensor types",
          "type_param_str": "V"
        }
      ]
    }
  },
  {
    "name": "Scatter",
    "schema": {
      "attributes": [
        {
          "description": "Which axis to scatter on. Negative value means counting dimensions from the back. Accepted range in [-r, r-1]",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Given `data`, `updates` and `indices` input tensors of rank r >= 1, write the values provided by `updates` \ninto the first input, `data`, along `axis` dimension of `data` (by default outer-most one as axis=0) at corresponding `indices`. \nFor each entry in `updates`, the target index in `data` is specified by corresponding entry in `indices`\nfor dimension = axis, and index in source for dimension != axis. For instance, in a 2-D tensor case,\ndata[indices[i][j]][j] = updates[i][j] if axis = 0, or data[i][indices[i][j]] = updates[i][j] if axis = 1,\nwhere i and j are loop counters from 0 up to the respective size in `updates` - 1.\n\nExample 1:\n  data = [\n      [0.0, 0.0, 0.0],\n      [0.0, 0.0, 0.0],\n      [0.0, 0.0, 0.0],\n  ]\n  indices = [\n      [1, 0, 2],\n      [0, 2, 1],\n  ]\n  updates = [\n      [1.0, 1.1, 1.2],\n      [2.0, 2.1, 2.2],\n  ]\n  output = [\n      [2.0, 1.1, 0.0]\n      [1.0, 0.0, 2.2]\n      [0.0, 2.1, 1.2]\n  ]\n\nExample 2:\n  data = [[1.0, 2.0, 3.0, 4.0, 5.0]]\n  indices = [[1, 3]]\n  updates = [[1.1, 2.1]]\n  axis = 1\n  output = [[1.0, 1.1, 3.0, 2.1, 5.0]]\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Scatter',\n    inputs=['data', 'indices', 'updates'],\n    outputs=['y'],\n    axis=1,\n)\ndata = np.array([[1.0, 2.0, 3.0, 4.0, 5.0]], dtype=np.float32)\nindices = np.array([[1, 3]], dtype=np.int64)\nupdates = np.array([[1.1, 2.1]], dtype=np.float32)\n\ny = np.array([[1.0, 1.1, 3.0, 2.1, 5.0]], dtype=np.float32)\n\nexpect(node, inputs=[data, indices, updates], outputs=[y],\n       name='test_scatter_with_axis')",
          "summary": "scatter_with_axis"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Scatter',\n    inputs=['data', 'indices', 'updates'],\n    outputs=['y'],\n)\ndata = np.zeros((3, 3), dtype=np.float32)\nindices = np.array([[1, 0, 2], [0, 2, 1]], dtype=np.int64)\nupdates = np.array([[1.0, 1.1, 1.2], [2.0, 2.1, 2.2]], dtype=np.float32)\n\ny = np.array([\n    [2.0, 1.1, 0.0],\n    [1.0, 0.0, 2.2],\n    [0.0, 2.1, 1.2]\n], dtype=np.float32)\n\nexpect(node, inputs=[data, indices, updates], outputs=[y],\n       name='test_scatter_without_axis')",
          "summary": "scatter_without_axis"
        }
      ],
      "inputs": [
        {
          "description": "Tensor of rank r >= 1.",
          "name": "data",
          "type": "T"
        },
        {
          "description": "Tensor of int32/int64 indices, of r >= 1 (same rank as input).",
          "name": "indices",
          "type": "Tind"
        },
        {
          "description": "Tensor of rank r >=1 (same rank and shape as indices)",
          "name": "updates",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor of rank r >= 1 (same rank as input).",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Input and output types can be of any tensor type.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)",
            "tensor(int64)"
          ],
          "description": "Constrain indices to integer types",
          "type_param_str": "Tind"
        }
      ]
    }
  },
  {
    "name": "Selu",
    "schema": {
      "attributes": [
        {
          "default": 1.673200011253357,
          "description": "Coefficient of SELU default to 1.6732.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        },
        {
          "default": 1.0506999492645264,
          "description": "Coefficient of SELU default to 1.0507.",
          "name": "gamma",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Activation",
      "description": "Selu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the scaled exponential linear unit function,\n`y = gamma * (alpha * e^x - alpha) for x <= 0`, `y = gamma * x for x > 0`,\nis applied to the tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Selu',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=2.0,\n    gamma=3.0\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\n# expected output [-3.79272318, 0., 3.]\ny = np.clip(x, 0, np.inf) * 3.0 + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0 * 3.0\nexpect(node, inputs=[x], outputs=[y],\n       name='test_selu_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) * 3.0 + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0 * 3.0\nexpect(node, inputs=[x], outputs=[y],\n       name='test_selu')",
          "summary": "selu"
        },
        {
          "code": "default_alpha = 1.67326319217681884765625\ndefault_gamma = 1.05070102214813232421875\nnode = onnx.helper.make_node(\n    'Selu',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) * default_gamma + \\\n    (np.exp(np.clip(x, -np.inf, 0)) - 1) * default_alpha * default_gamma\nexpect(node, inputs=[x], outputs=[y],\n       name='test_selu_default')",
          "summary": "selu_default"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Selu",
    "schema": {
      "attributes": [
        {
          "default": 1.6732631921768188,
          "description": "Coefficient of SELU default to 1.67326319217681884765625 (i.e., float32 approximation of 1.6732632423543772848170429916717).",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "default": 1.0507010221481323,
          "description": "Coefficient of SELU default to 1.05070102214813232421875 (i.e., float32 approximation of 1.0507009873554804934193349852946).",
          "name": "gamma",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Activation",
      "description": "Selu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the scaled exponential linear unit function,\n`y = gamma * (alpha * e^x - alpha) for x <= 0`, `y = gamma * x for x > 0`,\nis applied to the tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Selu',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=2.0,\n    gamma=3.0\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\n# expected output [-3.79272318, 0., 3.]\ny = np.clip(x, 0, np.inf) * 3.0 + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0 * 3.0\nexpect(node, inputs=[x], outputs=[y],\n       name='test_selu_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) * 3.0 + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0 * 3.0\nexpect(node, inputs=[x], outputs=[y],\n       name='test_selu')",
          "summary": "selu"
        },
        {
          "code": "default_alpha = 1.67326319217681884765625\ndefault_gamma = 1.05070102214813232421875\nnode = onnx.helper.make_node(\n    'Selu',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf) * default_gamma + \\\n    (np.exp(np.clip(x, -np.inf, 0)) - 1) * default_alpha * default_gamma\nexpect(node, inputs=[x], outputs=[y],\n       name='test_selu_default')",
          "summary": "selu_default"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Shape",
    "schema": {
      "description": "Takes a tensor as input and outputs an 1D int64 tensor containing the shape of the input tensor.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Shape',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([\n    [1, 2, 3],\n    [4, 5, 6],\n]).astype(np.float32)\ny = np.array([\n    2, 3,\n]).astype(np.int64)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_shape_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.array(x.shape).astype(np.int64)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_shape')",
          "summary": "shape"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Shape of the input tensor",
          "name": "shape",
          "type": "T1"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Input tensor can be of arbitrary type.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "Constrain output to int64 tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Shrink",
    "schema": {
      "attributes": [
        {
          "description": "The bias value added to output. Default is 0.",
          "name": "bias",
          "required": false,
          "type": "float"
        },
        {
          "default": 0.5,
          "description": "The lambd value for the Shrink formulation. Default is 0.5.",
          "name": "lambd",
          "required": false,
          "type": "float"
        }
      ],
      "description": "Shrink takes one input data (Tensor<numeric>) and produces one Tensor output,\nhaving same datatype and shape with input. It has two attributes, lambd and\nbias. The formula of this operator is: If x < -lambd, y = x + bias;\nIf x > lambd, y = x - bias; Otherwise, y = 0.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Shrink',\n    inputs=['x'],\n    outputs=['y'],\n    lambd=1.5,\n)\nX = np.arange(-2.0, 2.1, dtype=np.float32)\nY = np.array([-2, 0, 0, 0, 2], dtype=np.float32)\nexpect(node, inputs=[X], outputs=[Y],\n       name='test_shrink_hard')",
          "summary": "hard_shrink"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Shrink',\n    inputs=['x'],\n    outputs=['y'],\n    lambd=1.5,\n    bias=1.5,\n)\nX = np.arange(-2.0, 2.1, dtype=np.float32)\nY = np.array([-0.5, 0, 0, 0, 0.5], dtype=np.float32)\nexpect(node, inputs=[X], outputs=[Y],\n       name='test_shrink_soft')",
          "summary": "soft_shrink"
        }
      ],
      "inputs": [
        {
          "description": "The input data as Tensor.",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to only numeric types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sigmoid",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Activation",
      "description": "Sigmoid takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the sigmoid function, y = 1 / (1 + exp(-x)), is applied to the\ntensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sigmoid',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = 1.0 / (1.0 + np.exp(np.negative(x)))  # expected output [0.26894143, 0.5, 0.7310586]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sigmoid_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = 1.0 / (1.0 + np.exp(np.negative(x)))\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sigmoid')",
          "summary": "sigmoid"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sigmoid",
    "schema": {
      "category": "Activation",
      "description": "Sigmoid takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the sigmoid function, y = 1 / (1 + exp(-x)), is applied to the\ntensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sigmoid',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = 1.0 / (1.0 + np.exp(np.negative(x)))  # expected output [0.26894143, 0.5, 0.7310586]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sigmoid_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = 1.0 / (1.0 + np.exp(np.negative(x)))\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sigmoid')",
          "summary": "sigmoid"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sign",
    "schema": {
      "description": "Calculate the sign of the given input tensor element-wise.\nIf input > 0, output 1. if input < 0, output -1. if input == 0, output 0.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sign',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array(range(-5, 6)).astype(np.float32)\ny = np.sign(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sign')",
          "summary": "sign"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The sign of the input tensor computed element-wise. It has the same shape and type of the input.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to all numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sin",
    "schema": {
      "description": "Calculates the sine of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sin',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.sin(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sin_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.sin(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sin')",
          "summary": "sin"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The sine of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sinh",
    "schema": {
      "description": "Calculates the hyperbolic sine of the given input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sinh',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.sinh(x)  # expected output [-1.17520118,  0.,  1.17520118]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sinh_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.sinh(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sinh')",
          "summary": "sinh"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The hyperbolic sine values of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Size",
    "schema": {
      "description": "Takes a tensor as input and outputs a int64 scalar that equals to the total number of elements of the input tensor.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Size',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([\n    [1, 2, 3],\n    [4, 5, 6],\n]).astype(np.float32)\ny = np.array(6).astype(np.int64)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_size_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.array(x.size).astype(np.int64)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_size')",
          "summary": "size"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Total number of elements of the input tensor",
          "name": "size",
          "type": "T1"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Input tensor can be of arbitrary type.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "Constrain output to int64 tensor, which should be a scalar though.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Slice",
    "schema": {
      "attributes": [
        {
          "description": "Axes that `starts` and `ends` apply to. It's optional. If not present, will be treated as [0, 1, ..., len(`starts`) - 1].",
          "name": "axes",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Ending indices (exclusive) of corresponding axis in axes`",
          "name": "ends",
          "required": true,
          "type": "int[]"
        },
        {
          "description": "Starting indices of corresponding axis in `axes`",
          "name": "starts",
          "required": true,
          "type": "int[]"
        }
      ],
      "category": "Tensor",
      "description": "Produces a slice of the input tensor along multiple axes. Similar to numpy:\nhttps://docs.scipy.org/doc/numpy/reference/arrays.indexing.html\nSlices uses `axes`, `starts` and `ends` attributes to specify the start and end\ndimension for each axis in the list of axes, it uses this information to\nslice the input `data` tensor. If a negative value is passed for any of the\nstart or end indices, it represent number of elements before the end of that\ndimension. If the value passed to start or end is larger than the `n` (the\nnumber of elements in this dimension), it represents `n`. For slicing to the\nend of a dimension with unknown size, it is recommended to pass in `INT_MAX`.\nIf `axes` are omitted, they are set to `[0, ..., ndim-1]`.\nExample 1:\n  data = [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n  ]\n  axes = [0, 1]\n  starts = [1, 0]\n  ends = [2, 3]\n  result = [\n      [5, 6, 7],\n  ]\nExample 2:\n  data = [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n  ]\n  starts = [0, 1]\n  ends = [-1, 1000]\n  result = [\n      [2, 3, 4],\n  ]\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Slice',\n    inputs=['x'],\n    outputs=['y'],\n    axes=[0, 1],\n    starts=[0, 0],\n    ends=[3, 10],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\ny = x[0:3, 0:10]\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_slice')",
          "summary": "slice"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Slice',\n    inputs=['x'],\n    outputs=['y'],\n    starts=[0, 0, 3],\n    ends=[20, 10, 4],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\ny = x[:, :, 3:4]\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_slice_default_axes')",
          "summary": "slice_default_axes"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Slice',\n    inputs=['x'],\n    outputs=['y'],\n    axes=[1],\n    starts=[1],\n    ends=[1000],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\ny = x[:, 1:1000]\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_slice_end_out_of_bounds')",
          "summary": "slice_end_out_of_bounds"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Slice',\n    inputs=['x'],\n    outputs=['y'],\n    axes=[1],\n    starts=[0],\n    ends=[-1],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\ny = x[:, 0:-1]\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_slice_neg')",
          "summary": "slice_neg"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Slice',\n    inputs=['x'],\n    outputs=['y'],\n    axes=[1],\n    starts=[1000],\n    ends=[1000],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\ny = x[:, 1000:1000]\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_slice_start_out_of_bounds')",
          "summary": "slice_start_out_of_bounds"
        }
      ],
      "inputs": [
        {
          "description": "Tensor of data to extract slices from.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Sliced data tensor.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Softmax",
    "schema": {
      "attributes": [
        {
          "default": 1,
          "description": "Describes the axis of the inputs when coerced to 2D; defaults to one because the 0th axis most likely describes the batch_size",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Activation",
      "description": "The operator computes the softmax (normalized exponential) values for each layer in the batch\n of the given input. The input is a 2-D tensor (Tensor<float>) of size\n(batch_size x input_feature_dimensions). The output tensor has the same shape\nand contains the softmax values of the corresponding input.\n\nInput does not need to explicitly be a 2D vector; rather, it will be\ncoerced into one. For an arbitrary n-dimensional tensor\ninput \\in [a_0, a_1, ..., a_{k-1}, a_k, ..., a_{n-1}] and k is\nthe axis provided, then input will be coerced into a 2-dimensional tensor with\ndimensions [a_0 * ... * a_{k-1}, a_k * ... * a_{n-1}]. For the default\ncase where axis=1, this means the input tensor will be coerced into a 2D tensor\nof dimensions [a_0, a_1 * ... * a_{n-1}], where a_0 is often the batch size.\nIn this situation, we must have a_0 = N and a_1 * ... * a_{n-1} = D.\nEach of these dimensions must be matched correctly, or else the operator\nwill throw errors.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Softmax',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.array([[-1, 0, 1]]).astype(np.float32)\n# expected output [[0.09003058, 0.24472848, 0.66524094]]\ny = np.exp(x) / np.sum(np.exp(x), axis=1)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softmax_example')",
          "summary": "softmax"
        },
        {
          "code": "def softmax_2d(x):  # type: (np.ndarray) -> np.ndarray\n    max_x = np.max(x, axis=1).reshape((-1, 1))\n    exp_x = np.exp(x - max_x)\n    return exp_x / np.sum(exp_x, axis=1).reshape((-1, 1))\n\nx = np.array([[0, 1, 2, 3], [10000, 10001, 10002, 10003]]).astype(np.float32)\n# expected output [[0.0320586, 0.08714432, 0.23688284, 0.64391428],\n#                 [0.0320586, 0.08714432, 0.23688284, 0.64391428]]\ny = softmax_2d(x)\n\nnode = onnx.helper.make_node(\n    'Softmax',\n    inputs=['x'],\n    outputs=['y'],\n)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softmax_large_number')\n\nx = np.abs(np.random.randn(3, 4, 5).astype(np.float32))\nnode = onnx.helper.make_node(\n    'Softmax',\n    inputs=['x'],\n    outputs=['y'],\n    axis=0,\n)\ny = softmax_2d(x.reshape(1, 60)).reshape(3, 4, 5)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softmax_axis_0')\n\nnode = onnx.helper.make_node(\n    'Softmax',\n    inputs=['x'],\n    outputs=['y'],\n    axis=1,\n)\ny = softmax_2d(x.reshape(3, 20)).reshape(3, 4, 5)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softmax_axis_1')\n\n# default axis is 1\nnode = onnx.helper.make_node(\n    'Softmax',\n    inputs=['x'],\n    outputs=['y'],\n)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softmax_default_axis')\n\nnode = onnx.helper.make_node(\n    'Softmax',\n    inputs=['x'],\n    outputs=['y'],\n    axis=2,\n)\ny = softmax_2d(x.reshape(12, 5)).reshape(3, 4, 5)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softmax_axis_2')",
          "summary": "softmax_axis"
        }
      ],
      "inputs": [
        {
          "description": "The input tensor that's coerced into a 2D matrix of size (NxD) as described above.",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output values with the same shape as input tensor (the original size without coercion).",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Softplus",
    "schema": {
      "category": "Activation",
      "description": "Softplus takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the softplus function, y = ln(exp(x) + 1), is applied to\nthe tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Softplus',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.log(np.exp(x) + 1)  # expected output [0.31326166, 0.69314718, 1.31326163]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softplus_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.log(np.exp(x) + 1)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softplus')",
          "summary": "softplus"
        }
      ],
      "inputs": [
        {
          "description": "1D input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "1D input tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Softsign",
    "schema": {
      "category": "Activation",
      "description": "Calculates the softsign (x/(1+|x|)) of the given input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Softsign',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.array([-0.5, 0, 0.5]).astype(np.float32)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softsign_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = x / (1 + np.abs(x))\nexpect(node, inputs=[x], outputs=[y],\n       name='test_softsign')",
          "summary": "softsign"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The softsign (x/(1+|x|)) values of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "SpaceToDepth",
    "schema": {
      "attributes": [
        {
          "description": "Blocks of [blocksize, blocksize] are moved.",
          "name": "blocksize",
          "required": true,
          "type": "int"
        }
      ],
      "description": "SpaceToDepth rearranges blocks of spatial data into depth. More specifically,\nthis op outputs a copy of the input tensor where values from the height and width dimensions\nare moved to the depth dimension.\n",
      "domain": "ai.onnx",
      "inputs": [
        {
          "description": "Input tensor of [N,C,H,W], where N is the batch axis, C is the channel or depth, H is the height and W is the width.",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of [N, C * blocksize * blocksize, H/blocksize, W/blocksize].",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Split",
    "schema": {
      "attributes": [
        {
          "description": "Which axis to split on",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "length of each output",
          "name": "split",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Tensor",
      "description": "Split a tensor into a list of tensors, along the specified\n'axis'. The lengths of the split can be specified using argument 'axis' or\noptional second input blob to the operator. Otherwise, the tensor is split\nto equal sized parts.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "input = np.array([1., 2., 3., 4., 5., 6.]).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2', 'output_3'],\n    axis=0\n)\n\nexpected_outputs = [np.array([1., 2.]).astype(np.float32), np.array([3., 4.]).astype(np.float32), np.array([5., 6.]).astype(np.float32)]\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_equal_parts_1d')\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2'],\n    axis=0,\n    split=[2, 4]\n)\n\nexpected_outputs = [np.array([1., 2.]).astype(np.float32), np.array([3., 4., 5., 6.]).astype(np.float32)]\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_variable_parts_1d')",
          "summary": "1d"
        },
        {
          "code": "input = np.array([[1., 2., 3., 4., 5., 6.],\n                  [7., 8., 9., 10., 11., 12.]]).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2'],\n    axis=1\n)\n\nexpected_outputs = [np.array([[1., 2., 3.], [7., 8., 9.]]).astype(np.float32),\n                    np.array([[4., 5., 6.], [10., 11., 12.]]).astype(np.float32)]\n\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_equal_parts_2d')\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2'],\n    axis=1,\n    split=[2, 4]\n)\n\nexpected_outputs = [np.array([[1., 2.], [7., 8.]]).astype(np.float32),\n                    np.array([[3., 4., 5., 6.], [9., 10., 11., 12.]]).astype(np.float32)]\n\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_variable_parts_2d')",
          "summary": "2d"
        },
        {
          "code": "input = np.array([1., 2., 3., 4., 5., 6.]).astype(np.float32)\n\n# If axis is not specified, split is applied on default axis 0\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2', 'output_3']\n)\n\nexpected_outputs = [np.array([1., 2.]).astype(np.float32), np.array([3., 4.]).astype(np.float32), np.array([5., 6.]).astype(np.float32)]\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_equal_parts_default_axis')\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2'],\n    split=[2, 4]\n)\n\nexpected_outputs = [np.array([1., 2.]).astype(np.float32), np.array([3., 4., 5., 6.]).astype(np.float32)]\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_variable_parts_default_axis')",
          "summary": "default_values"
        }
      ],
      "inputs": [
        {
          "description": "The tensor to split",
          "name": "input",
          "type": "T"
        },
        {
          "description": "Optional list of output lengths (see also arg 'split')",
          "name": "split",
          "option": "optional",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 2147483647,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "One or more outputs forming list of tensors after splitting",
          "name": "outputs...",
          "option": "variadic",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Split",
    "schema": {
      "attributes": [
        {
          "description": "Which axis to split on.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "length of each output",
          "name": "split",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Tensor",
      "description": "Split a tensor into a list of tensors, along the specified\n'axis'. Lengths of the parts can be specified using argument 'split'.\nOtherwise, the tensor is split to equal sized parts.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "input = np.array([1., 2., 3., 4., 5., 6.]).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2', 'output_3'],\n    axis=0\n)\n\nexpected_outputs = [np.array([1., 2.]).astype(np.float32), np.array([3., 4.]).astype(np.float32), np.array([5., 6.]).astype(np.float32)]\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_equal_parts_1d')\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2'],\n    axis=0,\n    split=[2, 4]\n)\n\nexpected_outputs = [np.array([1., 2.]).astype(np.float32), np.array([3., 4., 5., 6.]).astype(np.float32)]\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_variable_parts_1d')",
          "summary": "1d"
        },
        {
          "code": "input = np.array([[1., 2., 3., 4., 5., 6.],\n                  [7., 8., 9., 10., 11., 12.]]).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2'],\n    axis=1\n)\n\nexpected_outputs = [np.array([[1., 2., 3.], [7., 8., 9.]]).astype(np.float32),\n                    np.array([[4., 5., 6.], [10., 11., 12.]]).astype(np.float32)]\n\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_equal_parts_2d')\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2'],\n    axis=1,\n    split=[2, 4]\n)\n\nexpected_outputs = [np.array([[1., 2.], [7., 8.]]).astype(np.float32),\n                    np.array([[3., 4., 5., 6.], [9., 10., 11., 12.]]).astype(np.float32)]\n\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_variable_parts_2d')",
          "summary": "2d"
        },
        {
          "code": "input = np.array([1., 2., 3., 4., 5., 6.]).astype(np.float32)\n\n# If axis is not specified, split is applied on default axis 0\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2', 'output_3']\n)\n\nexpected_outputs = [np.array([1., 2.]).astype(np.float32), np.array([3., 4.]).astype(np.float32), np.array([5., 6.]).astype(np.float32)]\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_equal_parts_default_axis')\n\nnode = onnx.helper.make_node(\n    'Split',\n    inputs=['input'],\n    outputs=['output_1', 'output_2'],\n    split=[2, 4]\n)\n\nexpected_outputs = [np.array([1., 2.]).astype(np.float32), np.array([3., 4., 5., 6.]).astype(np.float32)]\nexpect(node, inputs=[input], outputs=[y for y in expected_outputs], name='test_split_variable_parts_default_axis')",
          "summary": "default_values"
        }
      ],
      "inputs": [
        {
          "description": "The tensor to split",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 2147483647,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "One or more outputs forming list of tensors after splitting",
          "name": "outputs",
          "option": "variadic",
          "type": "T"
        }
      ],
      "since_version": 2,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sqrt",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Square root takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the square root is, y = x^0.5, is applied to\nthe tensor elementwise. If x is negative, then it will return NaN.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sqrt',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([1, 4, 9]).astype(np.float32)\ny = np.sqrt(x)  # expected output [1., 2., 3.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sqrt_example')\n\nx = np.abs(np.random.randn(3, 4, 5).astype(np.float32))\ny = np.sqrt(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sqrt')",
          "summary": "sqrt"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sqrt",
    "schema": {
      "description": "Square root takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the square root is, y = x^0.5, is applied to\nthe tensor elementwise. If x is negative, then it will return NaN.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sqrt',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([1, 4, 9]).astype(np.float32)\ny = np.sqrt(x)  # expected output [1., 2., 3.]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sqrt_example')\n\nx = np.abs(np.random.randn(3, 4, 5).astype(np.float32))\ny = np.sqrt(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_sqrt')",
          "summary": "sqrt"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Squeeze",
    "schema": {
      "attributes": [
        {
          "description": "List of positive integers, indicate the dimensions to squeeze.",
          "name": "axes",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Transform",
      "description": "Remove single-dimensional entries from the shape of a tensor.\nTakes a  parameter `axes` with a list of axes to squeeze.\nIf `axes` is not provided, all the single dimensions will be removed from\nthe shape. If an axis is selected with shape entry not equal to one, an error is raised.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Squeeze',\n    inputs=['x'],\n    outputs=['y'],\n    axes=[0],\n)\nx = np.random.randn(1, 3, 4, 5).astype(np.float32)\ny = np.squeeze(x, axis=0)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_squeeze')",
          "summary": "squeeze"
        }
      ],
      "inputs": [
        {
          "description": "Tensors with at least max(dims) dimensions.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reshaped tensor with same data as input.",
          "name": "squeezed",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sub",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        },
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Performs element-wise binary subtraction (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of element size 1 (including a scalar tensor and any\ntensor with rank equal to or smaller than the first tensor), or having its\nshape as a contiguous subset of the first tensor's shape. The starting of the\nmutually equal shape is specified by the argument \"axis\", and if it is not set,\nsuffix matching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sub',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array([3, 2, 1]).astype(np.float32)\nz = x - y  # expected output [-2., 0., 2.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_sub_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = x - y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_sub')",
          "summary": "sub"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Sub',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = x - y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_sub_bcast')",
          "summary": "sub_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sub",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "description": "Performs element-wise binary subtraction (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of element size 1 (including a scalar tensor and any\ntensor with rank equal to or smaller than the first tensor), or having its\nshape as a contiguous subset of the first tensor's shape. The starting of the\nmutually equal shape is specified by the argument \"axis\", and if it is not set,\nsuffix matching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (1, 1), i.e. B is an 1-element tensor\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sub',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array([3, 2, 1]).astype(np.float32)\nz = x - y  # expected output [-2., 0., 2.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_sub_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = x - y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_sub')",
          "summary": "sub"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Sub',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = x - y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_sub_bcast')",
          "summary": "sub_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sub",
    "schema": {
      "description": "Performs element-wise binary subtraction (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Sub',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.array([1, 2, 3]).astype(np.float32)\ny = np.array([3, 2, 1]).astype(np.float32)\nz = x - y  # expected output [-2., 0., 2.]\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_sub_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nz = x - y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_sub')",
          "summary": "sub"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Sub',\n    inputs=['x', 'y'],\n    outputs=['z'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nz = x - y\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_sub_bcast')",
          "summary": "sub_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First operand.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second operand.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same element type as two inputs",
          "name": "C",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to high-precision numeric tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sum",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "description": "Element-wise sum of each of the input tensors. All inputs and outputs must\nhave the same shape and data type.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 0, 2]).astype(np.float32)\ndata_1 = np.array([1, 3, 4]).astype(np.float32)\ndata_2 = np.array([2, 6, 6]).astype(np.float32)\nresult = np.array([6, 9, 12]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Sum',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_sum_example')\n\nnode = onnx.helper.make_node(\n    'Sum',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_sum_one_input')\n\nresult = np.add(data_0, data_1)\nnode = onnx.helper.make_node(\n    'Sum',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_sum_two_inputs')",
          "summary": "sum"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for Sum.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "sum",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sum",
    "schema": {
      "description": "Element-wise sum of each of the input tensors. All inputs and outputs must\nhave the same shape and data type.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 0, 2]).astype(np.float32)\ndata_1 = np.array([1, 3, 4]).astype(np.float32)\ndata_2 = np.array([2, 6, 6]).astype(np.float32)\nresult = np.array([6, 9, 12]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Sum',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_sum_example')\n\nnode = onnx.helper.make_node(\n    'Sum',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_sum_one_input')\n\nresult = np.add(data_0, data_1)\nnode = onnx.helper.make_node(\n    'Sum',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_sum_two_inputs')",
          "summary": "sum"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for Sum.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "sum",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Sum",
    "schema": {
      "description": "Element-wise sum of each of the input tensors (with Numpy-style broadcasting support).\nAll inputs and outputs must have the same data type.\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "data_0 = np.array([3, 0, 2]).astype(np.float32)\ndata_1 = np.array([1, 3, 4]).astype(np.float32)\ndata_2 = np.array([2, 6, 6]).astype(np.float32)\nresult = np.array([6, 9, 12]).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Sum',\n    inputs=['data_0', 'data_1', 'data_2'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1, data_2], outputs=[result],\n       name='test_sum_example')\n\nnode = onnx.helper.make_node(\n    'Sum',\n    inputs=['data_0'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0], outputs=[data_0],\n       name='test_sum_one_input')\n\nresult = np.add(data_0, data_1)\nnode = onnx.helper.make_node(\n    'Sum',\n    inputs=['data_0', 'data_1'],\n    outputs=['result'],\n)\nexpect(node, inputs=[data_0, data_1], outputs=[result],\n       name='test_sum_two_inputs')",
          "summary": "sum"
        }
      ],
      "inputs": [
        {
          "description": "List of tensors for sum.",
          "name": "data_0",
          "option": "variadic",
          "type": "T"
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor.",
          "name": "sum",
          "type": "T"
        }
      ],
      "since_version": 8,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Tan",
    "schema": {
      "description": "Calculates the tangent of the given input tensor, element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Tan',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.tan(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_tan_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.tan(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_tan')",
          "summary": "tan"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The tangent of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Tanh",
    "schema": {
      "attributes": [
        {
          "description": "legacy optimization attribute.",
          "name": "consumed_inputs",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Activation",
      "description": "Calculates the hyperbolic tangent of the given input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Tanh',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.tanh(x)  # expected output [-0.76159418, 0., 0.76159418]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_tanh_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.tanh(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_tanh')",
          "summary": "tanh"
        }
      ],
      "inputs": [
        {
          "description": "1-D input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The hyperbolic tangent values of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Tanh",
    "schema": {
      "category": "Activation",
      "description": "Calculates the hyperbolic tangent of the given input tensor element-wise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Tanh',\n    inputs=['x'],\n    outputs=['y'],\n)\n\nx = np.array([-1, 0, 1]).astype(np.float32)\ny = np.tanh(x)  # expected output [-0.76159418, 0., 0.76159418]\nexpect(node, inputs=[x], outputs=[y],\n       name='test_tanh_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.tanh(x)\nexpect(node, inputs=[x], outputs=[y],\n       name='test_tanh')",
          "summary": "tanh"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The hyperbolic tangent values of the input tensor computed element-wise",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "ThresholdedRelu",
    "schema": {
      "attributes": [
        {
          "default": 1.0,
          "description": "Threshold value",
          "name": "alpha",
          "required": false,
          "type": "float"
        }
      ],
      "category": "Activation",
      "description": "ThresholdedRelu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the rectified linear function, y = x for x > alpha, y = 0 otherwise,\nis applied to the tensor elementwise.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "default_alpha = 1.0\nnode = onnx.helper.make_node(\n    'ThresholdedRelu',\n    inputs=['x'],\n    outputs=['y']\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, default_alpha, np.inf)\ny[y == default_alpha] = 0\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_thresholdedrelu_default')",
          "summary": "default"
        },
        {
          "code": "alpha = 2.0\nnode = onnx.helper.make_node(\n    'ThresholdedRelu',\n    inputs=['x'],\n    outputs=['y'],\n    alpha=alpha\n)\n\nx = np.array([-1.5, 0., 1.2, 2.0, 2.2]).astype(np.float32)\ny = np.clip(x, alpha, np.inf)  # expected output [0., 0., 0., 0., 2.2]\ny[y == alpha] = 0\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_thresholdedrelu_example')\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, alpha, np.inf)\ny[y == alpha] = 0\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_thresholdedrelu')",
          "summary": "thresholdedrelu"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Tile",
    "schema": {
      "category": "Shape",
      "description": "Repeat the elements of a tensor along an axis.",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Tile',\n    inputs=['x', 'y'],\n    outputs=['z']\n)\n\nx = np.random.rand(2, 3, 4, 5).astype(np.float32)\n\nrepeats = np.random.randint(low=1, high=10, size=(np.ndim(x),)).astype(np.int64)\n\nz = np.tile(x, repeats)\n\nexpect(node,\n       inputs=[x, repeats],\n       outputs=[z],\n       name='test_tile')",
          "summary": "tile"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Tile',\n    inputs=['x', 'y'],\n    outputs=['z']\n)\n\nx = np.array([\n    [0, 1],\n    [2, 3]\n], dtype=np.float32)\n\nrepeats = np.array([2, 2], dtype=np.int64)\n\nz = np.array([\n    [0, 1, 0, 1],\n    [2, 3, 2, 3],\n    [0, 1, 0, 1],\n    [2, 3, 2, 3]\n], dtype=np.float32)\n\nexpect(node,\n       inputs=[x, repeats],\n       outputs=[z],\n       name='test_tile_precomputed')",
          "summary": "tile_precomputed"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor of any shape.",
          "name": "input",
          "type": "T"
        },
        {
          "description": "Number of repeated copies to make of the input tensor.",
          "name": "tiles",
          "type": "T"
        },
        {
          "description": "Axis along which to repeat.",
          "name": "axis",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of same shape and type as input.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "Constrain tiles and axis's type to int64 tensors.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Tile",
    "schema": {
      "category": "Shape",
      "description": "Constructs a tensor by tiling a given tensor.\nThis is the same as function `tile` in Numpy, but no broadcast.\nFor example A = [[1, 2], [3, 4]], B = [1, 2], tile(A, B) = [[1, 2, 1, 2], [3, 4, 3, 4]]\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Tile',\n    inputs=['x', 'y'],\n    outputs=['z']\n)\n\nx = np.random.rand(2, 3, 4, 5).astype(np.float32)\n\nrepeats = np.random.randint(low=1, high=10, size=(np.ndim(x),)).astype(np.int64)\n\nz = np.tile(x, repeats)\n\nexpect(node,\n       inputs=[x, repeats],\n       outputs=[z],\n       name='test_tile')",
          "summary": "tile"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Tile',\n    inputs=['x', 'y'],\n    outputs=['z']\n)\n\nx = np.array([\n    [0, 1],\n    [2, 3]\n], dtype=np.float32)\n\nrepeats = np.array([2, 2], dtype=np.int64)\n\nz = np.array([\n    [0, 1, 0, 1],\n    [2, 3, 2, 3],\n    [0, 1, 0, 1],\n    [2, 3, 2, 3]\n], dtype=np.float32)\n\nexpect(node,\n       inputs=[x, repeats],\n       outputs=[z],\n       name='test_tile_precomputed')",
          "summary": "tile_precomputed"
        }
      ],
      "inputs": [
        {
          "description": "Input tensor of any shape.",
          "name": "input",
          "type": "T"
        },
        {
          "description": "1D int64 tensor of the same length as input's dimension number, includes numbers of repeated copies along input's dimensions.",
          "name": "repeats",
          "type": "T1"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of the same dimension and type as tensor input. output_dim[i] = input_dim[i] * repeats[i]",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 6,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "Constrain repeat's type to int64 tensors.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "TopK",
    "schema": {
      "attributes": [
        {
          "default": -1,
          "description": "Dimension on which to do the sort.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Number of top elements to retrieve",
          "name": "k",
          "required": true,
          "type": "int"
        }
      ],
      "description": "Retrieve the top-K elements along a specified axis. Given an input tensor of\nshape [a_1, a_2, ..., a_n, r] and integer argument k, return two outputs:\n  -Value tensor of shape [a_1, a_2, ..., a_{axis-1}, k, a_{axis+1}, ... a_n]\n    which contains the values of the top k elements along the specified axis\n  -Index tensor of shape [a_1, a_2, ..., a_{axis-1}, k, a_{axis+1}, ... a_n] which\n   contains the indices of the top k elements (original indices from the input\n   tensor).\n\nGiven two equivalent values, this operator uses the indices along the axis  as\n a tiebreaker. That is, the element with the lower index will appear first.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'TopK',\n    inputs=['x'],\n    outputs=['values', 'indices'],\n    k=3\n)\nX = np.array([\n    [0, 1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9, 10, 11],\n], dtype=np.float32)\nvalues_ref = np.array([\n    [3, 2, 1],\n    [7, 6, 5],\n    [11, 10, 9],\n], dtype=np.float32)\nindices_ref = np.array([\n    [3, 2, 1],\n    [3, 2, 1],\n    [3, 2, 1],\n], dtype=np.int64)\n\nexpect(node, inputs=[X], outputs=[values_ref, indices_ref],\n       name='test_top_k')",
          "summary": "top_k"
        }
      ],
      "inputs": [
        {
          "description": "Tensor of shape [a_1, a_2, ..., a_n, r]",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 2,
      "min_input": 1,
      "min_output": 2,
      "outputs": [
        {
          "description": "Tensor of shape [a_1, a_2, ..., a_{axis-1}, k, a_{axis+1}, ... a_n] containing top K values from the input tensor",
          "name": "Values",
          "type": "T"
        },
        {
          "description": "Tensor of shape [a_1, a_2, ..., a_{axis-1}, k, a_{axis+1}, ... a_n] containing the corresponding input tensor indices for the top K values.",
          "name": "Indices",
          "type": "I"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int64)"
          ],
          "description": "Constrain index tensor to int64",
          "type_param_str": "I"
        }
      ]
    }
  },
  {
    "name": "Transpose",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers. By default, reverse the dimensions, otherwise permute the axes according to the values given.",
          "name": "perm",
          "required": false,
          "type": "int[]"
        }
      ],
      "category": "Shape",
      "description": "Transpose the input tensor similar to numpy.transpose. For example, when\nperm=(1, 0, 2), given an input tensor of shape (1, 2, 3), the output shape\nwill be (2, 1, 3).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "shape = (2, 3, 4)\ndata = np.random.random_sample(shape).astype(np.float32)\npermutations = list(itertools.permutations(np.arange(len(shape))))\n\nfor i in range(len(permutations)):\n    node = onnx.helper.make_node(\n        'Transpose',\n        inputs=['data'],\n        outputs=['transposed'],\n        perm=permutations[i]\n    )\n    transposed = np.transpose(data, permutations[i])\n    expect(node, inputs=[data], outputs=[transposed],\n           name='test_transpose_all_permutations_' + str(i))",
          "summary": "all_permutations"
        },
        {
          "code": "shape = (2, 3, 4)\ndata = np.random.random_sample(shape).astype(np.float32)\n\nnode = onnx.helper.make_node(\n    'Transpose',\n    inputs=['data'],\n    outputs=['transposed']\n)\n\ntransposed = np.transpose(data)\nexpect(node, inputs=[data], outputs=[transposed],\n       name='test_transpose_default')",
          "summary": "default"
        }
      ],
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Transposed output.",
          "name": "transposed",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "TreeEnsembleClassifier",
    "schema": {
      "attributes": [
        {
          "description": "Base values for classification, added to final class score; the size must be the same as the classes or can be left unassigned (assumed 0)",
          "name": "base_values",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "The index of the class list that each weight is for.",
          "name": "class_ids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "node id that this weight is for.",
          "name": "class_nodeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The id of the tree that this node is in.",
          "name": "class_treeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The weight for the class in class_id.",
          "name": "class_weights",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "Class labels if using integer labels.<br>One and only one of the 'classlabels_*' attributes must be defined.",
          "name": "classlabels_int64s",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Class labels if using string labels.<br>One and only one of the 'classlabels_*' attributes must be defined.",
          "name": "classlabels_strings",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Child node if expression is false.",
          "name": "nodes_falsenodeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Feature id for each node.",
          "name": "nodes_featureids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Popularity of each node, used for performance and may be omitted.",
          "name": "nodes_hitrates",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "For each node, define what to do in the presence of a missing value: if a value is missing (NaN), use the 'true' or 'false' branch based on the value in this array.<br>This attribute may be left undefined, and the defalt value is false (0) for all nodes.",
          "name": "nodes_missing_value_tracks_true",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The node kind, that is, the comparison to make at the node. There is no comparison to make at a leaf node.<br>One of 'BRANCH_LEQ', 'BRANCH_LT', 'BRANCH_GTE', 'BRANCH_GT', 'BRANCH_EQ', 'BRANCH_NEQ', 'LEAF'",
          "name": "nodes_modes",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Node id for each node. Ids may restart at zero for each tree, but it not required to.",
          "name": "nodes_nodeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Tree id for each node.",
          "name": "nodes_treeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Child node if expression is true.",
          "name": "nodes_truenodeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Thresholds to do the splitting on for each node.",
          "name": "nodes_values",
          "required": false,
          "type": "float[]"
        },
        {
          "default": "NONE",
          "description": "Indicates the transform to apply to the score. <br> One of 'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT.'",
          "name": "post_transform",
          "required": false,
          "type": "string"
        }
      ],
      "description": "Tree Ensemble classifier.  Returns the top class for each of N inputs.<br>\n    The attributes named 'nodes_X' form a sequence of tuples, associated by \n    index into the sequences, which must all be of equal length. These tuples\n    define the nodes.<br>\n    Similarly, all fields prefixed with 'class_' are tuples of votes at the leaves.\n    A leaf may have multiple votes, where each vote is weighted by\n    the associated class_weights index.<br>\n    One and only one of classlabels_strings or classlabels_int64s\n    will be defined. The class_ids are indices into this list.\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Input of shape [N,F]",
          "name": "X",
          "type": "T1"
        }
      ],
      "max_input": 1,
      "max_output": 2,
      "min_input": 1,
      "min_output": 2,
      "outputs": [
        {
          "description": "N, Top class for each point",
          "name": "Y",
          "type": "T2"
        },
        {
          "description": "The class score for each class, for each point, a tensor of shape [N,E].",
          "name": "Z",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input type must be a tensor of a numeric type.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(string)",
            "tensor(int64)"
          ],
          "description": "The output type will be a tensor of strings or integers, depending on which of the the classlabels_* attributes is used.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "name": "TreeEnsembleRegressor",
    "schema": {
      "attributes": [
        {
          "default": "SUM",
          "description": "Defines how to aggregate leaf values within a target. <br>One of 'AVERAGE,' 'SUM,' 'MIN,' 'MAX.'",
          "name": "aggregate_function",
          "required": false,
          "type": "string"
        },
        {
          "description": "Base values for classification, added to final class score; the size must be the same as the classes or can be left unassigned (assumed 0)",
          "name": "base_values",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "The total number of targets.",
          "name": "n_targets",
          "required": false,
          "type": "int"
        },
        {
          "description": "Child node if expression is false",
          "name": "nodes_falsenodeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Feature id for each node.",
          "name": "nodes_featureids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Popularity of each node, used for performance and may be omitted.",
          "name": "nodes_hitrates",
          "required": false,
          "type": "float[]"
        },
        {
          "description": "For each node, define what to do in the presence of a NaN: use the 'true' (if the attribute value is 1) or 'false' (if the attribute value is 0) branch based on the value in this array.<br>This attribute may be left undefined and the defalt value is false (0) for all nodes.",
          "name": "nodes_missing_value_tracks_true",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The node kind, that is, the comparison to make at the node. There is no comparison to make at a leaf node.<br>One of 'BRANCH_LEQ', 'BRANCH_LT', 'BRANCH_GTE', 'BRANCH_GT', 'BRANCH_EQ', 'BRANCH_NEQ', 'LEAF'",
          "name": "nodes_modes",
          "required": false,
          "type": "string[]"
        },
        {
          "description": "Node id for each node. Node ids must restart at zero for each tree and increase sequentially.",
          "name": "nodes_nodeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Tree id for each node.",
          "name": "nodes_treeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Child node if expression is true",
          "name": "nodes_truenodeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "Thresholds to do the splitting on for each node.",
          "name": "nodes_values",
          "required": false,
          "type": "float[]"
        },
        {
          "default": "NONE",
          "description": "Indicates the transform to apply to the score. <br>One of 'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'",
          "name": "post_transform",
          "required": false,
          "type": "string"
        },
        {
          "description": "The index of the target that each weight is for",
          "name": "target_ids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The node id of each weight",
          "name": "target_nodeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The id of the tree that each node is in.",
          "name": "target_treeids",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The weight for each target",
          "name": "target_weights",
          "required": false,
          "type": "float[]"
        }
      ],
      "description": "Tree Ensemble regressor.  Returns the regressed values for each input in N.<br>\n    All args with nodes_ are fields of a tuple of tree nodes, and\n    it is assumed they are the same length, and an index i will decode the\n    tuple across these inputs.  Each node id can appear only once\n    for each tree id.<br>\n    All fields prefixed with target_ are tuples of votes at the leaves.<br>\n    A leaf may have multiple votes, where each vote is weighted by\n    the associated target_weights index.<br>\n    All trees must have their node ids start at 0 and increment by 1.<br>\n    Mode enum is BRANCH_LEQ, BRANCH_LT, BRANCH_GTE, BRANCH_GT, BRANCH_EQ, BRANCH_NEQ, LEAF\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "Input of shape [N,F]",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "N classes",
          "name": "Y",
          "type": "tensor(float)"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(double)",
            "tensor(int64)",
            "tensor(int32)"
          ],
          "description": "The input type must be a tensor of a numeric type.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Unsqueeze",
    "schema": {
      "attributes": [
        {
          "description": "List of positive integers, indicate the dimensions to be inserted",
          "name": "axes",
          "required": true,
          "type": "int[]"
        }
      ],
      "category": "Transform",
      "description": "Insert single-dimensional entries to the shape of a tensor.\nTakes one required argument `axes`, a list of dimensions that will be inserted.\nDimension indices in `axes` are as seen in the output tensor. For example:\n  Given a tensor such that tensor with shape [3, 4, 5], then\n  Unsqueeze(tensor, axes=[0, 4]) has shape [1, 3, 4, 5, 1]\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Unsqueeze',\n    inputs=['x'],\n    outputs=['y'],\n    axes=[0],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.expand_dims(x, axis=0)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_unsqueeze')",
          "summary": "unsqueeze"
        }
      ],
      "inputs": [
        {
          "description": "Original tensor",
          "name": "data",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reshaped tensor with same data as input.",
          "name": "expanded",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Upsample",
    "schema": {
      "attributes": [
        {
          "description": "The scale along height dimension. It takes value greater than or equal to 1.",
          "name": "height_scale",
          "required": true,
          "type": "float"
        },
        {
          "default": "nearest",
          "description": "Two interpolation modes: nearest(default), bilinear",
          "name": "mode",
          "required": false,
          "type": "string"
        },
        {
          "description": "The scale along width dimension. It takes value greater than or equal to 1.",
          "name": "width_scale",
          "required": true,
          "type": "float"
        }
      ],
      "description": "Upsample the input tensor.\nThe width and height of the output tensor are:\n  output_width = floor(input_width * width_scale),\n  output_height = floor(input_height * height_scale).\nExample:\n  Given `data` tensor, width_scale, height_scale, mode,\n  Upsample the input 4-D tensor in nearest mode:\n  data = [[[\n      [1, 2],\n      [3, 4]\n  ]]]\n  width_scale = 2\n  height_scale = 2\n  mode = \"nearest\"\n  output = [[[\n      [1, 1, 2, 2],\n      [1, 1, 2, 2],\n      [3, 3, 4, 4],\n      [3, 3, 4, 4]\n  ]]]\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Upsample',\n    inputs=['X', 'scales'],\n    outputs=['Y'],\n    mode='nearest',\n)\n\ndata = np.array([[[\n    [1, 2],\n    [3, 4],\n]]], dtype=np.float32)\n\nscales = np.array([1.0, 1.0, 2.0, 3.0], dtype=np.float32)\n\noutput = np.array([[[\n    [1, 1, 1, 2, 2, 2],\n    [1, 1, 1, 2, 2, 2],\n    [3, 3, 3, 4, 4, 4],\n    [3, 3, 3, 4, 4, 4],\n]]], dtype=np.float32)\n\nexpect(node, inputs=[data, scales], outputs=[output],\n       name='test_upsample_nearest')",
          "summary": "nearest"
        }
      ],
      "inputs": [
        {
          "description": "4-D tensor, [N,C,H,W]",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "4-D tensor after resizing, [N,C,H,W]",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to bool, int32, int64, float16, float, double tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Upsample",
    "schema": {
      "attributes": [
        {
          "default": "nearest",
          "description": "Two interpolation modes: nearest (default), and linear (including bilinear, trilinear, etc)",
          "name": "mode",
          "required": false,
          "type": "string"
        },
        {
          "description": "The scale array along each dimension. It takes value greater than or equal to 1. The number of elements of 'scales' should be the same as the rank of input 'X'.",
          "name": "scales",
          "required": true,
          "type": "float[]"
        }
      ],
      "description": "Upsample the input tensor.\nEach dimension value of the output tensor is:\n  output_dimension = floor(input_dimension * scale).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Upsample',\n    inputs=['X', 'scales'],\n    outputs=['Y'],\n    mode='nearest',\n)\n\ndata = np.array([[[\n    [1, 2],\n    [3, 4],\n]]], dtype=np.float32)\n\nscales = np.array([1.0, 1.0, 2.0, 3.0], dtype=np.float32)\n\noutput = np.array([[[\n    [1, 1, 1, 2, 2, 2],\n    [1, 1, 1, 2, 2, 2],\n    [3, 3, 3, 4, 4, 4],\n    [3, 3, 3, 4, 4, 4],\n]]], dtype=np.float32)\n\nexpect(node, inputs=[data, scales], outputs=[output],\n       name='test_upsample_nearest')",
          "summary": "nearest"
        }
      ],
      "inputs": [
        {
          "description": "N-D tensor",
          "name": "X",
          "type": "T"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "N-D tensor after resizing",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Upsample",
    "schema": {
      "attributes": [
        {
          "default": "nearest",
          "description": "Two interpolation modes: nearest (default), and linear (including bilinear, trilinear, etc)",
          "name": "mode",
          "required": false,
          "type": "string"
        }
      ],
      "description": "Upsample the input tensor.\nEach dimension value of the output tensor is:\n  output_dimension = floor(input_dimension * scale).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Upsample',\n    inputs=['X', 'scales'],\n    outputs=['Y'],\n    mode='nearest',\n)\n\ndata = np.array([[[\n    [1, 2],\n    [3, 4],\n]]], dtype=np.float32)\n\nscales = np.array([1.0, 1.0, 2.0, 3.0], dtype=np.float32)\n\noutput = np.array([[[\n    [1, 1, 1, 2, 2, 2],\n    [1, 1, 1, 2, 2, 2],\n    [3, 3, 3, 4, 4, 4],\n    [3, 3, 3, 4, 4, 4],\n]]], dtype=np.float32)\n\nexpect(node, inputs=[data, scales], outputs=[output],\n       name='test_upsample_nearest')",
          "summary": "nearest"
        }
      ],
      "inputs": [
        {
          "description": "N-D tensor",
          "name": "X",
          "type": "T"
        },
        {
          "description": "The scale array along each dimension. It takes value greater than or equal to 1. The number of elements of 'scales' should be the same as the rank of input 'X'.",
          "name": "scales",
          "type": "tensor(float)"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "N-D tensor after resizing",
          "name": "Y",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input 'X' and output 'Y' to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Where",
    "schema": {
      "description": "Return elements, either from X or Y, depending on condition\n    (with Numpy-style broadcasting support).\n    Where behaves like numpy.where with three parameters:\n    https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Where',\n    inputs=['condition', 'x', 'y'],\n    outputs=['z'],\n)\n\ncondition = np.array([[1, 0], [1, 1]], dtype=np.bool)\nx = np.array([[1, 2], [3, 4]], dtype=np.float32)\ny = np.array([[9, 8], [7, 6]], dtype=np.float32)\nz = np.where(condition, x, y)  # expected output [[1, 8], [3, 4]]\nexpect(node, inputs=[condition, x, y], outputs=[z],\n       name='test_where_example')",
          "summary": "where"
        }
      ],
      "inputs": [
        {
          "description": "When True (nonzero), yield X, otherwise yield Y",
          "name": "condition",
          "type": "B"
        },
        {
          "description": "values selected at indices where condition is True",
          "name": "X",
          "type": "T"
        },
        {
          "description": "values selected at indices where condition is False",
          "name": "Y",
          "type": "T"
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor of shape equal to the broadcasted shape of condition, X, and Y.",
          "name": "output",
          "type": "T"
        }
      ],
      "since_version": 9,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrain to boolean tensors.",
          "type_param_str": "B"
        },
        {
          "allowed_type_strs": [
            "tensor(uint8)",
            "tensor(uint16)",
            "tensor(uint32)",
            "tensor(uint64)",
            "tensor(int8)",
            "tensor(int16)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)",
            "tensor(string)",
            "tensor(bool)",
            "tensor(complex64)",
            "tensor(complex128)"
          ],
          "description": "Constrain input and output types to all tensor types.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "name": "Xor",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `xor` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Xor',\n    inputs=['x', 'y'],\n    outputs=['xor'],\n)\n\n# 2d\nx = (np.random.randn(3, 4) > 0).astype(np.bool)\ny = (np.random.randn(3, 4) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor2d')\n\n# 3d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor3d')\n\n# 4d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor4d')",
          "summary": "xor"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Xor',\n    inputs=['x', 'y'],\n    outputs=['xor'],\n)\n\n# 3d vs 1d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(5) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast3v1d')\n\n# 3d vs 2d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(4, 5) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast3v2d')\n\n# 4d vs 2d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(5, 6) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast4v2d')\n\n# 4d vs 3d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(4, 5, 6) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast4v3d')\n\n# 4d vs 4d\nx = (np.random.randn(1, 4, 1, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 1, 5, 6) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast4v4d')",
          "summary": "xor_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input to boolean tensor.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "Xor",
    "schema": {
      "category": "Logic",
      "description": "Returns the tensor resulted from performing the `xor` logical operation\nelementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).\n\nThis operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).\n",
      "domain": "ai.onnx",
      "examples": [
        {
          "code": "node = onnx.helper.make_node(\n    'Xor',\n    inputs=['x', 'y'],\n    outputs=['xor'],\n)\n\n# 2d\nx = (np.random.randn(3, 4) > 0).astype(np.bool)\ny = (np.random.randn(3, 4) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor2d')\n\n# 3d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor3d')\n\n# 4d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor4d')",
          "summary": "xor"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Xor',\n    inputs=['x', 'y'],\n    outputs=['xor'],\n)\n\n# 3d vs 1d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(5) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast3v1d')\n\n# 3d vs 2d\nx = (np.random.randn(3, 4, 5) > 0).astype(np.bool)\ny = (np.random.randn(4, 5) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast3v2d')\n\n# 4d vs 2d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(5, 6) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast4v2d')\n\n# 4d vs 3d\nx = (np.random.randn(3, 4, 5, 6) > 0).astype(np.bool)\ny = (np.random.randn(4, 5, 6) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast4v3d')\n\n# 4d vs 4d\nx = (np.random.randn(1, 4, 1, 6) > 0).astype(np.bool)\ny = (np.random.randn(3, 1, 5, 6) > 0).astype(np.bool)\nz = np.logical_xor(x, y)\nexpect(node, inputs=[x, y], outputs=[z],\n       name='test_xor_bcast4v4d')",
          "summary": "xor_broadcast"
        }
      ],
      "inputs": [
        {
          "description": "First input operand for the logical operator.",
          "name": "A",
          "type": "T"
        },
        {
          "description": "Second input operand for the logical operator.",
          "name": "B",
          "type": "T"
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "type": "T1"
        }
      ],
      "since_version": 7,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input to boolean tensor.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "name": "ZipMap",
    "schema": {
      "attributes": [
        {
          "description": "The keys when using int keys.<br>One and only one of the 'classlabels_*' attributes must be defined.",
          "name": "classlabels_int64s",
          "required": false,
          "type": "int[]"
        },
        {
          "description": "The keys when using string keys.<br>One and only one of the 'classlabels_*' attributes must be defined.",
          "name": "classlabels_strings",
          "required": false,
          "type": "string[]"
        }
      ],
      "description": "Creates a map from the input and the attributes.<br>\n    The values are provided by the input tensor, while the keys are specified by the attributes.\n    Must provide keys in either classlabels_strings or classlabels_int64s (but not both).<br>\n    The columns of the tensor correspond one-by-one to the keys specified by the attributes. There must be as many columns as keys.<br>\n",
      "domain": "ai.onnx.ml",
      "inputs": [
        {
          "description": "The input values",
          "name": "X",
          "type": "tensor(float)"
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output map",
          "name": "Z",
          "type": "T"
        }
      ],
      "since_version": 1,
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "seq(map(string, float))",
            "seq(map(int64, float))"
          ],
          "description": "The output will be a sequence of string or integer maps to float.",
          "type_param_str": "T"
        }
      ]
    }
  }
]

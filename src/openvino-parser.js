var IrParser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
    "use strict";
  
    function peg$subclass(child, parent) {
      function ctor() { this.constructor = child; }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
    }
  
    function peg$SyntaxError(message, expected, found, location) {
      this.message  = message;
      this.expected = expected;
      this.found    = found;
      this.location = location;
      this.name     = "SyntaxError";
  
      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError);
      }
    }
  
    peg$subclass(peg$SyntaxError, Error);
  
    peg$SyntaxError.buildMessage = function(expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return "\"" + literalEscape(expectation.text) + "\"";
            },
  
            "class": function(expectation) {
              var escapedParts = "",
                  i;
  
              for (i = 0; i < expectation.parts.length; i++) {
                escapedParts += expectation.parts[i] instanceof Array
                  ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                  : classEscape(expectation.parts[i]);
              }
  
              return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
            },
  
            any: function(expectation) {
              return "any character";
            },
  
            end: function(expectation) {
              return "end of input";
            },
  
            other: function(expectation) {
              return expectation.description;
            }
          };
  
      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }
  
      function literalEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/"/g,  '\\"')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
      }
  
      function classEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/\]/g, '\\]')
          .replace(/\^/g, '\\^')
          .replace(/-/g,  '\\-')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
      }
  
      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }
  
      function describeExpected(expected) {
        var descriptions = new Array(expected.length),
            i, j;
  
        for (i = 0; i < expected.length; i++) {
          descriptions[i] = describeExpectation(expected[i]);
        }
  
        descriptions.sort();
  
        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i];
              j++;
            }
          }
          descriptions.length = j;
        }
  
        switch (descriptions.length) {
          case 1:
            return descriptions[0];
  
          case 2:
            return descriptions[0] + " or " + descriptions[1];
  
          default:
            return descriptions.slice(0, -1).join(", ")
              + ", or "
              + descriptions[descriptions.length - 1];
        }
      }
  
      function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
      }
  
      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
  
    function peg$parse(input, options) {
      options = options !== void 0 ? options : {};
  
      var peg$FAILED = {},
  
          peg$startRuleFunctions = { Term: peg$parseTerm },
          peg$startRuleFunction  = peg$parseTerm,
  
          peg$c0 = peg$anyExpectation(),
          peg$c1 = function(next0, meta, next1, first, next2, layers, next3, close, next4, edges, next5, closeEdges, next6, rest) {
                  var key = Object.keys(layers)[0];
                  var layers_cleaned = layers.map(function (x,y) {
                      return x;
                  }).filter(function (x) {
                      return x;
                  });
                  first["layers"] = layers_cleaned;
                  first["edges"] = edges[1];
                  return first;
              },
          peg$c2 = "<?xml",
          peg$c3 = peg$literalExpectation("<?xml", false),
          peg$c4 = "?>",
          peg$c5 = peg$literalExpectation("?>", false),
          peg$c6 = "<net",
          peg$c7 = peg$literalExpectation("<net", false),
          peg$c8 = ">",
          peg$c9 = peg$literalExpectation(">", false),
          peg$c10 = function(first, rest) {
                  var key = first.slice(1);
                  var res = rest.reduce(function(el1, el2) {
                      el1[el2.key] = el2.value;
                      return el1;
                  }, {});
                  var ret = {};
                  ret[key] = res;
                  return ret;
              },
          peg$c11 = "<!--",
          peg$c12 = peg$literalExpectation("<!--", false),
          peg$c13 = "-->",
          peg$c14 = peg$literalExpectation("-->", false),
          peg$c15 = function(i) {return i},
          peg$c16 = function(inner) {return inner.join('')},
          peg$c17 = "<layers>",
          peg$c18 = peg$literalExpectation("<layers>", false),
          peg$c19 = function(first, next0, layer) {return layer;},
          peg$c20 = function(first, next0, rest) {
                  return rest;
              },
          peg$c21 = "</layers>",
          peg$c22 = peg$literalExpectation("</layers>", false),
          peg$c23 = function(next0, start, next1, data, next2, input, next3, inputClose, next4, output, next5, outputClose, portMap, next11, portMapClose, backEdges, next12, backEdgesClose, body, next13, bodyClose, next6, weights, next7, biases, next8, weights2, next9, blobs, next10, rest) {
                  var key = '';
                  if (output){
                      key = Object.keys(output)[0];
                      start[key] = output[key];
                  }
  
                  if (input){
                      key = Object.keys(input)[0];
                      start[key] = input[key];
                  }
  
                  if (data) {
                      key = Object.keys(data)[0];
                      start[key] = data[key];
                  }
  
                  if (weights) {
                      key = Object.keys(weights)[0];
                      start[key] = weights[key];
                  }
  
                  if (weights2) {
                      key = Object.keys(weights2)[0];
                      start[key] = weights2[key];
                  }
  
                  if (biases) {
                      key = Object.keys(biases)[0];
                      start[key] = biases[key];
                  }
                  
                  if (blobs) {
                      var keys = Object.keys(blobs);
                      keys.reduce(function(el1, el2) {
                        el1[el2] = blobs[el2];
                        return el1;
                      }, start);
                  }
                  
                  if (body && body.length > 0) {
                      start.nestedIR = body[0];
                  }
                  
                  if (portMap && portMap[0]) {
                      start.mappingForNestedIR = portMap[0].output[0];
                  }
                  
                  if (backEdges && backEdges[0] && backEdges[0][1]) {
                      start.backEdgesForNestedIR = backEdges[0][1];
                  }
  
                  return start;
              },
          peg$c24 = "</layer>",
          peg$c25 = peg$literalExpectation("</layer>", false),
          peg$c26 = "<layer",
          peg$c27 = peg$literalExpectation("<layer", false),
          peg$c28 = function(next1, first, next2, rest) {
                  return rest.reduce(function(el1, el2) {
                      el1[el2.key] = el2.value;
                      return el1;
                  }, {});
              },
          peg$c29 = function(next1, first, next2, input) {return input;},
          peg$c30 = function(next1, first, next2, rest) {
                  return {'output': rest};
              },
          peg$c31 = "</output>",
          peg$c32 = peg$literalExpectation("</output>", false),
          peg$c33 = function(next1, port, next2, closePort) {
                  return {
                            'id':port[2].id,
                            'dims': port[6]
                         };
              },
          peg$c34 = "<output>",
          peg$c35 = peg$literalExpectation("<output>", false),
          peg$c36 = function(next1, first, next2, rest) {
                  return {'input': rest};
              },
          peg$c37 = "</input>",
          peg$c38 = peg$literalExpectation("</input>", false),
          peg$c39 = "<input>",
          peg$c40 = peg$literalExpectation("<input>", false),
          peg$c41 = function(next1, start, next2, dim) {return dim;},
          peg$c42 = "<port",
          peg$c43 = peg$literalExpectation("<port", false),
          peg$c44 = "</port>",
          peg$c45 = peg$literalExpectation("</port>", false),
          peg$c46 = "</port_map>",
          peg$c47 = peg$literalExpectation("</port_map>", false),
          peg$c48 = function(next1, inputs, outputs, next2, closePort) {
                  var inputValues = inputs.map(function(el){
                      return el[0];
                  });
                  var outputValues = outputs.map(function(el){
                      return el[0];
                  });
                  return {input: inputValues, output: outputValues};
              },
          peg$c49 = "<port_map>",
          peg$c50 = peg$literalExpectation("<port_map>", false),
          peg$c51 = function(start, next2, value, next3, rest) {
                  return value;
              },
          peg$c52 = "<dim>",
          peg$c53 = peg$literalExpectation("<dim>", false),
          peg$c54 = "</dim>",
          peg$c55 = peg$literalExpectation("</dim>", false),
          peg$c56 = "/>",
          peg$c57 = peg$literalExpectation("/>", false),
          peg$c58 = function(next1, start) {
                  return {'data': start};
              },
          peg$c59 = "<",
          peg$c60 = peg$literalExpectation("<", false),
          peg$c61 = /^[a-z]/,
          peg$c62 = peg$classExpectation([["a", "z"]], false, false),
          peg$c63 = /^[_\-]/,
          peg$c64 = peg$classExpectation(["_", "-"], false, false),
          peg$c65 = function(next1) {1},
          peg$c66 = "data",
          peg$c67 = peg$literalExpectation("data", false),
          peg$c68 = function(next1, first, rest) {
                  return rest.reduce(function(el1, el2) {
                      el1[el2.key] = el2.value;
                      return el1;
                  }, {});
              },
          peg$c69 = function(next1, start, next2, weights, next3, biases, next4, weights2, next5, customs, next6, end) {
                  var key = '';
                  var res = {};
                  if (weights) {
                      key = Object.keys(weights)[0];
                      res[key] = weights[key];
                  }
  
                  if (weights2) {
                      key = Object.keys(weights2)[0];
                      res[key] = weights2[key];
                  }
  
                  if (biases) {
                      key = Object.keys(biases)[0];
                      res[key] = biases[key];
                  }
                  
                  if (customs) {
                      customs.reduce(function(acc, val, key) {
                          var customKey = Object.keys(val)[0];
                          var newName = customKey + key;
                          acc[newName] = val[customKey];
                          return acc;
                      }, res);
                  }
  
                  return res;
              },
          peg$c70 = "<blobs>",
          peg$c71 = peg$literalExpectation("<blobs>", false),
          peg$c72 = "</blobs>",
          peg$c73 = peg$literalExpectation("</blobs>", false),
          peg$c74 = function(start) {
                  return {'custom': start};
              },
          peg$c75 = "<custom",
          peg$c76 = peg$literalExpectation("<custom", false),
          peg$c77 = function(first, rest) {
                  return rest.reduce(function(el1, el2) {
                      el1[el2.key] = el2.value;
                      return el1;
                  }, {});
              },
          peg$c78 = function(start) {
                  return {'weights': start};
              },
          peg$c79 = "<weights",
          peg$c80 = peg$literalExpectation("<weights", false),
          peg$c81 = function(start) {
                  return  {'biases': start};
              },
          peg$c82 = "<biases",
          peg$c83 = peg$literalExpectation("<biases", false),
          peg$c84 = "<edges>",
          peg$c85 = peg$literalExpectation("<edges>", false),
          peg$c86 = function(first, layer) {return layer;},
          peg$c87 = "</edges>",
          peg$c88 = peg$literalExpectation("</edges>", false),
          peg$c89 = "<back_edges>",
          peg$c90 = peg$literalExpectation("<back_edges>", false),
          peg$c91 = "</back_edges>",
          peg$c92 = peg$literalExpectation("</back_edges>", false),
          peg$c93 = "<body>",
          peg$c94 = peg$literalExpectation("<body>", false),
          peg$c95 = function(first, next2, layers, next3, close, next4, edges, next5, closeEdges, next6, rest) {
                  return {layers: layers, edges: edges[1]};
              },
          peg$c96 = "</body>",
          peg$c97 = peg$literalExpectation("</body>", false),
          peg$c98 = function(start) {
                  return start;
              },
          peg$c99 = "<input",
          peg$c100 = peg$literalExpectation("<input", false),
          peg$c101 = "<output",
          peg$c102 = peg$literalExpectation("<output", false),
          peg$c103 = "</edge>",
          peg$c104 = peg$literalExpectation("</edge>", false),
          peg$c105 = "<edge",
          peg$c106 = peg$literalExpectation("<edge", false),
          peg$c107 = function(first, rest) {
                  return rest.reduce(function(el1, el2) {
                      el1[el2.key] = el2.value.replace(/"/g, '');
                      return el1;
                  }, {});
              },
          peg$c108 = "</",
          peg$c109 = peg$literalExpectation("</", false),
          peg$c110 = /^[ =\/A-Za-z"0-9 <\->]/,
          peg$c111 = peg$classExpectation([" ", "=", "/", ["A", "Z"], ["a", "z"], "\"", ["0", "9"], " ", "<", "-", ">"], false, false),
          peg$c112 = /^[A-Za-z]/,
          peg$c113 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false),
          peg$c114 = function(head) {
                  return head.join('');
              },
          peg$c115 = "=",
          peg$c116 = peg$literalExpectation("=", false),
          peg$c117 = function(name, value) {
                  return {key: name, value :value}
              },
          peg$c118 = "\"",
          peg$c119 = peg$literalExpectation("\"", false),
          peg$c120 = /^[A-Za-z0-9\/.\-_, ]/,
          peg$c121 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "/", ".", "-", "_", ",", " "], false, false),
          peg$c122 = function(head) {
                  return head.toString().split(',').join('').slice(1, -1);
              },
          peg$c123 = /^[0-9A-Za-z\-_]/,
          peg$c124 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"], "-", "_"], false, false),
          peg$c125 = /^[A-Za-z0-9]/,
          peg$c126 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"]], false, false),
          peg$c127 = function(head) {
                  return head.toString().split(',').join('');
              },
          peg$c128 = peg$otherExpectation("whitespace"),
          peg$c129 = /^[ \t\n\r]/,
          peg$c130 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
  
          peg$currPos          = 0,
          peg$savedPos         = 0,
          peg$posDetailsCache  = [{ line: 1, column: 1 }],
          peg$maxFailPos       = 0,
          peg$maxFailExpected  = [],
          peg$silentFails      = 0,
  
          peg$result;
  
      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
  
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }
  
      function text() {
        return input.substring(peg$savedPos, peg$currPos);
      }
  
      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }
  
      function expected(description, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
  
        throw peg$buildStructuredError(
          [peg$otherExpectation(description)],
          input.substring(peg$savedPos, peg$currPos),
          location
        );
      }
  
      function error(message, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
  
        throw peg$buildSimpleError(message, location);
      }
  
      function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
      }
  
      function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
      }
  
      function peg$anyExpectation() {
        return { type: "any" };
      }
  
      function peg$endExpectation() {
        return { type: "end" };
      }
  
      function peg$otherExpectation(description) {
        return { type: "other", description: description };
      }
  
      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos], p;
  
        if (details) {
          return details;
        } else {
          p = pos - 1;
          while (!peg$posDetailsCache[p]) {
            p--;
          }
  
          details = peg$posDetailsCache[p];
          details = {
            line:   details.line,
            column: details.column
          };
  
          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++;
              details.column = 1;
            } else {
              details.column++;
            }
  
            p++;
          }
  
          peg$posDetailsCache[pos] = details;
          return details;
        }
      }
  
      function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos),
            endPosDetails   = peg$computePosDetails(endPos);
  
        return {
          start: {
            offset: startPos,
            line:   startPosDetails.line,
            column: startPosDetails.column
          },
          end: {
            offset: endPos,
            line:   endPosDetails.line,
            column: endPosDetails.column
          }
        };
      }
  
      function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) { return; }
  
        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos;
          peg$maxFailExpected = [];
        }
  
        peg$maxFailExpected.push(expected);
      }
  
      function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
      }
  
      function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(
          peg$SyntaxError.buildMessage(expected, found),
          expected,
          found,
          location
        );
      }
  
      function peg$parseTerm() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseXMLVersionTag();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseCommentsTag();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseCommentsTag();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseNetTag();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = [];
                        s10 = peg$parseCommentsTag();
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$parseCommentsTag();
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseLayersTag();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse_();
                              if (s12 !== peg$FAILED) {
                                s13 = [];
                                s14 = peg$parseCommentsTag();
                                while (s14 !== peg$FAILED) {
                                  s13.push(s14);
                                  s14 = peg$parseCommentsTag();
                                }
                                if (s13 !== peg$FAILED) {
                                  s14 = peg$parse_();
                                  if (s14 !== peg$FAILED) {
                                    s15 = peg$parseLayersCloseTag();
                                    if (s15 !== peg$FAILED) {
                                      s16 = peg$parse_();
                                      if (s16 !== peg$FAILED) {
                                        s17 = [];
                                        s18 = peg$parseCommentsTag();
                                        while (s18 !== peg$FAILED) {
                                          s17.push(s18);
                                          s18 = peg$parseCommentsTag();
                                        }
                                        if (s17 !== peg$FAILED) {
                                          s18 = peg$parse_();
                                          if (s18 !== peg$FAILED) {
                                            s19 = peg$parseEdgesTag();
                                            if (s19 !== peg$FAILED) {
                                              s20 = peg$parse_();
                                              if (s20 !== peg$FAILED) {
                                                s21 = [];
                                                s22 = peg$parseCommentsTag();
                                                while (s22 !== peg$FAILED) {
                                                  s21.push(s22);
                                                  s22 = peg$parseCommentsTag();
                                                }
                                                if (s21 !== peg$FAILED) {
                                                  s22 = peg$parse_();
                                                  if (s22 !== peg$FAILED) {
                                                    s23 = peg$parseEdgesCloseTag();
                                                    if (s23 !== peg$FAILED) {
                                                      s24 = peg$parse_();
                                                      if (s24 !== peg$FAILED) {
                                                        s25 = [];
                                                        s26 = peg$parseCommentsTag();
                                                        while (s26 !== peg$FAILED) {
                                                          s25.push(s26);
                                                          s26 = peg$parseCommentsTag();
                                                        }
                                                        if (s25 !== peg$FAILED) {
                                                          s26 = peg$parse_();
                                                          if (s26 !== peg$FAILED) {
                                                            s27 = [];
                                                            if (input.length > peg$currPos) {
                                                              s28 = input.charAt(peg$currPos);
                                                              peg$currPos++;
                                                            } else {
                                                              s28 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c0); }
                                                            }
                                                            while (s28 !== peg$FAILED) {
                                                              s27.push(s28);
                                                              if (input.length > peg$currPos) {
                                                                s28 = input.charAt(peg$currPos);
                                                                peg$currPos++;
                                                              } else {
                                                                s28 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c0); }
                                                              }
                                                            }
                                                            if (s27 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$c1(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23, s25, s27);
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseXMLVersionTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c2) {
          s1 = peg$c2;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsetag_attr_pair();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsetag_attr_pair();
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c4) {
              s3 = peg$c4;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseNetTag() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c6) {
          s1 = peg$c6;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsetag_attr_pair();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsetag_attr_pair();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s3 = peg$c8;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c10(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseCommentsTag() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c11) {
          s1 = peg$c11;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 3) === peg$c13) {
            s5 = peg$c13;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c0); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c15(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 3) === peg$c13) {
              s5 = peg$c13;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c0); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c15(s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c13) {
              s3 = peg$c13;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c16(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseLayersTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c17) {
          s2 = peg$c17;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseCommentsTag();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseCommentsTag();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseLayerTag();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c19(s1, s2, s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseLayerTag();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s6 = peg$c19(s1, s2, s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c20(s1, s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseLayersCloseTag() {
        var s0;
  
        if (input.substr(peg$currPos, 9) === peg$c21) {
          s0 = peg$c21;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
  
        return s0;
      }
  
      function peg$parseLayerTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseLayerStartTag();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseCommentsTag();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseCommentsTag();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseDataTag();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseCommentsTag();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseCommentsTag();
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseInputsTag();
                        if (s9 === peg$FAILED) {
                          s9 = null;
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = [];
                          s11 = peg$parseCommentsTag();
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$parseCommentsTag();
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse_();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parseInputsCloseTag();
                              if (s12 === peg$FAILED) {
                                s12 = null;
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = [];
                                s14 = peg$parseCommentsTag();
                                while (s14 !== peg$FAILED) {
                                  s13.push(s14);
                                  s14 = peg$parseCommentsTag();
                                }
                                if (s13 !== peg$FAILED) {
                                  s14 = peg$parse_();
                                  if (s14 !== peg$FAILED) {
                                    s15 = [];
                                    s16 = peg$parseOutputsTag();
                                    while (s16 !== peg$FAILED) {
                                      s15.push(s16);
                                      s16 = peg$parseOutputsTag();
                                    }
                                    if (s15 !== peg$FAILED) {
                                      s16 = peg$parse_();
                                      if (s16 !== peg$FAILED) {
                                        s17 = [];
                                        s18 = peg$parseCommentsTag();
                                        while (s18 !== peg$FAILED) {
                                          s17.push(s18);
                                          s18 = peg$parseCommentsTag();
                                        }
                                        if (s17 !== peg$FAILED) {
                                          s18 = peg$parse_();
                                          if (s18 !== peg$FAILED) {
                                            s19 = [];
                                            s20 = peg$parseOutputsCloseTag();
                                            while (s20 !== peg$FAILED) {
                                              s19.push(s20);
                                              s20 = peg$parseOutputsCloseTag();
                                            }
                                            if (s19 !== peg$FAILED) {
                                              s20 = peg$parse_();
                                              if (s20 !== peg$FAILED) {
                                                s21 = [];
                                                s22 = peg$parsePortMapTag();
                                                while (s22 !== peg$FAILED) {
                                                  s21.push(s22);
                                                  s22 = peg$parsePortMapTag();
                                                }
                                                if (s21 !== peg$FAILED) {
                                                  s22 = peg$parse_();
                                                  if (s22 !== peg$FAILED) {
                                                    s23 = [];
                                                    s24 = peg$parseCommentsTag();
                                                    while (s24 !== peg$FAILED) {
                                                      s23.push(s24);
                                                      s24 = peg$parseCommentsTag();
                                                    }
                                                    if (s23 !== peg$FAILED) {
                                                      s24 = peg$parse_();
                                                      if (s24 !== peg$FAILED) {
                                                        s25 = [];
                                                        s26 = peg$parsePortMapCloseTag();
                                                        while (s26 !== peg$FAILED) {
                                                          s25.push(s26);
                                                          s26 = peg$parsePortMapCloseTag();
                                                        }
                                                        if (s25 !== peg$FAILED) {
                                                          s26 = peg$parse_();
                                                          if (s26 !== peg$FAILED) {
                                                            s27 = [];
                                                            s28 = peg$parseBackEdgesTag();
                                                            while (s28 !== peg$FAILED) {
                                                              s27.push(s28);
                                                              s28 = peg$parseBackEdgesTag();
                                                            }
                                                            if (s27 !== peg$FAILED) {
                                                              s28 = peg$parse_();
                                                              if (s28 !== peg$FAILED) {
                                                                s29 = [];
                                                                s30 = peg$parseCommentsTag();
                                                                while (s30 !== peg$FAILED) {
                                                                  s29.push(s30);
                                                                  s30 = peg$parseCommentsTag();
                                                                }
                                                                if (s29 !== peg$FAILED) {
                                                                  s30 = peg$parse_();
                                                                  if (s30 !== peg$FAILED) {
                                                                    s31 = [];
                                                                    s32 = peg$parseBackEdgesCloseTag();
                                                                    while (s32 !== peg$FAILED) {
                                                                      s31.push(s32);
                                                                      s32 = peg$parseBackEdgesCloseTag();
                                                                    }
                                                                    if (s31 !== peg$FAILED) {
                                                                      s32 = peg$parse_();
                                                                      if (s32 !== peg$FAILED) {
                                                                        s33 = [];
                                                                        s34 = peg$parseBodyTag();
                                                                        while (s34 !== peg$FAILED) {
                                                                          s33.push(s34);
                                                                          s34 = peg$parseBodyTag();
                                                                        }
                                                                        if (s33 !== peg$FAILED) {
                                                                          s34 = peg$parse_();
                                                                          if (s34 !== peg$FAILED) {
                                                                            s35 = [];
                                                                            s36 = peg$parseCommentsTag();
                                                                            while (s36 !== peg$FAILED) {
                                                                              s35.push(s36);
                                                                              s36 = peg$parseCommentsTag();
                                                                            }
                                                                            if (s35 !== peg$FAILED) {
                                                                              s36 = peg$parse_();
                                                                              if (s36 !== peg$FAILED) {
                                                                                s37 = [];
                                                                                s38 = peg$parseBodyCloseTag();
                                                                                while (s38 !== peg$FAILED) {
                                                                                  s37.push(s38);
                                                                                  s38 = peg$parseBodyCloseTag();
                                                                                }
                                                                                if (s37 !== peg$FAILED) {
                                                                                  s38 = peg$parse_();
                                                                                  if (s38 !== peg$FAILED) {
                                                                                    s39 = [];
                                                                                    s40 = peg$parseCommentsTag();
                                                                                    while (s40 !== peg$FAILED) {
                                                                                      s39.push(s40);
                                                                                      s40 = peg$parseCommentsTag();
                                                                                    }
                                                                                    if (s39 !== peg$FAILED) {
                                                                                      s40 = peg$parse_();
                                                                                      if (s40 !== peg$FAILED) {
                                                                                        s41 = peg$parseWeightsTag();
                                                                                        if (s41 === peg$FAILED) {
                                                                                          s41 = null;
                                                                                        }
                                                                                        if (s41 !== peg$FAILED) {
                                                                                          s42 = [];
                                                                                          s43 = peg$parseCommentsTag();
                                                                                          while (s43 !== peg$FAILED) {
                                                                                            s42.push(s43);
                                                                                            s43 = peg$parseCommentsTag();
                                                                                          }
                                                                                          if (s42 !== peg$FAILED) {
                                                                                            s43 = peg$parse_();
                                                                                            if (s43 !== peg$FAILED) {
                                                                                              s44 = peg$parseBiasesTag();
                                                                                              if (s44 === peg$FAILED) {
                                                                                                s44 = null;
                                                                                              }
                                                                                              if (s44 !== peg$FAILED) {
                                                                                                s45 = [];
                                                                                                s46 = peg$parseCommentsTag();
                                                                                                while (s46 !== peg$FAILED) {
                                                                                                  s45.push(s46);
                                                                                                  s46 = peg$parseCommentsTag();
                                                                                                }
                                                                                                if (s45 !== peg$FAILED) {
                                                                                                  s46 = peg$parse_();
                                                                                                  if (s46 !== peg$FAILED) {
                                                                                                    s47 = peg$parseWeightsTag();
                                                                                                    if (s47 === peg$FAILED) {
                                                                                                      s47 = null;
                                                                                                    }
                                                                                                    if (s47 !== peg$FAILED) {
                                                                                                      s48 = [];
                                                                                                      s49 = peg$parseCommentsTag();
                                                                                                      while (s49 !== peg$FAILED) {
                                                                                                        s48.push(s49);
                                                                                                        s49 = peg$parseCommentsTag();
                                                                                                      }
                                                                                                      if (s48 !== peg$FAILED) {
                                                                                                        s49 = peg$parse_();
                                                                                                        if (s49 !== peg$FAILED) {
                                                                                                          s50 = peg$parseBlobsTag();
                                                                                                          if (s50 === peg$FAILED) {
                                                                                                            s50 = null;
                                                                                                          }
                                                                                                          if (s50 !== peg$FAILED) {
                                                                                                            s51 = [];
                                                                                                            s52 = peg$parseCommentsTag();
                                                                                                            while (s52 !== peg$FAILED) {
                                                                                                              s51.push(s52);
                                                                                                              s52 = peg$parseCommentsTag();
                                                                                                            }
                                                                                                            if (s51 !== peg$FAILED) {
                                                                                                              s52 = peg$parse_();
                                                                                                              if (s52 !== peg$FAILED) {
                                                                                                                s53 = peg$parseLayerCloseTag();
                                                                                                                if (s53 !== peg$FAILED) {
                                                                                                                  peg$savedPos = s0;
                                                                                                                  s1 = peg$c23(s1, s3, s4, s6, s7, s9, s10, s12, s13, s15, s17, s19, s21, s23, s25, s27, s29, s31, s33, s35, s37, s39, s41, s42, s44, s45, s47, s48, s50, s51, s53);
                                                                                                                  s0 = s1;
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$FAILED;
                                                                                                                }
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$FAILED;
                                                                                                              }
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$FAILED;
                                                                                                            }
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$FAILED;
                                                                                                          }
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$FAILED;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$FAILED;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$FAILED;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$FAILED;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseLayerCloseTag() {
        var s0;
  
        if (input.substr(peg$currPos, 8) === peg$c24) {
          s0 = peg$c24;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c25); }
        }
  
        return s0;
      }
  
      function peg$parseLayerStartTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c26) {
              s3 = peg$c26;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseCommentsTag();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseCommentsTag();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsetag_attr_pair();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsetag_attr_pair();
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                      s7 = peg$c8;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c9); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c28(s1, s3, s4, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseOutputsTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseOutputsStartTag();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseCommentsTag();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseCommentsTag();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$currPos;
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseOutputTag();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c29(s1, s3, s4, s9);
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$currPos;
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseOutputTag();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s7;
                        s8 = peg$c29(s1, s3, s4, s9);
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c30(s1, s3, s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseOutputsCloseTag() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c31) {
          s1 = peg$c31;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseOutputTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsePortTag();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseCommentsTag();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseCommentsTag();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsePortCloseTag();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c33(s1, s3, s5, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseOutputsStartTag() {
        var s0;
  
        if (input.substr(peg$currPos, 8) === peg$c34) {
          s0 = peg$c34;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
  
        return s0;
      }
  
      function peg$parseInputsTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseInputsStartTag();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseCommentsTag();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseCommentsTag();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$currPos;
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseInputTag();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c29(s1, s3, s4, s9);
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$currPos;
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseInputTag();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s7;
                        s8 = peg$c29(s1, s3, s4, s9);
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c36(s1, s3, s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseInputsCloseTag() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c37) {
          s1 = peg$c37;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseInputTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsePortTag();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseCommentsTag();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseCommentsTag();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsePortCloseTag();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c33(s1, s3, s5, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseInputsStartTag() {
        var s0;
  
        if (input.substr(peg$currPos, 7) === peg$c39) {
          s0 = peg$c39;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
  
        return s0;
      }
  
      function peg$parsePortTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsePortStartTag();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseCommentsTag();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseCommentsTag();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$currPos;
                    s9 = peg$parse_();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseDimTag();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s8;
                        s9 = peg$c41(s1, s3, s5, s10);
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$currPos;
                      s9 = peg$parse_();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseDimTag();
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s8;
                          s9 = peg$c41(s1, s3, s5, s10);
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parsePortStartTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c42) {
              s3 = peg$c42;
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseCommentsTag();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseCommentsTag();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsetag_attr_pair();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsetag_attr_pair();
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                      s7 = peg$c8;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c9); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c28(s1, s3, s4, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parsePortCloseTag() {
        var s0;
  
        if (input.substr(peg$currPos, 7) === peg$c44) {
          s0 = peg$c44;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
  
        return s0;
      }
  
      function peg$parsePortMapTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsePortMapStartTag();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseCommentsTag();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseCommentsTag();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$currPos;
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsePortMapContainerTag();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c29(s1, s3, s4, s9);
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$currPos;
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsePortMapContainerTag();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s7;
                        s8 = peg$c29(s1, s3, s4, s9);
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c30(s1, s3, s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parsePortMapCloseTag() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 11) === peg$c46) {
          s1 = peg$c46;
          peg$currPos += 11;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parsePortMapContainerTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parsePortMapInputTag();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsePortMapInputTag();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parsePortMapOutputTag();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parsePortMapOutputTag();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseCommentsTag();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseCommentsTag();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsePortMapCloseTag();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c48(s1, s3, s4, s5, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parsePortMapStartTag() {
        var s0;
  
        if (input.substr(peg$currPos, 10) === peg$c49) {
          s0 = peg$c49;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
  
        return s0;
      }
  
      function peg$parseDimTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
  
        s0 = peg$currPos;
        s1 = peg$parseDimStartTag();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseCommentsTag();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseCommentsTag();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsetag_value();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseCommentsTag();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseCommentsTag();
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseDimCloseTag();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c51(s1, s3, s5, s7, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseDimStartTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c52) {
              s3 = peg$c52;
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseDimCloseTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c54) {
              s3 = peg$c54;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseDataTag() {
        var s0, s1, s2, s3, s4, s5, s6;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDataStartTag();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c56) {
                  s5 = peg$c56;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c58(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseDataStartTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 60) {
              s4 = peg$c59;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c60); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              if (peg$c61.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c62); }
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$c61.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c62); }
                }
              }
              if (s6 !== peg$FAILED) {
                if (peg$c63.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c64); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c65(s1);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = [];
                if (peg$c61.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c62); }
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  if (peg$c61.test(input.charAt(peg$currPos))) {
                    s8 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c62); }
                  }
                }
                if (s7 !== peg$FAILED) {
                  if (peg$c63.test(input.charAt(peg$currPos))) {
                    s8 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c65(s1);
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c66) {
                    s7 = peg$c66;
                    peg$currPos += 4;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c67); }
                  }
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsetag_attr_pair();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsetag_attr_pair();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c68(s1, s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseBlobsTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseBlobsStartTag();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseCommentsTag();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseCommentsTag();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseWeightsTag();
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = [];
                        s10 = peg$parseCommentsTag();
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$parseCommentsTag();
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseBiasesTag();
                            if (s11 === peg$FAILED) {
                              s11 = null;
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse_();
                              if (s12 !== peg$FAILED) {
                                s13 = [];
                                s14 = peg$parseCommentsTag();
                                while (s14 !== peg$FAILED) {
                                  s13.push(s14);
                                  s14 = peg$parseCommentsTag();
                                }
                                if (s13 !== peg$FAILED) {
                                  s14 = peg$parse_();
                                  if (s14 !== peg$FAILED) {
                                    s15 = peg$parseWeightsTag();
                                    if (s15 === peg$FAILED) {
                                      s15 = null;
                                    }
                                    if (s15 !== peg$FAILED) {
                                      s16 = peg$parse_();
                                      if (s16 !== peg$FAILED) {
                                        s17 = [];
                                        s18 = peg$parseCommentsTag();
                                        while (s18 !== peg$FAILED) {
                                          s17.push(s18);
                                          s18 = peg$parseCommentsTag();
                                        }
                                        if (s17 !== peg$FAILED) {
                                          s18 = peg$parse_();
                                          if (s18 !== peg$FAILED) {
                                            s19 = [];
                                            s20 = peg$parseCustomBlobsTag();
                                            while (s20 !== peg$FAILED) {
                                              s19.push(s20);
                                              s20 = peg$parseCustomBlobsTag();
                                            }
                                            if (s19 !== peg$FAILED) {
                                              s20 = peg$parse_();
                                              if (s20 !== peg$FAILED) {
                                                s21 = [];
                                                s22 = peg$parseCommentsTag();
                                                while (s22 !== peg$FAILED) {
                                                  s21.push(s22);
                                                  s22 = peg$parseCommentsTag();
                                                }
                                                if (s21 !== peg$FAILED) {
                                                  s22 = peg$parse_();
                                                  if (s22 !== peg$FAILED) {
                                                    s23 = peg$parseBlobsEndTag();
                                                    if (s23 !== peg$FAILED) {
                                                      s24 = peg$parse_();
                                                      if (s24 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c69(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23);
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseBlobsStartTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c70) {
              s3 = peg$c70;
              peg$currPos += 7;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseBlobsEndTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseCommentsTag();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseCommentsTag();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c72) {
              s3 = peg$c72;
              peg$currPos += 8;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c73); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseCustomBlobsTag() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        s1 = peg$parseCustomBlobsStartTag();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c56) {
              s3 = peg$c56;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c74(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseCustomBlobsStartTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c75) {
          s1 = peg$c75;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsetag_attr_pair();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsetag_attr_pair();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c77(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseWeightsTag() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        s1 = peg$parseWeightsStartTag();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c56) {
              s3 = peg$c56;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c78(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseWeightsStartTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c79) {
          s1 = peg$c79;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsetag_attr_pair();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsetag_attr_pair();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c77(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseBiasesTag() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        s1 = peg$parseBiasesStartTag();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c56) {
              s3 = peg$c56;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c81(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseBiasesStartTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c82) {
          s1 = peg$c82;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsetag_attr_pair();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsetag_attr_pair();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c77(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseEdgesTag() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c84) {
          s2 = peg$c84;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEdgeTag();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c86(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEdgeTag();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c86(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseEdgesCloseTag() {
        var s0;
  
        if (input.substr(peg$currPos, 8) === peg$c87) {
          s0 = peg$c87;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
  
        return s0;
      }
  
      function peg$parseBackEdgesTag() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 12) === peg$c89) {
          s2 = peg$c89;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEdgeTag();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c86(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEdgeTag();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c86(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseBackEdgesCloseTag() {
        var s0;
  
        if (input.substr(peg$currPos, 13) === peg$c91) {
          s0 = peg$c91;
          peg$currPos += 13;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
  
        return s0;
      }
  
      function peg$parseBodyTag() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c93) {
          s2 = peg$c93;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c94); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseCommentsTag();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseCommentsTag();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseLayersTag();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseCommentsTag();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseCommentsTag();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseLayersCloseTag();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse_();
                        if (s9 !== peg$FAILED) {
                          s10 = [];
                          s11 = peg$parseCommentsTag();
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$parseCommentsTag();
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse_();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parseEdgesTag();
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parse_();
                                if (s13 !== peg$FAILED) {
                                  s14 = [];
                                  s15 = peg$parseCommentsTag();
                                  while (s15 !== peg$FAILED) {
                                    s14.push(s15);
                                    s15 = peg$parseCommentsTag();
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s15 = peg$parse_();
                                    if (s15 !== peg$FAILED) {
                                      s16 = peg$parseEdgesCloseTag();
                                      if (s16 !== peg$FAILED) {
                                        s17 = peg$parse_();
                                        if (s17 !== peg$FAILED) {
                                          s18 = [];
                                          s19 = peg$parseCommentsTag();
                                          while (s19 !== peg$FAILED) {
                                            s18.push(s19);
                                            s19 = peg$parseCommentsTag();
                                          }
                                          if (s18 !== peg$FAILED) {
                                            s19 = peg$parse_();
                                            if (s19 !== peg$FAILED) {
                                              s20 = peg$parse_();
                                              if (s20 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c95(s1, s2, s4, s6, s8, s10, s12, s14, s16, s18, s20);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseBodyCloseTag() {
        var s0;
  
        if (input.substr(peg$currPos, 7) === peg$c96) {
          s0 = peg$c96;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c97); }
        }
  
        return s0;
      }
  
      function peg$parsePortMapInputTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parsePortMapInputStartTag();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c56) {
              s3 = peg$c56;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c98(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parsePortMapInputStartTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c99) {
          s1 = peg$c99;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c100); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsetag_attr_pair();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsetag_attr_pair();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c77(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parsePortMapOutputTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parsePortMapOutputStartTag();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c56) {
              s3 = peg$c56;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c98(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parsePortMapOutputStartTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c101) {
          s1 = peg$c101;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c102); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsetag_attr_pair();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsetag_attr_pair();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c77(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseEdgeTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parseEdgeStartTag();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c56) {
              s3 = peg$c56;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c98(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseEdgeCloseTag() {
        var s0;
  
        if (input.substr(peg$currPos, 7) === peg$c103) {
          s0 = peg$c103;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c104); }
        }
  
        return s0;
      }
  
      function peg$parseEdgeStartTag() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c105) {
          s1 = peg$c105;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsetag_attr_pair();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsetag_attr_pair();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c107(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseCloseTag() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c108) {
          s1 = peg$c108;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c109); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetag_name();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsetag_attr_pair();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsetag_attr_pair();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s4 = peg$c8;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseany() {
        var s0, s1;
  
        s0 = [];
        if (peg$c110.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c110.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c111); }
          }
        }
  
        return s0;
      }
  
      function peg$parsetag_name() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        s1 = [];
        if (peg$c112.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c112.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c113); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c114(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parsetag_attr_pair() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseattr_name();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c115;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c116); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseattr_value();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c117(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
  
        return s0;
      }
  
      function peg$parseattr_value() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c118;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c119); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c120.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c120.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c118;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c119); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c122(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parseattr_name() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        s1 = [];
        if (peg$c123.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c124); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c123.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c124); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c114(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parsetag_value() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        s1 = [];
        if (peg$c125.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c126); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c125.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c126); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c127(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parse_() {
        var s0, s1;
  
        peg$silentFails++;
        s0 = [];
        if (peg$c129.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c130); }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c129.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c130); }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c128); }
        }
  
        return s0;
      }
  
      peg$result = peg$startRuleFunction();
  
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation());
        }
  
        throw peg$buildStructuredError(
          peg$maxFailExpected,
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
        );
      }
    }
  
    return {
      SyntaxError: peg$SyntaxError,
      parse:       peg$parse
    };
  })();
  


var DotParser = /*
    * Generated by PEG.js 0.10.0.
    *
    * http://pegjs.org/
    */
       (function() {
           "use strict";
   
           function peg$subclass(child, parent) {
               function ctor() { this.constructor = child; }
               ctor.prototype = parent.prototype;
               child.prototype = new ctor();
           }
   
           function peg$SyntaxError(message, expected, found, location) {
               this.message  = message;
               this.expected = expected;
               this.found    = found;
               this.location = location;
               this.name     = "SyntaxError";
   
               if (typeof Error.captureStackTrace === "function") {
                   Error.captureStackTrace(this, peg$SyntaxError);
               }
           }
   
           peg$subclass(peg$SyntaxError, Error);
   
           peg$SyntaxError.buildMessage = function(expected, found) {
               var DESCRIBE_EXPECTATION_FNS = {
                   literal: function(expectation) {
                       return "\"" + literalEscape(expectation.text) + "\"";
                   },
   
                   "class": function(expectation) {
                       var escapedParts = "",
                           i;
   
                       for (i = 0; i < expectation.parts.length; i++) {
                           escapedParts += expectation.parts[i] instanceof Array
                               ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                               : classEscape(expectation.parts[i]);
                       }
   
                       return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                   },
   
                   any: function(expectation) {
                       return "any character";
                   },
   
                   end: function(expectation) {
                       return "end of input";
                   },
   
                   other: function(expectation) {
                       return expectation.description;
                   }
               };
   
               function hex(ch) {
                   return ch.charCodeAt(0).toString(16).toUpperCase();
               }
   
               function literalEscape(s) {
                   return s
                       .replace(/\\/g, '\\\\')
                       .replace(/"/g,  '\\"')
                       .replace(/\0/g, '\\0')
                       .replace(/\t/g, '\\t')
                       .replace(/\n/g, '\\n')
                       .replace(/\r/g, '\\r')
                       .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                       .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
               }
   
               function classEscape(s) {
                   return s
                       .replace(/\\/g, '\\\\')
                       .replace(/\]/g, '\\]')
                       .replace(/\^/g, '\\^')
                       .replace(/-/g,  '\\-')
                       .replace(/\0/g, '\\0')
                       .replace(/\t/g, '\\t')
                       .replace(/\n/g, '\\n')
                       .replace(/\r/g, '\\r')
                       .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                       .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
               }
   
               function describeExpectation(expectation) {
                   return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
               }
   
               function describeExpected(expected) {
                   var descriptions = new Array(expected.length),
                       i, j;
   
                   for (i = 0; i < expected.length; i++) {
                       descriptions[i] = describeExpectation(expected[i]);
                   }
   
                   descriptions.sort();
   
                   if (descriptions.length > 0) {
                       for (i = 1, j = 1; i < descriptions.length; i++) {
                           if (descriptions[i - 1] !== descriptions[i]) {
                               descriptions[j] = descriptions[i];
                               j++;
                           }
                       }
                       descriptions.length = j;
                   }
   
                   switch (descriptions.length) {
                       case 1:
                           return descriptions[0];
   
                       case 2:
                           return descriptions[0] + " or " + descriptions[1];
   
                       default:
                           return descriptions.slice(0, -1).join(", ")
                               + ", or "
                               + descriptions[descriptions.length - 1];
                   }
               }
   
               function describeFound(found) {
                   return found ? "\"" + literalEscape(found) + "\"" : "end of input";
               }
   
               return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
           };
   
           function peg$parse(input, options) {
               options = options !== void 0 ? options : {};
   
               var peg$FAILED = {},
   
                   peg$startRuleFunctions = { start: peg$parsestart },
                   peg$startRuleFunction  = peg$parsestart,
   
                   peg$c0 = peg$otherExpectation("graph"),
                   peg$c1 = "strict",
                   peg$c2 = peg$literalExpectation("strict", true),
                   peg$c3 = "graph",
                   peg$c4 = peg$literalExpectation("graph", true),
                   peg$c5 = "digraph",
                   peg$c6 = peg$literalExpectation("digraph", true),
                   peg$c7 = "{",
                   peg$c8 = peg$literalExpectation("{", false),
                   peg$c9 = "}",
                   peg$c10 = peg$literalExpectation("}", false),
                   peg$c11 = function(strict, type, id, children) {
                       var ret = {type:type.toLowerCase(), children:children};
                       if (strict) { ret.strict = true }
                       if (id) { ret.id = id }
                       return ret;
                   },
                   peg$c12 = ";",
                   peg$c13 = peg$literalExpectation(";", false),
                   peg$c14 = function(s, v) {return [s].concat(v||[]);},
                   peg$c15 = function(v) { return v; },
                   peg$c16 = "=",
                   peg$c17 = peg$literalExpectation("=", false),
                   peg$c18 = function(left, right) { return {type:'attr_stmt', target:'graph', attr_list:[{type:'attr', id:left, eq:right}]}; },
                   peg$c19 = "node",
                   peg$c20 = peg$literalExpectation("node", true),
                   peg$c21 = "edge",
                   peg$c22 = peg$literalExpectation("edge", true),
                   peg$c23 = function(target, attr) { return {type:'attr_stmt', target:target, attr_list:attr}; },
                   peg$c24 = "[",
                   peg$c25 = peg$literalExpectation("[", false),
                   peg$c26 = "]",
                   peg$c27 = peg$literalExpectation("]", false),
                   peg$c28 = function(list, rest) { return (list || []).concat(rest || []); },
                   peg$c29 = function(elementType, elementValue) {return elementValue},
                   peg$c30 = ",",
                   peg$c31 = peg$literalExpectation(",", false),
                   peg$c32 = function(elementType, eq, rest) {
                       var attributes = [];
   
                       function createAttribute(name, value) {
                           return {
                               type: 'attr',
                               name: name,
                               value: value
                           };
                       }
   
                       function trim(str){
                           return String(str).replace(/^\s+|\s+$/g, '');
                       }
   
                       if (elementType !== 'label') {
                           attributes.push(createAttribute(elementType, eq || null));
                       } else {
                           var eq = eq.replace(/\\n/ig, "\n").split(/\n/);
                           var newAttributes = eq.map(function(pair) {
                               var values = pair.split(':');
                               var newName = values[0] ? trim(values[0]) : values[0];
                               var newValue = values[1] ? trim(values[1]) : values[1];
                               if (newName === 'dims'){
                                   newValue = JSON.parse(newValue);
                               }
                               return createAttribute(newName, newValue);
                           });
                           newAttributes[0].value = newAttributes[0].name;
                           newAttributes[0].name = 'name';
   
                           Array.prototype.push.apply(attributes, newAttributes);
                       }
   
                       return attributes.concat(rest || []);
                   },
                   peg$c33 = function(id, rhs, attr) {
                       var edge_list = [id];
                       edge_list = edge_list.concat(rhs.map(function(v){return v.id}));
                       return {type:'edge_stmt', edge_list:edge_list, attr_list:attr||[]};
                   },
                   peg$c34 = "->",
                   peg$c35 = peg$literalExpectation("->", false),
                   peg$c36 = "--",
                   peg$c37 = peg$literalExpectation("--", false),
                   peg$c38 = function(edgeop, id, rest) {return [{type:'edgeRHS', edgeop:edgeop, id:id}].concat(rest || []); },
                   peg$c39 = function(id, attr) { return {type:'node_stmt', node_id:id, attr_list:attr || []}; },
                   peg$c40 = function(id, port) { return port ? {type:'node_id', id:id, port:port} : {type:'node_id', id:id}; },
                   peg$c41 = peg$otherExpectation("port"),
                   peg$c42 = ":",
                   peg$c43 = peg$literalExpectation(":", false),
                   peg$c44 = function(id, pt) {return pt},
                   peg$c45 = function(id, pt) { return {type:'port', id:id, compass_pt:pt || null}; },
                   peg$c46 = function(pt) {return {type:'port', compass_pt:pt||null}},
                   peg$c47 = "subgraph",
                   peg$c48 = peg$literalExpectation("subgraph", true),
                   peg$c49 = function(id) {return id ? {type:'subgraph', id:id} : {type:'subgraph'}},
                   peg$c50 = function(g, s) { g=g||{type:'subgraph'}; g.children = s||[]; return g; },
                   peg$c51 = function(id) { return {type:'subgraph', id:id, children:[]}; },
                   peg$c52 = "n",
                   peg$c53 = peg$literalExpectation("n", false),
                   peg$c54 = "ne",
                   peg$c55 = peg$literalExpectation("ne", false),
                   peg$c56 = "e",
                   peg$c57 = peg$literalExpectation("e", false),
                   peg$c58 = "se",
                   peg$c59 = peg$literalExpectation("se", false),
                   peg$c60 = "s",
                   peg$c61 = peg$literalExpectation("s", false),
                   peg$c62 = "sw",
                   peg$c63 = peg$literalExpectation("sw", false),
                   peg$c64 = "w",
                   peg$c65 = peg$literalExpectation("w", false),
                   peg$c66 = "nw",
                   peg$c67 = peg$literalExpectation("nw", false),
                   peg$c68 = /^[a-zA-Z_]/,
                   peg$c69 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
                   peg$c70 = /^[a-zA-Z0-9_]/,
                   peg$c71 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false),
                   peg$c72 = function(v) { return v[0]+v[1].join(''); },
                   peg$c73 = peg$otherExpectation("NUMBER"),
                   peg$c74 = "-",
                   peg$c75 = peg$literalExpectation("-", false),
                   peg$c76 = ".",
                   peg$c77 = peg$literalExpectation(".", false),
                   peg$c78 = /^[0-9]/,
                   peg$c79 = peg$classExpectation([["0", "9"]], false, false),
                   peg$c80 = function(n) {
                       return parseFloat(text());
                   },
                   peg$c81 = "<",
                   peg$c82 = peg$literalExpectation("<", false),
                   peg$c83 = ">",
                   peg$c84 = peg$literalExpectation(">", false),
                   peg$c85 = function(v) { return '<' + v.join('') + '>'; },
                   peg$c86 = peg$anyExpectation(),
                   peg$c87 = function(v) {return v},
                   peg$c88 = function(v) { return v.join(""); },
                   peg$c89 = "\"",
                   peg$c90 = peg$literalExpectation("\"", false),
                   peg$c91 = function() {return "";},
                   peg$c92 = "\\",
                   peg$c93 = peg$literalExpectation("\\", false),
                   peg$c94 = "+",
                   peg$c95 = peg$literalExpectation("+", false),
                   peg$c96 = function(v2, v) {return v},
                   peg$c97 = function(v2, rest) { return rest === null ? v2[1] : (v2[1] + rest); },
                   peg$c98 = function(chars) { return chars.join(""); },
                   peg$c99 = /^[^"\\\0-\x1F\x7F]/,
                   peg$c100 = peg$classExpectation(["\"", "\\", ["\0", "\x1F"], "\x7F"], true, false),
                   peg$c101 = "\\\"",
                   peg$c102 = peg$literalExpectation("\\\"", false),
                   peg$c103 = function() { return '"'; },
                   peg$c104 = function() { return ""; },
                   peg$c105 = function() { return '\\'; },
                   peg$c106 = peg$otherExpectation("COMMENT"),
                   peg$c107 = peg$otherExpectation("BLOCK_COMMENT"),
                   peg$c108 = "/*",
                   peg$c109 = peg$literalExpectation("/*", false),
                   peg$c110 = "*/",
                   peg$c111 = peg$literalExpectation("*/", false),
                   peg$c112 = function(v) {return v;},
                   peg$c113 = function(v) { return v.join('') },
                   peg$c114 = peg$otherExpectation("C_COMMENT"),
                   peg$c115 = "//",
                   peg$c116 = peg$literalExpectation("//", false),
                   peg$c117 = /^[\n]/,
                   peg$c118 = peg$classExpectation(["\n"], false, false),
                   peg$c119 = function(v) { return v.join(''); },
                   peg$c120 = peg$otherExpectation("MACRO_COMMENT"),
                   peg$c121 = "#",
                   peg$c122 = peg$literalExpectation("#", false),
                   peg$c123 = peg$otherExpectation("WHITESPACE"),
                   peg$c124 = /^[\n\r]/,
                   peg$c125 = peg$classExpectation(["\n", "\r"], false, false),
                   peg$c126 = /^[ \t]/,
                   peg$c127 = peg$classExpectation([" ", "\t"], false, false),
   
                   peg$currPos          = 0,
                   peg$savedPos         = 0,
                   peg$posDetailsCache  = [{ line: 1, column: 1 }],
                   peg$maxFailPos       = 0,
                   peg$maxFailExpected  = [],
                   peg$silentFails      = 0,
   
                   peg$result;
   
               if ("startRule" in options) {
                   if (!(options.startRule in peg$startRuleFunctions)) {
                       throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                   }
   
                   peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
               }
   
               function text() {
                   return input.substring(peg$savedPos, peg$currPos);
               }
   
               function location() {
                   return peg$computeLocation(peg$savedPos, peg$currPos);
               }
   
               function expected(description, location) {
                   location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
   
                   throw peg$buildStructuredError(
                       [peg$otherExpectation(description)],
                       input.substring(peg$savedPos, peg$currPos),
                       location
                   );
               }
   
               function error(message, location) {
                   location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
   
                   throw peg$buildSimpleError(message, location);
               }
   
               function peg$literalExpectation(text, ignoreCase) {
                   return { type: "literal", text: text, ignoreCase: ignoreCase };
               }
   
               function peg$classExpectation(parts, inverted, ignoreCase) {
                   return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
               }
   
               function peg$anyExpectation() {
                   return { type: "any" };
               }
   
               function peg$endExpectation() {
                   return { type: "end" };
               }
   
               function peg$otherExpectation(description) {
                   return { type: "other", description: description };
               }
   
               function peg$computePosDetails(pos) {
                   var details = peg$posDetailsCache[pos], p;
   
                   if (details) {
                       return details;
                   } else {
                       p = pos - 1;
                       while (!peg$posDetailsCache[p]) {
                           p--;
                       }
   
                       details = peg$posDetailsCache[p];
                       details = {
                           line:   details.line,
                           column: details.column
                       };
   
                       while (p < pos) {
                           if (input.charCodeAt(p) === 10) {
                               details.line++;
                               details.column = 1;
                           } else {
                               details.column++;
                           }
   
                           p++;
                       }
   
                       peg$posDetailsCache[pos] = details;
                       return details;
                   }
               }
   
               function peg$computeLocation(startPos, endPos) {
                   var startPosDetails = peg$computePosDetails(startPos),
                       endPosDetails   = peg$computePosDetails(endPos);
   
                   return {
                       start: {
                           offset: startPos,
                           line:   startPosDetails.line,
                           column: startPosDetails.column
                       },
                       end: {
                           offset: endPos,
                           line:   endPosDetails.line,
                           column: endPosDetails.column
                       }
                   };
               }
   
               function peg$fail(expected) {
                   if (peg$currPos < peg$maxFailPos) { return; }
   
                   if (peg$currPos > peg$maxFailPos) {
                       peg$maxFailPos = peg$currPos;
                       peg$maxFailExpected = [];
                   }
   
                   peg$maxFailExpected.push(expected);
               }
   
               function peg$buildSimpleError(message, location) {
                   return new peg$SyntaxError(message, null, null, location);
               }
   
               function peg$buildStructuredError(expected, found, location) {
                   return new peg$SyntaxError(
                       peg$SyntaxError.buildMessage(expected, found),
                       expected,
                       found,
                       location
                   );
               }
   
               function peg$parsestart() {
                   var s0;
   
                   s0 = peg$parsegraph();
   
                   return s0;
               }
   
               function peg$parsegraph() {
                   var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
   
                   peg$silentFails++;
                   s0 = peg$currPos;
                   s1 = peg$parse_();
                   if (s1 !== peg$FAILED) {
                       if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1) {
                           s2 = input.substr(peg$currPos, 6);
                           peg$currPos += 6;
                       } else {
                           s2 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c2); }
                       }
                       if (s2 === peg$FAILED) {
                           s2 = null;
                       }
                       if (s2 !== peg$FAILED) {
                           s3 = peg$parse_();
                           if (s3 !== peg$FAILED) {
                               if (input.substr(peg$currPos, 5).toLowerCase() === peg$c3) {
                                   s4 = input.substr(peg$currPos, 5);
                                   peg$currPos += 5;
                               } else {
                                   s4 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c4); }
                               }
                               if (s4 === peg$FAILED) {
                                   if (input.substr(peg$currPos, 7).toLowerCase() === peg$c5) {
                                       s4 = input.substr(peg$currPos, 7);
                                       peg$currPos += 7;
                                   } else {
                                       s4 = peg$FAILED;
                                       if (peg$silentFails === 0) { peg$fail(peg$c6); }
                                   }
                               }
                               if (s4 !== peg$FAILED) {
                                   s5 = peg$parse_();
                                   if (s5 !== peg$FAILED) {
                                       s6 = peg$parseID();
                                       if (s6 === peg$FAILED) {
                                           s6 = null;
                                       }
                                       if (s6 !== peg$FAILED) {
                                           s7 = peg$parse_();
                                           if (s7 !== peg$FAILED) {
                                               if (input.charCodeAt(peg$currPos) === 123) {
                                                   s8 = peg$c7;
                                                   peg$currPos++;
                                               } else {
                                                   s8 = peg$FAILED;
                                                   if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                               }
                                               if (s8 !== peg$FAILED) {
                                                   s9 = peg$parsestmt_list();
                                                   if (s9 !== peg$FAILED) {
                                                       if (input.charCodeAt(peg$currPos) === 125) {
                                                           s10 = peg$c9;
                                                           peg$currPos++;
                                                       } else {
                                                           s10 = peg$FAILED;
                                                           if (peg$silentFails === 0) { peg$fail(peg$c10); }
                                                       }
                                                       if (s10 !== peg$FAILED) {
                                                           s11 = peg$parse_();
                                                           if (s11 !== peg$FAILED) {
                                                               peg$savedPos = s0;
                                                               s1 = peg$c11(s2, s4, s6, s9);
                                                               s0 = s1;
                                                           } else {
                                                               peg$currPos = s0;
                                                               s0 = peg$FAILED;
                                                           }
                                                       } else {
                                                           peg$currPos = s0;
                                                           s0 = peg$FAILED;
                                                       }
                                                   } else {
                                                       peg$currPos = s0;
                                                       s0 = peg$FAILED;
                                                   }
                                               } else {
                                                   peg$currPos = s0;
                                                   s0 = peg$FAILED;
                                               }
                                           } else {
                                               peg$currPos = s0;
                                               s0 = peg$FAILED;
                                           }
                                       } else {
                                           peg$currPos = s0;
                                           s0 = peg$FAILED;
                                       }
                                   } else {
                                       peg$currPos = s0;
                                       s0 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s0;
                                   s0 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
                   peg$silentFails--;
                   if (s0 === peg$FAILED) {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c0); }
                   }
   
                   return s0;
               }
   
               function peg$parsestmt_list() {
                   var s0, s1, s2, s3, s4, s5, s6, s7;
   
                   s0 = peg$currPos;
                   s1 = peg$parse_();
                   if (s1 !== peg$FAILED) {
                       s2 = peg$currPos;
                       s3 = peg$parsestmt();
                       if (s3 !== peg$FAILED) {
                           s4 = peg$parse_();
                           if (s4 !== peg$FAILED) {
                               if (input.charCodeAt(peg$currPos) === 59) {
                                   s5 = peg$c12;
                                   peg$currPos++;
                               } else {
                                   s5 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c13); }
                               }
                               if (s5 === peg$FAILED) {
                                   s5 = null;
                               }
                               if (s5 !== peg$FAILED) {
                                   s6 = peg$parse_();
                                   if (s6 !== peg$FAILED) {
                                       s7 = peg$parsestmt_list();
                                       if (s7 === peg$FAILED) {
                                           s7 = null;
                                       }
                                       if (s7 !== peg$FAILED) {
                                           peg$savedPos = s2;
                                           s3 = peg$c14(s3, s7);
                                           s2 = s3;
                                       } else {
                                           peg$currPos = s2;
                                           s2 = peg$FAILED;
                                       }
                                   } else {
                                       peg$currPos = s2;
                                       s2 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s2;
                                   s2 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s2;
                               s2 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s2;
                           s2 = peg$FAILED;
                       }
                       if (s2 === peg$FAILED) {
                           s2 = null;
                       }
                       if (s2 !== peg$FAILED) {
                           peg$savedPos = s0;
                           s1 = peg$c15(s2);
                           s0 = s1;
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parsestmt() {
                   var s0, s1, s2, s3, s4, s5;
   
                   s0 = peg$currPos;
                   s1 = peg$parseID();
                   if (s1 !== peg$FAILED) {
                       s2 = peg$parse_();
                       if (s2 !== peg$FAILED) {
                           if (input.charCodeAt(peg$currPos) === 61) {
                               s3 = peg$c16;
                               peg$currPos++;
                           } else {
                               s3 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c17); }
                           }
                           if (s3 !== peg$FAILED) {
                               s4 = peg$parse_();
                               if (s4 !== peg$FAILED) {
                                   s5 = peg$parseID();
                                   if (s5 !== peg$FAILED) {
                                       peg$savedPos = s0;
                                       s1 = peg$c18(s1, s5);
                                       s0 = s1;
                                   } else {
                                       peg$currPos = s0;
                                       s0 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s0;
                                   s0 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
                   if (s0 === peg$FAILED) {
                       s0 = peg$parseattr_stmt();
                       if (s0 === peg$FAILED) {
                           s0 = peg$parseedge_stmt();
                           if (s0 === peg$FAILED) {
                               s0 = peg$parsesubgraph();
                               if (s0 === peg$FAILED) {
                                   s0 = peg$parsenode_stmt();
                                   if (s0 === peg$FAILED) {
                                       s0 = peg$currPos;
                                       s1 = peg$parseID();
                                       if (s1 !== peg$FAILED) {
                                           if (input.charCodeAt(peg$currPos) === 61) {
                                               s2 = peg$c16;
                                               peg$currPos++;
                                           } else {
                                               s2 = peg$FAILED;
                                               if (peg$silentFails === 0) { peg$fail(peg$c17); }
                                           }
                                           if (s2 !== peg$FAILED) {
                                               s3 = peg$parseID();
                                               if (s3 !== peg$FAILED) {
                                                   s1 = [s1, s2, s3];
                                                   s0 = s1;
                                               } else {
                                                   peg$currPos = s0;
                                                   s0 = peg$FAILED;
                                               }
                                           } else {
                                               peg$currPos = s0;
                                               s0 = peg$FAILED;
                                           }
                                       } else {
                                           peg$currPos = s0;
                                           s0 = peg$FAILED;
                                       }
                                   }
                               }
                           }
                       }
                   }
   
                   return s0;
               }
   
               function peg$parseattr_stmt() {
                   var s0, s1, s2;
   
                   s0 = peg$currPos;
                   if (input.substr(peg$currPos, 5).toLowerCase() === peg$c3) {
                       s1 = input.substr(peg$currPos, 5);
                       peg$currPos += 5;
                   } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c4); }
                   }
                   if (s1 === peg$FAILED) {
                       if (input.substr(peg$currPos, 4).toLowerCase() === peg$c19) {
                           s1 = input.substr(peg$currPos, 4);
                           peg$currPos += 4;
                       } else {
                           s1 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c20); }
                       }
                       if (s1 === peg$FAILED) {
                           if (input.substr(peg$currPos, 4).toLowerCase() === peg$c21) {
                               s1 = input.substr(peg$currPos, 4);
                               peg$currPos += 4;
                           } else {
                               s1 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c22); }
                           }
                       }
                   }
                   if (s1 !== peg$FAILED) {
                       s2 = peg$parseattr_list();
                       if (s2 !== peg$FAILED) {
                           peg$savedPos = s0;
                           s1 = peg$c23(s1, s2);
                           s0 = s1;
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parseattr_list() {
                   var s0, s1, s2, s3, s4, s5, s6;
   
                   s0 = peg$currPos;
                   s1 = peg$parse_();
                   if (s1 !== peg$FAILED) {
                       if (input.charCodeAt(peg$currPos) === 91) {
                           s2 = peg$c24;
                           peg$currPos++;
                       } else {
                           s2 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c25); }
                       }
                       if (s2 !== peg$FAILED) {
                           s3 = peg$parsea_list();
                           if (s3 === peg$FAILED) {
                               s3 = null;
                           }
                           if (s3 !== peg$FAILED) {
                               if (input.charCodeAt(peg$currPos) === 93) {
                                   s4 = peg$c26;
                                   peg$currPos++;
                               } else {
                                   s4 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c27); }
                               }
                               if (s4 !== peg$FAILED) {
                                   s5 = peg$parse_();
                                   if (s5 !== peg$FAILED) {
                                       s6 = peg$parseattr_list();
                                       if (s6 === peg$FAILED) {
                                           s6 = null;
                                       }
                                       if (s6 !== peg$FAILED) {
                                           peg$savedPos = s0;
                                           s1 = peg$c28(s3, s6);
                                           s0 = s1;
                                       } else {
                                           peg$currPos = s0;
                                           s0 = peg$FAILED;
                                       }
                                   } else {
                                       peg$currPos = s0;
                                       s0 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s0;
                                   s0 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parsea_list() {
                   var s0, s1, s2, s3, s4, s5, s6, s7;
   
                   s0 = peg$currPos;
                   s1 = peg$parse_();
                   if (s1 !== peg$FAILED) {
                       s2 = peg$parseID();
                       if (s2 !== peg$FAILED) {
                           s3 = peg$currPos;
                           s4 = peg$parse_();
                           if (s4 !== peg$FAILED) {
                               if (input.charCodeAt(peg$currPos) === 61) {
                                   s5 = peg$c16;
                                   peg$currPos++;
                               } else {
                                   s5 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c17); }
                               }
                               if (s5 !== peg$FAILED) {
                                   s6 = peg$parse_();
                                   if (s6 !== peg$FAILED) {
                                       s7 = peg$parseID();
                                       if (s7 !== peg$FAILED) {
                                           peg$savedPos = s3;
                                           s4 = peg$c29(s2, s7);
                                           s3 = s4;
                                       } else {
                                           peg$currPos = s3;
                                           s3 = peg$FAILED;
                                       }
                                   } else {
                                       peg$currPos = s3;
                                       s3 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s3;
                                   s3 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                           if (s3 === peg$FAILED) {
                               s3 = null;
                           }
                           if (s3 !== peg$FAILED) {
                               s4 = peg$parse_();
                               if (s4 !== peg$FAILED) {
                                   if (input.charCodeAt(peg$currPos) === 44) {
                                       s5 = peg$c30;
                                       peg$currPos++;
                                   } else {
                                       s5 = peg$FAILED;
                                       if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                   }
                                   if (s5 === peg$FAILED) {
                                       s5 = null;
                                   }
                                   if (s5 !== peg$FAILED) {
                                       s6 = peg$parsea_list();
                                       if (s6 === peg$FAILED) {
                                           s6 = null;
                                       }
                                       if (s6 !== peg$FAILED) {
                                           peg$savedPos = s0;
                                           s1 = peg$c32(s2, s3, s6);
                                           s0 = s1;
                                       } else {
                                           peg$currPos = s0;
                                           s0 = peg$FAILED;
                                       }
                                   } else {
                                       peg$currPos = s0;
                                       s0 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s0;
                                   s0 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parseedge_stmt() {
                   var s0, s1, s2, s3;
   
                   s0 = peg$currPos;
                   s1 = peg$parsesubgraph();
                   if (s1 === peg$FAILED) {
                       s1 = peg$parsenode_id();
                   }
                   if (s1 !== peg$FAILED) {
                       s2 = peg$parseedgeRHS();
                       if (s2 !== peg$FAILED) {
                           s3 = peg$parseattr_list();
                           if (s3 === peg$FAILED) {
                               s3 = null;
                           }
                           if (s3 !== peg$FAILED) {
                               peg$savedPos = s0;
                               s1 = peg$c33(s1, s2, s3);
                               s0 = s1;
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parseedgeRHS() {
                   var s0, s1, s2, s3, s4, s5, s6;
   
                   s0 = peg$currPos;
                   s1 = peg$parse_();
                   if (s1 !== peg$FAILED) {
                       if (input.substr(peg$currPos, 2) === peg$c34) {
                           s2 = peg$c34;
                           peg$currPos += 2;
                       } else {
                           s2 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c35); }
                       }
                       if (s2 === peg$FAILED) {
                           if (input.substr(peg$currPos, 2) === peg$c36) {
                               s2 = peg$c36;
                               peg$currPos += 2;
                           } else {
                               s2 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c37); }
                           }
                       }
                       if (s2 !== peg$FAILED) {
                           s3 = peg$parse_();
                           if (s3 !== peg$FAILED) {
                               s4 = peg$parsesubgraph();
                               if (s4 === peg$FAILED) {
                                   s4 = peg$parsenode_id();
                               }
                               if (s4 !== peg$FAILED) {
                                   s5 = peg$parse_();
                                   if (s5 !== peg$FAILED) {
                                       s6 = peg$parseedgeRHS();
                                       if (s6 === peg$FAILED) {
                                           s6 = null;
                                       }
                                       if (s6 !== peg$FAILED) {
                                           peg$savedPos = s0;
                                           s1 = peg$c38(s2, s4, s6);
                                           s0 = s1;
                                       } else {
                                           peg$currPos = s0;
                                           s0 = peg$FAILED;
                                       }
                                   } else {
                                       peg$currPos = s0;
                                       s0 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s0;
                                   s0 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parsenode_stmt() {
                   var s0, s1, s2;
   
                   s0 = peg$currPos;
                   s1 = peg$parsenode_id();
                   if (s1 !== peg$FAILED) {
                       s2 = peg$parseattr_list();
                       if (s2 === peg$FAILED) {
                           s2 = null;
                       }
                       if (s2 !== peg$FAILED) {
                           peg$savedPos = s0;
                           s1 = peg$c39(s1, s2);
                           s0 = s1;
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parsenode_id() {
                   var s0, s1, s2;
   
                   s0 = peg$currPos;
                   s1 = peg$parseID();
                   if (s1 !== peg$FAILED) {
                       s2 = peg$parseport();
                       if (s2 === peg$FAILED) {
                           s2 = null;
                       }
                       if (s2 !== peg$FAILED) {
                           peg$savedPos = s0;
                           s1 = peg$c40(s1, s2);
                           s0 = s1;
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parseport() {
                   var s0, s1, s2, s3, s4, s5;
   
                   peg$silentFails++;
                   s0 = peg$currPos;
                   if (input.charCodeAt(peg$currPos) === 58) {
                       s1 = peg$c42;
                       peg$currPos++;
                   } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c43); }
                   }
                   if (s1 !== peg$FAILED) {
                       s2 = peg$parseID();
                       if (s2 !== peg$FAILED) {
                           s3 = peg$currPos;
                           if (input.charCodeAt(peg$currPos) === 58) {
                               s4 = peg$c42;
                               peg$currPos++;
                           } else {
                               s4 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c43); }
                           }
                           if (s4 !== peg$FAILED) {
                               s5 = peg$parsecompass_pt();
                               if (s5 !== peg$FAILED) {
                                   peg$savedPos = s3;
                                   s4 = peg$c44(s2, s5);
                                   s3 = s4;
                               } else {
                                   peg$currPos = s3;
                                   s3 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                           if (s3 === peg$FAILED) {
                               s3 = null;
                           }
                           if (s3 !== peg$FAILED) {
                               peg$savedPos = s0;
                               s1 = peg$c45(s2, s3);
                               s0 = s1;
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
                   if (s0 === peg$FAILED) {
                       s0 = peg$currPos;
                       if (input.charCodeAt(peg$currPos) === 58) {
                           s1 = peg$c42;
                           peg$currPos++;
                       } else {
                           s1 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c43); }
                       }
                       if (s1 !== peg$FAILED) {
                           s2 = peg$parsecompass_pt();
                           if (s2 !== peg$FAILED) {
                               peg$savedPos = s0;
                               s1 = peg$c46(s2);
                               s0 = s1;
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   }
                   peg$silentFails--;
                   if (s0 === peg$FAILED) {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c41); }
                   }
   
                   return s0;
               }
   
               function peg$parsesubgraph() {
                   var s0, s1, s2, s3, s4, s5;
   
                   s0 = peg$currPos;
                   s1 = peg$currPos;
                   if (input.substr(peg$currPos, 8).toLowerCase() === peg$c47) {
                       s2 = input.substr(peg$currPos, 8);
                       peg$currPos += 8;
                   } else {
                       s2 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c48); }
                   }
                   if (s2 !== peg$FAILED) {
                       s3 = peg$parse_();
                       if (s3 !== peg$FAILED) {
                           s4 = peg$parseID();
                           if (s4 === peg$FAILED) {
                               s4 = null;
                           }
                           if (s4 !== peg$FAILED) {
                               s5 = peg$parse_();
                               if (s5 !== peg$FAILED) {
                                   peg$savedPos = s1;
                                   s2 = peg$c49(s4);
                                   s1 = s2;
                               } else {
                                   peg$currPos = s1;
                                   s1 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s1;
                               s1 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s1;
                           s1 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s1;
                       s1 = peg$FAILED;
                   }
                   if (s1 === peg$FAILED) {
                       s1 = null;
                   }
                   if (s1 !== peg$FAILED) {
                       if (input.charCodeAt(peg$currPos) === 123) {
                           s2 = peg$c7;
                           peg$currPos++;
                       } else {
                           s2 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c8); }
                       }
                       if (s2 !== peg$FAILED) {
                           s3 = peg$parsestmt_list();
                           if (s3 !== peg$FAILED) {
                               if (input.charCodeAt(peg$currPos) === 125) {
                                   s4 = peg$c9;
                                   peg$currPos++;
                               } else {
                                   s4 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c10); }
                               }
                               if (s4 !== peg$FAILED) {
                                   peg$savedPos = s0;
                                   s1 = peg$c50(s1, s3);
                                   s0 = s1;
                               } else {
                                   peg$currPos = s0;
                                   s0 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
                   if (s0 === peg$FAILED) {
                       s0 = peg$currPos;
                       if (input.substr(peg$currPos, 8).toLowerCase() === peg$c47) {
                           s1 = input.substr(peg$currPos, 8);
                           peg$currPos += 8;
                       } else {
                           s1 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c48); }
                       }
                       if (s1 !== peg$FAILED) {
                           s2 = peg$parse_();
                           if (s2 !== peg$FAILED) {
                               s3 = peg$parseID();
                               if (s3 !== peg$FAILED) {
                                   peg$savedPos = s0;
                                   s1 = peg$c51(s3);
                                   s0 = s1;
                               } else {
                                   peg$currPos = s0;
                                   s0 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   }
   
                   return s0;
               }
   
               function peg$parsecompass_pt() {
                   var s0;
   
                   if (input.charCodeAt(peg$currPos) === 110) {
                       s0 = peg$c52;
                       peg$currPos++;
                   } else {
                       s0 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c53); }
                   }
                   if (s0 === peg$FAILED) {
                       if (input.substr(peg$currPos, 2) === peg$c54) {
                           s0 = peg$c54;
                           peg$currPos += 2;
                       } else {
                           s0 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c55); }
                       }
                       if (s0 === peg$FAILED) {
                           if (input.charCodeAt(peg$currPos) === 101) {
                               s0 = peg$c56;
                               peg$currPos++;
                           } else {
                               s0 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c57); }
                           }
                           if (s0 === peg$FAILED) {
                               if (input.substr(peg$currPos, 2) === peg$c58) {
                                   s0 = peg$c58;
                                   peg$currPos += 2;
                               } else {
                                   s0 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c59); }
                               }
                               if (s0 === peg$FAILED) {
                                   if (input.charCodeAt(peg$currPos) === 115) {
                                       s0 = peg$c60;
                                       peg$currPos++;
                                   } else {
                                       s0 = peg$FAILED;
                                       if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                   }
                                   if (s0 === peg$FAILED) {
                                       if (input.substr(peg$currPos, 2) === peg$c62) {
                                           s0 = peg$c62;
                                           peg$currPos += 2;
                                       } else {
                                           s0 = peg$FAILED;
                                           if (peg$silentFails === 0) { peg$fail(peg$c63); }
                                       }
                                       if (s0 === peg$FAILED) {
                                           if (input.charCodeAt(peg$currPos) === 119) {
                                               s0 = peg$c64;
                                               peg$currPos++;
                                           } else {
                                               s0 = peg$FAILED;
                                               if (peg$silentFails === 0) { peg$fail(peg$c65); }
                                           }
                                           if (s0 === peg$FAILED) {
                                               if (input.substr(peg$currPos, 2) === peg$c66) {
                                                   s0 = peg$c66;
                                                   peg$currPos += 2;
                                               } else {
                                                   s0 = peg$FAILED;
                                                   if (peg$silentFails === 0) { peg$fail(peg$c67); }
                                               }
                                           }
                                       }
                                   }
                               }
                           }
                       }
                   }
   
                   return s0;
               }
   
               function peg$parseID() {
                   var s0;
   
                   s0 = peg$parseSTRING();
                   if (s0 === peg$FAILED) {
                       s0 = peg$parseNUMBER();
                       if (s0 === peg$FAILED) {
                           s0 = peg$parseQUOTED_STRING();
                       }
                   }
   
                   return s0;
               }
   
               function peg$parseSTRING() {
                   var s0, s1, s2, s3, s4;
   
                   s0 = peg$currPos;
                   s1 = peg$currPos;
                   if (peg$c68.test(input.charAt(peg$currPos))) {
                       s2 = input.charAt(peg$currPos);
                       peg$currPos++;
                   } else {
                       s2 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c69); }
                   }
                   if (s2 !== peg$FAILED) {
                       s3 = [];
                       if (peg$c70.test(input.charAt(peg$currPos))) {
                           s4 = input.charAt(peg$currPos);
                           peg$currPos++;
                       } else {
                           s4 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c71); }
                       }
                       while (s4 !== peg$FAILED) {
                           s3.push(s4);
                           if (peg$c70.test(input.charAt(peg$currPos))) {
                               s4 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s4 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c71); }
                           }
                       }
                       if (s3 !== peg$FAILED) {
                           s2 = [s2, s3];
                           s1 = s2;
                       } else {
                           peg$currPos = s1;
                           s1 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s1;
                       s1 = peg$FAILED;
                   }
                   if (s1 !== peg$FAILED) {
                       peg$savedPos = s0;
                       s1 = peg$c72(s1);
                   }
                   s0 = s1;
   
                   return s0;
               }
   
               function peg$parseNUMBER() {
                   var s0, s1, s2, s3, s4, s5, s6, s7, s8;
   
                   peg$silentFails++;
                   s0 = peg$currPos;
                   s1 = peg$currPos;
                   if (input.charCodeAt(peg$currPos) === 45) {
                       s2 = peg$c74;
                       peg$currPos++;
                   } else {
                       s2 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c75); }
                   }
                   if (s2 === peg$FAILED) {
                       s2 = null;
                   }
                   if (s2 !== peg$FAILED) {
                       s3 = peg$currPos;
                       if (input.charCodeAt(peg$currPos) === 46) {
                           s4 = peg$c76;
                           peg$currPos++;
                       } else {
                           s4 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c77); }
                       }
                       if (s4 !== peg$FAILED) {
                           s5 = [];
                           if (peg$c78.test(input.charAt(peg$currPos))) {
                               s6 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s6 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c79); }
                           }
                           if (s6 !== peg$FAILED) {
                               while (s6 !== peg$FAILED) {
                                   s5.push(s6);
                                   if (peg$c78.test(input.charAt(peg$currPos))) {
                                       s6 = input.charAt(peg$currPos);
                                       peg$currPos++;
                                   } else {
                                       s6 = peg$FAILED;
                                       if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                   }
                               }
                           } else {
                               s5 = peg$FAILED;
                           }
                           if (s5 !== peg$FAILED) {
                               s4 = [s4, s5];
                               s3 = s4;
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s3;
                           s3 = peg$FAILED;
                       }
                       if (s3 === peg$FAILED) {
                           s3 = peg$currPos;
                           s4 = [];
                           if (peg$c78.test(input.charAt(peg$currPos))) {
                               s5 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s5 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c79); }
                           }
                           if (s5 !== peg$FAILED) {
                               while (s5 !== peg$FAILED) {
                                   s4.push(s5);
                                   if (peg$c78.test(input.charAt(peg$currPos))) {
                                       s5 = input.charAt(peg$currPos);
                                       peg$currPos++;
                                   } else {
                                       s5 = peg$FAILED;
                                       if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                   }
                               }
                           } else {
                               s4 = peg$FAILED;
                           }
                           if (s4 !== peg$FAILED) {
                               s5 = peg$currPos;
                               if (input.charCodeAt(peg$currPos) === 46) {
                                   s6 = peg$c76;
                                   peg$currPos++;
                               } else {
                                   s6 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c77); }
                               }
                               if (s6 !== peg$FAILED) {
                                   s7 = [];
                                   if (peg$c78.test(input.charAt(peg$currPos))) {
                                       s8 = input.charAt(peg$currPos);
                                       peg$currPos++;
                                   } else {
                                       s8 = peg$FAILED;
                                       if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                   }
                                   while (s8 !== peg$FAILED) {
                                       s7.push(s8);
                                       if (peg$c78.test(input.charAt(peg$currPos))) {
                                           s8 = input.charAt(peg$currPos);
                                           peg$currPos++;
                                       } else {
                                           s8 = peg$FAILED;
                                           if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                       }
                                   }
                                   if (s7 !== peg$FAILED) {
                                       s6 = [s6, s7];
                                       s5 = s6;
                                   } else {
                                       peg$currPos = s5;
                                       s5 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s5;
                                   s5 = peg$FAILED;
                               }
                               if (s5 === peg$FAILED) {
                                   s5 = null;
                               }
                               if (s5 !== peg$FAILED) {
                                   s4 = [s4, s5];
                                   s3 = s4;
                               } else {
                                   peg$currPos = s3;
                                   s3 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                       }
                       if (s3 !== peg$FAILED) {
                           s2 = [s2, s3];
                           s1 = s2;
                       } else {
                           peg$currPos = s1;
                           s1 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s1;
                       s1 = peg$FAILED;
                   }
                   if (s1 !== peg$FAILED) {
                       peg$savedPos = s0;
                       s1 = peg$c80(s1);
                   }
                   s0 = s1;
                   peg$silentFails--;
                   if (s0 === peg$FAILED) {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c73); }
                   }
   
                   return s0;
               }
   
               function peg$parsehtml_raw_string() {
                   var s0, s1, s2, s3;
   
                   s0 = peg$currPos;
                   if (input.charCodeAt(peg$currPos) === 60) {
                       s1 = peg$c81;
                       peg$currPos++;
                   } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c82); }
                   }
                   if (s1 !== peg$FAILED) {
                       s2 = [];
                       s3 = peg$parsehtml_char();
                       if (s3 === peg$FAILED) {
                           s3 = peg$parsehtml_raw_string();
                       }
                       while (s3 !== peg$FAILED) {
                           s2.push(s3);
                           s3 = peg$parsehtml_char();
                           if (s3 === peg$FAILED) {
                               s3 = peg$parsehtml_raw_string();
                           }
                       }
                       if (s2 !== peg$FAILED) {
                           if (input.charCodeAt(peg$currPos) === 62) {
                               s3 = peg$c83;
                               peg$currPos++;
                           } else {
                               s3 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c84); }
                           }
                           if (s3 !== peg$FAILED) {
                               peg$savedPos = s0;
                               s1 = peg$c85(s2);
                               s0 = s1;
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parsehtml_char() {
                   var s0, s1, s2, s3, s4;
   
                   s0 = peg$currPos;
                   s1 = [];
                   s2 = peg$currPos;
                   s3 = peg$currPos;
                   peg$silentFails++;
                   if (input.charCodeAt(peg$currPos) === 62) {
                       s4 = peg$c83;
                       peg$currPos++;
                   } else {
                       s4 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c84); }
                   }
                   if (s4 === peg$FAILED) {
                       if (input.charCodeAt(peg$currPos) === 60) {
                           s4 = peg$c81;
                           peg$currPos++;
                       } else {
                           s4 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c82); }
                       }
                   }
                   peg$silentFails--;
                   if (s4 === peg$FAILED) {
                       s3 = void 0;
                   } else {
                       peg$currPos = s3;
                       s3 = peg$FAILED;
                   }
                   if (s3 !== peg$FAILED) {
                       if (input.length > peg$currPos) {
                           s4 = input.charAt(peg$currPos);
                           peg$currPos++;
                       } else {
                           s4 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c86); }
                       }
                       if (s4 !== peg$FAILED) {
                           peg$savedPos = s2;
                           s3 = peg$c87(s4);
                           s2 = s3;
                       } else {
                           peg$currPos = s2;
                           s2 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s2;
                       s2 = peg$FAILED;
                   }
                   if (s2 !== peg$FAILED) {
                       while (s2 !== peg$FAILED) {
                           s1.push(s2);
                           s2 = peg$currPos;
                           s3 = peg$currPos;
                           peg$silentFails++;
                           if (input.charCodeAt(peg$currPos) === 62) {
                               s4 = peg$c83;
                               peg$currPos++;
                           } else {
                               s4 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c84); }
                           }
                           if (s4 === peg$FAILED) {
                               if (input.charCodeAt(peg$currPos) === 60) {
                                   s4 = peg$c81;
                                   peg$currPos++;
                               } else {
                                   s4 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c82); }
                               }
                           }
                           peg$silentFails--;
                           if (s4 === peg$FAILED) {
                               s3 = void 0;
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                           if (s3 !== peg$FAILED) {
                               if (input.length > peg$currPos) {
                                   s4 = input.charAt(peg$currPos);
                                   peg$currPos++;
                               } else {
                                   s4 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c86); }
                               }
                               if (s4 !== peg$FAILED) {
                                   peg$savedPos = s2;
                                   s3 = peg$c87(s4);
                                   s2 = s3;
                               } else {
                                   peg$currPos = s2;
                                   s2 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s2;
                               s2 = peg$FAILED;
                           }
                       }
                   } else {
                       s1 = peg$FAILED;
                   }
                   if (s1 !== peg$FAILED) {
                       peg$savedPos = s0;
                       s1 = peg$c88(s1);
                   }
                   s0 = s1;
   
                   return s0;
               }
   
               function peg$parseQUOTED_STRING() {
                   var s0, s1, s2, s3, s4, s5, s6, s7;
   
                   s0 = peg$currPos;
                   if (input.charCodeAt(peg$currPos) === 34) {
                       s1 = peg$c89;
                       peg$currPos++;
                   } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c90); }
                   }
                   if (s1 !== peg$FAILED) {
                       if (input.charCodeAt(peg$currPos) === 34) {
                           s2 = peg$c89;
                           peg$currPos++;
                       } else {
                           s2 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c90); }
                       }
                       if (s2 !== peg$FAILED) {
                           peg$savedPos = s0;
                           s1 = peg$c91();
                           s0 = s1;
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
                   if (s0 === peg$FAILED) {
                       s0 = peg$currPos;
                       s1 = peg$currPos;
                       if (input.charCodeAt(peg$currPos) === 34) {
                           s2 = peg$c89;
                           peg$currPos++;
                       } else {
                           s2 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c90); }
                       }
                       if (s2 !== peg$FAILED) {
                           s3 = peg$parsechars();
                           if (s3 !== peg$FAILED) {
                               s4 = peg$currPos;
                               if (input.charCodeAt(peg$currPos) === 92) {
                                   s5 = peg$c92;
                                   peg$currPos++;
                               } else {
                                   s5 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c93); }
                               }
                               if (s5 !== peg$FAILED) {
                                   s6 = peg$parseNEWLINE();
                                   if (s6 !== peg$FAILED) {
                                       s7 = peg$parsechars();
                                       if (s7 !== peg$FAILED) {
                                           s5 = [s5, s6, s7];
                                           s4 = s5;
                                       } else {
                                           peg$currPos = s4;
                                           s4 = peg$FAILED;
                                       }
                                   } else {
                                       peg$currPos = s4;
                                       s4 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s4;
                                   s4 = peg$FAILED;
                               }
                               if (s4 === peg$FAILED) {
                                   s4 = null;
                               }
                               if (s4 !== peg$FAILED) {
                                   if (input.charCodeAt(peg$currPos) === 34) {
                                       s5 = peg$c89;
                                       peg$currPos++;
                                   } else {
                                       s5 = peg$FAILED;
                                       if (peg$silentFails === 0) { peg$fail(peg$c90); }
                                   }
                                   if (s5 !== peg$FAILED) {
                                       s2 = [s2, s3, s4, s5];
                                       s1 = s2;
                                   } else {
                                       peg$currPos = s1;
                                       s1 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s1;
                                   s1 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s1;
                               s1 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s1;
                           s1 = peg$FAILED;
                       }
                       if (s1 !== peg$FAILED) {
                           s2 = peg$currPos;
                           s3 = peg$parse_();
                           if (s3 !== peg$FAILED) {
                               if (input.charCodeAt(peg$currPos) === 43) {
                                   s4 = peg$c94;
                                   peg$currPos++;
                               } else {
                                   s4 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c95); }
                               }
                               if (s4 !== peg$FAILED) {
                                   s5 = peg$parse_();
                                   if (s5 !== peg$FAILED) {
                                       s6 = peg$parseQUOTED_STRING();
                                       if (s6 !== peg$FAILED) {
                                           peg$savedPos = s2;
                                           s3 = peg$c96(s1, s6);
                                           s2 = s3;
                                       } else {
                                           peg$currPos = s2;
                                           s2 = peg$FAILED;
                                       }
                                   } else {
                                       peg$currPos = s2;
                                       s2 = peg$FAILED;
                                   }
                               } else {
                                   peg$currPos = s2;
                                   s2 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s2;
                               s2 = peg$FAILED;
                           }
                           if (s2 === peg$FAILED) {
                               s2 = null;
                           }
                           if (s2 !== peg$FAILED) {
                               peg$savedPos = s0;
                               s1 = peg$c97(s1, s2);
                               s0 = s1;
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   }
   
                   return s0;
               }
   
               function peg$parsechars() {
                   var s0, s1, s2;
   
                   s0 = peg$currPos;
                   s1 = [];
                   s2 = peg$parsechar();
                   if (s2 !== peg$FAILED) {
                       while (s2 !== peg$FAILED) {
                           s1.push(s2);
                           s2 = peg$parsechar();
                       }
                   } else {
                       s1 = peg$FAILED;
                   }
                   if (s1 !== peg$FAILED) {
                       peg$savedPos = s0;
                       s1 = peg$c98(s1);
                   }
                   s0 = s1;
   
                   return s0;
               }
   
               function peg$parsechar() {
                   var s0, s1, s2;
   
                   if (peg$c99.test(input.charAt(peg$currPos))) {
                       s0 = input.charAt(peg$currPos);
                       peg$currPos++;
                   } else {
                       s0 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c100); }
                   }
                   if (s0 === peg$FAILED) {
                       s0 = peg$currPos;
                       if (input.substr(peg$currPos, 2) === peg$c101) {
                           s1 = peg$c101;
                           peg$currPos += 2;
                       } else {
                           s1 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c102); }
                       }
                       if (s1 !== peg$FAILED) {
                           peg$savedPos = s0;
                           s1 = peg$c103();
                       }
                       s0 = s1;
                       if (s0 === peg$FAILED) {
                           s0 = peg$currPos;
                           if (input.charCodeAt(peg$currPos) === 92) {
                               s1 = peg$c92;
                               peg$currPos++;
                           } else {
                               s1 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c93); }
                           }
                           if (s1 !== peg$FAILED) {
                               s2 = peg$parseNEWLINE();
                               if (s2 !== peg$FAILED) {
                                   peg$savedPos = s0;
                                   s1 = peg$c104();
                                   s0 = s1;
                               } else {
                                   peg$currPos = s0;
                                   s0 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                           if (s0 === peg$FAILED) {
                               s0 = peg$currPos;
                               if (input.charCodeAt(peg$currPos) === 92) {
                                   s1 = peg$c92;
                                   peg$currPos++;
                               } else {
                                   s1 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c93); }
                               }
                               if (s1 !== peg$FAILED) {
                                   peg$savedPos = s0;
                                   s1 = peg$c105();
                               }
                               s0 = s1;
                           }
                       }
                   }
   
                   return s0;
               }
   
               function peg$parseCOMMENT() {
                   var s0, s1;
   
                   peg$silentFails++;
                   s0 = peg$parseBLOCK_COMMENT();
                   if (s0 === peg$FAILED) {
                       s0 = peg$parseC_COMMENT();
                       if (s0 === peg$FAILED) {
                           s0 = peg$parseMACRO_COMMENT();
                       }
                   }
                   peg$silentFails--;
                   if (s0 === peg$FAILED) {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c106); }
                   }
   
                   return s0;
               }
   
               function peg$parseBLOCK_COMMENT() {
                   var s0, s1, s2, s3, s4, s5;
   
                   peg$silentFails++;
                   s0 = peg$currPos;
                   if (input.substr(peg$currPos, 2) === peg$c108) {
                       s1 = peg$c108;
                       peg$currPos += 2;
                   } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c109); }
                   }
                   if (s1 !== peg$FAILED) {
                       s2 = [];
                       s3 = peg$currPos;
                       s4 = peg$currPos;
                       peg$silentFails++;
                       if (input.substr(peg$currPos, 2) === peg$c110) {
                           s5 = peg$c110;
                           peg$currPos += 2;
                       } else {
                           s5 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c111); }
                       }
                       peg$silentFails--;
                       if (s5 === peg$FAILED) {
                           s4 = void 0;
                       } else {
                           peg$currPos = s4;
                           s4 = peg$FAILED;
                       }
                       if (s4 !== peg$FAILED) {
                           if (input.length > peg$currPos) {
                               s5 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s5 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c86); }
                           }
                           if (s5 !== peg$FAILED) {
                               peg$savedPos = s3;
                               s4 = peg$c112(s5);
                               s3 = s4;
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s3;
                           s3 = peg$FAILED;
                       }
                       while (s3 !== peg$FAILED) {
                           s2.push(s3);
                           s3 = peg$currPos;
                           s4 = peg$currPos;
                           peg$silentFails++;
                           if (input.substr(peg$currPos, 2) === peg$c110) {
                               s5 = peg$c110;
                               peg$currPos += 2;
                           } else {
                               s5 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c111); }
                           }
                           peg$silentFails--;
                           if (s5 === peg$FAILED) {
                               s4 = void 0;
                           } else {
                               peg$currPos = s4;
                               s4 = peg$FAILED;
                           }
                           if (s4 !== peg$FAILED) {
                               if (input.length > peg$currPos) {
                                   s5 = input.charAt(peg$currPos);
                                   peg$currPos++;
                               } else {
                                   s5 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c86); }
                               }
                               if (s5 !== peg$FAILED) {
                                   peg$savedPos = s3;
                                   s4 = peg$c112(s5);
                                   s3 = s4;
                               } else {
                                   peg$currPos = s3;
                                   s3 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                       }
                       if (s2 !== peg$FAILED) {
                           if (input.substr(peg$currPos, 2) === peg$c110) {
                               s3 = peg$c110;
                               peg$currPos += 2;
                           } else {
                               s3 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c111); }
                           }
                           if (s3 !== peg$FAILED) {
                               peg$savedPos = s0;
                               s1 = peg$c113(s2);
                               s0 = s1;
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
                   peg$silentFails--;
                   if (s0 === peg$FAILED) {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c107); }
                   }
   
                   return s0;
               }
   
               function peg$parseC_COMMENT() {
                   var s0, s1, s2, s3, s4, s5;
   
                   peg$silentFails++;
                   s0 = peg$currPos;
                   if (input.substr(peg$currPos, 2) === peg$c115) {
                       s1 = peg$c115;
                       peg$currPos += 2;
                   } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c116); }
                   }
                   if (s1 !== peg$FAILED) {
                       s2 = [];
                       s3 = peg$currPos;
                       s4 = peg$currPos;
                       peg$silentFails++;
                       if (peg$c117.test(input.charAt(peg$currPos))) {
                           s5 = input.charAt(peg$currPos);
                           peg$currPos++;
                       } else {
                           s5 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c118); }
                       }
                       peg$silentFails--;
                       if (s5 === peg$FAILED) {
                           s4 = void 0;
                       } else {
                           peg$currPos = s4;
                           s4 = peg$FAILED;
                       }
                       if (s4 !== peg$FAILED) {
                           if (input.length > peg$currPos) {
                               s5 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s5 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c86); }
                           }
                           if (s5 !== peg$FAILED) {
                               peg$savedPos = s3;
                               s4 = peg$c15(s5);
                               s3 = s4;
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s3;
                           s3 = peg$FAILED;
                       }
                       while (s3 !== peg$FAILED) {
                           s2.push(s3);
                           s3 = peg$currPos;
                           s4 = peg$currPos;
                           peg$silentFails++;
                           if (peg$c117.test(input.charAt(peg$currPos))) {
                               s5 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s5 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c118); }
                           }
                           peg$silentFails--;
                           if (s5 === peg$FAILED) {
                               s4 = void 0;
                           } else {
                               peg$currPos = s4;
                               s4 = peg$FAILED;
                           }
                           if (s4 !== peg$FAILED) {
                               if (input.length > peg$currPos) {
                                   s5 = input.charAt(peg$currPos);
                                   peg$currPos++;
                               } else {
                                   s5 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c86); }
                               }
                               if (s5 !== peg$FAILED) {
                                   peg$savedPos = s3;
                                   s4 = peg$c15(s5);
                                   s3 = s4;
                               } else {
                                   peg$currPos = s3;
                                   s3 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                       }
                       if (s2 !== peg$FAILED) {
                           if (peg$c117.test(input.charAt(peg$currPos))) {
                               s3 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s3 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c118); }
                           }
                           if (s3 === peg$FAILED) {
                               s3 = null;
                           }
                           if (s3 !== peg$FAILED) {
                               peg$savedPos = s0;
                               s1 = peg$c119(s2);
                               s0 = s1;
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
                   peg$silentFails--;
                   if (s0 === peg$FAILED) {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c114); }
                   }
   
                   return s0;
               }
   
               function peg$parseMACRO_COMMENT() {
                   var s0, s1, s2, s3, s4, s5;
   
                   peg$silentFails++;
                   s0 = peg$currPos;
                   if (input.charCodeAt(peg$currPos) === 35) {
                       s1 = peg$c121;
                       peg$currPos++;
                   } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c122); }
                   }
                   if (s1 !== peg$FAILED) {
                       s2 = [];
                       s3 = peg$currPos;
                       s4 = peg$currPos;
                       peg$silentFails++;
                       if (peg$c117.test(input.charAt(peg$currPos))) {
                           s5 = input.charAt(peg$currPos);
                           peg$currPos++;
                       } else {
                           s5 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c118); }
                       }
                       peg$silentFails--;
                       if (s5 === peg$FAILED) {
                           s4 = void 0;
                       } else {
                           peg$currPos = s4;
                           s4 = peg$FAILED;
                       }
                       if (s4 !== peg$FAILED) {
                           if (input.length > peg$currPos) {
                               s5 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s5 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c86); }
                           }
                           if (s5 !== peg$FAILED) {
                               peg$savedPos = s3;
                               s4 = peg$c15(s5);
                               s3 = s4;
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s3;
                           s3 = peg$FAILED;
                       }
                       while (s3 !== peg$FAILED) {
                           s2.push(s3);
                           s3 = peg$currPos;
                           s4 = peg$currPos;
                           peg$silentFails++;
                           if (peg$c117.test(input.charAt(peg$currPos))) {
                               s5 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s5 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c118); }
                           }
                           peg$silentFails--;
                           if (s5 === peg$FAILED) {
                               s4 = void 0;
                           } else {
                               peg$currPos = s4;
                               s4 = peg$FAILED;
                           }
                           if (s4 !== peg$FAILED) {
                               if (input.length > peg$currPos) {
                                   s5 = input.charAt(peg$currPos);
                                   peg$currPos++;
                               } else {
                                   s5 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c86); }
                               }
                               if (s5 !== peg$FAILED) {
                                   peg$savedPos = s3;
                                   s4 = peg$c15(s5);
                                   s3 = s4;
                               } else {
                                   peg$currPos = s3;
                                   s3 = peg$FAILED;
                               }
                           } else {
                               peg$currPos = s3;
                               s3 = peg$FAILED;
                           }
                       }
                       if (s2 !== peg$FAILED) {
                           if (peg$c117.test(input.charAt(peg$currPos))) {
                               s3 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s3 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c118); }
                           }
                           if (s3 === peg$FAILED) {
                               s3 = null;
                           }
                           if (s3 !== peg$FAILED) {
                               peg$savedPos = s0;
                               s1 = peg$c119(s2);
                               s0 = s1;
                           } else {
                               peg$currPos = s0;
                               s0 = peg$FAILED;
                           }
                       } else {
                           peg$currPos = s0;
                           s0 = peg$FAILED;
                       }
                   } else {
                       peg$currPos = s0;
                       s0 = peg$FAILED;
                   }
                   peg$silentFails--;
                   if (s0 === peg$FAILED) {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c120); }
                   }
   
                   return s0;
               }
   
               function peg$parse_() {
                   var s0, s1;
   
                   peg$silentFails++;
                   s0 = [];
                   s1 = peg$parseWHITESPACE();
                   if (s1 === peg$FAILED) {
                       s1 = peg$parseCOMMENT();
                   }
                   while (s1 !== peg$FAILED) {
                       s0.push(s1);
                       s1 = peg$parseWHITESPACE();
                       if (s1 === peg$FAILED) {
                           s1 = peg$parseCOMMENT();
                       }
                   }
                   peg$silentFails--;
                   if (s0 === peg$FAILED) {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c123); }
                   }
   
                   return s0;
               }
   
               function peg$parseNEWLINE() {
                   var s0, s1;
   
                   s0 = [];
                   if (peg$c124.test(input.charAt(peg$currPos))) {
                       s1 = input.charAt(peg$currPos);
                       peg$currPos++;
                   } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c125); }
                   }
                   if (s1 !== peg$FAILED) {
                       while (s1 !== peg$FAILED) {
                           s0.push(s1);
                           if (peg$c124.test(input.charAt(peg$currPos))) {
                               s1 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s1 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c125); }
                           }
                       }
                   } else {
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               function peg$parseWHITESPACE() {
                   var s0, s1;
   
                   s0 = [];
                   if (peg$c126.test(input.charAt(peg$currPos))) {
                       s1 = input.charAt(peg$currPos);
                       peg$currPos++;
                   } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c127); }
                   }
                   if (s1 === peg$FAILED) {
                       s1 = peg$parseNEWLINE();
                   }
                   if (s1 !== peg$FAILED) {
                       while (s1 !== peg$FAILED) {
                           s0.push(s1);
                           if (peg$c126.test(input.charAt(peg$currPos))) {
                               s1 = input.charAt(peg$currPos);
                               peg$currPos++;
                           } else {
                               s1 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c127); }
                           }
                           if (s1 === peg$FAILED) {
                               s1 = peg$parseNEWLINE();
                           }
                       }
                   } else {
                       s0 = peg$FAILED;
                   }
   
                   return s0;
               }
   
               peg$result = peg$startRuleFunction();
   
               if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                   return peg$result;
               } else {
                   if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                       peg$fail(peg$endExpectation());
                   }
   
                   throw peg$buildStructuredError(
                       peg$maxFailExpected,
                       peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                       peg$maxFailPos < input.length
                           ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                           : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
                   );
               }
           }
   
           return {
               SyntaxError: peg$SyntaxError,
               parse:       peg$parse
           };
       })();

if (typeof module !== 'undefined' && typeof module.exports === 'object') {
    module.exports.IrParser = IrParser;
    module.exports.DotParser = DotParser;
}
